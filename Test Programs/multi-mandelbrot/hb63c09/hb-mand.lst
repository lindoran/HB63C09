                      (      hb-mand.asm):00001         ;; asembly battle royal for the HB63C09M
                      (      hb-mand.asm):00002         ;; This simply resets the comptuer at the end of exicution, and should 
                      (      hb-mand.asm):00003         ;; technically work on any homebrew computer with a serial MLM as long as 
                      (      hb-mand.asm):00004         ;; there is a supported UART -- You should check the addresses in your
                      (      hb-mand.asm):00005         ;; source file for the UART to make shure they align with your architecture 
                      (      hb-mand.asm):00006         
                      (      hb-mand.asm):00007         ;; Load this into MON09 or ASSIST09 with 'L' command by pasteing the .S19 
                      (      hb-mand.asm):00008         ;; into the terminal.
                      (      hb-mand.asm):00009         
                      (      hb-mand.asm):00010         ;; lets enable 6309 since the CPU is required for the architecture of the computer
     0001             (      hb-mand.asm):00011         h6309   EQU     1
                      (      hb-mand.asm):00012         
                      (      hb-mand.asm):00013                 ORG     $1000           ; Jump to this location with G 1000 in MON09 or ASSIST9
1000                  (      hb-mand.asm):00014         CONFIG:
                      (      hb-mand.asm):00015                 ifdef h6309
1000 113D01           (      hb-mand.asm):00016                 LDMD #1                 ; h6309 native mode
                      (      hb-mand.asm):00017                 endif
                      (      hb-mand.asm):00018                
                      (      hb-mand.asm):00019         ;; main loop
1003 327B             (      hb-mand.asm):00020                 LEAS    -5,S            ; Allocate 5 bytes on the stack
1005 6FE4             (      hb-mand.asm):00021                 CLR     ,S              ; Clear X (temp low byte)
1007 6F61             (      hb-mand.asm):00022                 CLR     1,S             ; Clear X (temp high byte)
1009 6F62             (      hb-mand.asm):00023                 CLR     2,S             ; Clear Y (temp low byte)
100B 6F63             (      hb-mand.asm):00024                 CLR     3,S             ; Clear Y (temp high byte)
                      (      hb-mand.asm):00025                                         ; Dispite what mand_get says in mandelbrot.asm itterations is in 6,S
                      (      hb-mand.asm):00026         
                      (      hb-mand.asm):00027         
                      (      hb-mand.asm):00028           
100D                  (      hb-mand.asm):00029         loop:
100D 17006E           (      hb-mand.asm):00030                 LBSR    mand_get        ; Compute Mandelbrot for current position
1010 170033           (      hb-mand.asm):00031                 LBSR    PLOT            ; Map result to a gradient character and send it to UART
                      (      hb-mand.asm):00032         
1013 ECE4             (      hb-mand.asm):00033                 LDD     ,S              ; Load X register
1015 C30001           (      hb-mand.asm):00034                 ADDD    #1              ; Increment X
1018 EDE4             (      hb-mand.asm):00035                 STD     ,S              ; Save X back
                      (      hb-mand.asm):00036         
101A 10830020         (      hb-mand.asm):00037                 CMPD    #MAND_WIDTH     ; Check if X reached the width
101E 26ED             (      hb-mand.asm):00038                 BNE     loop            ; If not, continue
                      (      hb-mand.asm):00039         
1020 17001A           (      hb-mand.asm):00040                 LBSR    CRLF            ; Send CRLF to start a new line
1023 6FE4             (      hb-mand.asm):00041                 CLR     ,S              ; Reset X to 0
1025 6F61             (      hb-mand.asm):00042                 CLR     1,S
                      (      hb-mand.asm):00043         
1027 EC62             (      hb-mand.asm):00044                 LDD     2,S             ; Load Y register
1029 C30001           (      hb-mand.asm):00045                 ADDD    #1              ; Increment Y
102C ED62             (      hb-mand.asm):00046                 STD     2,S             ; Save Y back
                      (      hb-mand.asm):00047         
102E 10830016         (      hb-mand.asm):00048                 CMPD    #MAND_HEIGHT    ; Check if Y reached the height
1032 26D9             (      hb-mand.asm):00049                 BNE     loop            ; If not, continue
1034 3265             (      hb-mand.asm):00050                 LEAS    5,S             ; Deallocate stack
                      (      hb-mand.asm):00051                 
1036                  (      hb-mand.asm):00052         DONE:       
                      (      hb-mand.asm):00053                 
                      (      hb-mand.asm):00054         
                      (      hb-mand.asm):00055                 ifdef h6309
                      (      hb-mand.asm):00056                 
1036 113D00           (      hb-mand.asm):00057                 LDMD    #0              ; h6809 emulation mode
                      (      hb-mand.asm):00058                 
                      (      hb-mand.asm):00059                 endif
                      (      hb-mand.asm):00060         
1039 6E9FFFFE         (      hb-mand.asm):00061                 JMP     [$FFFE]         ; Jump to reset vector
                      (      hb-mand.asm):00062         
                      (      hb-mand.asm):00063         
                      (      hb-mand.asm):00064         
                      (      hb-mand.asm):00065         ;; includes uart and multi-mandelbrot for 24 bit fp math for optimal results.
                      (      hb-mand.asm):00066         
                      (      hb-mand.asm):00067         
                      (      hb-mand.asm):00068                 INCLUDE "68b50.asm"     ;68b50 routines
                      (        68b50.asm):00001         ; UART and control the routines are set up for the 6850
                      (        68b50.asm):00002         ; or 'like' such as the 6850 Wrapper in the HB63C09M.
                      (        68b50.asm):00003         
     A000             (        68b50.asm):00004         USTAT   EQU $A000           ; UART Status Register
     A001             (        68b50.asm):00005         UDATA   EQU $A001           ; UART Data Register
                      (        68b50.asm):00006         
                      (        68b50.asm):00007         ; Send CRLF to terminal
103D 860A             (        68b50.asm):00008         CRLF:   LDA #$0A               ; Line feed
103F 8D0E             (        68b50.asm):00009                 BSR CHOUT
1041 860D             (        68b50.asm):00010                 LDA #$0D               ; Carriage return
1043 8D0A             (        68b50.asm):00011                 BSR CHOUT
1045 39               (        68b50.asm):00012                 RTS
                      (        68b50.asm):00013         
                      (        68b50.asm):00014         ; Map iterations to printable ASCII characters
1046 A666             (        68b50.asm):00015         PLOT:   LDA 6,S                ; Load iteration count
1048 4C               (        68b50.asm):00016                 INCA                   ; Offset for gradient lookup
1049 108E105E         (        68b50.asm):00017                 LDY #PSUSHD            ; Address of gradient table
104D A6A6             (        68b50.asm):00018                 LDA A,Y                ; Load corresponding ASCII shade
                      (        68b50.asm):00019         ; Fall through to `CHOUT`
                      (        68b50.asm):00020         
104F 3402             (        68b50.asm):00021         CHOUT:  PSHS A                 ; Save character in A
1051 B6A000           (        68b50.asm):00022         WRWAIT: LDA USTAT              ; Check UART status
1054 8502             (        68b50.asm):00023                 BITA #2                ; Ready to send?
1056 27F9             (        68b50.asm):00024                 BEQ WRWAIT             ; Wait until ready
1058 3502             (        68b50.asm):00025                 PULS A                 ; Restore character
105A B7A001           (        68b50.asm):00026                 STA UDATA              ; Send character
105D 39               (        68b50.asm):00027                 RTS
                      (        68b50.asm):00028         
                      (        68b50.asm):00029         
                      (        68b50.asm):00030         
                      (        68b50.asm):00031         ; 16 levels of pseudo-shades in 7-Bit ASCII (darkest to lightest)
105E 23402526582A2B3D (        68b50.asm):00032         PSUSHD: FCB $23,$40,$25,$26,$58,$2A,$2B,$3D ; Darker characters
1066 2D7E3A2E2C602020 (        68b50.asm):00033                 FCB $2D,$7E,$3A,$2E,$2C,$60,$20,$20 ; Lighter characters
                      (      hb-mand.asm):00069                 
                      (      hb-mand.asm):00070                 INCLUDE "../6x09/mandelbrot24.asm" ; Include Mandelbrot and fixed-point routines
                      (/mandelbrot24.asm):00001                 include "fixedpt24.asm"
                      (    fixedpt24.asm):00001         ;;; Supplementary routines to allow for 16.8 fixed point intermediates
                      (    fixedpt24.asm):00002         ;;; in some calculations and for some possibly cheating optimization
                      (    fixedpt24.asm):00003         ;;; of mandlebrot calculation.
                      (    fixedpt24.asm):00004                 ifndef FIXEDPT24_INC
     0001             (    fixedpt24.asm):00005         FIXEDPT24_INC equ 1
                      (    fixedpt24.asm):00006         
                      (    fixedpt24.asm):00007                 include "fixedpt.asm"
                      (      fixedpt.asm):00001         ;;; 8.8 fixed point routines for m6809 and h6309
                      (      fixedpt.asm):00002         ;;; d (a:b) is used as the accumulator
                      (      fixedpt.asm):00003         ;;; x is a temporary register
                      (      fixedpt.asm):00004         ;;; all other registers are preserved
                      (      fixedpt.asm):00005         ;;; 16 bytes of scratch space on direct page
                      (      fixedpt.asm):00006                 ifndef FIXEDPT_INC
     0001             (      fixedpt.asm):00007         FIXEDPT_INC equ 1
                      (      fixedpt.asm):00008         
     00F0             (      fixedpt.asm):00009         FP_T0:  equ $f0
     00F2             (      fixedpt.asm):00010         FP_T1:  equ $f2
     00F4             (      fixedpt.asm):00011         FP_T2:  equ $f4
     00F6             (      fixedpt.asm):00012         FP_T3:  equ $f6
     00F8             (      fixedpt.asm):00013         FP_T4:  equ $f8
     00FA             (      fixedpt.asm):00014         FP_T5:  equ $fa
     00FC             (      fixedpt.asm):00015         FP_T6:  equ $fc
     00FE             (      fixedpt.asm):00016         FP_T7:  equ $fe
     00F0             (      fixedpt.asm):00017         FP_A:   equ FP_T0               ;  a
     00F2             (      fixedpt.asm):00018         FP_B:   equ FP_T1               ;  b
     00F4             (      fixedpt.asm):00019         FP_AA:  equ FP_T2               ; |a|
     00F6             (      fixedpt.asm):00020         FP_BA:  equ FP_T3               ; |b|
     00F8             (      fixedpt.asm):00021         FP_XT:  equ FP_T4               ; extra (overflow/remainder)
     00FA             (      fixedpt.asm):00022         FP_RE:  equ FP_T5               ; result
                      (      fixedpt.asm):00023         
106E                  (      fixedpt.asm):00024         FP_LD_BYTE macro                ; d=a
                      (      fixedpt.asm):00025                 clrb
                      (      fixedpt.asm):00026                 endm
                      (      fixedpt.asm):00027                 
106E                  (      fixedpt.asm):00028         FP_LD macro                     ; d=(ea) ; fp
                      (      fixedpt.asm):00029                 ldd \*
                      (      fixedpt.asm):00030                 endm
                      (      fixedpt.asm):00031         
106E                  (      fixedpt.asm):00032         FP_LD_INT macro                 ; d=(ea) ; int
                      (      fixedpt.asm):00033                 lda \*
                      (      fixedpt.asm):00034                 clrb
                      (      fixedpt.asm):00035                 endm
                      (      fixedpt.asm):00036         
106E                  (      fixedpt.asm):00037         FP_ST macro                     ; (ea)=d
                      (      fixedpt.asm):00038                 std \*
                      (      fixedpt.asm):00039                 endm
                      (      fixedpt.asm):00040         
106E                  (      fixedpt.asm):00041         FP_FLOOR macro                  ; d=floor(d)
                      (      fixedpt.asm):00042                 clrb
                      (      fixedpt.asm):00043                 endm
                      (      fixedpt.asm):00044         
106E                  (      fixedpt.asm):00045         FP_SUBTRACT macro               ; d=d-(ea)
                      (      fixedpt.asm):00046                 subd \*
                      (      fixedpt.asm):00047                 endm
                      (      fixedpt.asm):00048         
106E                  (      fixedpt.asm):00049         FP_ADD macro                    ; d=d+(ea)
                      (      fixedpt.asm):00050                 addd \*
                      (      fixedpt.asm):00051                 endm
                      (      fixedpt.asm):00052         
106E                  (      fixedpt.asm):00053         FP_COMPARE macro                ; compare d (set flags)
                      (      fixedpt.asm):00054                 cmpd \*
                      (      fixedpt.asm):00055                 endm
                      (      fixedpt.asm):00056         
106E                  (      fixedpt.asm):00057         FP_MUL2 macro                   ; d=2*d
                      (      fixedpt.asm):00058                 aslb
                      (      fixedpt.asm):00059                 rola
                      (      fixedpt.asm):00060                 endm
                      (      fixedpt.asm):00061         
106E                  (      fixedpt.asm):00062         FP_NEG macro                    ; d=-d
                      (      fixedpt.asm):00063                 ifdef h6309
                      (      fixedpt.asm):00064                 negd
                      (      fixedpt.asm):00065                 else ; m6809 - 4/8
                      (      fixedpt.asm):00066                 coma
                      (      fixedpt.asm):00067                 comb
                      (      fixedpt.asm):00068                 addd #1
                      (      fixedpt.asm):00069                 endif h6309
                      (      fixedpt.asm):00070                 endm
                      (      fixedpt.asm):00071         
106E                  (      fixedpt.asm):00072         FP_ABS macro                    ; d=|d|
                      (      fixedpt.asm):00073                 tsta
                      (      fixedpt.asm):00074                 bpl out@
                      (      fixedpt.asm):00075                 FP_NEG
106E                  (      fixedpt.asm):00076         out@:
                      (      fixedpt.asm):00077                 endm
                      (      fixedpt.asm):00078         
106E                  (      fixedpt.asm):00079         FP_ABS1 macro                   ; d=|(ea)|
                      (      fixedpt.asm):00080                 ldd \*
                      (      fixedpt.asm):00081                 bpl out@
                      (      fixedpt.asm):00082                 FP_NEG
106E                  (      fixedpt.asm):00083         out@:
                      (      fixedpt.asm):00084                 endm
                      (      fixedpt.asm):00085                 
                      (      fixedpt.asm):00086         
                      (      fixedpt.asm):00087                 ifdef h6309
106E                  (      fixedpt.asm):00088         FP_MULTIPLY macro               ; d=d*(ea)
                      (      fixedpt.asm):00089                 muld \*
                      (      fixedpt.asm):00090                 tfr b,a
                      (      fixedpt.asm):00091                 tfr e,b
                      (      fixedpt.asm):00092                 endm
                      (      fixedpt.asm):00093                 else ; ! h6309 -> m6809
106E                  (      fixedpt.asm):00094         FP_MULTIPLY macro               ; d=d*(ea)
                      (      fixedpt.asm):00095                 ldx \*
                      (      fixedpt.asm):00096                 lbsr fp_mul
                      (      fixedpt.asm):00097                 endm
                      (      fixedpt.asm):00098         
106E                  (      fixedpt.asm):00099         fp_mul: ; d = d * x ; FP_XT overflow
                      (      fixedpt.asm):00100                 FP_ST FP_A
                      (      fixedpt.asm):00101                 FP_ABS
                      (      fixedpt.asm):00102                 FP_ST FP_AA
                      (      fixedpt.asm):00103                 tfr x,d
                      (      fixedpt.asm):00104                 FP_ST FP_B
                      (      fixedpt.asm):00105                 FP_ABS
                      (      fixedpt.asm):00106                 FP_ST FP_BA
                      (      fixedpt.asm):00107         
                      (      fixedpt.asm):00108                 FP_LD #$0000
                      (      fixedpt.asm):00109                 FP_ST FP_XT
                      (      fixedpt.asm):00110                 FP_ST FP_RE
                      (      fixedpt.asm):00111                 ;; l1*l2
                      (      fixedpt.asm):00112                 lda FP_AA+1
                      (      fixedpt.asm):00113                 ldb FP_BA+1
                      (      fixedpt.asm):00114                 mul
                      (      fixedpt.asm):00115         *       addd #$0080 ; round 
                      (      fixedpt.asm):00116                 sta FP_RE+1
                      (      fixedpt.asm):00117                 ;; h1*l2
                      (      fixedpt.asm):00118                 lda FP_AA
                      (      fixedpt.asm):00119                 ldb FP_BA+1
                      (      fixedpt.asm):00120                 mul
                      (      fixedpt.asm):00121                 addd FP_RE              ; can't overflow
                      (      fixedpt.asm):00122                 std FP_RE
                      (      fixedpt.asm):00123                 ;; l1*h2
                      (      fixedpt.asm):00124                 lda FP_AA+1
                      (      fixedpt.asm):00125                 ldb FP_BA
                      (      fixedpt.asm):00126                 mul
                      (      fixedpt.asm):00127                 addd FP_RE              ; can't overflow
                      (      fixedpt.asm):00128                 std FP_RE
                      (      fixedpt.asm):00129                 ;; h1*h2
                      (      fixedpt.asm):00130                 lda FP_AA
                      (      fixedpt.asm):00131                 ldb FP_BA
                      (      fixedpt.asm):00132                 mul
                      (      fixedpt.asm):00133                 addd FP_RE-1
                      (      fixedpt.asm):00134                 std FP_RE-1
                      (      fixedpt.asm):00135                 ;; adjust sign
                      (      fixedpt.asm):00136                 lda FP_A
                      (      fixedpt.asm):00137                 eora FP_B
                      (      fixedpt.asm):00138                 bpl @retpos
                      (      fixedpt.asm):00139                 FP_LD #$0000
                      (      fixedpt.asm):00140                 FP_SUBTRACT FP_RE
                      (      fixedpt.asm):00141                 rts
106E                  (      fixedpt.asm):00142         @retpos:
                      (      fixedpt.asm):00143                 FP_LD FP_RE
                      (      fixedpt.asm):00144                 rts
                      (      fixedpt.asm):00145                 endif ; h6309
                      (      fixedpt.asm):00146                 
                      (      fixedpt.asm):00147                 ifdef h6309
106E                  (      fixedpt.asm):00148         FP_DIVIDE macro                 ; d=d/(ea) ; remander in FP_RE
                      (      fixedpt.asm):00149                 tfr d,w
                      (      fixedpt.asm):00150                 clra
                      (      fixedpt.asm):00151                 clrb
                      (      fixedpt.asm):00152                 divq \*
                      (      fixedpt.asm):00153                 tfr w,d
                      (      fixedpt.asm):00154                 endm
                      (      fixedpt.asm):00155                 else ; ! h6309 -> m6809
106E                  (      fixedpt.asm):00156         FP_DIVIDE macro                 ; d=d/(ea) ; remander in FP_RE
                      (      fixedpt.asm):00157                 ldx \*
                      (      fixedpt.asm):00158                 lbsr fp_div
                      (      fixedpt.asm):00159                 endm
                      (      fixedpt.asm):00160                 
106E                  (      fixedpt.asm):00161         fp_div: ; d=d/x ; remainder in FP_XT
                      (      fixedpt.asm):00162         *       FP_ST FP_A              ; make num unsigned
                      (      fixedpt.asm):00163         *       FP_ABS
                      (      fixedpt.asm):00164                 FP_ST FP_AA
                      (      fixedpt.asm):00165                 tfr x,d
                      (      fixedpt.asm):00166         *       FP_ST FP_B              ; make den unsigned
                      (      fixedpt.asm):00167         *       FP_ABS
                      (      fixedpt.asm):00168         *       tfr a,b                 ; shift right 8-bits
                      (      fixedpt.asm):00169         *       clra
                      (      fixedpt.asm):00170                 FP_ST FP_BA
                      (      fixedpt.asm):00171         
                      (      fixedpt.asm):00172                 clrb
                      (      fixedpt.asm):00173                 std FP_XT       
                      (      fixedpt.asm):00174                 ldx #16     ;There are 16 bits in C
106E                  (      fixedpt.asm):00175         @loop:
                      (      fixedpt.asm):00176                 FP_LD FP_XT     
                      (      fixedpt.asm):00177                 asl FP_AA+1    ;Shift hi bit of C into REM
                      (      fixedpt.asm):00178                 rol FP_AA  ;(vacating the lo bit, which will be used for the quotient)
                      (      fixedpt.asm):00179                 rolb
                      (      fixedpt.asm):00180                 rola
                      (      fixedpt.asm):00181                 std FP_XT
                      (      fixedpt.asm):00182                 subd FP_BA ;Trial subtraction
                      (      fixedpt.asm):00183                 blt @skip  ;Did subtraction succeed?
                      (      fixedpt.asm):00184                 std FP_XT
                      (      fixedpt.asm):00185                 inc FP_AA+1    ;and record a 1 in the quotient
106E                  (      fixedpt.asm):00186         @skip:
                      (      fixedpt.asm):00187                 leax -1,x       
                      (      fixedpt.asm):00188                 bne @loop
                      (      fixedpt.asm):00189         *       lda FP_A                ; check sign of result
                      (      fixedpt.asm):00190         *       eora FP_B
                      (      fixedpt.asm):00191         *       blt @retneg
                      (      fixedpt.asm):00192                 FP_LD FP_AA
                      (      fixedpt.asm):00193                 rts
                      (      fixedpt.asm):00194         *@retneg:
                      (      fixedpt.asm):00195         *       FP_LD FP_AA             ; switch sign if negative
                      (      fixedpt.asm):00196         *       FP_NEG
                      (      fixedpt.asm):00197         *       rts
                      (      fixedpt.asm):00198                 endif ; m6809
                      (      fixedpt.asm):00199                 endif ; !FIXEDPT_INC
                      (    fixedpt24.asm):00008                 
                      (    fixedpt24.asm):00009                 ;; multiply unsigned 8.8 fixed point value by 16-bit integer
                      (    fixedpt24.asm):00010                 ;; (unsigned) to give unsigned 16.8 fixed point result.
                      (    fixedpt24.asm):00011                 ;; d: 8.8 fixed point value
                      (    fixedpt24.asm):00012                 ;; (y): 16-bit integer
                      (    fixedpt24.asm):00013                 ;; (u): 16.8 fixed point value
                      (    fixedpt24.asm):00014                 ifdef h6309
106E                  (    fixedpt24.asm):00015         FP24_MULTIPLY   macro   ; (u)=d*(y)
                      (    fixedpt24.asm):00016                 muld ,y
                      (    fixedpt24.asm):00017                 stb ,u
                      (    fixedpt24.asm):00018                 stw 1,u
                      (    fixedpt24.asm):00019                 endm
                      (    fixedpt24.asm):00020                 else ; ! h6309 -> m6809
106E                  (    fixedpt24.asm):00021         FP24_MULTIPLY   macro   ; (u)=d*(y)
                      (    fixedpt24.asm):00022                 lbsr fp24_mult
                      (    fixedpt24.asm):00023                 endm
                      (    fixedpt24.asm):00024                 
106E                  (    fixedpt24.asm):00025         fp24_mult:
                      (    fixedpt24.asm):00026                 std FP_AA
                      (    fixedpt24.asm):00027                 clr ,u
                      (    fixedpt24.asm):00028                 lda 1,y
                      (    fixedpt24.asm):00029                 mul
                      (    fixedpt24.asm):00030                 std 1,u
                      (    fixedpt24.asm):00031                 lda 1,y
                      (    fixedpt24.asm):00032                 ldb FP_AA
                      (    fixedpt24.asm):00033                 mul
                      (    fixedpt24.asm):00034                 addd ,u
                      (    fixedpt24.asm):00035                 std ,u
                      (    fixedpt24.asm):00036                 lda ,y
                      (    fixedpt24.asm):00037                 ldb FP_AA+1
                      (    fixedpt24.asm):00038                 mul
                      (    fixedpt24.asm):00039                 addd ,u
                      (    fixedpt24.asm):00040                 std ,u
                      (    fixedpt24.asm):00041                 lda ,y
                      (    fixedpt24.asm):00042                 ldb FP_AA
                      (    fixedpt24.asm):00043                 mul
                      (    fixedpt24.asm):00044                 addb ,u
                      (    fixedpt24.asm):00045                 stb ,u
                      (    fixedpt24.asm):00046                 rts
                      (    fixedpt24.asm):00047                 endif ; m6809
                      (    fixedpt24.asm):00048         
                      (    fixedpt24.asm):00049                 ;; divide unsigned 16.8 fixed point value by 16-bit integer
                      (    fixedpt24.asm):00050                 ;; (unsigned) to give 8.8 fixed point result.
                      (    fixedpt24.asm):00051                 ;; (u): 16.8 fixed point value
                      (    fixedpt24.asm):00052                 ;; (y): 16-bit integer
                      (    fixedpt24.asm):00053                 ;; d: 8.8 fixed point dividend
                      (    fixedpt24.asm):00054                 ifdef h6309
106E                  (    fixedpt24.asm):00055         FP24_DIVIDE     macro   ; d=(u)/(y)
                      (    fixedpt24.asm):00056                 ldq -1,u
                      (    fixedpt24.asm):00057                 clra
                      (    fixedpt24.asm):00058                 divq ,y
                      (    fixedpt24.asm):00059                 tfr w,d
                      (    fixedpt24.asm):00060                 endm
                      (    fixedpt24.asm):00061                 else ; ! h6309 -> m6809
106E                  (    fixedpt24.asm):00062         FP24_DIVIDE     macro   ; d=(u)/(y)
                      (    fixedpt24.asm):00063                 lbsr fp24_div
                      (    fixedpt24.asm):00064                 endm
                      (    fixedpt24.asm):00065                 
106E                  (    fixedpt24.asm):00066         fp24_div:
                      (    fixedpt24.asm):00067                 clr FP_XT
                      (    fixedpt24.asm):00068                 lda ,u
                      (    fixedpt24.asm):00069                 sta FP_XT+1
                      (    fixedpt24.asm):00070                 ldd 1,u
                      (    fixedpt24.asm):00071                 sta FP_RE
                      (    fixedpt24.asm):00072                 ldx #16
106E                  (    fixedpt24.asm):00073         loop@:  
                      (    fixedpt24.asm):00074                 asl FP_RE+1
                      (    fixedpt24.asm):00075                 rol FP_RE
                      (    fixedpt24.asm):00076                 rol FP_XT+1
                      (    fixedpt24.asm):00077                 rol FP_XT
                      (    fixedpt24.asm):00078                 ldd FP_XT
                      (    fixedpt24.asm):00079                 subd ,y
                      (    fixedpt24.asm):00080                 blt skip@
                      (    fixedpt24.asm):00081                 std FP_XT
                      (    fixedpt24.asm):00082                 inc FP_RE+1
106E                  (    fixedpt24.asm):00083         skip@:
                      (    fixedpt24.asm):00084                 leax -1,x
                      (    fixedpt24.asm):00085                 bne loop@
                      (    fixedpt24.asm):00086                 ldd FP_RE
                      (    fixedpt24.asm):00087                 rts
                      (    fixedpt24.asm):00088                 endif ; m6809
                      (    fixedpt24.asm):00089         
                      (    fixedpt24.asm):00090                 ;; squares signed 8.8 fixed point numbers. Faster than
                      (    fixedpt24.asm):00091                 ;; multiplying in many cases because: 1) only need to perform
                      (    fixedpt24.asm):00092                 ;; absolute value of one number, 2) result will always be
                      (    fixedpt24.asm):00093                 ;; positive, 3) an 8x8 multiply can be removed because
                      (    fixedpt24.asm):00094                 ;; a*b=b*a. For paired product: $FF*$FF=$FE01, $7F*$FF=$7E81,
                      (    fixedpt24.asm):00095                 ;; *2=$FD02, $FD02+$00FE=$FE00, so no carry from 16-bit sum.
                      (    fixedpt24.asm):00096                 ifdef h6309
106E                  (    fixedpt24.asm):00097         FP_SQUARE       macro
                      (    fixedpt24.asm):00098                 std FP_RE
                      (    fixedpt24.asm):00099                 muld FP_RE
                      (    fixedpt24.asm):00100                 tfr b,a
                      (    fixedpt24.asm):00101                 tfr e,b
                      (    fixedpt24.asm):00102                 endm
                      (    fixedpt24.asm):00103                 else ; ! h6309 -> m6809
106E                  (    fixedpt24.asm):00104         FP_SQUARE       macro
                      (    fixedpt24.asm):00105                 lbsr fp_sq
                      (    fixedpt24.asm):00106                 endm
                      (    fixedpt24.asm):00107         
106E                  (    fixedpt24.asm):00108         fp_sq:
                      (    fixedpt24.asm):00109                 tsta
                      (    fixedpt24.asm):00110                 bge skip@
                      (    fixedpt24.asm):00111                 coma
                      (    fixedpt24.asm):00112                 comb
                      (    fixedpt24.asm):00113                 addd #1
106E                  (    fixedpt24.asm):00114         skip@:  
                      (    fixedpt24.asm):00115                 std FP_AA
                      (    fixedpt24.asm):00116                 clr FP_RE
                      (    fixedpt24.asm):00117                 tfr b,a
                      (    fixedpt24.asm):00118                 mul
                      (    fixedpt24.asm):00119                 sta FP_RE+1
                      (    fixedpt24.asm):00120                 ldd FP_AA
                      (    fixedpt24.asm):00121                 mul
                      (    fixedpt24.asm):00122                 aslb
                      (    fixedpt24.asm):00123                 rola
                      (    fixedpt24.asm):00124                 addd FP_RE
                      (    fixedpt24.asm):00125                 std FP_RE
                      (    fixedpt24.asm):00126                 lda FP_AA
                      (    fixedpt24.asm):00127                 tfr a,b
                      (    fixedpt24.asm):00128                 mul
                      (    fixedpt24.asm):00129                 addb FP_RE
                      (    fixedpt24.asm):00130                 tfr b,a
                      (    fixedpt24.asm):00131                 ldb FP_RE+1
                      (    fixedpt24.asm):00132                 rts
                      (    fixedpt24.asm):00133                 endif ; m6809
                      (    fixedpt24.asm):00134                 
                      (    fixedpt24.asm):00135                 endif ; !FIXEDPT24_INC
                      (    fixedpt24.asm):00136         
                      (/mandelbrot24.asm):00002         
                      (/mandelbrot24.asm):00003                 ifndef MAND_XMIN
     FD80             (/mandelbrot24.asm):00004         MAND_XMIN equ $FD80 ; -2.5
                      (/mandelbrot24.asm):00005                 endif
                      (/mandelbrot24.asm):00006                 ifndef MAND_XMAX
     0380             (/mandelbrot24.asm):00007         MAND_XMAX equ $0380 ; 3.5
                      (/mandelbrot24.asm):00008                 endif
                      (/mandelbrot24.asm):00009                 ifndef MAND_YMIN
     FF00             (/mandelbrot24.asm):00010         MAND_YMIN equ $FF00 ; -1
                      (/mandelbrot24.asm):00011                 endif
                      (/mandelbrot24.asm):00012                 ifndef MAND_YMAX
     0200             (/mandelbrot24.asm):00013         MAND_YMAX equ $0200 ; 2
                      (/mandelbrot24.asm):00014                 endif
                      (/mandelbrot24.asm):00015         
                      (/mandelbrot24.asm):00016                 ifndef MAND_WIDTH
     0020             (/mandelbrot24.asm):00017         MAND_WIDTH equ 32
                      (/mandelbrot24.asm):00018                 endif
                      (/mandelbrot24.asm):00019                 ifndef MAND_HEIGHT
     0016             (/mandelbrot24.asm):00020         MAND_HEIGHT equ 22
                      (/mandelbrot24.asm):00021                 endif
                      (/mandelbrot24.asm):00022                 ifndef MAND_MAX_IT
     000F             (/mandelbrot24.asm):00023         MAND_MAX_IT equ 15
                      (/mandelbrot24.asm):00024                 endif
                      (/mandelbrot24.asm):00025         
106E FD80             (/mandelbrot24.asm):00026         xmin:   .word MAND_XMIN
1070 0380             (/mandelbrot24.asm):00027         xmax:   .word MAND_XMAX
1072 FF00             (/mandelbrot24.asm):00028         ymin:   .word MAND_YMIN
1074 0200             (/mandelbrot24.asm):00029         ymax:   .word MAND_YMAX
1076 0020             (/mandelbrot24.asm):00030         width:  .word MAND_WIDTH
1078 0016             (/mandelbrot24.asm):00031         height: .word MAND_HEIGHT
107A 0F               (/mandelbrot24.asm):00032         maxit:  .byte MAND_MAX_IT
107B 000000           (/mandelbrot24.asm):00033         res:    .byte 0,0,0
                      (/mandelbrot24.asm):00034                 
     00E0             (/mandelbrot24.asm):00035         mand_x0:        equ $e0
     00E2             (/mandelbrot24.asm):00036         mand_y0:        equ $e2
     00E4             (/mandelbrot24.asm):00037         mand_x:         equ $e4
     00E6             (/mandelbrot24.asm):00038         mand_y:         equ $e6
     00E8             (/mandelbrot24.asm):00039         mand_x2:        equ $e8
     00EA             (/mandelbrot24.asm):00040         mand_y2:        equ $ea
     00EC             (/mandelbrot24.asm):00041         mand_xtemp:     equ $ec
     00EE             (/mandelbrot24.asm):00042         mand_s:         equ $ee
                      (/mandelbrot24.asm):00043                 
107E                  (/mandelbrot24.asm):00044         mand_get:
                      (/mandelbrot24.asm):00045                 ; Input:
                      (/mandelbrot24.asm):00046                 ;  X,Y - bitmap coordinates
                      (/mandelbrot24.asm):00047                 ; Output: A - # iterations executed (0 to MAND_MAX_IT-1)
107E CE00FC           (/mandelbrot24.asm):00048                 ldu #FP_T6
1081 CC0380           (/mandelbrot24.asm):00049                 ldd #MAND_XMAX
1084 3162             (/mandelbrot24.asm):00050                 leay 2,s
                      (/mandelbrot24.asm):00051                 FP24_MULTIPLY  ; C = A*B
1086 11AFA4           (    FP24_MULTIPLY):00001                 muld ,y
1089 E7C4             (    FP24_MULTIPLY):00002                 stb ,u
108B 10A741           (    FP24_MULTIPLY):00003                 stw 1,u
108E 108E1076         (/mandelbrot24.asm):00052                 ldy #width
                      (/mandelbrot24.asm):00053                 FP24_DIVIDE
1092 10EC5F           (      FP24_DIVIDE):00001                 ldq -1,u
1095 4F               (      FP24_DIVIDE):00002                 clra
1096 11AEA4           (      FP24_DIVIDE):00003                 divq ,y
1099 1F60             (      FP24_DIVIDE):00004                 tfr w,d
                      (/mandelbrot24.asm):00054                 FP_ADD #MAND_XMIN       ; C = A+B (scaled X)
109B C3FD80           (           FP_ADD):00001                 addd #MAND_XMIN
                      (/mandelbrot24.asm):00055                 FP_ST mand_x0    ; x0 = C
109E DDE0             (            FP_ST):00001                 std mand_x0
                      (/mandelbrot24.asm):00056         
10A0 CC0200           (/mandelbrot24.asm):00057                 ldd #MAND_YMAX
10A3 3164             (/mandelbrot24.asm):00058                 leay 4,s
                      (/mandelbrot24.asm):00059                 FP24_MULTIPLY  ; C = A*B
10A5 11AFA4           (    FP24_MULTIPLY):00001                 muld ,y
10A8 E7C4             (    FP24_MULTIPLY):00002                 stb ,u
10AA 10A741           (    FP24_MULTIPLY):00003                 stw 1,u
10AD 108E1078         (/mandelbrot24.asm):00060                 ldy #height
                      (/mandelbrot24.asm):00061                 FP24_DIVIDE
10B1 10EC5F           (      FP24_DIVIDE):00001                 ldq -1,u
10B4 4F               (      FP24_DIVIDE):00002                 clra
10B5 11AEA4           (      FP24_DIVIDE):00003                 divq ,y
10B8 1F60             (      FP24_DIVIDE):00004                 tfr w,d
                      (/mandelbrot24.asm):00062                 FP_ADD #MAND_YMIN       ; C = A+B (scaled Y)
10BA C3FF00           (           FP_ADD):00001                 addd #MAND_YMIN
                      (/mandelbrot24.asm):00063                 FP_ST mand_y0    ; y0 = C
10BD DDE2             (            FP_ST):00001                 std mand_y0
                      (/mandelbrot24.asm):00064         
                      (/mandelbrot24.asm):00065                 endif                   ; divide
10BF CC0000           (/mandelbrot24.asm):00066                 ldd #0
10C2 DDE4             (/mandelbrot24.asm):00067                 std mand_x
10C4 DDE6             (/mandelbrot24.asm):00068                 std mand_y
10C6 108E0000         (/mandelbrot24.asm):00069                 ldy #0
10CA                  (/mandelbrot24.asm):00070         @loop:
                      (/mandelbrot24.asm):00071                 FP_LD mand_x
10CA DCE4             (            FP_LD):00001                 ldd mand_x
                      (/mandelbrot24.asm):00072                 FP_SQUARE
10CC DDFA             (        FP_SQUARE):00001                 std FP_RE
10CE 119FFA           (        FP_SQUARE):00002                 muld FP_RE
10D1 1F98             (        FP_SQUARE):00003                 tfr b,a
10D3 1FE9             (        FP_SQUARE):00004                 tfr e,b
                      (/mandelbrot24.asm):00073                 FP_ST mand_x2
10D5 DDE8             (            FP_ST):00001                 std mand_x2
                      (/mandelbrot24.asm):00074                 FP_LD mand_y
10D7 DCE6             (            FP_LD):00001                 ldd mand_y
                      (/mandelbrot24.asm):00075                 FP_SQUARE
10D9 DDFA             (        FP_SQUARE):00001                 std FP_RE
10DB 119FFA           (        FP_SQUARE):00002                 muld FP_RE
10DE 1F98             (        FP_SQUARE):00003                 tfr b,a
10E0 1FE9             (        FP_SQUARE):00004                 tfr e,b
                      (/mandelbrot24.asm):00076                 FP_ST mand_y2
10E2 DDEA             (            FP_ST):00001                 std mand_y2
                      (/mandelbrot24.asm):00077                 FP_ADD mand_x2
10E4 D3E8             (           FP_ADD):00001                 addd mand_x2
                      (/mandelbrot24.asm):00078                 FP_COMPARE #$0400
10E6 10830400         (       FP_COMPARE):00001                 cmpd #$0400
10EA 2E27             (/mandelbrot24.asm):00079                 bgt @dec_i
                      (/mandelbrot24.asm):00080                 ;; find xtemp
                      (/mandelbrot24.asm):00081                 FP_LD mand_x2
10EC DCE8             (            FP_LD):00001                 ldd mand_x2
                      (/mandelbrot24.asm):00082                 FP_SUBTRACT mand_y2     ; X^2 - Y^2
10EE 93EA             (      FP_SUBTRACT):00001                 subd mand_y2
                      (/mandelbrot24.asm):00083                 FP_ADD mand_x0       ; X^2 - Y^2 + X0
10F0 D3E0             (           FP_ADD):00001                 addd mand_x0
                      (/mandelbrot24.asm):00084                 FP_ST mand_xtemp ; Xtemp
10F2 DDEC             (            FP_ST):00001                 std mand_xtemp
                      (/mandelbrot24.asm):00085                 ;; find y
                      (/mandelbrot24.asm):00086                 FP_LD mand_x     ;  X
10F4 DCE4             (            FP_LD):00001                 ldd mand_x
                      (/mandelbrot24.asm):00087                 FP_MUL2          ; 2*X
10F6 58               (          FP_MUL2):00001                 aslb
10F7 49               (          FP_MUL2):00002                 rola
                      (/mandelbrot24.asm):00088                 fp_multiply mand_y  ; 2*X*Y
10F8 119FE6           (      fp_multiply):00001                 muld mand_y
10FB 1F98             (      fp_multiply):00002                 tfr b,a
10FD 1FE9             (      fp_multiply):00003                 tfr e,b
                      (/mandelbrot24.asm):00089                 FP_ADD mand_y0        ; 2*X*Y + Y0
10FF D3E2             (           FP_ADD):00001                 addd mand_y0
                      (/mandelbrot24.asm):00090                 FP_ST mand_y     ; Y = C (2*X*Y + Y0)
1101 DDE6             (            FP_ST):00001                 std mand_y
                      (/mandelbrot24.asm):00091                 FP_LD mand_xtemp
1103 DCEC             (            FP_LD):00001                 ldd mand_xtemp
                      (/mandelbrot24.asm):00092                 FP_ST mand_x
1105 DDE4             (            FP_ST):00001                 std mand_x
1107 96FE             (/mandelbrot24.asm):00093                 lda FP_T7
1109 3121             (/mandelbrot24.asm):00094                 leay 1,y
110B 97FE             (/mandelbrot24.asm):00095                 sta FP_T7
110D 108C000F         (/mandelbrot24.asm):00096                 cmpy #MAND_MAX_IT
1111 26B7             (/mandelbrot24.asm):00097                 bne @loop
1113                  (/mandelbrot24.asm):00098         @dec_i:
1113 96FE             (/mandelbrot24.asm):00099                 lda FP_T7
1115 1F20             (/mandelbrot24.asm):00100                 tfr y,d
1117 5A               (/mandelbrot24.asm):00101                 decb
1118 E766             (/mandelbrot24.asm):00102                 stb 6,s
111A 39               (/mandelbrot24.asm):00103                 rts
