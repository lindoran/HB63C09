                      (     mon09v37.asm):00001         ;******************************************************************************
                      (     mon09v37.asm):00002         ;*
                      (     mon09v37.asm):00003         ;* MON09: A software debug monitor for the 6809
                      (     mon09v37.asm):00004         ;* TODO: UPDATE FOR HB63C09M - 
                      (     mon09v37.asm):00005         ;*       what follows describes Dave Dunfields portable                 
                      (     mon09v37.asm):00006         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (     mon09v37.asm):00007         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and 48K of RAM
                      (     mon09v37.asm):00008         ;* from $2000-$DFFF. The 8K block from $0000-$1FFF is used for I/O devices
                      (     mon09v37.asm):00009         ;* etc. MON09 uses 160 bytes of memory at the very top of available RAM,
                      (     mon09v37.asm):00010         ;* and the user stack pointer is initialized to point to the beginning of
                      (     mon09v37.asm):00011         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (     mon09v37.asm):00012         ;*
                      (     mon09v37.asm):00013         ;* Console and Host I/O device drivers are included for both 6551 and 6552
                      (     mon09v37.asm):00014         ;* type uarts, which are selected by the set symbol 'utype', and conditionally
                      (     mon09v37.asm):00015         ;* assembled into the code. THIS FILE MUST BE PROCESSED WITH 'MACRO' PRIOR
                      (     mon09v37.asm):00016         ;* TO ASSEMBLING WITH ASM09!!! You can modify the I/O drivers to support a
                      (     mon09v37.asm):00017         ;* different uart device if you wish. The serial I/O drivers are at the very
                      (     mon09v37.asm):00018         ;* end of the monitor source code (Just before the interrupt vectors).
                      (     mon09v37.asm):00019         ;*
                      (     mon09v37.asm):00020         ;* Copyright 1985-2007 Dave Dunfield
                      (     mon09v37.asm):00021         ;* All rights reserved.
                      (     mon09v37.asm):00022         ;*
                      (     mon09v37.asm):00023         ;* Additional modifications for the HB63C09 by Dave Collins, Z80Dad
                      (     mon09v37.asm):00024         ; VERSION 3.7
                      (     mon09v37.asm):00025         ; 2024-0331:    
                      (     mon09v37.asm):00026         ;               DC      REMOVED OPTION ROM BUILDING FROM CODE FOR TINYBASIC, AND FORTH DUE TO 
                      (     mon09v37.asm):00027         ;                       SIZE CONSTRAINTS (IT IS TRIVIAL TO UNCOMMENT THEM)
                      (     mon09v37.asm):00028         ;               DC      CHANGED ADDRESS RANGES TO SUPPORT THE HB63C09
                      (     mon09v37.asm):00029         ;               DC      FIXED 'WRAP AROUND' BUG FROM ORIGINAL DUNFIELD SOURCE WHICH WOULD CAUSE
                      (     mon09v37.asm):00030         ;                       MEMORY SR TO OUTPUT FOREVER IF YOU TRIED TO DISPLAY AN ADDRESS
                      (     mon09v37.asm):00031         ;                       FROM 0xFFF0 TO THE END OF MEMORY.  THIS SLIGHTLY CHANGES THE BEHAVIOR, 
                      (     mon09v37.asm):00032         ;                       AS NOW, THE START ADDRESS WILL ALIGN WITH THE BEGINNING OF A 16 BYTE
                      (     mon09v37.asm):00033         ;                       BLOCK (STARTING AT A NUMBER WITH THE BOTTOM 4 BITS BEING CLEAR.)
                      (     mon09v37.asm):00034         ;                       SINCE THE SR ALWAYS OUTPUTS 16 BYTES THIS ALIGNS THE LAST INCREMENT OF X 
                      (     mon09v37.asm):00035         ;                       WITH ZERO SO THAT WE CAN CATCH THE REGISTER ROLLING OVER AND THE SR 
                      (     mon09v37.asm):00036         ;                       DOES NOT RUN FOREVER.  ITS ARGUABLE THIS IS THE CORRECT FUNCTIONALITY
                      (     mon09v37.asm):00037         ;                       OF THE DISPLAY MEMORY SR AS IT ALWAYS OUTPUTS 16 BYTES REGARDLESS OF 
                      (     mon09v37.asm):00038         ;                       THE LAST ADDRESS IN THE RANGE.
                      (     mon09v37.asm):00039         ;               DC      FOUND AN ISSUE WITH LOAD SR WITH THE SRECORD FORMAT.  THE SUBROTINE NEEDED 
                      (     mon09v37.asm):00040         ;                       TO IGNORE RECORD TYPE 5 - COUNT. SINCE IT IS A 16 BIT ADDRESS BUS. THE OTHER
                      (     mon09v37.asm):00041         ;                       COUNT RECORD TYPES WONT NEED TO BE TESTED FOR. (FIXED)
                      (     mon09v37.asm):00042         ;               DC      FIXED CRLF HANDLER MOSTLY. OCCASIONALLY IT WILL DUMP A SPURIOUS CR ONTO THE 
                      (     mon09v37.asm):00043         ;                       PROMPT THIS DEPENDS ON HOW THE FILE WAS TERMINATED BY THE COMPLIER. RECORD 
                      (     mon09v37.asm):00044         ;                       TYPE 9 IGNORES ANY START ADDRESS THAT IS PLACED THERE, THIS WAS ALWAYS THE 
                      (     mon09v37.asm):00045         ;                       CASE HOWEVER NOW IT READS THE CHARACTERS IN UNTIL THE END OF THE LINE.
                      (     mon09v37.asm):00046         ;               DC      SWITCHED BASIC ROM TO A MODIFIED DIGICOOLTHINGS ROM, SEE BASIC ROM SOURCE
                      (     mon09v37.asm):00047         ;                       FOR DETAILS.
                      (     mon09v37.asm):00048         ;               DC      DISABLED CPU DETECTION UNTIL I CAN FIGURE OUT WHY THIS CRASHES  
                      (     mon09v37.asm):00049         ;                       WHEN SWITCHING TO NATIVE MODE. THIS MUST BE SWITCHED MANUALLY BY 
                      (     mon09v37.asm):00050         ;                       YOUR PROGRAM.
                      (     mon09v37.asm):00051         ;               DC      DISABLED ILL OP
                      (     mon09v37.asm):00052         ; 
                      (     mon09v37.asm):00053         ;* Additional modifications for the 6809SBC by Johnny Quest.
                      (     mon09v37.asm):00054         ;*
                      (     mon09v37.asm):00055         ;******************************************************************************
                      (     mon09v37.asm):00056         ; VERSION 3.6
                      (     mon09v37.asm):00057         ; 2021-0904:    JQ      ON ILLOP/DIV INTERRUPT, CORRECTED BUG WHERE THE HANDLER
                      (     mon09v37.asm):00058         ;                                        JUMPS TO THE BREAKPOINT DISPLAY TO EXIT BUT THE 'BRKREG'
                      (     mon09v37.asm):00059         ;                                        IS LOCATED WITHIN THE BREAKPOINT ROUTINE, WHICH CAUSES
                      (     mon09v37.asm):00060         ;                                        CONFUSIION AND EVENTUAL HANG.
                      (     mon09v37.asm):00061         ;                               JQ      SEEMS THAT DETECTION OF A 6309 AND SETTING IT TO 'NATIVE'
                      (     mon09v37.asm):00062         ;                                        MODE CAUSES PROBLEMS, SO THE MODE REGISTER IS NOT TOUCHED
                      (     mon09v37.asm):00063         ;                                        AND THE HD6309 IS LEFT IN 'EMULATION MODE'.
                      (     mon09v37.asm):00064         ;                               JQ      CORRECTED BUG IN 'CHGREG' WHERE CHANGING REGISTER 'D' WAS NOT
                      (     mon09v37.asm):00065         ;                                        RECOGNIZED AS A 16-BIT REGISTER.
                      (     mon09v37.asm):00066         ;******************************************************************************
                      (     mon09v37.asm):00067         ; VERSION 3.5
                      (     mon09v37.asm):00068         ; 2021-0824:    JQ      ON ILLOP/DIV INTERRUPT, INFORMS WHICH ONE CAUSED IT.
                      (     mon09v37.asm):00069         ;                               JQ      IF 6309 IS DETECTED, THE MODE REGISTER IS SET TO 'NATIVE'.
                      (     mon09v37.asm):00070         ; 2021-0823:    JQ      ADDED SUPPORT FOR DETECTING IF THE HOST MCU IS AN MC6809
                      (     mon09v37.asm):00071         ;                                        OR AN HD6309 AND EMITS THE PROPER SIGN-ON MESSAGE.
                      (     mon09v37.asm):00072         ;                               JQ      ADDED A BUILD DATE AND TIME TO THE SIGN-ON MESSAGE. THE
                      (     mon09v37.asm):00073         ;                                        LINUX "build.sh" SCRIPT CREATES A SEPARATE ASSEMBLY FILE
                      (     mon09v37.asm):00074         ;                                        THAT IS "INCLUDED" IN THE MAIN ASSEMBLY FILE.
                      (     mon09v37.asm):00075         ;                               JQ      BE AWARE THAT THE DISASSEMBLER DOES NOT YET SUPPORT THE
                      (     mon09v37.asm):00076         ;                                        6309 EXTENDED INSTRUCTIONS.
                      (     mon09v37.asm):00077         ; 2021-0419:    JQ      ADDED SUPPORT FOR MERGING THE BINARY IMAGES OF THE
                      (     mon09v37.asm):00078         ;                                        LANGUAGE SUPPORT MODULES DIRECTLY INTO THE MON09
                      (     mon09v37.asm):00079         ;                                        IMAGE FILE. USE CONDITIONAL ASSEMBLY TO ENABLE/DISABLE.
                      (     mon09v37.asm):00080         ;                                        CONSTRUCTED MASTER BUILD SCRIPT TO ASSEMBLE THE VARIOUS
                      (     mon09v37.asm):00081         ;                                        LANGUAGE MODULES INTO A MASTER FIRMWARE IMAGE FILE. THUS,
                      (     mon09v37.asm):00082         ;                                        INCLUDING THEM INTO THE MON09 IMAGE AS DATA STATEMENTS
                      (     mon09v37.asm):00083         ;                                        IS UNNESSESARY.
                      (     mon09v37.asm):00084         ; 2021-0412:    JQ      CHANGED THE MANNER IN WHICH NMI IS HANDLED SO THAT THE
                      (     mon09v37.asm):00085         ;                                        VECTOR CAN BE SET IN MEMORY JUST AS THE FIRQ, IRQ, SWI2
                      (     mon09v37.asm):00086         ;                                        AND SWI3 HANDLERS DO. IF AN NMI VECTOR IS NOT SPECIFIED,
                      (     mon09v37.asm):00087         ;                                        MON09 DEFAULTS TO THE INTERNAL NMI HANDLER, WHICH IS SHOWN
                      (     mon09v37.asm):00088         ;                                        BY THE 'DV' COMMAND. ADDED ADDITIONAL BYTES TO THE DATA
                      (     mon09v37.asm):00089         ;                                        TABLES AND AN NMI HANDLER. USE CONDITIONAL STATEMENT TO
                      (     mon09v37.asm):00090         ;                                        ENABLE IT.
                      (     mon09v37.asm):00091         ;                               JQ      ADDED HD6309 ILLOP INSTRUCTION HANDLER. IF NO VECTOR
                      (     mon09v37.asm):00092         ;                                        SPECIFIED, DEFAULTS TO THE MON09 ILLOP HANDLER. USE
                      (     mon09v37.asm):00093         ;                                        CONDITIONAL STATEMENT TO ENABLE IT.
                      (     mon09v37.asm):00094         ;                               JQ      ADDED 'JUMP' COMMAND TO ACCESS THE FP BASIC, TINY BASIC
                      (     mon09v37.asm):00095         ;                                        AND FORTH MODULES IN ROM. USE CONDITIONAL STATEMENT TO
                      (     mon09v37.asm):00096         ;                                        ENABLE IT.
                      (     mon09v37.asm):00097         ;                               JQ      ADDED JUMP TABLE OF 'HOOKS' THAT PROVIDES A SUMMARY OF
                      (     mon09v37.asm):00098         ;                                        USER ACCESSIBLE MON09 ROM ENTRY ADDRESSES AND IRQ RE-
                      (     mon09v37.asm):00099         ;                                        VECTORING ADDRESSES IN DATA RAM. IT IS INTENDED TO BE
                      (     mon09v37.asm):00100         ;                                        EASILY IDENTIFIED AND EXTRACTED FROM THE SYMBOL TABLE
                      (     mon09v37.asm):00101         ;                                        TO BE 'INCLUDED' IN THE USER'S PROGRAM FILE. SINCE THE
                      (     mon09v37.asm):00102         ;                                        TABLE IS LOCATED AT
                      (     mon09v37.asm):00103         ;                               JQ      IN 'FILMEM' ROUTINE, ADDED CODE TO LIMIT THE USER
                      (     mon09v37.asm):00104         ;                                        SPECIFIED ENDING ADDRESS SO AS NOT TO OVERWRITE MON09
                      (     mon09v37.asm):00105         ;                                        DATA IN RAM. THIS EFFECTIVELY LIMITS THE 'FM' COMMAND
                      (     mon09v37.asm):00106         ;                                        TO RAM ONLY ON THE 6809SBC.
                      (     mon09v37.asm):00107         ;
                      (     mon09v37.asm):00108         ;******************************************************************************
                      (     mon09v37.asm):00109         ; VERSION 3.4
                      (     mon09v37.asm):00110         ; 2021-0404:    JQ      MODIFIED FOR USE WITH 6809SBC PROJECT USING 6850 ACIA.
                      (     mon09v37.asm):00111         ;                                        ASSEMBLES WITH LWASM V4.18, WHICH SUPPORTS MACROS AND
                      (     mon09v37.asm):00112         ;                                        CONDITIONAL ASSEMBLY STATEMENTS.
                      (     mon09v37.asm):00113         ;
                      (     mon09v37.asm):00114         ;******************************************************************************
                      (     mon09v37.asm):00115         ;MODS BY JQ
     0025             (     mon09v37.asm):00116         VERSION         EQU     37              VERSION TIMES 10
     0000             (     mon09v37.asm):00117         JQ_DETMCU       EQU     0               SET TO '1' TO ENABLE DETECTION OF MCU TYPE
     0000             (     mon09v37.asm):00118         JQ_NMIRAM       EQU     0               SET TO '1' TO ENABLE NMI HANDLER IN RAM
     0000             (     mon09v37.asm):00119         JQ_ILLOP        EQU     0               SET TO '1' TO ENABLE 6309 ILLOP HANDLER
     0001             (     mon09v37.asm):00120         JQ_JMPMOD       EQU     1               SET TO '1' TO ENABLE JUMP TO MODULES
     0000             (     mon09v37.asm):00121         JQ_EMBEDBIN     EQU     0               SET TO '1' TO EMBED MODULE BINARY IMAGES
     0000             (     mon09v37.asm):00122         JQ_EFORTH       EQU     0               SET TO '1' TO USE EFORTH, ELSE Z79FORTH
                      (     mon09v37.asm):00123         ;
                      (     mon09v37.asm):00124         ; TO-DO
     0000             (     mon09v37.asm):00125         JQ_EEPROM       EQU     0               SET TO '1' TO ENABLE EEPROM WRITING
                      (     mon09v37.asm):00126         
                      (     mon09v37.asm):00127         ;
                      (     mon09v37.asm):00128         ;TNYBASSTRT     EQU     $8C00                   START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00129         ;TNYBASEND      EQU     TNYBASSTRT+$1000        END ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00130         
                      (     mon09v37.asm):00131         ;FTHIMGSTRT     EQU     $9C00                   START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00132         ;FTHIMGEND      EQU     FTHIMGSTRT+$2000        END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00133         ; IFNE JQ_EFORTH                                IF USING EFORTH
                      (     mon09v37.asm):00134         ;FORTHCOLD      EQU     $0100                   DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v37.asm):00135         ; ELSE
                      (     mon09v37.asm):00136         ;FORTHCOLD      EQU     FTHIMGSTRT              DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v37.asm):00137         ; ENDC                                          IF USING EFORTH
                      (     mon09v37.asm):00138         
     C000             (     mon09v37.asm):00139         FPBASSTRT       EQU     $C000                   START ADDRESS OF FP BASIC IN ROM
     E600             (     mon09v37.asm):00140         FPBASEND        EQU     FPBASSTRT+$2600         END ADDRESS OF FP BASIC IN ROM
                      (     mon09v37.asm):00141         ;
                      (     mon09v37.asm):00142         ;== HARDWARE CONSTANTS =================================================
     E437             (     mon09v37.asm):00143         CODE            EQU     $E437   MON09 code goes here
     0000             (     mon09v37.asm):00144         RAMSTRT         EQU     $0000   START OF RAM
     9FFF             (     mon09v37.asm):00145         RAMEND          EQU     $9FFF   END OF RAM
                      (     mon09v37.asm):00146         
     C000             (     mon09v37.asm):00147         ROMSTRT         EQU     $C000   START OF ROM
     0000             (     mon09v37.asm):00148         ROMEND          EQU     $10000  END OF ROM
                      (     mon09v37.asm):00149         
                      (     mon09v37.asm):00150          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
0000                  (     mon09v37.asm):00151         VECTTBL         EQU     $FFF0
                      (     mon09v37.asm):00152          ELSE
     FFF2             (     mon09v37.asm):00153         VECTTBL         EQU     $FFF2
                      (     mon09v37.asm):00154          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00155         
     BBC8             (     mon09v37.asm):00156         LOC             EQU     RAMEND-CODE     OFFSET -> RAM OR ROM CODE LOCATION
                      (     mon09v37.asm):00157         
     9FFE             (     mon09v37.asm):00158         STACK   EQU     RAMEND-1        MON09 Stack (Top of RAM)
                      (     mon09v37.asm):00159         
                      (     mon09v37.asm):00160         ;MODS BY JQ
     9F5F             (     mon09v37.asm):00161         RAM             SET     RAMEND-160      MON09 data goes here
                      (     mon09v37.asm):00162          IFNE JQ_NMIRAM                         NO JQ NMI ENHANCEMENTS
0000                  (     mon09v37.asm):00163         RAM             SET     RAM-2           MON09 NMI VECTOR STORAGE
                      (     mon09v37.asm):00164          ENDC                                   NO JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00165          IFNE JQ_ILLOP                          JQ ILLOP ENHANCEMENTS
0000                  (     mon09v37.asm):00166         RAM             SET     RAM-2           MON09 ILLOP VECTOR STORAGE
                      (     mon09v37.asm):00167          ENDC                                   NO JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00168          IFNE JQ_EEPROM                         JQ EEPROM WRITE ENHANCEMENTS
0000                  (     mon09v37.asm):00169         RAM             SET     RAM-2           MON09 E2P PAGE-BYTE COUNTER STORAGE
                      (     mon09v37.asm):00170          ENDC                                   JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00171         ;
                      (     mon09v37.asm):00172         ;== 6850 ACIA CONSTANTS ===============================================
     A000             (     mon09v37.asm):00173         SER1    EQU     $A000           Serial Port 1 (Console)
     A000             (     mon09v37.asm):00174         SER2    EQU     $A000           Serial Port 2 (Aux)
                      (     mon09v37.asm):00175         
     0001             (     mon09v37.asm):00176         RDRF    EQU     1               BIT MASK POSITION FOR RDRF FLAG
     0002             (     mon09v37.asm):00177         TDRE    EQU     2               BIT MASK POSITION FOR TDRE FLAG
                      (     mon09v37.asm):00178         
     0003             (     mon09v37.asm):00179         CTRL1   EQU     $03             MASTER RESET
     0015             (     mon09v37.asm):00180         CTRL2   EQU     $15             115.2K BAUD @8N1
                      (     mon09v37.asm):00181         ;
                      (     mon09v37.asm):00182         ;======================================================================
                      (     mon09v37.asm):00183         ;*
                      (     mon09v37.asm):00184                 ORG     RAM             Internal MON09 variables
                      (     mon09v37.asm):00185         ;*
                      (     mon09v37.asm):00186         ;* MON09 INTERNAL MEMORY
                      (     mon09v37.asm):00187         ;*
9F5F                  (     mon09v37.asm):00188         SWIADR  RMB     2               SWI VECTOR ADDRESS
9F61                  (     mon09v37.asm):00189         SWI2ADR RMB     2               SWI2 VECTOR ADDRESS
9F63                  (     mon09v37.asm):00190         SWI3ADR RMB     2               SWI3 VECTOR ADDRESS
9F65                  (     mon09v37.asm):00191         IRQADR  RMB     2               IRQ VECTOR ADDRESS
9F67                  (     mon09v37.asm):00192         FIRQADR RMB     2               FIRQ VECTOR ADDRESS
                      (     mon09v37.asm):00193         ;MODS BY JQ
                      (     mon09v37.asm):00194          IFNE JQ_NMIRAM                 USE LOCAL NMI HANDLER
9F69                  (     mon09v37.asm):00195         NMIADR  RMB     2               NMI VECTOR ADDRESS
                      (     mon09v37.asm):00196          ENDC
                      (     mon09v37.asm):00197          IFNE JQ_ILLOP                  USE LOCAL ILLOP HANDLER
9F69                  (     mon09v37.asm):00198         ILOPADR RMB     2               6309 ILLOP VECTOR ADDRESS
                      (     mon09v37.asm):00199          ENDC
                      (     mon09v37.asm):00200          IFNE JQ_EEPROM                 JQ EEPROM WRITE ENHANCEMENTS
9F69                  (     mon09v37.asm):00201         E2PCNT  RMB     1               EEPROM PAGE-BYTE COUNTER
                      (     mon09v37.asm):00202          ENDC                           JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00203         ;
9F69                  (     mon09v37.asm):00204         IOCON   RMB     1               I/O CONFIGURATION BYTE
9F6A                  (     mon09v37.asm):00205         UART1   RMB     2               UART 1 ADDRESS
9F6C                  (     mon09v37.asm):00206         UART2   RMB     2               UART 2 ADDRESS
9F6E                  (     mon09v37.asm):00207         SAVCC   RMB     1               SAVED CONDITION CODE REGISTER
9F6F                  (     mon09v37.asm):00208         SAVA    RMB     1               SAVED 6809 A REGISTER
9F70                  (     mon09v37.asm):00209         SAVB    RMB     1               SAVED 6809 B REGISTER
9F71                  (     mon09v37.asm):00210         SAVDP   RMB     1               SAVED DIRECT PAGE REGISTER
9F72                  (     mon09v37.asm):00211         SAVX    RMB     2               SAVED X REGISTER
9F74                  (     mon09v37.asm):00212         SAVY    RMB     2               SAVED Y REGISTER
9F76                  (     mon09v37.asm):00213         SAVU    RMB     2               SAVED U REGISTER
9F78                  (     mon09v37.asm):00214         SAVPC   RMB     2               SAVED PROGRAM COUNTER
9F7A                  (     mon09v37.asm):00215         SAVS    RMB     2               SAVED S REGISTER
9F7C                  (     mon09v37.asm):00216         TEMP    RMB     2               TEMPORARY STORAGE
9F7E                  (     mon09v37.asm):00217         STPFLG  RMB     1               REGISTER DISPLAY WHILE STEPPING FLAG
9F7F                  (     mon09v37.asm):00218         PTRSAV  RMB     2               SINGLE STEP AND DISASSEMBLER CODE POINTER
9F81                  (     mon09v37.asm):00219         INSTYP  RMB     1               DISASSEMBLED INSTRUCTION TYPE
9F82                  (     mon09v37.asm):00220         POSBYT  RMB     1               POSTBYTE STORAGE AREA
9F83                  (     mon09v37.asm):00221         BRKTAB  RMB     24              BREAKPOINT TABLE
9F9B                  (     mon09v37.asm):00222         DSPBUF  RMB     50              DISASSEMBLER DISPLAY BUFFER
9FCD                  (     mon09v37.asm):00223         INSRAM  RMB     7               INSTRUCTION EXECUTION ADDRESS
                      (     mon09v37.asm):00224         
                      (     mon09v37.asm):00225         ;**********************************************************************
                      (     mon09v37.asm):00226          IFNE JQ_EMBEDBIN               ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v37.asm):00227         ;*
                      (     mon09v37.asm):00228                 ; INCLUDE BINARY IMAGES OF ADDITONAL LANGUAGE MODULES
                      (     mon09v37.asm):00229                 ; NOTE: THE MASTER FIRMWARE BUILD SCRIPT HANDLES
                      (     mon09v37.asm):00230                 ;       COMBINING THE VARIOUS LANGUAGE MODULES INTO
                      (     mon09v37.asm):00231                 ;       THE PROPER ADDRESSES IN THE FINAL HEX AND BIN
                      (     mon09v37.asm):00232                 ;       FILES.
                      (     mon09v37.asm):00233         ;*
                      (     mon09v37.asm):00234         ;========> START OF MICRO BASIC PLUS BINARY IMAGE <==========
                      (     mon09v37.asm):00235                         ORG     TNYBASSTRT      START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00236                         JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00237                         FILL $FF,FTHIMGSTRT-*
                      (     mon09v37.asm):00238         
                      (     mon09v37.asm):00239         ;========> START OF FORTH BINARY IMAGE <=====================
                      (     mon09v37.asm):00240                         ORG     FTHIMGSTRT      START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00241         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00242                 INCLUDEBIN      ../../forth/eForth/ef09.bin
                      (     mon09v37.asm):00243                         FILL $FF,FPBASSTRT-*
                      (     mon09v37.asm):00244         
                      (     mon09v37.asm):00245         ;========> START OF FP BASIC BINARY IMAGE <==================
                      (     mon09v37.asm):00246                         ORG     FPBASSTRT       START ADDRESS OF FP BASIC IN ROM
                      (     mon09v37.asm):00247         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00248                 INCLUDEBIN      ../../basic/exbasrom/ExBasROM.bin
                      (     mon09v37.asm):00249                         FILL $FF,CODE-*
                      (     mon09v37.asm):00250         ;
                      (     mon09v37.asm):00251         ;**********************************************************************
                      (     mon09v37.asm):00252          ENDC                           ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v37.asm):00253         ;*
                      (     mon09v37.asm):00254                 ORG     CODE            MONITOR CODE STARTS HERE
                      (     mon09v37.asm):00255         
E437 7EE47F           (     mon09v37.asm):00256                 JMP     RESET           JUMP TO MON09 COLD-START
                      (     mon09v37.asm):00257         
                      (     mon09v37.asm):00258         ;===============================================================================
                      (     mon09v37.asm):00259         ; TRAMPOLINE JUMP TABLE CONTAINING MON09 ROM ENTRY POINTS FOR USER PROGRAMS
                      (     mon09v37.asm):00260         ;===============================================================================
E43A 7EED6C           (     mon09v37.asm):00261         MON09_GETCHR    JMP     GETCHR                  ;Reads character from selected input device, returns
                      (     mon09v37.asm):00262                                                         ; in ACCA.
E43D 7EED4C           (     mon09v37.asm):00263         MON09_GETECH    JMP     GETECH                  ;Reads and echos char. from selected input device,
                      (     mon09v37.asm):00264                                                         ; converts it to capital, and returns in ACCA.
E440 7EED02           (     mon09v37.asm):00265         MON09_GETNIB    JMP     GETNIB                  ;Gets a single hex nibble from selected input device,
                      (     mon09v37.asm):00266                                                         ; and returns in ACCA. Sets 'Z' flag if successful.
E443 7EECE0           (     mon09v37.asm):00267         MON09_GETBYT    JMP     GETBYT                  ;Gets a single hex byte from selected  input  device,
                      (     mon09v37.asm):00268                                                         ; and returns in ACCA. Sets 'Z' flag is successful.
E446 7EEC99           (     mon09v37.asm):00269         MON09_GETADR    JMP     GETADR                  ;Gets a hex word from selected input device, and
                      (     mon09v37.asm):00270                                                         ; returns in D accumulator. Sets 'Z' if successful.
E449 7EEC7C           (     mon09v37.asm):00271         MON09_GETRNG    JMP     GETRNG                  ;Gets an address range from selected input device,
                      (     mon09v37.asm):00272                                                         ; first address is returned in 'X', and second address
                      (     mon09v37.asm):00273                                                         ; is returned in 'D'. Sets 'Z' if successful.
E44C 7EED9F           (     mon09v37.asm):00274         MON09_CHKCHR    JMP     CHKCHR                  ;Checks for character from terminal, and  returns  in
                      (     mon09v37.asm):00275                                                         ; ACCA if found, otherwise returns $FF. Sets 'Z' flag
                      (     mon09v37.asm):00276                                                         ; If character is found, and is the escape character.
E44F 7EED81           (     mon09v37.asm):00277         MON09_PUTCHR    JMP     PUTCHR                  ;Writes character in ACCA to all enabled output devs.
E452 7EED5A           (     mon09v37.asm):00278         MON09_SPACE     JMP     SPACE                   ;Writes a space to all enabled output devices.
E455 7EED60           (     mon09v37.asm):00279         MON09_LFCR      JMP     LFCR                    ;Writes a line-feed, Carriage-return pair to all
                      (     mon09v37.asm):00280                                                         ; enabled output devices.
E458 7EED29           (     mon09v37.asm):00281         MON09_HOUT      JMP     HOUT                    ;Outputs nibble in ACCA to output devices in HEX.
E45B 7EED1F           (     mon09v37.asm):00282         MON09_HEXOUT    JMP     HEXOUT                  ;Outputs byte in ACCA to output devices in HEX.
E45E 7EED1B           (     mon09v37.asm):00283         MON09_WRDOUT    JMP     WRDOUT                  ;Outputs word in ACCD to output devices in HEX.
E461 7EED3F           (     mon09v37.asm):00284         MON09_WRLIN     JMP     WRLIN                   ;Outputs message string pointed to by X to enabled
                      (     mon09v37.asm):00285                                                         ; output devices. String ends with null ($00) or with
                      (     mon09v37.asm):00286                                                         ; Carriage-Return ($0D). If strings ends with Carriage
                      (     mon09v37.asm):00287                                                         ; Return, then LFCR is displayed at end.
E464 7EED35           (     mon09v37.asm):00288         MON09_WRMSG     JMP     WRMSG                   ;Same as above, except message string in inline with
                      (     mon09v37.asm):00289                                                         ; code, and immediatly follows call to WRMSG.
E467 7EEB83           (     mon09v37.asm):00290         MON09_DLOAD     JMP     DLOAD                   ;Downloads one record of a motorola hex format file
                      (     mon09v37.asm):00291                                                         ; from the selected input device. Sets 'C' if record
                      (     mon09v37.asm):00292                                                         ; was NOT an end of file record.
E46A 7EEB60           (     mon09v37.asm):00293         MON09_LOAD      JMP     LOAD                    ;Selects AUX input, and downloads entire motorola hex
                      (     mon09v37.asm):00294                                                         ; format file. Prints '.' for every record received.
E46D 7EF039           (     mon09v37.asm):00295         MON09_DISASS    JMP     DISASS                  ;Disassembles opcode pointed to by Y, and placed  the
                      (     mon09v37.asm):00296                                                         ; disasembler output text in memory pointed to by U.
                      (     mon09v37.asm):00297                                                         ; disassembler output text ends with carriage return.
                      (     mon09v37.asm):00298                                                         ; Y is left pointing to next opcode in memory.
E470 7EEDDB           (     mon09v37.asm):00299         MON09_STEP      JMP     STEP                    ;Steps one instruction, from address in saved program
                      (     mon09v37.asm):00300                                                         ; counter. All saved registers are updated.
E473 7EEDCA           (     mon09v37.asm):00301         MON09_STEPDI    JMP     STEPDI                  ;Same as above, except  disassembled  instruction  is
                      (     mon09v37.asm):00302                                                         ; Displayed.
E476 7EE820           (     mon09v37.asm):00303         MON09_DISREG    JMP     DISREG                  ;Displays all of the saved registers.
E479 7EE4AF           (     mon09v37.asm):00304         MON09_MONITOR   JMP     MONITOR                 ;Reenters the monitor.
E47C 7EE47F           (     mon09v37.asm):00305         MON09_RESET     JMP     RESET                   ;Reinitializes the monitor via RESET.
                      (     mon09v37.asm):00306         ;===============================================================================
                      (     mon09v37.asm):00307         ;*
                      (     mon09v37.asm):00308         ;* INITIALIZATIONS.
                      (     mon09v37.asm):00309         ;*
E47F                  (     mon09v37.asm):00310         RESET
E47F 10CE9FFE         (     mon09v37.asm):00311                 LDS     #STACK          SET UP STACK
E483 8E9F5F           (     mon09v37.asm):00312                 LDX     #SWIADR         POINT TO START
E486                  (     mon09v37.asm):00313         CLRRAM                          ;CLEAR MON09 DATA AREA
E486 6F80             (     mon09v37.asm):00314                 CLR     ,X+             CLEAR IT
E488 8C9FCD           (     mon09v37.asm):00315                 CMPX    #INSRAM         AT BUFFER?
E48B 25F9             (     mon09v37.asm):00316                 BLO     CLRRAM          KEEP GOING
                      (     mon09v37.asm):00317         
                      (     mon09v37.asm):00318                 ;INIT ACIA1
E48D 8EA000           (     mon09v37.asm):00319                 LDX     #SER1           GET SERIAL PORT 1
E490 BF9F6A           (     mon09v37.asm):00320                 STX     >UART1          SET IT UP
E493 1717EE           (     mon09v37.asm):00321                 LBSR    INIT            INITIALIZE IT
                      (     mon09v37.asm):00322         
                      (     mon09v37.asm):00323                 ;INIT ACIA2
E496 8EA000           (     mon09v37.asm):00324                 LDX     #SER2           GET SERIAL PORT 2
E499 BF9F6C           (     mon09v37.asm):00325                 STX     >UART2          SET IT UP
E49C 1717E5           (     mon09v37.asm):00326                 LBSR    INIT            INITIALIZE IT
                      (     mon09v37.asm):00327         
                      (     mon09v37.asm):00328                 ;INIT I/O CONFIG FLAG
E49F 8603             (     mon09v37.asm):00329                 LDA     #3              DEFAULT I/O CONFIGURATION
E4A1 B79F69           (     mon09v37.asm):00330                 STA     IOCON           SET IT
                      (     mon09v37.asm):00331         
                      (     mon09v37.asm):00332                 ;INIT SHADOW STACK
E4A4 CC9F5F           (     mon09v37.asm):00333                 LDD     #RAM            DEFAULT STACK AT TOP OF RAM
E4A7 FD9F7A           (     mon09v37.asm):00334                 STD     SAVS            SAVE IT
                      (     mon09v37.asm):00335         
                      (     mon09v37.asm):00336                 ;INIT SHADOW CONDITION REGISTER
E4AA 86D0             (     mon09v37.asm):00337                 LDA     #$D0            SET CC
E4AC B79F6E           (     mon09v37.asm):00338                 STA     SAVCC           SAVE IT
                      (     mon09v37.asm):00339         
                      (     mon09v37.asm):00340         ;MODS BY JQ
                      (     mon09v37.asm):00341          IFNE JQ_NMIRAM                 JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00342                 LDD     #NMIHND         SET DEFAULT NMI HANDLER
                      (     mon09v37.asm):00343                 STD     NMIADR          SAVE IT
                      (     mon09v37.asm):00344          ENDC                           JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00345         ;
                      (     mon09v37.asm):00346          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00347                 LDD     #ILOPHND        SET DEFAULT ILLOP HANDLER
                      (     mon09v37.asm):00348                 STD     ILOPADR         SAVE IT
                      (     mon09v37.asm):00349          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00350         ;
                      (     mon09v37.asm):00351         ;* Emit the sign-on message
E4AF                  (     mon09v37.asm):00352         MONITOR
                      (     mon09v37.asm):00353                 ; Emit the first part of the sign-on message
E4AF 170883           (     mon09v37.asm):00354                 LBSR    WRMSG           OUTPUT MESSAGE
E4B2 0A0D             (     mon09v37.asm):00355                 FCB     $0A,$0D
E4B4 4D4F4E3039205665 (     mon09v37.asm):00356                 FCC     'MON09 Version '
     7273696F6E20
E4C2 332E37           (     mon09v37.asm):00357                 FCB     VERSION/10+$30,'.',VERSION%10+$30
E4C5 0D0A             (     mon09v37.asm):00358                 FCB     $0D,$0A
                      (     mon09v37.asm):00359         
                      (     mon09v37.asm):00360         ;       INCLUDE A DATE OF BUILD STRING
                      (     mon09v37.asm):00361                 INCLUDE datestring.asm
E4C7 4275696C643A2032 (   datestring.asm):00001                 FCC     'Build: 2025-0104 @13:44:21 CST'
     3032352D30313034
     204031333A34343A
     323120435354
                      (     mon09v37.asm):00362         
E4E5 0D0A             (     mon09v37.asm):00363                 FCB     $0D,$0A
E4E7 284329313938352D (     mon09v37.asm):00364                 FCC     '(C)1985-2007 Dave Dunfield'
     3230303720446176
     652044756E666965
     6C64
E501 0A0D             (     mon09v37.asm):00365                 FCB     $0A,$0D
E503 4D6F646966696361 (     mon09v37.asm):00366                 FCC     'Modifications (C)2021 Johnny Quest'
     74696F6E73202843
     2932303231204A6F
     686E6E7920517565
     7374
E525 0A0D             (     mon09v37.asm):00367                 FCB     $0A,$0D
E527 204D6F6469666965 (     mon09v37.asm):00368                 FCC     ' Modified for the HB63C09M By Z80Dad'
     6420666F72207468
     6520484236334330
     394D204279205A38
     30446164
                      (     mon09v37.asm):00369         ;       FCB     $0A,$0D,$FF
E54B FF               (     mon09v37.asm):00370                 FCB     $FF
                      (     mon09v37.asm):00371         ;
                      (     mon09v37.asm):00372         ;------------------------------------------------------------
                      (     mon09v37.asm):00373          IFNE JQ_DETMCU         JQ MCU DETECTION
                      (     mon09v37.asm):00374         ; Added by JQ - Determine MCU and send message string
                      (     mon09v37.asm):00375         ;* Determine whether processor is 6309 or 6809
                      (     mon09v37.asm):00376         ;* Returns Z clear if 6309, set if 6809
                      (     mon09v37.asm):00377         ; ADD MISSING PC to PULS line from (Burke & Burke)
E54C                  (     mon09v37.asm):00378         DET309:
                      (     mon09v37.asm):00379                 LDX     #NOT6809        POINT TO 6309 STRING
                      (     mon09v37.asm):00380                 PSHS    D               SAVE D REGISTER
                      (     mon09v37.asm):00381                 FDB     $1043           6309 COMD INSRUCTION (COMA on 6809)
                      (     mon09v37.asm):00382                 CMPB    1,S             NOT EQUAL IF 6309
                      (     mon09v37.asm):00383                 PULS    D,PC    RESTORE D REGISTER
                      (     mon09v37.asm):00384                 BNE     MONITOR1        BRANCH IF 6309 DETECTED
                      (     mon09v37.asm):00385                 LDX     #MOT6809        MODIFY POINTER TO 6809 STRING
                      (     mon09v37.asm):00386         ;
E54C                  (     mon09v37.asm):00387         MONITOR1
                      (     mon09v37.asm):00388                 JSR             MON09_WRLIN             EMIT THE STRING
                      (     mon09v37.asm):00389         ;       LDMD    #$01                            SET 6309 NATIVE MODE
                      (     mon09v37.asm):00390                 BRA             MONITOR2                CONTINUE SIGN-ON MESSAGE
                      (     mon09v37.asm):00391         ;
E54C                  (     mon09v37.asm):00392         MOT6809
                      (     mon09v37.asm):00393                 FCC             ' MCU:     MC6809'
                      (     mon09v37.asm):00394                 FCB             $0A,$0D,0
E54C                  (     mon09v37.asm):00395         NOT6809
                      (     mon09v37.asm):00396                 FCC             ' MCU:     HD6309'
                      (     mon09v37.asm):00397                 FCB             $0A,$0D,0
                      (     mon09v37.asm):00398          ENDC                           JQ MCU DETECTION
                      (     mon09v37.asm):00399         ;------------------------------------------------------------
                      (     mon09v37.asm):00400         ;
E54C                  (     mon09v37.asm):00401         MONITOR2
                      (     mon09v37.asm):00402                 ; Emit the rest of the sign-on message
E54C 1707E6           (     mon09v37.asm):00403                 LBSR    WRMSG                           OUTPUT MESSAGE
                      (     mon09v37.asm):00404         ;       FCC     ' UART(s): 6850 ACIA'
E54F 2055415254287329 (     mon09v37.asm):00405                 FCC     ' UART(s): ATMEGA32A 68B50 Wrapper'
     3A2041544D454741
     3332412036384235
     3020577261707065
     72
E570 0A0D             (     mon09v37.asm):00406                 FCB     $0A,$0D
                      (     mon09v37.asm):00407         ;MODS BY JQ
                      (     mon09v37.asm):00408          IFNE JQ_NMIRAM                                 JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00409                 FCC     ' Enabled: NMI Trapping'
                      (     mon09v37.asm):00410                 FCB     $0A,$0D
                      (     mon09v37.asm):00411          ENDC                                           JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00412          IFNE JQ_ILLOP                                  JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00413                 FCC     ' Enabled: 6309 ILLOP & DIV0 Trapping'
                      (     mon09v37.asm):00414                 FCB     $0A,$0D
                      (     mon09v37.asm):00415          ENDC                                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00416          IFNE JQ_EEPROM                                 JQ EEPROM ENHANCEMENTS
                      (     mon09v37.asm):00417                 FCC     ' Enabled: EEPROM Write'
                      (     mon09v37.asm):00418                 FCB     $0A,$0D
                      (     mon09v37.asm):00419          ENDC                                           JQ EEPROM ENHANCEMENTS
                      (     mon09v37.asm):00420         ;
E572 416C6C2072696768 (     mon09v37.asm):00421                 FCC     'All rights & remedies reserved.'
     747320262072656D
     6564696573207265
     7365727665642E
E591 0AFF             (     mon09v37.asm):00422                 FCB     $0A,$FF
                      (     mon09v37.asm):00423         
E593                  (     mon09v37.asm):00424         MAIN
E593 10CE9FFE         (     mon09v37.asm):00425                 LDS     #STACK                          FIX STACK IN CASE ERROR
E597 17079B           (     mon09v37.asm):00426                 LBSR    WRMSG                           OUTPUT MESSAGE
E59A 2A2000           (     mon09v37.asm):00427                 FCN             '* '
E59D 1707AC           (     mon09v37.asm):00428                 LBSR    GETECH                          GET CHARACTER
E5A0 5F               (     mon09v37.asm):00429                 CLRB                                    INDICATE NO SECOND CHAR
                      (     mon09v37.asm):00430         ;* LOOK FOR COMMAND IN TABLE
E5A1                  (     mon09v37.asm):00431         LOOKC
E5A1 8EE5D9           (     mon09v37.asm):00432                 LDX     #CMDTAB         POINT TO COMMAND TABLE
E5A4 7F9F7C           (     mon09v37.asm):00433                 CLR     TEMP            INDICATE NO PARTIAL MATCH
E5A7                  (     mon09v37.asm):00434         LOOK1
E5A7 10A381           (     mon09v37.asm):00435                 CMPD    ,X++            DOES IT MATCH
E5AA 271E             (     mon09v37.asm):00436                 BEQ     LOOK3           YES IT DOES
E5AC A11E             (     mon09v37.asm):00437                 CMPA    -2,X            DOES FIRST CHAR MATCH?
E5AE 2603             (     mon09v37.asm):00438                 BNE     LOOK2           NO, DON'T RECORD
E5B0 7A9F7C           (     mon09v37.asm):00439                 DEC     TEMP            SET FLAG
E5B3                  (     mon09v37.asm):00440         LOOK2
E5B3 3002             (     mon09v37.asm):00441                 LEAX    2,X             ADVANCE TO NEXT
E5B5 6D84             (     mon09v37.asm):00442                 TST     ,X              HAVE WE HIT THE END
E5B7 26EE             (     mon09v37.asm):00443                 BNE     LOOK1           NO, KEEP LOOKING
E5B9 5D               (     mon09v37.asm):00444                 TSTB                    ALREADY HAVE TWO CHARS?
E5BA 2615             (     mon09v37.asm):00445                 BNE     ERROR           YES, ERROR
E5BC F69F7C           (     mon09v37.asm):00446                 LDB     TEMP            ANY PARTIAL MATCHES?
E5BF 2710             (     mon09v37.asm):00447                 BEQ     ERROR           NO, ERROR
E5C1 1F89             (     mon09v37.asm):00448                 TFR     A,B             SAVE CHAR IN 'A'
E5C3 170786           (     mon09v37.asm):00449                 LBSR    GETECH          GET NEXT CHAR
E5C6 1E89             (     mon09v37.asm):00450                 EXG     A,B             SWAP BACK
E5C8 20D7             (     mon09v37.asm):00451                 BRA     LOOKC           AND CONTINUE
                      (     mon09v37.asm):00452         ;* COMMAND WAS FOUND, EXECUTE IT
E5CA                  (     mon09v37.asm):00453         LOOK3
E5CA 17078D           (     mon09v37.asm):00454                 LBSR    SPACE           OUTPUT SPACE
E5CD AD94             (     mon09v37.asm):00455                 JSR     [,X]            EXECUTE COMMAND
E5CF 20C2             (     mon09v37.asm):00456                 BRA     MAIN            AND RETURN
                      (     mon09v37.asm):00457         ;* ERROR HAS OCCURED
E5D1                  (     mon09v37.asm):00458         ERROR
E5D1 170761           (     mon09v37.asm):00459                 LBSR    WRMSG           OUTPUT MESSAGE
E5D4 203F             (     mon09v37.asm):00460                 FCC     ' ?'
E5D6 FF               (     mon09v37.asm):00461                 FCB     $FF
E5D7 20BA             (     mon09v37.asm):00462                 BRA     MAIN            TRY AGAIN
                      (     mon09v37.asm):00463         ;* COMMAND LOOKUP TABLE
E5D9                  (     mon09v37.asm):00464         CMDTAB
E5D9 444D             (     mon09v37.asm):00465                 FCB     'D','M'         DISPLAY MEMORY
E5DB E6AA             (     mon09v37.asm):00466                 FDB     MEMORY
E5DD 4444             (     mon09v37.asm):00467                 FCB     'D','D'         DISASSEMBLE
E5DF E759             (     mon09v37.asm):00468                 FDB     DISASM
E5E1 4452             (     mon09v37.asm):00469                 FCB     'D','R'         DISPLAY REGISTERS
E5E3 E820             (     mon09v37.asm):00470                 FDB     DISREG
E5E5 4442             (     mon09v37.asm):00471                 FCB     'D','B'         VIEW BREAKPOINTS
E5E7 E8F1             (     mon09v37.asm):00472                 FDB     DSPBRK
E5E9 4456             (     mon09v37.asm):00473                 FCB     'D','V'         DISPLAY VECTORS
E5EB E77B             (     mon09v37.asm):00474                 FDB     DISVEC
E5ED 4455             (     mon09v37.asm):00475                 FCB     'D','U'         DISPLAY UARTS
E5EF E7B2             (     mon09v37.asm):00476                 FDB     DISURT
E5F1 4352             (     mon09v37.asm):00477                 FCB     'C','R'         CHANGE REGISTER
E5F3 E8A6             (     mon09v37.asm):00478                 FDB     CHGREG
E5F5 4356             (     mon09v37.asm):00479                 FCB     'C','V'         CHANGE VECTORS
E5F7 E7CB             (     mon09v37.asm):00480                 FDB     CHGVEC
E5F9 4355             (     mon09v37.asm):00481                 FCB     'C','U'         CHANGE UARTS
E5FB E7FF             (     mon09v37.asm):00482                 FDB     CHGURT          DO IT
E5FD 4500             (     mon09v37.asm):00483                 FCB     'E',0           SUBSTITUTE MEMORY
E5FF E716             (     mon09v37.asm):00484                 FDB     SUBMEM
                      (     mon09v37.asm):00485          IFNE JQ_JMPMOD         JQ JUMP MODULE ENHANCEMENTS
E601 4A42             (     mon09v37.asm):00486                 FCB     'J','B'         JUMP TO FP BASIC MODULE
E603 E646             (     mon09v37.asm):00487                 FDB     JUMPFPBAS
                      (     mon09v37.asm):00488         ;       FCB     'J','T'         JUMP TO TINYBASIC MODULE
                      (     mon09v37.asm):00489         ;       FDB     JUMPTNYBAS
                      (     mon09v37.asm):00490         ;       FCB     'J','F'         JUMP TO FORTH MODULE
                      (     mon09v37.asm):00491         ;       FDB     JUMPFORTH
                      (     mon09v37.asm):00492          ENDC                   JQ JUMP MODULE ENHANCEMENTS
                      (     mon09v37.asm):00493         ;
E605 4C00             (     mon09v37.asm):00494                 FCB     'L',0           DOWNLOAD
E607 EB60             (     mon09v37.asm):00495                 FDB     LOAD
E609 4200             (     mon09v37.asm):00496                 FCB     'B',0           SET BREAKPOINT
E60B E927             (     mon09v37.asm):00497                 FDB     SETBRK
E60D 5300             (     mon09v37.asm):00498                 FCB     'S',0           STEP
E60F E947             (     mon09v37.asm):00499                 FDB     GOSTEP
E611 4700             (     mon09v37.asm):00500                 FCB     'G',0           GO
E613 E971             (     mon09v37.asm):00501                 FDB     GOEXEC
E615 5400             (     mon09v37.asm):00502                 FCB     'T',0           TRANSPARENT MODE
E617 EB3C             (     mon09v37.asm):00503                 FDB     TMODE
E619 464D             (     mon09v37.asm):00504                 FCB     'F','M'         FILL MEMORY
E61B E66D             (     mon09v37.asm):00505                 FDB     FILMEM
E61D 5252             (     mon09v37.asm):00506                 FCB     'R','R'         REPEATING READ
E61F E9B0             (     mon09v37.asm):00507                 FDB     RDLOOP
E621 5257             (     mon09v37.asm):00508                 FCB     'R','W'         REPEATING WRITE
E623 E9C0             (     mon09v37.asm):00509                 FDB     WRLOOP
E625 4D54             (     mon09v37.asm):00510                 FCB     'M','T'         MEMORY TEST
E627 EA0A             (     mon09v37.asm):00511                 FDB     RAMTEST
E629 5700             (     mon09v37.asm):00512                 FCB     'W',0           WRITE MEMORY
E62B E706             (     mon09v37.asm):00513                 FDB     WRIMEM
E62D 4D4D             (     mon09v37.asm):00514                 FCB     'M','M'         MOVE MEMORY
E62F E690             (     mon09v37.asm):00515                 FDB     MOVMEM
E631 5852             (     mon09v37.asm):00516                 FCB     'X','R'         REPEATING 16 BIT READ
E633 E9DF             (     mon09v37.asm):00517                 FDB     XRLOOP
E635 5857             (     mon09v37.asm):00518                 FCB     'X','W'         REPEATING 16 BIT WRITE
E637 E9EF             (     mon09v37.asm):00519                 FDB     XWLOOP
E639 2B00             (     mon09v37.asm):00520                 FCB     '+',0           HEX ADDITION
E63B EADB             (     mon09v37.asm):00521                 FDB     HEXADD
E63D 2D00             (     mon09v37.asm):00522                 FCB     '-',0           HEX SUBTRACTION
E63F EAEC             (     mon09v37.asm):00523                 FDB     HEXSUB
E641 3F00             (     mon09v37.asm):00524                 FCB     '?',0           HELP COMMAND
E643 EB0E             (     mon09v37.asm):00525                 FDB     HELP
E645 00               (     mon09v37.asm):00526                 FCB     0               MARK END OF TABLE
                      (     mon09v37.asm):00527         
                      (     mon09v37.asm):00528         ;MODS BY JQ, MODIFIED FOR HB63C09
                      (     mon09v37.asm):00529         ;******************************************************************************
                      (     mon09v37.asm):00530         ;* 'J' - JUMP TO MODULE
                      (     mon09v37.asm):00531         ;******************************************************************************
                      (     mon09v37.asm):00532          IFNE JQ_JMPMOD         JQ JUMP TO MODULES
                      (     mon09v37.asm):00533         ;==============================================
E646                  (     mon09v37.asm):00534         JUMPFPBAS
E646 8EE652           (     mon09v37.asm):00535                 LDX     #FPBASMSG       POINT TO MESSAGE START
E649 1706F3           (     mon09v37.asm):00536                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00537         
E64C 7EC000           (     mon09v37.asm):00538                 JMP     FPBASSTRT       JUMP TO BASIC COLD START
                      (     mon09v37.asm):00539         
E64F 16070E           (     mon09v37.asm):00540                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00541         
E652                  (     mon09v37.asm):00542         FPBASMSG
E652 0D0A             (     mon09v37.asm):00543                 FCB     $0D,$0A
E654 426F6F74696E6720 (     mon09v37.asm):00544                 FCC     'Booting MS FP BASIC...'
     4D53204650204241
     5349432E2E2E
E66A 0D0A             (     mon09v37.asm):00545                 FCB     $0D,$0A
E66C FF               (     mon09v37.asm):00546                 FCB     $FF                     END OF TABLE
                      (     mon09v37.asm):00547         ;
                      (     mon09v37.asm):00548         ;==============================================
                      (     mon09v37.asm):00549         ;JUMPTNYBAS
                      (     mon09v37.asm):00550         ;       LDX             #TNYBASMSG      POINT TO MESSAGE START
                      (     mon09v37.asm):00551         ;       LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00552         
                      (     mon09v37.asm):00553         ;       JMP             TNYBASSTRT      JUMP TO FORTH COLD START
                      (     mon09v37.asm):00554         
                      (     mon09v37.asm):00555         ;       LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00556         
                      (     mon09v37.asm):00557         ;TNYBASMSG
                      (     mon09v37.asm):00558         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00559         ;       FCC             'Booting TinyBASIC...'
                      (     mon09v37.asm):00560         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00561         ;       FCB             $FF                     END OF TABLE
                      (     mon09v37.asm):00562         
                      (     mon09v37.asm):00563         ;==============================================
                      (     mon09v37.asm):00564         ; Load Forth into RAM.
                      (     mon09v37.asm):00565         ;INTERNAL MOVMEM ROUTINE: IMAGE START IN X, IMAGE END IN D, DESTINATION
                      (     mon09v37.asm):00566         ;  START ADDRESS IN Y.
                      (     mon09v37.asm):00567         ;JUMPFORTH
                      (     mon09v37.asm):00568         ; IFNE JQ_EFORTH                        IF USING EFORTH
                      (     mon09v37.asm):00569         ;       LDX             #FTHIMGSTRT     START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00570         ;       LDY             #FORTHCOLD      DESTINATION ADDRESS IN RAM
                      (     mon09v37.asm):00571         ;       LDD             #FTHIMGEND      END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00572         ;       STD             TEMP            MOVE TO VARIABLE
                      (     mon09v37.asm):00573         
                      (     mon09v37.asm):00574         ;JMPFTH1
                      (     mon09v37.asm):00575         ;       LDA             ,X+                     GET SOURCE BYTE
                      (     mon09v37.asm):00576         ;       STA             ,Y+                     SAVE IN DEST
                      (     mon09v37.asm):00577         ;       CMPX    TEMP            SAVE IT
                      (     mon09v37.asm):00578         ;       BLS             JMPFTH1         KEEP MOVING
                      (     mon09v37.asm):00579          ;ENDC                                  IF USING EFORTH
                      (     mon09v37.asm):00580         
                      (     mon09v37.asm):00581         ;       LDX             #FTHBTMSG       POINT TO MESSAGE START
                      (     mon09v37.asm):00582         ;       LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00583         
                      (     mon09v37.asm):00584         ;       JSR             FORTHCOLD       EXECUTE A CALL TO FORTH COLD START
                      (     mon09v37.asm):00585         
                      (     mon09v37.asm):00586         ;       LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00587         
                      (     mon09v37.asm):00588         ;FTHBTMSG
                      (     mon09v37.asm):00589         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00590         ;       FCC             'Booting FORTH...'
                      (     mon09v37.asm):00591         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00592         ;       FCB             $FF                     END OF TABLE
                      (     mon09v37.asm):00593         
                      (     mon09v37.asm):00594          ENDC                           JQ JUMP TO MODULES
                      (     mon09v37.asm):00595         ;
                      (     mon09v37.asm):00596         ;******************************************************************************
                      (     mon09v37.asm):00597         ;* 'F' - FILL MEMORY
                      (     mon09v37.asm):00598         ;******************************************************************************
E66D                  (     mon09v37.asm):00599         FILMEM
E66D 17060C           (     mon09v37.asm):00600                 LBSR    GETRNG          GET ADDRESSES
                      (     mon09v37.asm):00601         ;MODS BY JQ
E670 10839F5E         (     mon09v37.asm):00602                 CMPD    #RAM-1          START OF MON09 DATA?
E674 2F03             (     mon09v37.asm):00603                 BLE     FILL1           NO, ADDRESS OKAY
E676 CC9F5E           (     mon09v37.asm):00604                 LDD     #RAM-1          STOP AT MON09 DATA-1
                      (     mon09v37.asm):00605         ;
E679                  (     mon09v37.asm):00606         FILL1
E679 FD9F7C           (     mon09v37.asm):00607                 STD     TEMP            SAVE IT
E67C 1706DB           (     mon09v37.asm):00608                 LBSR    SPACE           SPACE OVER
E67F 17065E           (     mon09v37.asm):00609                 LBSR    GETBYT          GET DATA BYTE
E682 1026FF4B         (     mon09v37.asm):00610                 LBNE    ERROR           INVALID
E686                  (     mon09v37.asm):00611         FILL2
E686 A780             (     mon09v37.asm):00612                 STA     ,X+                     WRITE IT
E688 BC9F7C           (     mon09v37.asm):00613                 CMPX    TEMP            ARE WE THERE
E68B 23F9             (     mon09v37.asm):00614                 BLS     FILL2           NO, KEEP GOING
E68D 1606D0           (     mon09v37.asm):00615                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00616         ;
                      (     mon09v37.asm):00617         ;******************************************************************************
                      (     mon09v37.asm):00618         * 'MM' - MOVE MEMORY
                      (     mon09v37.asm):00619         ;******************************************************************************
E690                  (     mon09v37.asm):00620         MOVMEM
                      (     mon09v37.asm):00621          IFNE 0         FOR TESTING
                      (     mon09v37.asm):00622                 JMP     $2000
                      (     mon09v37.asm):00623          ELSE
E690 1705E9           (     mon09v37.asm):00624                 LBSR    GETRNG          GET A RANGE
E693 FD9F7C           (     mon09v37.asm):00625                 STD     TEMP            SAVE LAST VALUE
E696 1706C1           (     mon09v37.asm):00626                 LBSR    SPACE           SEPERATOR
E699 1705FD           (     mon09v37.asm):00627                 LBSR    GETADR          GET DEST ADDRESS
E69C 1F02             (     mon09v37.asm):00628                 TFR     D,Y             SET IT UP
                      (     mon09v37.asm):00629         
E69E                  (     mon09v37.asm):00630         MOVM1
E69E A680             (     mon09v37.asm):00631                 LDA     ,X+             GET SOURCE BYTE
E6A0 A7A0             (     mon09v37.asm):00632                 STA     ,Y+             SAVE IN DEST
E6A2 BC9F7C           (     mon09v37.asm):00633                 CMPX    TEMP            SAVE IT
E6A5 23F7             (     mon09v37.asm):00634                 BLS     MOVM1           KEEP MOVEING
E6A7 1606B6           (     mon09v37.asm):00635                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00636         
                      (     mon09v37.asm):00637         ;  IFNE JQ_EEPROM               JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00638         ;  ENDC                         JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00639          ENDC           FOR TESTING
                      (     mon09v37.asm):00640         ;
                      (     mon09v37.asm):00641         ;******************************************************************************
                      (     mon09v37.asm):00642         ;* 'DM' - DISPLAY MEMORY
                      (     mon09v37.asm):00643         ;   FIX FOR 'LOOP' BUG - MOVE START ADDRESS TO BEGINING OF 16 BYTE BOUNDRY
                      (     mon09v37.asm):00644         ;   CHECK TO SEE IF WE'VE LOOPED PAST FFFF AT THE END. THIS MAY DISPLAY MORE 
                      (     mon09v37.asm):00645         ;   BYTES THEN REQUESTED, HOWEVER IT WILL STOP AT FFFF - DC 3.31.24
                      (     mon09v37.asm):00646         ;******************************************************************************
E6AA                  (     mon09v37.asm):00647         MEMORY
                      (     mon09v37.asm):00648          IFNE 0         FOR TESTING
                      (     mon09v37.asm):00649                 JMP             $1000
                      (     mon09v37.asm):00650          ELSE
                      (     mon09v37.asm):00651         
E6AA 1705CF           (     mon09v37.asm):00652                 LBSR    GETRNG          ; GET ADDRESS
E6AD FD9F7C           (     mon09v37.asm):00653                 STD     TEMP            ; SAVE
                      (     mon09v37.asm):00654                                 
E6B0                  (     mon09v37.asm):00655         MEM1
E6B0 1706AD           (     mon09v37.asm):00656                 LBSR    LFCR            ; NEW LINE
E6B3 1706E9           (     mon09v37.asm):00657                 LBSR    CHKCHR          ; CHECK FOR CHAR
E6B6 1027FED9         (     mon09v37.asm):00658                 LBEQ    MAIN            ; ESCAPE, QUIT
E6BA 1F10             (     mon09v37.asm):00659                 TFR     X,D             ; GET ADDRESS
E6BC 1084FFF0         (     mon09v37.asm):00660                 ANDD    #$FFF0          ; CLEAR THE LOWER 4 BITS 
E6C0 1F01             (     mon09v37.asm):00661                 TFR     D,X             ; UPDATE X TO FIX BIT READ OUT 
E6C2 3406             (     mon09v37.asm):00662                 PSHS    D               ; SAVE FOR LATER
E6C4 170654           (     mon09v37.asm):00663                 LBSR    WRDOUT          ; DISPLAY
E6C7 C610             (     mon09v37.asm):00664                 LDB     #16             ; DISPLAY 16 TO A LINE
E6C9                  (     mon09v37.asm):00665         MEM2
E6C9 17068E           (     mon09v37.asm):00666                 LBSR    SPACE           ; OUTPUT A SPACE
E6CC C503             (     mon09v37.asm):00667                 BITB    #3              ; ON A BOUNDARY?
E6CE 2603             (     mon09v37.asm):00668                 BNE     MEM3            ; NO, SPACE
E6D0 170687           (     mon09v37.asm):00669                 LBSR    SPACE           ; EXTRA SPACE
E6D3                  (     mon09v37.asm):00670         MEM3
E6D3 A680             (     mon09v37.asm):00671                 LDA     ,X+             ; GET BYTE
E6D5 170647           (     mon09v37.asm):00672                 LBSR    HEXOUT          ; DISPLAY
E6D8 5A               (     mon09v37.asm):00673                 DECB                    ; REDUCE COUNT
E6D9 26EE             (     mon09v37.asm):00674                 BNE     MEM2            ; CONTINUE
E6DB C604             (     mon09v37.asm):00675                 LDB     #4              ; FOUR SPACES
E6DD                  (     mon09v37.asm):00676         MEM4
E6DD 17067A           (     mon09v37.asm):00677                 LBSR    SPACE           ; DISPLAY A SPACE
E6E0 5A               (     mon09v37.asm):00678                 DECB                    ; REDUCE COUNT
E6E1 26FA             (     mon09v37.asm):00679                 BNE     MEM4            ; CONTINUE
E6E3 3510             (     mon09v37.asm):00680                 PULS    X               ; RESTORE D TO X
E6E5 C610             (     mon09v37.asm):00681                 LDB     #16             ; COUNT OF 16
E6E7                  (     mon09v37.asm):00682         MEM5
E6E7 A680             (     mon09v37.asm):00683                 LDA     ,X+             ; GET CHAR
E6E9 8120             (     mon09v37.asm):00684                 CMPA    #' '            ; <SPACE
E6EB 2504             (     mon09v37.asm):00685                 BLO     MEM6            ; CONVERT TO DOT
E6ED 817F             (     mon09v37.asm):00686                 CMPA    #$7F            ; PRINTABLE?
E6EF 2502             (     mon09v37.asm):00687                 BLO     MEM7            ; OK TO DISPLAY
E6F1                  (     mon09v37.asm):00688         MEM6
E6F1 862E             (     mon09v37.asm):00689                 LDA     #'.'            ; CHANGE TO DOT
E6F3                  (     mon09v37.asm):00690         MEM7
E6F3 17068B           (     mon09v37.asm):00691                 LBSR    PUTCHR          ; OUTPUT
E6F6 5A               (     mon09v37.asm):00692                 DECB                    ; REDUCE COUNT
E6F7 26EE             (     mon09v37.asm):00693                 BNE     MEM5            ; DISPLAY THEM ALL
E6F9 8C0000           (     mon09v37.asm):00694                 CMPX    #0              ; DID WE WRAP AROUND?
E6FC 2705             (     mon09v37.asm):00695                 BEQ     MEM8            ; YES, WE NEED TO SKIP 
E6FE BC9F7C           (     mon09v37.asm):00696                 CMPX    TEMP            ; PAST END?
E701 23AD             (     mon09v37.asm):00697                 BLS     MEM1            ; NO, KEEP GOING
E703                  (     mon09v37.asm):00698         MEM8
E703 16065A           (     mon09v37.asm):00699                 LBRA    LFCR            ; NEW LINE
                      (     mon09v37.asm):00700          ENDC                           ; FOR TESTING
                      (     mon09v37.asm):00701         
                      (     mon09v37.asm):00702         
                      (     mon09v37.asm):00703         ;*
                      (     mon09v37.asm):00704         ;* 'W' - WRITE TO MEMORY
                      (     mon09v37.asm):00705         ;*
E706                  (     mon09v37.asm):00706         WRIMEM
E706 170590           (     mon09v37.asm):00707                 LBSR    GETADR          GET ADDRESS
E709 1F01             (     mon09v37.asm):00708                 TFR     D,X             SET IT UP
E70B 17064C           (     mon09v37.asm):00709                 LBSR    SPACE           STEP OVER
E70E 1705CF           (     mon09v37.asm):00710                 LBSR    GETBYT          GET BYTE
E711 A784             (     mon09v37.asm):00711                 STA     ,X              WRITE TO MEMORY
E713 16064A           (     mon09v37.asm):00712                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00713         ;*
                      (     mon09v37.asm):00714         ;* 'E' - EDIT MEMORY
                      (     mon09v37.asm):00715         ;*
E716                  (     mon09v37.asm):00716         SUBMEM
E716 170580           (     mon09v37.asm):00717                 LBSR    GETADR          GET ADDRESS
E719 1F01             (     mon09v37.asm):00718                 TFR     D,X             COPY
E71B                  (     mon09v37.asm):00719         SUBM1
E71B 170642           (     mon09v37.asm):00720                 LBSR    LFCR            NEW LINE
E71E 1F10             (     mon09v37.asm):00721                 TFR     X,D             GET ADDRESS
E720 1705F8           (     mon09v37.asm):00722                 LBSR    WRDOUT          OUTPUT
E723 C608             (     mon09v37.asm):00723                 LDB     #8              NEW COUNT
E725                  (     mon09v37.asm):00724         SUBM2
E725 170632           (     mon09v37.asm):00725                 LBSR    SPACE           SEPERATOR
E728 A684             (     mon09v37.asm):00726                 LDA     ,X              GET BYTE
E72A 1705F2           (     mon09v37.asm):00727                 LBSR    HEXOUT          DISPLAY
E72D 862D             (     mon09v37.asm):00728                 LDA     #'-'            PROMPT
E72F 17064F           (     mon09v37.asm):00729                 LBSR    PUTCHR          OUTPUT
E732 1705AB           (     mon09v37.asm):00730                 LBSR    GETBYT          GET A BYTE
E735 2609             (     mon09v37.asm):00731                 BNE     SUBM4           INVALID
E737 A784             (     mon09v37.asm):00732                 STA     ,X              RESAVE
E739                  (     mon09v37.asm):00733         SUBM3
E739 3001             (     mon09v37.asm):00734                 LEAX    1,X             ADVANCE
E73B 5A               (     mon09v37.asm):00735                 DECB                    REDUCE COUNT
E73C 26E7             (     mon09v37.asm):00736                 BNE     SUBM2           MORE, CONTINUE
E73E 20DB             (     mon09v37.asm):00737                 BRA     SUBM1           NEW LINE
E740                  (     mon09v37.asm):00738         SUBM4
E740 810D             (     mon09v37.asm):00739                 CMPA    #$0D            CR?
E742 1027061A         (     mon09v37.asm):00740                 LBEQ    LFCR            IF SO, QUIT
E746 8120             (     mon09v37.asm):00741                 CMPA    #' '            SPACE?
E748 2605             (     mon09v37.asm):00742                 BNE     SUBM5           NO
E74A 17060D           (     mon09v37.asm):00743                 LBSR    SPACE           FILL FOR TWO DIGITS
E74D 20EA             (     mon09v37.asm):00744                 BRA     SUBM3           ADVANCE
E74F                  (     mon09v37.asm):00745         SUBM5
E74F 8108             (     mon09v37.asm):00746                 CMPA    #$08            BACKSPACE?
E751 1026FE7C         (     mon09v37.asm):00747                 LBNE    ERROR           INVALID
E755 301F             (     mon09v37.asm):00748                 LEAX    -1,X            BACKUP
E757 20C2             (     mon09v37.asm):00749                 BRA     SUBM1           NEW LINE
                      (     mon09v37.asm):00750         ;*
                      (     mon09v37.asm):00751         ;* 'DI' - DISASSEMBLE
                      (     mon09v37.asm):00752         ;*
E759                  (     mon09v37.asm):00753         DISASM
E759 170520           (     mon09v37.asm):00754                 LBSR    GETRNG          GET ADDRESS
E75C FD9F7C           (     mon09v37.asm):00755                 STD     TEMP            SAVE
E75F 1F12             (     mon09v37.asm):00756                 TFR     X,Y             COPY TO Y
E761 1705FC           (     mon09v37.asm):00757                 LBSR    LFCR            NEW LINE
E764 CE9F9B           (     mon09v37.asm):00758                 LDU     #DSPBUF         POINT TO INPUT BUFFER
E767                  (     mon09v37.asm):00759         DISS1
E767 1708CF           (     mon09v37.asm):00760                 LBSR    DISASS          DISASSEMBLE
E76A 1F31             (     mon09v37.asm):00761                 TFR     U,X             COPY
E76C 1705D0           (     mon09v37.asm):00762                 LBSR    WRLIN           OUTPUT
E76F 17062D           (     mon09v37.asm):00763                 LBSR    CHKCHR          END?
E772 2706             (     mon09v37.asm):00764                 BEQ     DISS2           YES, QUIT
E774 10BC9F7C         (     mon09v37.asm):00765                 CMPY    TEMP            OVER?
E778 25ED             (     mon09v37.asm):00766                 BLO     DISS1           TRY AGAIN
E77A                  (     mon09v37.asm):00767         DISS2
E77A 39               (     mon09v37.asm):00768                 RTS
                      (     mon09v37.asm):00769         ;*
                      (     mon09v37.asm):00770         ;* 'DV' - DISPLAY VECTORS
                      (     mon09v37.asm):00771         ;*
E77B                  (     mon09v37.asm):00772         DISVEC
E77B 8EE791           (     mon09v37.asm):00773                 LDX     #VECTXT         POINT TO VECTOR TEXT
E77E 108E9F5F         (     mon09v37.asm):00774                 LDY     #SWIADR         POINT TO FIRST VECTOR
E782                  (     mon09v37.asm):00775         DISV1
E782 1705BA           (     mon09v37.asm):00776                 LBSR    WRLIN           OUTPUT A MESSAGE
E785 ECA1             (     mon09v37.asm):00777                 LDD     ,Y++            GET A VECTOR
E787 170591           (     mon09v37.asm):00778                 LBSR    WRDOUT          OUTPUT VECTOR ADDRESS
E78A A684             (     mon09v37.asm):00779                 LDA     ,X              MORE TEXT?
E78C 26F4             (     mon09v37.asm):00780                 BNE     DISV1           AND CONTINUE
E78E 1605CF           (     mon09v37.asm):00781                 LBRA    LFCR            NEW LINE
E791                  (     mon09v37.asm):00782         VECTXT
E791 5357493D00       (     mon09v37.asm):00783                 FCN             'SWI='
E796 20535749323D00   (     mon09v37.asm):00784                 FCN             ' SWI2='
E79D 20535749333D00   (     mon09v37.asm):00785                 FCN             ' SWI3='
E7A4 204952513D00     (     mon09v37.asm):00786                 FCN             ' IRQ='
E7AA 20464952513D00   (     mon09v37.asm):00787                 FCN             ' FIRQ='
                      (     mon09v37.asm):00788         ;MODS BY JQ
                      (     mon09v37.asm):00789          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00790                 FCN             ' NMI='
                      (     mon09v37.asm):00791          ENDC
                      (     mon09v37.asm):00792          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00793                 FCN             ' ILLOP='
                      (     mon09v37.asm):00794          ENDC
                      (     mon09v37.asm):00795         ;
E7B1 00               (     mon09v37.asm):00796                 FCB     0               END OF TABLE
                      (     mon09v37.asm):00797         ;*
                      (     mon09v37.asm):00798         ;* 'DU' DISPLAY UARTS
                      (     mon09v37.asm):00799         ;*
E7B2                  (     mon09v37.asm):00800         DISURT
E7B2 8EE7BB           (     mon09v37.asm):00801                 LDX     #URTEXT         POINT TO TEXT
E7B5 108E9F6A         (     mon09v37.asm):00802                 LDY     #UART1          POINT TO UART
E7B9 20C7             (     mon09v37.asm):00803                 BRA     DISV1           DISPLAY IT
E7BB                  (     mon09v37.asm):00804         URTEXT
E7BB 55415254313D00   (     mon09v37.asm):00805                 FCN     'UART1='
E7C2 2055415254323D00 (     mon09v37.asm):00806                 FCN     ' UART2='
E7CA 00               (     mon09v37.asm):00807                 FCB     0
                      (     mon09v37.asm):00808         ;*
                      (     mon09v37.asm):00809         ;* 'CV' - CHANGE VECTOR
                      (     mon09v37.asm):00810         ;*
E7CB                  (     mon09v37.asm):00811         CHGVEC
E7CB 17057E           (     mon09v37.asm):00812                 LBSR    GETECH          GET CHAR & ECHO
E7CE 8153             (     mon09v37.asm):00813                 CMPA    #'S'            SWI?
E7D0 2604             (     mon09v37.asm):00814                 BNE     CHGV1           NO
E7D2 8631             (     mon09v37.asm):00815                 LDA     #'1'            SAME AS '1'
E7D4 2010             (     mon09v37.asm):00816                 BRA     CHGV5           AND CONTINUE
E7D6                  (     mon09v37.asm):00817         CHGV1
E7D6 8149             (     mon09v37.asm):00818                 CMPA    #'I'            IRQ?
E7D8 2604             (     mon09v37.asm):00819                 BNE     CHGV2           NO, ITS OK
E7DA 8634             (     mon09v37.asm):00820                 LDA     #'4'            CONVERT
E7DC 2008             (     mon09v37.asm):00821                 BRA     CHGV5           AND CONTINUE
E7DE                  (     mon09v37.asm):00822         CHGV2
E7DE 8146             (     mon09v37.asm):00823                 CMPA    #'F'            FIRQ?
E7E0 2604             (     mon09v37.asm):00824                 BNE     CHGV3           NO
E7E2 8635             (     mon09v37.asm):00825                 LDA     #'5'            CONVERT
E7E4 2000             (     mon09v37.asm):00826                 BRA     CHGV5           AND CONTINUE
E7E6                  (     mon09v37.asm):00827         CHGV3
                      (     mon09v37.asm):00828         ;MODS BY JQ
                      (     mon09v37.asm):00829          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00830                 CMPA    #'N'            NMI?
                      (     mon09v37.asm):00831                 BNE     CHGV4           NO
                      (     mon09v37.asm):00832                 LDA     #'6'            CONVERT
                      (     mon09v37.asm):00833                 BRA     CHGV5           AND CONTINUE
                      (     mon09v37.asm):00834          ENDC                           USE JQ NMI ENHANCEMENTS
E7E6                  (     mon09v37.asm):00835         CHGV4
                      (     mon09v37.asm):00836          IFNE JQ_ILLOP          USE ILLOP HANDLER
                      (     mon09v37.asm):00837                 CMPA    #'L'            6309 ILLOP?
                      (     mon09v37.asm):00838                 BNE     CHGV5           NO
                      (     mon09v37.asm):00839                 LDA     #'7'            CONVERT
                      (     mon09v37.asm):00840          ENDC                           USE ILLOP HANDLER
                      (     mon09v37.asm):00841         ;
E7E6                  (     mon09v37.asm):00842         CHGV5
E7E6 8031             (     mon09v37.asm):00843                 SUBA    #'1'            TEST IT
                      (     mon09v37.asm):00844         ;---------------------
                      (     mon09v37.asm):00845         ;MODS BY JQ
     0004             (     mon09v37.asm):00846         CHKRNG  SET     4                       IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00847          IFNE JQ_NMIRAM         NO JQ NMI ENHANCEMENTS
E7E8                  (     mon09v37.asm):00848         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00849          ENDC                           NO JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00850          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E7E8                  (     mon09v37.asm):00851         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00852           ENDC                          NO JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00853         ;---------------------
E7E8 8104             (     mon09v37.asm):00854                 CMPA    #CHKRNG         CHECK RANGE
                      (     mon09v37.asm):00855         ;
E7EA 1022FDE3         (     mon09v37.asm):00856                 LBHI    ERROR           INVALID
E7EE 8E9F5F           (     mon09v37.asm):00857                 LDX     #SWIADR         POINT TO IT
E7F1                  (     mon09v37.asm):00858         CHGV6
E7F1 48               (     mon09v37.asm):00859                 LSLA                    X2 FOR 2 BYTE ENTRIES
E7F2 3086             (     mon09v37.asm):00860                 LEAX    A,X             ADVANCE TO VECTOR
E7F4 170563           (     mon09v37.asm):00861                 LBSR    SPACE           SEPERATOR
E7F7 17049F           (     mon09v37.asm):00862                 LBSR    GETADR          GET NEW VALUE
E7FA ED84             (     mon09v37.asm):00863                 STD     ,X              WRITE NEW VECTOR
E7FC 160561           (     mon09v37.asm):00864                 LBRA    LFCR            NEW LINE & EXIT
                      (     mon09v37.asm):00865         
                      (     mon09v37.asm):00866         ;*
                      (     mon09v37.asm):00867         ;* 'CU' - CHANGE UART ADDRESS
                      (     mon09v37.asm):00868         ;*
E7FF                  (     mon09v37.asm):00869         CHGURT
E7FF 17054A           (     mon09v37.asm):00870                 LBSR    GETECH          GET AND ECHO
E802 8031             (     mon09v37.asm):00871                 SUBA    #'1'            CONVERT
E804 8101             (     mon09v37.asm):00872                 CMPA    #1              IN RANGE?
E806 1022FDC7         (     mon09v37.asm):00873                 LBHI    ERROR           INVALID
E80A 8E9F6A           (     mon09v37.asm):00874                 LDX     #UART1          POINT TO IT
E80D 48               (     mon09v37.asm):00875                 LSLA                    X2 FOR 2 BYTE ENTRIES
E80E 3086             (     mon09v37.asm):00876                 LEAX    A,X             ADVANCE TO IT
E810 170547           (     mon09v37.asm):00877                 LBSR    SPACE           SEPERATOR
E813 170483           (     mon09v37.asm):00878                 LBSR    GETADR          GET ADDRESS
E816 ED84             (     mon09v37.asm):00879                 STD     ,X              SET IT
E818 1F01             (     mon09v37.asm):00880                 TFR     D,X             SET UP POINTER
E81A 171467           (     mon09v37.asm):00881                 LBSR    INIT            INITIALIZE IT
E81D 160540           (     mon09v37.asm):00882                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00883         ;*
                      (     mon09v37.asm):00884         ;* 'DR' - DISPLAY REGISTERS
                      (     mon09v37.asm):00885         ;*
E820                  (     mon09v37.asm):00886         DISREG
E820 8EE86A           (     mon09v37.asm):00887                 LDX     #REGTXT         POINT TO TEXT
E823 108E9F6E         (     mon09v37.asm):00888                 LDY     #SAVCC          POINT TO VALUE
E827 8D31             (     mon09v37.asm):00889                 BSR     RSUB1           'CC='
E829 170513           (     mon09v37.asm):00890                 LBSR    WRLIN           ' ['
E82C CEE894           (     mon09v37.asm):00891                 LDU     #CCBITS         POINT TO BIT TABLE
E82F E63F             (     mon09v37.asm):00892                 LDB     -1,Y            GET BITS BACK
E831 3420             (     mon09v37.asm):00893                 PSHS    Y               SAVE POINTER
E833 108E0008         (     mon09v37.asm):00894                 LDY     #8              EIGHT BITS IN BYTE
E837                  (     mon09v37.asm):00895         REGB1
E837 A6C0             (     mon09v37.asm):00896                 LDA     ,U+             GET BIT IDENTIFIER
E839 58               (     mon09v37.asm):00897                 ASLB                    IS IT SET?
E83A 2502             (     mon09v37.asm):00898                 BCS     RBITS           YES, DISPLAY IT
E83C 862D             (     mon09v37.asm):00899                 LDA     #'-'            NO, DISPLAY DASH
E83E                  (     mon09v37.asm):00900         RBITS
E83E 170540           (     mon09v37.asm):00901                 LBSR    PUTCHR          OUTPUT A CHARACTER
E841 313F             (     mon09v37.asm):00902                 LEAY    -1,Y            REDUCE COUNT
E843 26F2             (     mon09v37.asm):00903                 BNE     REGB1           MORE TO GO
E845 3520             (     mon09v37.asm):00904                 PULS    Y               RESTORE Y
E847 8D11             (     mon09v37.asm):00905                 BSR     RSUB1           '] A='
E849 8D0F             (     mon09v37.asm):00906                 BSR     RSUB1           ' B='
E84B 8D0D             (     mon09v37.asm):00907                 BSR     RSUB1           ' DP='
E84D 8D13             (     mon09v37.asm):00908                 BSR     RSUB2           ' X='
E84F 8D11             (     mon09v37.asm):00909                 BSR     RSUB2           ' Y='
E851 8D0F             (     mon09v37.asm):00910                 BSR     RSUB2           ' U='
E853 8D0D             (     mon09v37.asm):00911                 BSR     RSUB2           ' PC='
E855 8D0B             (     mon09v37.asm):00912                 BSR     RSUB2           ' S='
E857 160506           (     mon09v37.asm):00913                 LBRA    LFCR            QUIT
                      (     mon09v37.asm):00914         
                      (     mon09v37.asm):00915         ;* DISPLAY 8 BIT REGISTER VALUE
E85A                  (     mon09v37.asm):00916         RSUB1
E85A 1704E2           (     mon09v37.asm):00917                 LBSR    WRLIN           OUTPUT BYTE VALUE
E85D A6A0             (     mon09v37.asm):00918                 LDA     ,Y+             GET REGISTER VALUE
E85F 1604BD           (     mon09v37.asm):00919                 LBRA    HEXOUT          OUTPUT IN HEX
                      (     mon09v37.asm):00920         ;* DISPLAY 16 BIT REGISTER VALUE
E862                  (     mon09v37.asm):00921         RSUB2
E862 1704DA           (     mon09v37.asm):00922                 LBSR    WRLIN           OUTPUT WORD VALUE
E865 ECA1             (     mon09v37.asm):00923                 LDD     ,Y++            GET REGISTER VALUE
E867 1604B1           (     mon09v37.asm):00924                 LBRA    WRDOUT          OUTPUT IN HEX
                      (     mon09v37.asm):00925         
                      (     mon09v37.asm):00926         ;* TABLE OF TEXT FOR REGISTER DISPLAY
E86A                  (     mon09v37.asm):00927         REGTXT
E86A 43433D00         (     mon09v37.asm):00928                 FCN     'CC='
E86E 205B00           (     mon09v37.asm):00929                 FCN     ' ['
E871 5D20413D00       (     mon09v37.asm):00930                 FCN     '] A='
E876 20423D00         (     mon09v37.asm):00931                 FCN     ' B='
E87A 2044503D00       (     mon09v37.asm):00932                 FCN     ' DP='
E87F 20583D00         (     mon09v37.asm):00933                 FCN     ' X='
E883 20593D00         (     mon09v37.asm):00934                 FCN     ' Y='
E887 20553D00         (     mon09v37.asm):00935                 FCN     ' U='
E88B 2050433D00       (     mon09v37.asm):00936                 FCN     ' PC='
E890 20533D00         (     mon09v37.asm):00937                 FCN     ' S='
                      (     mon09v37.asm):00938         ;* TABLE OF CONDITION CODE BIT MEANINGS
E894                  (     mon09v37.asm):00939         CCBITS
E894 454648494E5A5643 (     mon09v37.asm):00940                 FCC     'EFHINZVC'
                      (     mon09v37.asm):00941         ;*
                      (     mon09v37.asm):00942         ;* 'CR' - CHANGE REGISTER
                      (     mon09v37.asm):00943         ;*
                      (     mon09v37.asm):00944         ;* TABLE OF REGISTER NAMES
E89C                  (     mon09v37.asm):00945         CHGTAB
E89C 4341424458595550 (     mon09v37.asm):00946                 FCN     'CABDXYUPS'
     5300
                      (     mon09v37.asm):00947         ;
E8A6                  (     mon09v37.asm):00948         CHGREG
E8A6 1704A3           (     mon09v37.asm):00949                 LBSR    GETECH          GET OPERAND
E8A9 8120             (     mon09v37.asm):00950                 CMPA    #' '            A+B?
E8AB 2727             (     mon09v37.asm):00951                 BEQ     CHG4            YES
E8AD 8EE89C           (     mon09v37.asm):00952                 LDX     #CHGTAB         POINT TO TABLE
E8B0 5F               (     mon09v37.asm):00953                 CLRB                    ZERO INDICATOR
E8B1                  (     mon09v37.asm):00954         CHG1
E8B1 A184             (     mon09v37.asm):00955                 CMPA    ,X              IS THIS IT?
E8B3 2708             (     mon09v37.asm):00956                 BEQ     CHG2            YES
E8B5 5C               (     mon09v37.asm):00957                 INCB                    ADVANCE COUNT
E8B6 6D80             (     mon09v37.asm):00958                 TST     ,X+             END OF TABLE
E8B8 26F7             (     mon09v37.asm):00959                 BNE     CHG1            NO, KEEP TRYING
E8BA 16FD14           (     mon09v37.asm):00960                 LBRA    ERROR           INDICATE ERROR
E8BD                  (     mon09v37.asm):00961         CHG2
E8BD 17049A           (     mon09v37.asm):00962                 LBSR    SPACE           OUTPUT SPACE
E8C0 8E9F6E           (     mon09v37.asm):00963                 LDX     #SAVCC          POINT TO START OF REGISTERS
                      (     mon09v37.asm):00964         
                      (     mon09v37.asm):00965         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v37.asm):00966         ;       CMPB    #4              16 BIT?
E8C3 C103             (     mon09v37.asm):00967                 CMPB    #3              16 BIT?
                      (     mon09v37.asm):00968         ;-----------
E8C5 241B             (     mon09v37.asm):00969                 BHS     R16             YES
E8C7 3085             (     mon09v37.asm):00970                 LEAX    B,X             OFFSET TO ADDRESS
E8C9 170414           (     mon09v37.asm):00971                 LBSR    GETBYT          GET NEW VALUE
E8CC 1026FD01         (     mon09v37.asm):00972                 LBNE    ERROR           INVALID
E8D0 A784             (     mon09v37.asm):00973                 STA     ,X              SAVE IN REGISTER
E8D2 201A             (     mon09v37.asm):00974                 BRA     CHG3            AND QUIT
E8D4                  (     mon09v37.asm):00975         CHG4
E8D4 17045E           (     mon09v37.asm):00976                 LBSR    WRMSG           OUTPUT MESSAGE
E8D7 5B41425D2000     (     mon09v37.asm):00977                 FCN     '[AB] '
                      (     mon09v37.asm):00978         ;MODS BY JQ - UNNEEDED SPACE
                      (     mon09v37.asm):00979         ;       LBSR    SPACE           OUTPUT SPACE
                      (     mon09v37.asm):00980         ;-----------
E8DD 8E9F6F           (     mon09v37.asm):00981                 LDX     #SAVA           POINT TO 'D'
E8E0 2007             (     mon09v37.asm):00982                 BRA     R17             MAKE LIKE 16 BIT REG
E8E2                  (     mon09v37.asm):00983         R16
                      (     mon09v37.asm):00984         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v37.asm):00985         ;       LEAX    4,X             OFFSET TO 16 BIT REGISTERS
E8E2 3003             (     mon09v37.asm):00986                 LEAX    3,X             OFFSET TO 16 BIT REGISTERS
                      (     mon09v37.asm):00987         ;-----------
E8E4 C004             (     mon09v37.asm):00988                 SUBB    #4              CONVERT TO ZERO ORIGIN
E8E6 58               (     mon09v37.asm):00989                 LSLB                    DOUBLE FOR WORD VALUES
E8E7 3085             (     mon09v37.asm):00990                 LEAX    B,X             MOVE TO CORRECT OFFSET
E8E9                  (     mon09v37.asm):00991         R17
E8E9 1703AD           (     mon09v37.asm):00992                 LBSR    GETADR          GET WORD VALUE
E8EC ED84             (     mon09v37.asm):00993                 STD     ,X              SET REGISTER VALUE
E8EE                  (     mon09v37.asm):00994         CHG3
E8EE 16046F           (     mon09v37.asm):00995                 LBRA    LFCR            QUIT
                      (     mon09v37.asm):00996         ;*
                      (     mon09v37.asm):00997         ;* 'DB' - DISPLAY BREAKPOINTS
                      (     mon09v37.asm):00998         ;*
E8F1                  (     mon09v37.asm):00999         DSPBRK
E8F1 8630             (     mon09v37.asm):01000                 LDA     #'0'            START WITH BRKPT ZERO
E8F3 8E9F83           (     mon09v37.asm):01001                 LDX     #BRKTAB         POINT TO TABLE
E8F6                  (     mon09v37.asm):01002         DSPB1
E8F6 3402             (     mon09v37.asm):01003                 PSHS    A               SAVE NUMBER
E8F8 8642             (     mon09v37.asm):01004                 LDA     #'B'            PRECEDE WITH 'B'
E8FA 170484           (     mon09v37.asm):01005                 LBSR    PUTCHR          OUTPUT
E8FD A6E4             (     mon09v37.asm):01006                 LDA     ,S              GET NUMBER BACK
E8FF 17047F           (     mon09v37.asm):01007                 LBSR    PUTCHR          OUTPUT
E902 863D             (     mon09v37.asm):01008                 LDA     #'='            AND FOLLOW WITH '='
E904 17047A           (     mon09v37.asm):01009                 LBSR    PUTCHR          OUTPUT
E907 EC81             (     mon09v37.asm):01010                 LDD     ,X++            GET VALUE
E909 260A             (     mon09v37.asm):01011                 BNE     DSPB2           NON-ZERO, DISPLAY
E90B 170427           (     mon09v37.asm):01012                 LBSR    WRMSG           OUTPUT MESSAGE INSTEAD
E90E 2A2A2A2A00       (     mon09v37.asm):01013                 FCN     '****'
E913 2003             (     mon09v37.asm):01014                 BRA     DSPB3           CONTINUE
E915                  (     mon09v37.asm):01015         DSPB2
E915 170403           (     mon09v37.asm):01016                 LBSR    WRDOUT          OUTPUT VALUE
E918                  (     mon09v37.asm):01017         DSPB3
E918 17043F           (     mon09v37.asm):01018                 LBSR    SPACE           SEPERATE WITH SPACE
E91B 3001             (     mon09v37.asm):01019                 LEAX    1,X             SKIP OPCODE SAVE
E91D 3502             (     mon09v37.asm):01020                 PULS    A               RESTORE NUMBER
E91F 4C               (     mon09v37.asm):01021                 INCA                    ADVANCE
E920 8138             (     mon09v37.asm):01022                 CMPA    #'8'            BEYOND END?
E922 25D2             (     mon09v37.asm):01023                 BLO     DSPB1           NO, CONTINUE
E924 160439           (     mon09v37.asm):01024                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v37.asm):01025         ;*
                      (     mon09v37.asm):01026         ;* 'B' - SET BREAKPOINT
                      (     mon09v37.asm):01027         ;*
E927                  (     mon09v37.asm):01028         SETBRK
E927 170422           (     mon09v37.asm):01029                 LBSR    GETECH          GET CHARACTER
E92A 8030             (     mon09v37.asm):01030                 SUBA    #'0'            CONVERT TO NUMBER
E92C 8108             (     mon09v37.asm):01031                 CMPA    #8              IN RANGE?
E92E 1024FC9F         (     mon09v37.asm):01032                 LBHS    ERROR           NO, QUIT
E932 3402             (     mon09v37.asm):01033                 PSHS    A               SAVE NUMBER
E934 48               (     mon09v37.asm):01034                 LSLA                    DOUBLE FOR 16 BIT VALUES
E935 ABE0             (     mon09v37.asm):01035                 ADDA    ,S+             TRIPLE FOR OPCODE BYTE
E937 8E9F83           (     mon09v37.asm):01036                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
E93A 3086             (     mon09v37.asm):01037                 LEAX    A,X             ADVANCE TO BREAKPOINT
E93C 17041B           (     mon09v37.asm):01038                 LBSR    SPACE           SEPERATE WITH SPACE
E93F 170357           (     mon09v37.asm):01039                 LBSR    GETADR          GET VALUE
E942 ED84             (     mon09v37.asm):01040                 STD     ,X              SAVE IN TABLE
E944 160419           (     mon09v37.asm):01041                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v37.asm):01042         ;*
                      (     mon09v37.asm):01043         ;* 'S' - SINGLE STEP
                      (     mon09v37.asm):01044         ;*
E947                  (     mon09v37.asm):01045         GOSTEP
E947 17031A           (     mon09v37.asm):01046                 LBSR    GETPC           GET ADDRESS
E94A 170413           (     mon09v37.asm):01047                 LBSR    LFCR            OUTPUT MESSAGE
E94D                  (     mon09v37.asm):01048         GOSTP1
E94D 17047A           (     mon09v37.asm):01049                 LBSR    STEPDI          STEP AND DISPLAY INSTRUCTION
E950 7D9F7E           (     mon09v37.asm):01050                 TST     STPFLG          DISPLAY REGISTERS?
E953 2B03             (     mon09v37.asm):01051                 BMI     NODSR           NO, DON'T DISPLAY
E955                  (     mon09v37.asm):01052         STPREG
E955 17FEC8           (     mon09v37.asm):01053                 LBSR    DISREG          DISPLAY REGISTERS
E958                  (     mon09v37.asm):01054         NODSR
E958 170411           (     mon09v37.asm):01055                 LBSR    GETCHR          GET KEY FROM TERMINAL
E95B 813F             (     mon09v37.asm):01056                 CMPA    #'?'            DISPLAY REGS?
E95D 27F6             (     mon09v37.asm):01057                 BEQ     STPREG          IF SO, DISPLAY
E95F 8120             (     mon09v37.asm):01058                 CMPA    #' '            STEP TO NEXT?
E961 27EA             (     mon09v37.asm):01059                 BEQ     GOSTP1          IF SO, STEP
E963 811B             (     mon09v37.asm):01060                 CMPA    #$1B            EXIT STEPPING?
E965 2709             (     mon09v37.asm):01061                 BEQ     GOSTP2          IF SO, QUIT
E967 810D             (     mon09v37.asm):01062                 CMPA    #$0D            TOGGLE REGISTER DISPLAY?
E969 26ED             (     mon09v37.asm):01063                 BNE     NODSR           IF NOT, IGNORE
E96B 739F7E           (     mon09v37.asm):01064                 COM     STPFLG          TOGGLE DISPLAY FLAG
E96E 20E8             (     mon09v37.asm):01065                 BRA     NODSR           GET NEXT KEY
E970                  (     mon09v37.asm):01066         GOSTP2
E970 39               (     mon09v37.asm):01067                 RTS
                      (     mon09v37.asm):01068         ;*
                      (     mon09v37.asm):01069         ;* 'G' - GO (EXECUTE)
                      (     mon09v37.asm):01070         ;*
E971                  (     mon09v37.asm):01071         GOEXEC
E971 1702F0           (     mon09v37.asm):01072                 LBSR    GETPC           GET ADDRESS
E974 1703E9           (     mon09v37.asm):01073                 LBSR    LFCR            NEW LINE
                      (     mon09v37.asm):01074         
                      (     mon09v37.asm):01075         ;*      STEP ONE INST. BEFORE INSERTING BREAKPOINTS, SO THAT BREAKPOINTS
                      (     mon09v37.asm):01076         ;*      CAN BE USED WITHIN LOOPS ETC.
                      (     mon09v37.asm):01077         
E977 170461           (     mon09v37.asm):01078                 LBSR    STEP            STEP ONE INSTRUCTION
                      (     mon09v37.asm):01079         
                      (     mon09v37.asm):01080         ;*      INSERT BREAKPOINTS
E97A 8E9F83           (     mon09v37.asm):01081                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
E97D C608             (     mon09v37.asm):01082                 LDB     #8              EIGHT BREAKPOINTS
E97F                  (     mon09v37.asm):01083         GOEX3
E97F 10AE81           (     mon09v37.asm):01084                 LDY     ,X++            GET BREAKPOINT ADDRESS
E982 2708             (     mon09v37.asm):01085                 BEQ     GOEX4           NO BREAKPOINT, QUIT
E984 A6A4             (     mon09v37.asm):01086                 LDA     ,Y              GET OPCODE
E986 A784             (     mon09v37.asm):01087                 STA     ,X              SAVE IN TABLE
E988 863F             (     mon09v37.asm):01088                 LDA     #$3F            GET 'SWI' BREAKPOINT OPCODE
E98A A7A4             (     mon09v37.asm):01089                 STA     ,Y              SAVE IN CODE SPACE
E98C                  (     mon09v37.asm):01090         GOEX4
E98C 3001             (     mon09v37.asm):01091                 LEAX    1,X             ADVANCE TO NEXT IN TABLE
E98E 5A               (     mon09v37.asm):01092                 DECB                    REDUCE COUNT OF BRKPTS
E98F 26EE             (     mon09v37.asm):01093                 BNE     GOEX3           DO ALL EIGHT
E991 10FE9F7A         (     mon09v37.asm):01094                 LDS     SAVS            RESTORE STACK POINTER
E995 B69F6E           (     mon09v37.asm):01095                 LDA     SAVCC           GET SAVED CC
E998 F69F71           (     mon09v37.asm):01096                 LDB     SAVDP           GET SAVED DPR
E99B 3406             (     mon09v37.asm):01097                 PSHS    A,B             SAVE ON STACK FOR LAST RESTORE
E99D FC9F6F           (     mon09v37.asm):01098                 LDD     SAVA            RESTORE A, B REGISTERS
E9A0 BE9F72           (     mon09v37.asm):01099                 LDX     SAVX            RESTORE X REGISTER
E9A3 10BE9F74         (     mon09v37.asm):01100                 LDY     SAVY            RESTORE Y REGISTER
E9A7 FE9F76           (     mon09v37.asm):01101                 LDU     SAVU            RESTORE U REGISTER
E9AA 3509             (     mon09v37.asm):01102                 PULS    CC,DP           RESTORE CC + DP
E9AC 6E9F9F78         (     mon09v37.asm):01103                 JMP     [SAVPC]         EXECUTE USER PGM
                      (     mon09v37.asm):01104         ;*
                      (     mon09v37.asm):01105         ;* 'RR' - REPEATING READ
                      (     mon09v37.asm):01106         ;*
E9B0                  (     mon09v37.asm):01107         RDLOOP
E9B0 1702E6           (     mon09v37.asm):01108                 LBSR    GETADR          GET ADDRESS
E9B3 1F01             (     mon09v37.asm):01109                 TFR     D,X             SET UP 'X'
E9B5 1703A8           (     mon09v37.asm):01110                 LBSR    LFCR            NEW LINE
E9B8                  (     mon09v37.asm):01111         RDLP1
E9B8 A684             (     mon09v37.asm):01112                 LDA     ,X              READ LOCATION
E9BA 1703E2           (     mon09v37.asm):01113                 LBSR    CHKCHR          ABORT?
E9BD 26F9             (     mon09v37.asm):01114                 BNE     RDLP1           NO, ITS OK
E9BF 39               (     mon09v37.asm):01115                 RTS
                      (     mon09v37.asm):01116         ;*
                      (     mon09v37.asm):01117         ;* 'RW' - REPEATING WRITE
                      (     mon09v37.asm):01118         ;*
E9C0                  (     mon09v37.asm):01119         WRLOOP
E9C0 1702D6           (     mon09v37.asm):01120                 LBSR    GETADR          GET ADDRESS
E9C3 1F01             (     mon09v37.asm):01121                 TFR     D,X             SET UP 'X'
E9C5 170392           (     mon09v37.asm):01122                 LBSR    SPACE           SPACE OVER
E9C8 170315           (     mon09v37.asm):01123                 LBSR    GETBYT          GET DATA
E9CB 1026FC02         (     mon09v37.asm):01124                 LBNE    ERROR           INVALID
E9CF 3402             (     mon09v37.asm):01125                 PSHS    A               SAVE ACCA
E9D1 17038C           (     mon09v37.asm):01126                 LBSR    LFCR            NEW LINE
E9D4                  (     mon09v37.asm):01127         WRLP1
E9D4 A6E4             (     mon09v37.asm):01128                 LDA     ,S              GET CHAR
E9D6 A784             (     mon09v37.asm):01129                 STA     ,X              WRITE IT OUT
E9D8 1703C4           (     mon09v37.asm):01130                 LBSR    CHKCHR          ABORT COMMAND?
E9DB 26F7             (     mon09v37.asm):01131                 BNE     WRLP1           CONTINUE
E9DD 3582             (     mon09v37.asm):01132                 PULS    A,PC            GO HOME
                      (     mon09v37.asm):01133         ;*
                      (     mon09v37.asm):01134         ;* 'XR' - REPEATING 16 BIT READ
                      (     mon09v37.asm):01135         ;*
E9DF                  (     mon09v37.asm):01136         XRLOOP
E9DF 1702B7           (     mon09v37.asm):01137                 LBSR    GETADR          GET ADDRESS
E9E2 1F01             (     mon09v37.asm):01138                 TFR     D,X             SET UP 'X'
E9E4 170379           (     mon09v37.asm):01139                 LBSR    LFCR            NEW LINE
E9E7                  (     mon09v37.asm):01140         XRLP1
E9E7 EC84             (     mon09v37.asm):01141                 LDD     ,X              READ LOCATION
E9E9 1703B3           (     mon09v37.asm):01142                 LBSR    CHKCHR          ABORT?
E9EC 26F9             (     mon09v37.asm):01143                 BNE     XRLP1           NO, ITS OK
E9EE 39               (     mon09v37.asm):01144                 RTS
                      (     mon09v37.asm):01145         ;*
                      (     mon09v37.asm):01146         ;* 'XW' - REPEATING 16 BITWRITE
                      (     mon09v37.asm):01147         ;*
E9EF                  (     mon09v37.asm):01148         XWLOOP
E9EF 1702A7           (     mon09v37.asm):01149                 LBSR    GETADR          GET ADDRESS
E9F2 1F01             (     mon09v37.asm):01150                 TFR     D,X             SET UP 'X'
E9F4 170363           (     mon09v37.asm):01151                 LBSR    SPACE           SPACE OVER
E9F7 17029F           (     mon09v37.asm):01152                 LBSR    GETADR          GET DATA
E9FA 3406             (     mon09v37.asm):01153                 PSHS    A,B             SAVE ACCA
E9FC 170361           (     mon09v37.asm):01154                 LBSR    LFCR            NEW LINE
E9FF                  (     mon09v37.asm):01155         XWLP1
E9FF ECE4             (     mon09v37.asm):01156                 LDD     ,S              GET CHAR
EA01 ED84             (     mon09v37.asm):01157                 STD     ,X              WRITE IT OUT
EA03 170399           (     mon09v37.asm):01158                 LBSR    CHKCHR          ABORT COMMAND?
EA06 26F7             (     mon09v37.asm):01159                 BNE     XWLP1           CONTINUE
EA08 3586             (     mon09v37.asm):01160                 PULS    A,B,PC          GO HOME
                      (     mon09v37.asm):01161         ;*
                      (     mon09v37.asm):01162         ;* 'MT' - MEMORY TEST
                      (     mon09v37.asm):01163         ;*
EA0A 17026F           (     mon09v37.asm):01164         RAMTEST LBSR    GETRNG          GET ADDRESS RANGE
EA0D FD9F7C           (     mon09v37.asm):01165                 STD     TEMP            SAVE ENDING ADDRESS
EA10 CCFFFF           (     mon09v37.asm):01166                 LDD     #-1             BEGIN WITH NEGATIVE 1
EA13 FD9F9B           (     mon09v37.asm):01167                 STD     DSPBUF          SAVE PASS COUNT
EA16 170347           (     mon09v37.asm):01168                 LBSR    LFCR            NEW LINE
EA19 1F12             (     mon09v37.asm):01169                 TFR     X,Y             COPY STARTING ADDRESS
EA1B 6F80             (     mon09v37.asm):01170         RAM0    CLR     ,X+             ZAP ONE BYTE
EA1D BC9F7C           (     mon09v37.asm):01171                 CMPX    TEMP            ARE WE OVER?
EA20 23F9             (     mon09v37.asm):01172                 BLS     RAM0            NO, CLEAR EM ALL
EA22 1F21             (     mon09v37.asm):01173         RAM1    TFR     Y,X             RESET STARTING ADDRESS
EA24 860D             (     mon09v37.asm):01174                 LDA     #$0D            GET CR
EA26 170358           (     mon09v37.asm):01175                 LBSR    PUTCHR          BACK TO START OF LINE
EA29 170309           (     mon09v37.asm):01176                 LBSR    WRMSG           OUTPUT MESSAGE
EA2C 506173733A2000   (     mon09v37.asm):01177                 FCN     'Pass: '
EA33 FC9F9B           (     mon09v37.asm):01178                 LDD     DSPBUF          GET COUNTER
EA36 C30001           (     mon09v37.asm):01179                 ADDD    #1              ADVANCE PASS COUNT
EA39 FD9F9B           (     mon09v37.asm):01180                 STD     DSPBUF          RESAVE
EA3C 1702DC           (     mon09v37.asm):01181                 LBSR    WRDOUT          OUTPUT
EA3F 170318           (     mon09v37.asm):01182                 LBSR    SPACE           SPACE OVER
EA42 17035A           (     mon09v37.asm):01183         RAM2    LBSR    CHKCHR          CHARACTER READY?
EA45 271C             (     mon09v37.asm):01184                 BEQ     RAM5            ESCAPE, QUIT & RESTART MONITOR
EA47 F69F9C           (     mon09v37.asm):01185                 LDB     DSPBUF+1        GET EXPECTED VALUE
EA4A E184             (     mon09v37.asm):01186                 CMPB    ,X              DID IT KEEP ITS VALUE
EA4C 264E             (     mon09v37.asm):01187                 BNE     RAM7            NO, ERROR
EA4E 8601             (     mon09v37.asm):01188                 LDA     #%00000001      FIRST DATA VALUE
EA50 A784             (     mon09v37.asm):01189         RAM3    STA     ,X              RESAVE IT
EA52 A184             (     mon09v37.asm):01190                 CMPA    ,X              SAME ?
EA54 2613             (     mon09v37.asm):01191                 BNE     RAM6            FAILED
EA56 48               (     mon09v37.asm):01192                 LSLA                    SHIFT THE BIT
EA57 26F7             (     mon09v37.asm):01193                 BNE     RAM3            CONTINUE TILL ALL DONE
EA59 5C               (     mon09v37.asm):01194         RAM4    INCB                    ADVANCE TO NEXT VALUE
EA5A E780             (     mon09v37.asm):01195                 STB     ,X+             SAVE REGISTER
EA5C BC9F7C           (     mon09v37.asm):01196                 CMPX    TEMP            ARE WE IN RANGE?
EA5F 23E1             (     mon09v37.asm):01197                 BLS     RAM2            YES, ITS OK
EA61 20BF             (     mon09v37.asm):01198                 BRA     RAM1            AND RESTART
EA63 1702FA           (     mon09v37.asm):01199         RAM5    LBSR    LFCR            NEW LINE
EA66 16FB2A           (     mon09v37.asm):01200                 LBRA    MAIN            AND RESTART MONITOR
                      (     mon09v37.asm):01201         ;* VERIFY OF LOCATION FAILED
EA69 3402             (     mon09v37.asm):01202         RAM6    PSHS    A               SAVE VALUE WRITTEN
EA6B 1702C7           (     mon09v37.asm):01203                 LBSR    WRMSG           OUTPUT MESSAGE
EA6E 416464723A2000   (     mon09v37.asm):01204                 FCN             'Addr: '
EA75 1F10             (     mon09v37.asm):01205                 TFR     X,D             GET ADDRESS
EA77 1702A1           (     mon09v37.asm):01206                 LBSR    WRDOUT          OUTPUT
EA7A 1702B8           (     mon09v37.asm):01207                 LBSR    WRMSG           OUTPUT MESSAGE
EA7D 2C2057726F74653A (     mon09v37.asm):01208                 FCN             ', Wrote: '
     2000
EA87 3502             (     mon09v37.asm):01209                 PULS    A               RESTORE VALUE
EA89 170293           (     mon09v37.asm):01210                 LBSR    HEXOUT          OUTPUT
EA8C 1702A6           (     mon09v37.asm):01211                 LBSR    WRMSG           OUTPUT MESSAGE
EA8F 2C20526561643A20 (     mon09v37.asm):01212                 FCN             ', Read: '
     00
EA98 A684             (     mon09v37.asm):01213                 LDA     ,X              GET VALUE READ
EA9A 2033             (     mon09v37.asm):01214                 BRA     RAM8            CONTINUE
                      (     mon09v37.asm):01215         ;* DATA WAS CORRUPTED BY OTHER WRITES
EA9C 170296           (     mon09v37.asm):01216         RAM7    LBSR    WRMSG           OUTPUT MESSAGE
EA9F 416464723A2000   (     mon09v37.asm):01217                 FCN             'Addr: '
EAA6 1F10             (     mon09v37.asm):01218                 TFR     X,D             GET ADDR
EAA8 170270           (     mon09v37.asm):01219                 LBSR    WRDOUT          OUTPUT
EAAB 170287           (     mon09v37.asm):01220                 LBSR    WRMSG           OUTPUT MESSAGE
EAAE 2C20457870656374 (     mon09v37.asm):01221                 FCN             ', Expected: '
     65643A2000
EABB B69F9C           (     mon09v37.asm):01222                 LDA     DSPBUF+1        GET VALUE
EABE 17025E           (     mon09v37.asm):01223                 LBSR    HEXOUT          OUTPUT
EAC1 170271           (     mon09v37.asm):01224                 LBSR    WRMSG           OUTPUT MESSAGE
EAC4 2C20526561643A20 (     mon09v37.asm):01225                 FCN             ', Read: '
     00
EACD A684             (     mon09v37.asm):01226                 LDA     ,X              GET VALUE BACK
EACF 17024D           (     mon09v37.asm):01227         RAM8    LBSR    HEXOUT          OUTPUT VALUE
EAD2 17028B           (     mon09v37.asm):01228                 LBSR    LFCR            NEW LINE
EAD5 F69F9C           (     mon09v37.asm):01229                 LDB     DSPBUF+1        GET CORRECT NEXT VALUE
EAD8 16FF7E           (     mon09v37.asm):01230                 LBRA    RAM4
                      (     mon09v37.asm):01231         ;*
                      (     mon09v37.asm):01232         ;* '+' - HEXIDECIMAL ADDITION
                      (     mon09v37.asm):01233         ;*
EADB                  (     mon09v37.asm):01234         HEXADD
EADB 1701BB           (     mon09v37.asm):01235                 LBSR    GETADR          GET FIRST VALUE
EADE 3406             (     mon09v37.asm):01236                 PSHS    A,B             SAVE IT
EAE0 862B             (     mon09v37.asm):01237                 LDA     #'+'            PLUS SIGN
EAE2 17029C           (     mon09v37.asm):01238                 LBSR    PUTCHR          DISPLAY
EAE5 1701B1           (     mon09v37.asm):01239                 LBSR    GETADR          GET SECOND VALUE
EAE8 E3E4             (     mon09v37.asm):01240                 ADDD    ,S              PERFORM ADDITION
EAEA 2013             (     mon09v37.asm):01241                 BRA     HEXSHO          DISPLAY IT
                      (     mon09v37.asm):01242         ;*
                      (     mon09v37.asm):01243         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (     mon09v37.asm):01244         ;*
EAEC                  (     mon09v37.asm):01245         HEXSUB
EAEC 1701AA           (     mon09v37.asm):01246                 LBSR    GETADR          GET FIRST
EAEF 3406             (     mon09v37.asm):01247                 PSHS    A,B             SAVE IT
EAF1 862D             (     mon09v37.asm):01248                 LDA     #'-'            MINUS SIGN
EAF3 17028B           (     mon09v37.asm):01249                 LBSR    PUTCHR          DISPLAY
EAF6 1701A0           (     mon09v37.asm):01250                 LBSR    GETADR          GET SECOND ADDRESS
EAF9 3406             (     mon09v37.asm):01251                 PSHS    A,B             SAVE IT
EAFB EC62             (     mon09v37.asm):01252                 LDD     2,S             GET FIRST VALUE
EAFD A3E1             (     mon09v37.asm):01253                 SUBD    ,S++            PERFORM SUBTRACTION
EAFF                  (     mon09v37.asm):01254         HEXSHO
EAFF EDE4             (     mon09v37.asm):01255                 STD     ,S              SAVE RESULT
EB01 863D             (     mon09v37.asm):01256                 LDA     #'='            EQUALS SIGN
EB03 17027B           (     mon09v37.asm):01257                 LBSR    PUTCHR          DISPLAY
EB06 3506             (     mon09v37.asm):01258                 PULS    A,B             RESTORE RESULT
EB08 170210           (     mon09v37.asm):01259                 LBSR    WRDOUT          OUTPUT
EB0B 160252           (     mon09v37.asm):01260                 LBRA    LFCR            NEW LINE & RETURN
                      (     mon09v37.asm):01261         ;*
                      (     mon09v37.asm):01262         ;* '?' - HELP COMMAND
                      (     mon09v37.asm):01263         ;*
EB0E                  (     mon09v37.asm):01264         HELP
EB0E 8EF8FC           (     mon09v37.asm):01265                 LDX     #HTEXT          POINT TO HELP TEXT
EB11                  (     mon09v37.asm):01266         HLP1
EB11 C619             (     mon09v37.asm):01267                 LDB     #25             COLUMN COUNTER
EB13                  (     mon09v37.asm):01268         HLP2
EB13 A680             (     mon09v37.asm):01269                 LDA     ,X+             GET CHAR FROM TEXT
EB15 2718             (     mon09v37.asm):01270                 BEQ     HLP4            EXIT THIS LINE
EB17 817C             (     mon09v37.asm):01271                 CMPA    #'|'            SEPERATOR?
EB19 2706             (     mon09v37.asm):01272                 BEQ     HLP3            YES, EXIT
EB1B 170263           (     mon09v37.asm):01273                 LBSR    PUTCHR          OUTPUT
EB1E 5A               (     mon09v37.asm):01274                 DECB                    BACKUP
EB1F 20F2             (     mon09v37.asm):01275                 BRA     HLP2            NEXT
EB21                  (     mon09v37.asm):01276         HLP3
EB21 170236           (     mon09v37.asm):01277                 LBSR    SPACE           OUTPUT SPACE
EB24 5A               (     mon09v37.asm):01278                 DECB                    REDUCE COUNT
EB25 26FA             (     mon09v37.asm):01279                 BNE     HLP3            KEEP GOING
EB27 17020B           (     mon09v37.asm):01280                 LBSR    WRMSG           OUTPUT MESSAGE
EB2A 2D2000           (     mon09v37.asm):01281                 FCN     '- '            SEPERATOR
EB2D 20E4             (     mon09v37.asm):01282                 BRA     HLP2            AND CONTINUE
EB2F                  (     mon09v37.asm):01283         HLP4
EB2F 17022E           (     mon09v37.asm):01284                 LBSR    LFCR            NEW LINE
EB32 17026A           (     mon09v37.asm):01285                 LBSR    CHKCHR          TEST FOR CHARACTER ENTERED
EB35 2704             (     mon09v37.asm):01286                 BEQ     HLP5            IF SO, EXIT
EB37 A684             (     mon09v37.asm):01287                 LDA     ,X              IS THIS THE END?
EB39 2AD6             (     mon09v37.asm):01288                 BPL     HLP1            NO, KEEP GOING
EB3B                  (     mon09v37.asm):01289         HLP5
EB3B 39               (     mon09v37.asm):01290                 RTS
                      (     mon09v37.asm):01291         
                      (     mon09v37.asm):01292         ;******************************************************************************
                      (     mon09v37.asm):01293         ;* 'T' - TRANSPARENT MODE
                      (     mon09v37.asm):01294         ;******************************************************************************
     EB3C             (     mon09v37.asm):01295         TMODE   EQU     *               TERMINAL ROUTINE
EB3C                  (     mon09v37.asm):01296         TM1
EB3C BE9F6A           (     mon09v37.asm):01297                 LDX     >UART1          POINT TO MAIN UART
EB3F                  (     mon09v37.asm):01298         TM2
EB3F 17114B           (     mon09v37.asm):01299                 LBSR    READ            TEST FOR CHAR FROM TERMINAL
EB42 260C             (     mon09v37.asm):01300                 BNE     TM3             NONE, IGNORE
EB44 811B             (     mon09v37.asm):01301                 CMPA    #$1B            ESCAPE?
EB46 10270216         (     mon09v37.asm):01302                 LBEQ    LFCR            NEW LINE, AND RETURN
EB4A BE9F6C           (     mon09v37.asm):01303                 LDX     >UART2          POINT TO UART 2
EB4D 17114B           (     mon09v37.asm):01304                 LBSR    WRITE           OUTPUT TO AUX PORT
EB50                  (     mon09v37.asm):01305         TM3
EB50 BE9F6C           (     mon09v37.asm):01306                 LDX     >UART2          POINT TO UART 2
EB53 171137           (     mon09v37.asm):01307                 LBSR    READ            TEST FOR CHAR FROM AUX
EB56 26E4             (     mon09v37.asm):01308                 BNE     TM1             NONE, IGNORE
EB58 BE9F6A           (     mon09v37.asm):01309                 LDX     >UART1          POINT TO UART 1
EB5B 17113D           (     mon09v37.asm):01310                 LBSR    WRITE           OUTPUT TO TERMINAL
EB5E 20DF             (     mon09v37.asm):01311                 BRA     TM2             GET NEXT CHAR
                      (     mon09v37.asm):01312         
                      (     mon09v37.asm):01313         ;******************************************************************************
                      (     mon09v37.asm):01314         ;* 'L' - LOAD
                      (     mon09v37.asm):01315         ;* FIXED LEAD OUT BEING ECHOED (MOSTLY)  4/4/23 DC
                      (     mon09v37.asm):01316         ;******************************************************************************
EB60                  (     mon09v37.asm):01317         LOAD
EB60 B69F69           (     mon09v37.asm):01318                 LDA     IOCON                   ; GET I/O CONFIG
EB63 3402             (     mon09v37.asm):01319                 PSHS    A                       ; SAVE
EB65 1701F8           (     mon09v37.asm):01320                 LBSR    LFCR                    ; NEW LINE
EB68                  (     mon09v37.asm):01321         DLO1
EB68 7F9F69           (     mon09v37.asm):01322                 CLR     IOCON                   : INDICATE NO OUTPUT, READ UART
EB6B 8D16             (     mon09v37.asm):01323                 BSR     DLOAD                   ; DOWNLOAD RECORD
EB6D 240C             (     mon09v37.asm):01324                 BCC     DLO2                    ; END
EB6F A6E4             (     mon09v37.asm):01325                 LDA     ,S                      ; GET OLD I/O CONFIG
EB71 B79F69           (     mon09v37.asm):01326                 STA     IOCON                   ; RESET
EB74 862E             (     mon09v37.asm):01327                 LDA     #'.'                    ; GET DOT
EB76 170208           (     mon09v37.asm):01328                 LBSR    PUTCHR                  ; OUTPUT
EB79 20ED             (     mon09v37.asm):01329                 BRA     DLO1                    ; CONTINUE
EB7B                  (     mon09v37.asm):01330         DLO2
EB7B 3502             (     mon09v37.asm):01331                 PULS    A                       ; RESTORE A
EB7D B79F69           (     mon09v37.asm):01332                 STA     IOCON                   ; SAVE
EB80 1601DD           (     mon09v37.asm):01333                 LBRA    LFCR                    ; New line & return
                      (     mon09v37.asm):01334         ;
                      (     mon09v37.asm):01335         ;* Download a record in either MOTOROLA or INTEL hex format
EB83                  (     mon09v37.asm):01336         DLOAD
EB83 1701E6           (     mon09v37.asm):01337                 LBSR    GETCHR                  ; Get a character
EB86 813A             (     mon09v37.asm):01338                 CMPA    #':'                    ; Start of INTEL record?
EB88 10270081         (     mon09v37.asm):01339                 LBEQ    DLINT                   ; Yes, download INTEL
EB8C 8153             (     mon09v37.asm):01340                 CMPA    #'S'                    ; Start of MOTOROLA record?
EB8E 26F3             (     mon09v37.asm):01341                 BNE     DLOAD                   ; No, keep looking
                      (     mon09v37.asm):01342         ;
                      (     mon09v37.asm):01343         ;* Download a record in MOTOROLA hex format
EB90                  (     mon09v37.asm):01344         DLMOT
EB90 1701D9           (     mon09v37.asm):01345                 LBSR    GETCHR                  ; GET NEXT CHAR
EB93 8130             (     mon09v37.asm):01346                 CMPA    #'0'                    ; HEADER RECORD?
EB95 27EC             (     mon09v37.asm):01347                 BEQ     DLOAD                   ; SKIP IT
EB97 8135             (     mon09v37.asm):01348                 CMPA    #'5'                    ; COUNT RECORD?
EB99 27E8             (     mon09v37.asm):01349                 BEQ     DLOAD                   ; SKIP IT       
EB9B 8139             (     mon09v37.asm):01350                 CMPA    #'9'                    ; END OF FILE?
EB9D 275E             (     mon09v37.asm):01351                 BEQ     DLMEOF                  ; END OF FILE
EB9F 8131             (     mon09v37.asm):01352                 CMPA    #'1'                    ; DATA RECORD?
EBA1 2642             (     mon09v37.asm):01353                 BNE     LODERR                  ; LOAD ERROR
EBA3 17013A           (     mon09v37.asm):01354                 LBSR    GETBYT                  ; GET LENGTH
EBA6 263D             (     mon09v37.asm):01355                 BNE     LODERR                  ; Report error
EBA8 B79F7C           (     mon09v37.asm):01356                 STA     TEMP                    ; START CHECKSUM
EBAB 8003             (     mon09v37.asm):01357                 SUBA    #3                      ; CONVERT
EBAD B79F7D           (     mon09v37.asm):01358                 STA     TEMP+1                  ; Set length
EBB0 17012D           (     mon09v37.asm):01359                 LBSR    GETBYT                  ; Get first byte of address
EBB3 2630             (     mon09v37.asm):01360                 BNE     LODERR                  ; Report error
EBB5 1F89             (     mon09v37.asm):01361                 TFR     A,B                     ; Save for later
EBB7 BB9F7C           (     mon09v37.asm):01362                 ADDA    TEMP                    ; Include in checksum
EBBA B79F7C           (     mon09v37.asm):01363                 STA     TEMP                    ; Resave
EBBD 170120           (     mon09v37.asm):01364                 LBSR    GETBYT                  ; Get next byte of address
EBC0 2623             (     mon09v37.asm):01365                 BNE     LODERR                  ; Report error
EBC2 1E89             (     mon09v37.asm):01366                 EXG     A,B                     ; Swap
EBC4 1F01             (     mon09v37.asm):01367                 TFR     D,X                     ; Set pointer
EBC6 FB9F7C           (     mon09v37.asm):01368                 ADDB    TEMP                    ; Include in checksum
EBC9 F79F7C           (     mon09v37.asm):01369                 STB     TEMP                    ; Resave checksum
EBCC                  (     mon09v37.asm):01370         DLMOT1
EBCC 170111           (     mon09v37.asm):01371                 LBSR    GETBYT                  ; Get a data byte
EBCF A780             (     mon09v37.asm):01372                 STA     ,X+                     ; Save in RAM
EBD1 BB9F7C           (     mon09v37.asm):01373                 ADDA    TEMP                    ; Include checksum
EBD4 B79F7C           (     mon09v37.asm):01374                 STA     TEMP                    ; Resave
EBD7 7A9F7D           (     mon09v37.asm):01375                 DEC     TEMP+1                  ; Reduce length
EBDA 26F0             (     mon09v37.asm):01376                 BNE     DLMOT1                  ; Do them all
EBDC 170101           (     mon09v37.asm):01377                 LBSR    GETBYT                  ; Get a byte
EBDF BB9F7C           (     mon09v37.asm):01378                 ADDA    TEMP                    ; Add computed checksum
EBE2 4C               (     mon09v37.asm):01379                 INCA                            ; Test for success
EBE3 2725             (     mon09v37.asm):01380                 BEQ     DLRTS                   ; Download OK
                      (     mon09v37.asm):01381         ;
                      (     mon09v37.asm):01382         ;* Error occured on loading
EBE5                  (     mon09v37.asm):01383         LODERR
EBE5 8603             (     mon09v37.asm):01384                 LDA     #3                      ; GET DEFAULT I/O
EBE7 B79F69           (     mon09v37.asm):01385                 STA     IOCON                   ; SET I/O
EBEA 170148           (     mon09v37.asm):01386                 LBSR    WRMSG                   ; OUTPUT
EBED 203F4C6F61642065 (     mon09v37.asm):01387                 FCC     ' ?Load error'          
     72726F72
EBF9 FF               (     mon09v37.asm):01388                 FCB     $FF
EBFA 16F996           (     mon09v37.asm):01389                 LBRA    MAIN                    ; BACK FOR COMMAND
                      (     mon09v37.asm):01390         
                      (     mon09v37.asm):01391         ;* Read out the end of the file (simply reads until buffer is empty)
EBFD                  (     mon09v37.asm):01392         DLMEOF
EBFD 17016C           (     mon09v37.asm):01393                 LBSR    GETCHR                  ; load a character
EC00 810A             (     mon09v37.asm):01394                 CMPA    #$0A                    ; LF?
EC02 2708             (     mon09v37.asm):01395                 BEQ     DLEOF                   ; WE ARE DONE
EC04 810D             (     mon09v37.asm):01396                 CMPA    #$0D                    ; CR? (JUST INCASE?)
EC06 2704             (     mon09v37.asm):01397                 BEQ     DLEOF                   ; WE ARE DONE
EC08 20F3             (     mon09v37.asm):01398                 BRA     DLMEOF                  ; WE ARE NOT DONE
                      (     mon09v37.asm):01399         
                      (     mon09v37.asm):01400         ;
                      (     mon09v37.asm):01401         ;* Return indicating another record
EC0A                  (     mon09v37.asm):01402         DLRTS
EC0A 1A01             (     mon09v37.asm):01403                 ORCC    #$01                    ; SET 'C' FLAG
EC0C                  (     mon09v37.asm):01404         DLEOF
EC0C 39               (     mon09v37.asm):01405                 RTS                             ; RETURN TO CALLER
                      (     mon09v37.asm):01406         
                      (     mon09v37.asm):01407         ;
                      (     mon09v37.asm):01408         ;* Download record in INTEL format
EC0D                  (     mon09v37.asm):01409         DLINT
EC0D 1700D0           (     mon09v37.asm):01410                 LBSR    GETBYT                  ; Get count
EC10 26D3             (     mon09v37.asm):01411                 BNE     LODERR                  ; Report error
EC12 B79F7C           (     mon09v37.asm):01412                 STA     TEMP                    ; Start checksum
EC15 B79F7D           (     mon09v37.asm):01413                 STA     TEMP+1                  ; Record length
EC18 8100             (     mon09v37.asm):01414                 CMPA    #0                      ; Test & clear C
EC1A 27E1             (     mon09v37.asm):01415                 BEQ     DLMEOF                  ; End of file
                      (     mon09v37.asm):01416         ;* Get address
EC1C 1700C1           (     mon09v37.asm):01417                 LBSR    GETBYT                  ; Get first byte of address
EC1F 26C4             (     mon09v37.asm):01418                 BNE     LODERR                  ; Report error
EC21 1F89             (     mon09v37.asm):01419                 TFR     A,B                     ; Save for later
EC23 BB9F7C           (     mon09v37.asm):01420                 ADDA    TEMP                    ; Include in checksum
EC26 B79F7C           (     mon09v37.asm):01421                 STA     TEMP                    ; Resave
EC29 1700B4           (     mon09v37.asm):01422                 LBSR    GETBYT                  ; Get next byte of address
EC2C 26B7             (     mon09v37.asm):01423                 BNE     LODERR                  ; Report error
EC2E 1E89             (     mon09v37.asm):01424                 EXG     A,B                     ; Swap
EC30 1F01             (     mon09v37.asm):01425                 TFR     D,X                     ; Set pointer
EC32 FB9F7C           (     mon09v37.asm):01426                 ADDB    TEMP                    ; Include in checksum
EC35 F79F7C           (     mon09v37.asm):01427                 STB     TEMP                    ; Resave checksum
                      (     mon09v37.asm):01428         ;* Get record type
EC38 1700A5           (     mon09v37.asm):01429                 LBSR    GETBYT                  ; Get type value
EC3B 26A8             (     mon09v37.asm):01430                 BNE     LODERR                  ; Report error
EC3D BB9F7C           (     mon09v37.asm):01431                 ADDA    TEMP                    ; Include checksum
EC40 B79F7C           (     mon09v37.asm):01432                 STA     TEMP                    ; Resave checksum
                      (     mon09v37.asm):01433         ;* Get data bytes
EC43                  (     mon09v37.asm):01434         DLINT1
EC43 17009A           (     mon09v37.asm):01435                 LBSR    GETBYT                  ; Get data byte
EC46 269D             (     mon09v37.asm):01436                 BNE     LODERR                  ; Report error
EC48 A780             (     mon09v37.asm):01437                 STA     ,X+                     ; Write to memory
EC4A BB9F7C           (     mon09v37.asm):01438                 ADDA    TEMP                    ; Include checksum
EC4D B79F7C           (     mon09v37.asm):01439                 STA     TEMP                    ; Resave checksum
EC50 7A9F7D           (     mon09v37.asm):01440                 DEC     TEMP+1                  ; Reduce length
EC53 26EE             (     mon09v37.asm):01441                 BNE     DLINT1                  ; Do them all
                      (     mon09v37.asm):01442         ;* Get checksum
EC55 BDECE0           (     mon09v37.asm):01443                 JSR     GETBYT                  ; Read a byte
EC58 1026FF89         (     mon09v37.asm):01444                 LBNE    LODERR                  ; Report error
EC5C BB9F7C           (     mon09v37.asm):01445                 ADDA    TEMP                    ; Include checksum
EC5F 27A9             (     mon09v37.asm):01446                 BEQ     DLRTS                   ; Report success
EC61 16FF81           (     mon09v37.asm):01447                 LBRA    LODERR                  ; Report failure
                      (     mon09v37.asm):01448         
                      (     mon09v37.asm):01449         ;*
                      (     mon09v37.asm):01450         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (     mon09v37.asm):01451         ;*
EC64                  (     mon09v37.asm):01452         GETPC
EC64 8D3A             (     mon09v37.asm):01453                 BSR     GETAD1          Get address
EC66 2710             (     mon09v37.asm):01454                 BEQ     GETPC1          Normal data
EC68 8120             (     mon09v37.asm):01455                 CMPA    #' '            Space?
EC6A 2631             (     mon09v37.asm):01456                 BNE     GETERR          Report error
EC6C 1700C6           (     mon09v37.asm):01457                 LBSR    WRMSG           Output message
EC6F 2D3E00           (     mon09v37.asm):01458                 FCN     '->'            Display address
EC72 FC9F78           (     mon09v37.asm):01459                 LDD     SAVPC           Get PC value
EC75 1600A3           (     mon09v37.asm):01460                 LBRA    WRDOUT          Display
EC78                  (     mon09v37.asm):01461         GETPC1
EC78 FD9F78           (     mon09v37.asm):01462                 STD     SAVPC           Set new PC
EC7B 39               (     mon09v37.asm):01463                 RTS
                      (     mon09v37.asm):01464         ;*
                      (     mon09v37.asm):01465         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (     mon09v37.asm):01466         ;*
EC7C                  (     mon09v37.asm):01467         GETRNG
EC7C 8D1B             (     mon09v37.asm):01468                 BSR     GETADR          Get first address
EC7E 1F01             (     mon09v37.asm):01469                 TFR     D,X             Save in X
EC80 862C             (     mon09v37.asm):01470                 LDA     #','            Separator
EC82 1700FC           (     mon09v37.asm):01471                 LBSR    PUTCHR          Display
EC85 8D19             (     mon09v37.asm):01472                 BSR     GETAD1          Get second address
EC87 2783             (     mon09v37.asm):01473                 BEQ     DLEOF           Normal data
EC89 8120             (     mon09v37.asm):01474                 CMPA    #' '            Space?
EC8B 2610             (     mon09v37.asm):01475                 BNE     GETERR          No, report error
EC8D 1700A5           (     mon09v37.asm):01476                 LBSR    WRMSG           Output message
EC90 4646464600       (     mon09v37.asm):01477                 FCN     'FFFF'
EC95 CCFFFF           (     mon09v37.asm):01478                 LDD     #$FFFF          Assume top of RAM
EC98 39               (     mon09v37.asm):01479                 RTS
                      (     mon09v37.asm):01480         ;*
                      (     mon09v37.asm):01481         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (     mon09v37.asm):01482         ;*
EC99                  (     mon09v37.asm):01483         GETADR
EC99 8D05             (     mon09v37.asm):01484                 BSR     GETAD1          Get word value
EC9B 270F             (     mon09v37.asm):01485                 BEQ     GETAD2          Its OK
EC9D                  (     mon09v37.asm):01486         GETERR
EC9D 16F931           (     mon09v37.asm):01487                 LBRA    ERROR           Report error
                      (     mon09v37.asm):01488         ;* Get word value without error checking
ECA0                  (     mon09v37.asm):01489         GETAD1
ECA0 8D3E             (     mon09v37.asm):01490                 BSR     GETBYT          Get HIGH byte
ECA2 2609             (     mon09v37.asm):01491                 BNE     GETAD3          Test for special register
ECA4 1F89             (     mon09v37.asm):01492                 TFR     A,B             Copy for later
ECA6 8D38             (     mon09v37.asm):01493                 BSR     GETBYT          Get LOW byte
ECA8 26F3             (     mon09v37.asm):01494                 BNE     GETERR          Report error
ECAA 1E89             (     mon09v37.asm):01495                 EXG     A,B             Correct order
ECAC                  (     mon09v37.asm):01496         GETAD2
ECAC 39               (     mon09v37.asm):01497                 RTS
                      (     mon09v37.asm):01498         ;* Handle special register names
ECAD                  (     mon09v37.asm):01499         GETAD3
ECAD 3410             (     mon09v37.asm):01500                 PSHS    X               Save X
ECAF BE9F72           (     mon09v37.asm):01501                 LDX     SAVX            Assume X
ECB2 8158             (     mon09v37.asm):01502                 CMPA    #'X'            Is it X?
ECB4 271C             (     mon09v37.asm):01503                 BEQ     GETAD4          Yes
ECB6 BE9F74           (     mon09v37.asm):01504                 LDX     SAVY            Assume Y
ECB9 8159             (     mon09v37.asm):01505                 CMPA    #'Y'            Is it Y?
ECBB 2715             (     mon09v37.asm):01506                 BEQ     GETAD4          Yes
ECBD BE9F76           (     mon09v37.asm):01507                 LDX     SAVU            Assume U
ECC0 8155             (     mon09v37.asm):01508                 CMPA    #'U'            Is it U?
ECC2 270E             (     mon09v37.asm):01509                 BEQ     GETAD4          Yes
ECC4 BE9F72           (     mon09v37.asm):01510                 LDX     SAVX            Assume S
ECC7 8153             (     mon09v37.asm):01511                 CMPA    #'S'            Is it S?
ECC9 2707             (     mon09v37.asm):01512                 BEQ     GETAD4          Yes
ECCB BE9F78           (     mon09v37.asm):01513                 LDX     SAVPC           Assume PC?
ECCE 8150             (     mon09v37.asm):01514                 CMPA    #'P'            Is it PC?
ECD0 260C             (     mon09v37.asm):01515                 BNE     GETAD5          No, error
ECD2                  (     mon09v37.asm):01516         GETAD4
ECD2 863D             (     mon09v37.asm):01517                 LDA     #'='            Separator
ECD4 1700AA           (     mon09v37.asm):01518                 LBSR    PUTCHR          Echo it
ECD7 1F10             (     mon09v37.asm):01519                 TFR     X,D             D = value
ECD9 8D40             (     mon09v37.asm):01520                 BSR     WRDOUT          Display it
ECDB 4F               (     mon09v37.asm):01521                 CLRA                    Set 'Z'
ECDC 1F10             (     mon09v37.asm):01522                 TFR     X,D             Get value back
ECDE                  (     mon09v37.asm):01523         GETAD5
ECDE 3590             (     mon09v37.asm):01524                 PULS    X,PC            Restore & return
                      (     mon09v37.asm):01525         
                      (     mon09v37.asm):01526         ;*
                      (     mon09v37.asm):01527         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (     mon09v37.asm):01528         ;*
ECE0                  (     mon09v37.asm):01529         GETBYT
ECE0 8D20             (     mon09v37.asm):01530                 BSR     GETNIB          Get FIRST nibble
ECE2 2611             (     mon09v37.asm):01531                 BNE     GETB3           Invalid, test for quote
ECE4 48               (     mon09v37.asm):01532                 LSLA                    Rotate
ECE5 48               (     mon09v37.asm):01533                 LSLA                    into
ECE6 48               (     mon09v37.asm):01534                 LSLA                    high
ECE7 48               (     mon09v37.asm):01535                 LSLA                    nibble
ECE8 3402             (     mon09v37.asm):01536                 PSHS    A               Save for later
ECEA 8D16             (     mon09v37.asm):01537                 BSR     GETNIB          Get SECOND nibble
ECEC 2604             (     mon09v37.asm):01538                 BNE     GETB2           Report error
ECEE AAE4             (     mon09v37.asm):01539                 ORA     ,S              Include high
ECF0                  (     mon09v37.asm):01540         GETB4
ECF0 1A04             (     mon09v37.asm):01541                 ORCC    #$04            Indicate success (SET 'Z')
ECF2                  (     mon09v37.asm):01542         GETB2
ECF2 3261             (     mon09v37.asm):01543                 LEAS    1,S             Skip saved value
ECF4                  (     mon09v37.asm):01544         GETB1
ECF4 39               (     mon09v37.asm):01545                 RTS
ECF5                  (     mon09v37.asm):01546         GETB3
ECF5 8127             (     mon09v37.asm):01547                 CMPA    #$27            Single quote?
ECF7 26FB             (     mon09v37.asm):01548                 BNE     GETB1           No, abort
ECF9 170070           (     mon09v37.asm):01549                 LBSR    GETCHR          Get ASCII character
ECFC 170082           (     mon09v37.asm):01550                 LBSR    PUTCHR          Echo on terminal
ECFF 1A04             (     mon09v37.asm):01551                 ORCC    #$04            Indicate success (SET 'Z')
ED01 39               (     mon09v37.asm):01552                 RTS
                      (     mon09v37.asm):01553         
                      (     mon09v37.asm):01554         
                      (     mon09v37.asm):01555         ;*
                      (     mon09v37.asm):01556         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (     mon09v37.asm):01557         ;*
ED02                  (     mon09v37.asm):01558         GETNIB
ED02 170047           (     mon09v37.asm):01559                 LBSR    GETECH          Get character
ED05 8030             (     mon09v37.asm):01560                 SUBA    #'0'            Convert numbers
ED07 8109             (     mon09v37.asm):01561                 CMPA    #9              Numeric?
ED09 230A             (     mon09v37.asm):01562                 BLS     GETN1           Yes, OK
ED0B 8007             (     mon09v37.asm):01563                 SUBA    #7              Convert alphas
ED0D 810A             (     mon09v37.asm):01564                 CMPA    #$A             Under?
ED0F 2507             (     mon09v37.asm):01565                 BLO     GETN2           Yer, error
ED11 810F             (     mon09v37.asm):01566                 CMPA    #$F             Over?
ED13 2203             (     mon09v37.asm):01567                 BHI     GETN2           Yes, error
ED15                  (     mon09v37.asm):01568         GETN1
ED15 1A04             (     mon09v37.asm):01569                 ORCC    #$04            SET 'Z' FLAG, INDICATE OK
ED17 39               (     mon09v37.asm):01570                 RTS
ED18                  (     mon09v37.asm):01571         GETN2
ED18 8B37             (     mon09v37.asm):01572                 ADDA    #$37            Normalize character + clear Z
ED1A 39               (     mon09v37.asm):01573                 RTS
                      (     mon09v37.asm):01574         ;*
                      (     mon09v37.asm):01575         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (     mon09v37.asm):01576         ;*
ED1B                  (     mon09v37.asm):01577         WRDOUT
ED1B 8D02             (     mon09v37.asm):01578                 BSR     HEXOUT          Output first byte
ED1D 1F98             (     mon09v37.asm):01579                 TFR     B,A             Get second byte
                      (     mon09v37.asm):01580         ;*
                      (     mon09v37.asm):01581         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (     mon09v37.asm):01582         ;*
ED1F                  (     mon09v37.asm):01583         HEXOUT
ED1F 3402             (     mon09v37.asm):01584                 PSHS    A               Save low nibble
ED21 44               (     mon09v37.asm):01585                 LSRA                    Rotate
ED22 44               (     mon09v37.asm):01586                 LSRA                    upper nibble
ED23 44               (     mon09v37.asm):01587                 LSRA                    into
ED24 44               (     mon09v37.asm):01588                 LSRA                    lower nibble
ED25 8D02             (     mon09v37.asm):01589                 BSR     HOUT            Output high nibble
ED27 3502             (     mon09v37.asm):01590                 PULS    A               Restore low nibble
                      (     mon09v37.asm):01591         ;*
                      (     mon09v37.asm):01592         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (     mon09v37.asm):01593         ;*
ED29                  (     mon09v37.asm):01594         HOUT
ED29 840F             (     mon09v37.asm):01595                 ANDA    #$0F            Remove upper half
ED2B 8B30             (     mon09v37.asm):01596                 ADDA    #'0'            Convert to printable
ED2D 8139             (     mon09v37.asm):01597                 CMPA    #'9'            In range?
ED2F 2302             (     mon09v37.asm):01598                 BLS     HOUT1           Yes, display
ED31 8B07             (     mon09v37.asm):01599                 ADDA    #7              Convert to alpha
ED33                  (     mon09v37.asm):01600         HOUT1
ED33 204C             (     mon09v37.asm):01601                 BRA     PUTCHR          Output character
                      (     mon09v37.asm):01602         
                      (     mon09v37.asm):01603         ;******************************************************************************
                      (     mon09v37.asm):01604         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (     mon09v37.asm):01605         ;******************************************************************************
ED35 3410             (     mon09v37.asm):01606         WRMSG   PSHS    X               SAVE X
ED37 AE62             (     mon09v37.asm):01607                 LDX     2,S             GET OLD PC
ED39 8D04             (     mon09v37.asm):01608                 BSR     WRLIN           OUTPUT LINE
ED3B AF62             (     mon09v37.asm):01609                 STX     2,S             UPDATE OLD PC
ED3D 3590             (     mon09v37.asm):01610                 PULS    X,PC            RESTORE X, RETURN
                      (     mon09v37.asm):01611         
                      (     mon09v37.asm):01612         ;******************************************************************************
                      (     mon09v37.asm):01613         ;* DISPLAY MESSAGE(X)
                      (     mon09v37.asm):01614         ;******************************************************************************
ED3F                  (     mon09v37.asm):01615         WRLIN
ED3F A680             (     mon09v37.asm):01616                 LDA     ,X+             GET CHAR FROM MESSAGE
ED41 2708             (     mon09v37.asm):01617                 BEQ     WRLND           END, QUIT
ED43 81FF             (     mon09v37.asm):01618                 CMPA    #$FF            NEWLINE END, LFCR & EXIT
ED45 2719             (     mon09v37.asm):01619                 BEQ     LFCR            IF SO, NEW LINE, RETURN
ED47 8D38             (     mon09v37.asm):01620                 BSR     PUTCHR          OUTPUT TO TERM
ED49 20F4             (     mon09v37.asm):01621                 BRA     WRLIN           KEEP GOING
ED4B                  (     mon09v37.asm):01622         WRLND
ED4B 39               (     mon09v37.asm):01623                 RTS
                      (     mon09v37.asm):01624         
                      (     mon09v37.asm):01625         ;******************************************************************************
                      (     mon09v37.asm):01626         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (     mon09v37.asm):01627         ;******************************************************************************
ED4C                  (     mon09v37.asm):01628         GETECH
ED4C 8D1E             (     mon09v37.asm):01629                 BSR     GETCHR          GET CHARACTER
ED4E 8120             (     mon09v37.asm):01630                 CMPA    #' '            SPACE?
ED50 23F9             (     mon09v37.asm):01631                 BLS     WRLND           IF < DON'T DISPLAY
ED52 8161             (     mon09v37.asm):01632                 CMPA    #$61            LOWER CASE?
ED54 252B             (     mon09v37.asm):01633                 BLO     PUTCHR          OK
ED56 845F             (     mon09v37.asm):01634                 ANDA    #$5F            CONVERT TO UPPER
ED58 2027             (     mon09v37.asm):01635                 BRA     PUTCHR          ECHO
                      (     mon09v37.asm):01636         
                      (     mon09v37.asm):01637         ;******************************************************************************
                      (     mon09v37.asm):01638         ;* DISPLAY A SPACE ON THE TERMINAL
                      (     mon09v37.asm):01639         ;******************************************************************************
ED5A                  (     mon09v37.asm):01640         SPACE
ED5A 3402             (     mon09v37.asm):01641                 PSHS    A               SAVE A
ED5C 8620             (     mon09v37.asm):01642                 LDA     #' '            GET SPACE
ED5E 2008             (     mon09v37.asm):01643                 BRA     LFC1            DISLAY AND GO HOME
                      (     mon09v37.asm):01644         
                      (     mon09v37.asm):01645         ;******************************************************************************
                      (     mon09v37.asm):01646         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (     mon09v37.asm):01647         ;******************************************************************************
ED60                  (     mon09v37.asm):01648         LFCR
ED60 3402             (     mon09v37.asm):01649                 PSHS    A                       SAVE
ED62 860A             (     mon09v37.asm):01650                 LDA     #$0A                    GET LF
ED64 8D1B             (     mon09v37.asm):01651                 BSR     PUTCHR                  OUTPUT
ED66 860D             (     mon09v37.asm):01652                 LDA     #$0D                    GET CR
ED68                  (     mon09v37.asm):01653         LFC1
ED68 8D17             (     mon09v37.asm):01654                 BSR     PUTCHR                  OUTPUT
ED6A 3582             (     mon09v37.asm):01655                 PULS    A,PC                    RESTORE AND GO HOME
                      (     mon09v37.asm):01656         
                      (     mon09v37.asm):01657         ;******************************************************************************
                      (     mon09v37.asm):01658         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (     mon09v37.asm):01659         ;******************************************************************************
ED6C                  (     mon09v37.asm):01660         GETCHR
ED6C 3410             (     mon09v37.asm):01661                 PSHS    X                       SAVE 'X'
ED6E BE9F6A           (     mon09v37.asm):01662                 LDX     >UART1                  POINT TO CONSOLE
ED71 B69F69           (     mon09v37.asm):01663                 LDA     IOCON                   GET I/O CONFIG
ED74 44               (     mon09v37.asm):01664                 LSRA                            SHIFT TO CARRY
ED75 2503             (     mon09v37.asm):01665                 BCS     GETC1                   READ FROM UART
ED77 BE9F6C           (     mon09v37.asm):01666                 LDX     >UART2                  POINT TO AUX UART
ED7A                  (     mon09v37.asm):01667         GETC1
ED7A 170F10           (     mon09v37.asm):01668                 LBSR    READ                    READ TERMINAL
ED7D 26FB             (     mon09v37.asm):01669                 BNE     GETC1                   KEEP TRYING
ED7F 3590             (     mon09v37.asm):01670                 PULS    X,PC
                      (     mon09v37.asm):01671         
                      (     mon09v37.asm):01672         ;******************************************************************************
                      (     mon09v37.asm):01673         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (     mon09v37.asm):01674         ;******************************************************************************
ED81                  (     mon09v37.asm):01675         PUTCHR
ED81 3416             (     mon09v37.asm):01676                 PSHS    A,B,X                   SAVE REGS
ED83 F69F69           (     mon09v37.asm):01677                 LDB     IOCON                   GET I/O CONFIG
ED86 C502             (     mon09v37.asm):01678                 BITB    #2                      WRITE TO TERM?
ED88 2706             (     mon09v37.asm):01679                 BEQ     PUT1                    NO, TRY UART
ED8A BE9F6A           (     mon09v37.asm):01680                 LDX     >UART1                  POINT TO UART1
ED8D 170F0B           (     mon09v37.asm):01681                 LBSR    WRITE                   OUTPUT TO TERMINAL
ED90                  (     mon09v37.asm):01682         PUT1
ED90 F69F69           (     mon09v37.asm):01683                 LDB     IOCON                   INCASE CORRUPTED
ED93 C504             (     mon09v37.asm):01684                 BITB    #4                      WRITE TO UART?
ED95 2706             (     mon09v37.asm):01685                 BEQ     PUT2                    NO, SKIP IT
ED97 BE9F6C           (     mon09v37.asm):01686                 LDX     >UART2                  POINT TO UART2
ED9A 170EFE           (     mon09v37.asm):01687                 LBSR    WRITE                   OUTPUT TO UART
ED9D                  (     mon09v37.asm):01688         PUT2
ED9D 3596             (     mon09v37.asm):01689                 PULS    A,B,X,PC                RESTORE AND GO HOME
                      (     mon09v37.asm):01690         
                      (     mon09v37.asm):01691         ;******************************************************************************
                      (     mon09v37.asm):01692         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (     mon09v37.asm):01693         ;* SCREEN OUTPUT FLOW CONTROL.
                      (     mon09v37.asm):01694         ;******************************************************************************
ED9F                  (     mon09v37.asm):01695         CHKCHR
ED9F 3410             (     mon09v37.asm):01696                 PSHS    X                       SAVE PTR
EDA1 BE9F6A           (     mon09v37.asm):01697                 LDX     >UART1                  POINT TO CONSOLE UART
EDA4 F69F69           (     mon09v37.asm):01698                 LDB     IOCON                   GET I/O CONFIG
EDA7 2B07             (     mon09v37.asm):01699                 BMI     CHKC1                   ALREADY HELD
EDA9 170EE1           (     mon09v37.asm):01700                 LBSR    READ                    READ TERMINAL
EDAC 8120             (     mon09v37.asm):01701                 CMPA    #' '                    SPACE?
EDAE 2616             (     mon09v37.asm):01702                 BNE     CHKC3                   NO, IGNORE IT
EDB0                  (     mon09v37.asm):01703         CHKC1
EDB0 CA80             (     mon09v37.asm):01704                 ORB     #%10000000              SET HELD BIT
EDB2 170ED8           (     mon09v37.asm):01705                 LBSR    READ                    GET KEY FROM CONSOLE
EDB5 8120             (     mon09v37.asm):01706                 CMPA    #' '                    SPACE?
EDB7 270A             (     mon09v37.asm):01707                 BEQ     CHKC2                   YES, ALLOW
EDB9 C47F             (     mon09v37.asm):01708                 ANDB    #%01111111              DISABLE HELD BIT
EDBB 810D             (     mon09v37.asm):01709                 CMPA    #$0D                    CARRIAGE RETURN?
EDBD 2704             (     mon09v37.asm):01710                 BEQ     CHKC2                   ALLOW
EDBF 811B             (     mon09v37.asm):01711                 CMPA    #$1B                    ESCAPE?
EDC1 26ED             (     mon09v37.asm):01712                 BNE     CHKC1                   NO, IGNORE
EDC3                  (     mon09v37.asm):01713         CHKC2
EDC3 F79F69           (     mon09v37.asm):01714                 STB     IOCON                   RESAVE I/O CONFIG BYTE
EDC6                  (     mon09v37.asm):01715         CHKC3
EDC6 811B             (     mon09v37.asm):01716                 CMPA    #$1B                    TEST FOR ESCAPE CHARACTER
EDC8 3590             (     mon09v37.asm):01717                 PULS    X,PC
                      (     mon09v37.asm):01718         
                      (     mon09v37.asm):01719         ;******************************************************************************
                      (     mon09v37.asm):01720         ;* STEP ONE INSTRUCTION
                      (     mon09v37.asm):01721         ;******************************************************************************
EDCA                  (     mon09v37.asm):01722         STEPDI
EDCA 10BE9F78         (     mon09v37.asm):01723                 LDY     SAVPC                   GET PC
EDCE CE9F9B           (     mon09v37.asm):01724                 LDU     #DSPBUF                 GET INPUT BUFFER
EDD1 170265           (     mon09v37.asm):01725                 LBSR    DISASS                  DISPLAY
EDD4 1F31             (     mon09v37.asm):01726                 TFR     U,X                     POINT TO IT
EDD6 17FF66           (     mon09v37.asm):01727                 LBSR    WRLIN                   DISPLAY
EDD9 200A             (     mon09v37.asm):01728                 BRA     STEPCE                  AND PERFORM STEP
                      (     mon09v37.asm):01729         
                      (     mon09v37.asm):01730         ;******************************************************************************
                      (     mon09v37.asm):01731         ;* STEP WITHOUT DISPLAYING INSTRUCTION
                      (     mon09v37.asm):01732         ;******************************************************************************
EDDB 10BE9F78         (     mon09v37.asm):01733         STEP    LDY     SAVPC           GET PROGRAM COUNTER
EDDF CE9F9B           (     mon09v37.asm):01734                 LDU     #DSPBUF         POINT TO FREE RAM FOR DISASEMBLY OUTPUT
EDE2 170254           (     mon09v37.asm):01735                 LBSR    DISASS          PERFORM DISASSEMBLY
EDE5 10BF9F78         (     mon09v37.asm):01736         STEPCE  STY     SAVPC           SAVE NEW PC
EDE9 FE9F7F           (     mon09v37.asm):01737                 LDU     PTRSAV          GET POINTER BACK
EDEC ECC0             (     mon09v37.asm):01738                 LDD     ,U+             GET OPCODE
                      (     mon09v37.asm):01739         ;* TEST FOR LONG CONDITIONAL BRANCHES
EDEE 8110             (     mon09v37.asm):01740         LCBRAN  CMPA    #$10            PREFIX?
EDF0 2612             (     mon09v37.asm):01741                 BNE     LOBRAN          NO, GOT FOR IT
EDF2 E6C4             (     mon09v37.asm):01742                 LDB     ,U              GET OPCODE
EDF4 C122             (     mon09v37.asm):01743                 CMPB    #$22            IN RANGE?
EDF6 250C             (     mon09v37.asm):01744                 BLO     LOBRAN          NO
EDF8 C12F             (     mon09v37.asm):01745                 CMPB    #$2F            IN RANGE?
EDFA 2208             (     mon09v37.asm):01746                 BHI     LOBRAN          NO
EDFC A6C0             (     mon09v37.asm):01747                 LDA     ,U+             GET OPCOIDE BYTE
EDFE 170216           (     mon09v37.asm):01748                 LBSR    TSTCON          TEST CONDITIONAL
EE01 2705             (     mon09v37.asm):01749                 BEQ     LBRAN1          YES, DO IT
EE03 39               (     mon09v37.asm):01750                 RTS
                      (     mon09v37.asm):01751         ;* TEST FOR LONG BRANCHES
EE04 8116             (     mon09v37.asm):01752         LOBRAN  CMPA    #$16            IS IT LBRA?
EE06 2606             (     mon09v37.asm):01753                 BNE     LBRANS          NO, TRY LBSR
EE08 ECC1             (     mon09v37.asm):01754         LBRAN1  LDD     ,U++            GET OFFSET
EE0A 30CB             (     mon09v37.asm):01755                 LEAX    D,U             PERFORM BRANCH
EE0C 2034             (     mon09v37.asm):01756                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v37.asm):01757         ;* TEST FOR LONG BRANCH TO SUB
EE0E 8117             (     mon09v37.asm):01758         LBRANS  CMPA    #$17            'LBSR'?
EE10 2606             (     mon09v37.asm):01759                 BNE     SCOBRA          NO, TRY SHORT CONDITIONALS
EE12 ECC1             (     mon09v37.asm):01760                 LDD     ,U++            GET OFFSET
EE14 30CB             (     mon09v37.asm):01761                 LEAX    D,U             SET UP ADDRESS
EE16 2020             (     mon09v37.asm):01762                 BRA     SAVSTK
                      (     mon09v37.asm):01763         ;* TEST FOR SHORT CONDITIONAL BRANCHES
EE18 8122             (     mon09v37.asm):01764         SCOBRA  CMPA    #$22            < 'BHI'?
EE1A 250A             (     mon09v37.asm):01765                 BLO     SHBRAN          NO, TRY SHORT BRANCHES
EE1C 812F             (     mon09v37.asm):01766                 CMPA    #$2F            > 'BLE'?
EE1E 2206             (     mon09v37.asm):01767                 BHI     SHBRAN          NO, TRY SHORT BRANCHES
EE20 1701F4           (     mon09v37.asm):01768                 LBSR    TSTCON          SEE OF CONDITIONAL IS OK
EE23 2705             (     mon09v37.asm):01769                 BEQ     SBRAN1          YES, DO IT
EE25 39               (     mon09v37.asm):01770                 RTS
                      (     mon09v37.asm):01771         ;* TEST FOR SHORT BRANCHES
EE26 8120             (     mon09v37.asm):01772         SHBRAN  CMPA    #$20            SHORT BRANCH?
EE28 2606             (     mon09v37.asm):01773                 BNE     SBRANS          NO, TRY SHORT BRANCH TO SUB
EE2A E6C0             (     mon09v37.asm):01774         SBRAN1  LDB     ,U+             GET OFFSET
EE2C 30C5             (     mon09v37.asm):01775                 LEAX    B,U             EMULATE JUMP
EE2E 2012             (     mon09v37.asm):01776                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v37.asm):01777         ;* TEST FOR SHORT BRANCH TO SUBROUTINE
EE30 818D             (     mon09v37.asm):01778         SBRANS  CMPA    #$8D            'BSR'?
EE32 2612             (     mon09v37.asm):01779                 BNE     TSTTFR          NO, TRY TRANSFER
EE34 E6C0             (     mon09v37.asm):01780                 LDB     ,U+             GET OFFSET
EE36 30C5             (     mon09v37.asm):01781                 LEAX    B,U             PERFORM BRANCH
EE38 10BE9F7A         (     mon09v37.asm):01782         SAVSTK  LDY     SAVS            GET STACK POINTER
EE3C EFA3             (     mon09v37.asm):01783                 STU     ,--Y            PUSH ADDRESS
EE3E 10BF9F7A         (     mon09v37.asm):01784                 STY     SAVS            RESAVE
EE42 BF9F78           (     mon09v37.asm):01785         SAVNPC  STX     SAVPC           SAVE IT
EE45 39               (     mon09v37.asm):01786                 RTS
                      (     mon09v37.asm):01787         ;* TEST FOR TRANSFER
EE46 811F             (     mon09v37.asm):01788         TSTTFR  CMPA    #$1F            TRANSFER?
EE48 2620             (     mon09v37.asm):01789                 BNE     TSTEXG          NO, TRY EXCHANGE
EE4A 8D01             (     mon09v37.asm):01790                 BSR     LOKREG          LOOKUP REGISTER
EE4C 39               (     mon09v37.asm):01791                 RTS
                      (     mon09v37.asm):01792         ;* LOOKUP REGISTER, AND SIMULATE IF PC XFER OR EXCHANGE
EE4D A6C4             (     mon09v37.asm):01793         LOKREG  LDA     ,U              GET POSTBYTE
EE4F 840F             (     mon09v37.asm):01794                 ANDA    #$0F            REMOVE HIGH REGISTER
EE51 8105             (     mon09v37.asm):01795                 CMPA    #5              IS IT PC?
EE53 2610             (     mon09v37.asm):01796                 BNE     LOK1            NO, IT'S OK TO EXECUTE
EE55 A6C4             (     mon09v37.asm):01797                 LDA     ,U              GET REG POSTBYTE BACK
EE57 44               (     mon09v37.asm):01798                 LSRA                    SHIFT
EE58 44               (     mon09v37.asm):01799                 LSRA                    HIGH REGISTER
EE59 44               (     mon09v37.asm):01800                 LSRA                    TO LOW (LEAVE X 2)
EE5A 8EF8C0           (     mon09v37.asm):01801         LOK2    LDX     #TFREGT         POINT TO TABLE
EE5D 840F             (     mon09v37.asm):01802                 ANDA    #$0F            INSURE WE GET VALID REG
EE5F AE86             (     mon09v37.asm):01803                 LDX     A,X             GET ADDRESS OF VARIABLE
EE61 EC84             (     mon09v37.asm):01804                 LDD     ,X              GET REGISTER VALUE
EE63 202E             (     mon09v37.asm):01805                 BRA     STDPC           SAVE IT
EE65 3262             (     mon09v37.asm):01806         LOK1    LEAS    2,S             SKIP LAST CALL
EE67 160151           (     mon09v37.asm):01807                 LBRA    NOREXE          EXECUTE NORMAL INSTRUCTION
                      (     mon09v37.asm):01808         ;* TEST FOR EXCHANGE
EE6A 811E             (     mon09v37.asm):01809         TSTEXG  CMPA    #$1E            IS IT EXCHANGE
EE6C 2619             (     mon09v37.asm):01810                 BNE     TSTRTS          NO, TRY RTS
EE6E 10BE9F78         (     mon09v37.asm):01811                 LDY     SAVPC           GET OLD PC VALUE
EE72 A6C4             (     mon09v37.asm):01812                 LDA     ,U              GET REGISTER
EE74 84F0             (     mon09v37.asm):01813                 ANDA    #$F0            USE HIGH ONLY
EE76 8150             (     mon09v37.asm):01814                 CMPA    #$50            IS PC FIRST?
EE78 2607             (     mon09v37.asm):01815                 BNE     TSTE1           NO, SKIP
EE7A A6C4             (     mon09v37.asm):01816                 LDA     ,U              GET REG BACK
EE7C 48               (     mon09v37.asm):01817                 LSLA                    DOUBLE
EE7D 8DDB             (     mon09v37.asm):01818                 BSR     LOK2            GET ADDRESS OF REG TO SWAP WITH
EE7F 2002             (     mon09v37.asm):01819                 BRA     TSTE2           PERFORM MOVE TO PC
EE81 8DCA             (     mon09v37.asm):01820         TSTE1   BSR     LOKREG          GET REGISTER SEE IF PC IS LOW REGISTER
EE83 10AF84           (     mon09v37.asm):01821         TSTE2   STY     ,X              SAVE PC IN REGISTER
EE86 39               (     mon09v37.asm):01822                 RTS
                      (     mon09v37.asm):01823         ;* TEST FOR 'RTS' INSTRUCTIONS
EE87 8139             (     mon09v37.asm):01824         TSTRTS  CMPA    #$39            IS IT 'RTS'
EE89 260C             (     mon09v37.asm):01825                 BNE     TPULS           NO, TRY PULS
EE8B FE9F7A           (     mon09v37.asm):01826                 LDU     SAVS            POINT TO STACK
EE8E 3706             (     mon09v37.asm):01827                 PULU    A,B             GET DATA
EE90 FF9F7A           (     mon09v37.asm):01828                 STU     SAVS            RESAVE SP
EE93 FD9F78           (     mon09v37.asm):01829         STDPC   STD     SAVPC
EE96 39               (     mon09v37.asm):01830                 RTS
                      (     mon09v37.asm):01831         ;* TEST FOR 'PULS' INSTRUCTION
EE97 8135             (     mon09v37.asm):01832         TPULS   CMPA    #$35            PULLING FROM S?
EE99 260D             (     mon09v37.asm):01833                 BNE     TPULU           NO, TRY PULU
EE9B BE9F7A           (     mon09v37.asm):01834                 LDX     SAVS            GET SAVED 'S' REG
EE9E 108EF8CC         (     mon09v37.asm):01835                 LDY     #PULSTAB        POINT TO TABLE
EEA2 8D15             (     mon09v37.asm):01836                 BSR     DOPUL           PERFORM PULL
EEA4 BF9F7A           (     mon09v37.asm):01837                 STX     SAVS            RESAVE NEW 'S' REGISTER
EEA7 39               (     mon09v37.asm):01838                 RTS
                      (     mon09v37.asm):01839         ;* TEST FOR A 'PULU' INSTRUCTION
EEA8 8137             (     mon09v37.asm):01840         TPULU   CMPA    #$37            IS IT 'PULU'?
EEAA 262E             (     mon09v37.asm):01841                 BNE     JSREXT          NO, TRY JSR EXTENDED
EEAC BE9F76           (     mon09v37.asm):01842                 LDX     SAVU            GET SAVED 'U'
EEAF 108EF8DC         (     mon09v37.asm):01843                 LDY     #PULUTAB        POINT TO TABLE
EEB3 8D04             (     mon09v37.asm):01844                 BSR     DOPUL           PERFORM PULL
EEB5 BF9F76           (     mon09v37.asm):01845                 STX     SAVU            RESAVE 'S'
EEB8 39               (     mon09v37.asm):01846                 RTS
                      (     mon09v37.asm):01847         ;* PERFORM PUL OPERATIONS
EEB9 A6C4             (     mon09v37.asm):01848         DOPUL   LDA     ,U              GET POSTBYTE
EEBB C604             (     mon09v37.asm):01849                 LDB     #4              TEST FOR FIRST FOUR BITS (8 BIT REG)
EEBD 5A               (     mon09v37.asm):01850         DOPUL1  DECB                    DECREMENT COUNT
EEBE 44               (     mon09v37.asm):01851                 LSRA                    SHIFT
EEBF 2413             (     mon09v37.asm):01852                 BCC     DOPUL2          NOTHING, GO AGAIN
EEC1 3406             (     mon09v37.asm):01853                 PSHS    A,B             SAVE REGS
EEC3 5D               (     mon09v37.asm):01854                 TSTB                    ARE WE INTO 16 BITS?
EEC4 2B06             (     mon09v37.asm):01855                 BMI     PUL16           YES, PERFORM 16 BITS
EEC6 A680             (     mon09v37.asm):01856                 LDA     ,X+             PULL A BYTE
EEC8 A7B1             (     mon09v37.asm):01857                 STA     [,Y++]          SAVE IN REGISTER
EECA 2004             (     mon09v37.asm):01858                 BRA     DOPUL3          GO AGAIN
EECC EC81             (     mon09v37.asm):01859         PUL16   LDD     ,X++            GET 16 BIT VALUE
EECE EDB1             (     mon09v37.asm):01860                 STD     [,Y++]          SAVE IN REGISTER
EED0 3506             (     mon09v37.asm):01861         DOPUL3  PULS    A,B             RESTORE
EED2 20E9             (     mon09v37.asm):01862                 BRA     DOPUL1          CONTINUE
EED4 3122             (     mon09v37.asm):01863         DOPUL2  LEAY    2,Y             ADVANCE
EED6 4D               (     mon09v37.asm):01864                 TSTA                    ARE WE CONE
EED7 26E4             (     mon09v37.asm):01865                 BNE     DOPUL1          CONTINUE
EED9 39               (     mon09v37.asm):01866                 RTS
                      (     mon09v37.asm):01867         ;* TEST FOR 'JSR' EXTENDED
EEDA 81BD             (     mon09v37.asm):01868         JSREXT  CMPA    #$BD            IS IT EXTENDED JSR
EEDC 2604             (     mon09v37.asm):01869                 BNE     JMPEXT          NO, TRY JUMP EXTENDED
EEDE 8D06             (     mon09v37.asm):01870                 BSR     DJMPEX          FAKE JUMP
EEE0 2021             (     mon09v37.asm):01871                 BRA     PSHPC           SAVE PC
                      (     mon09v37.asm):01872         ;* TEST FOR 'JMP' EXTENDED
EEE2 817E             (     mon09v37.asm):01873         JMPEXT  CMPA    #$7E            IS IT JMP EXTENDED?
EEE4 2604             (     mon09v37.asm):01874                 BNE     JSRDIR          NO, TRY JMP DIRECT
EEE6 ECC1             (     mon09v37.asm):01875         DJMPEX  LDD     ,U++            GET ADDRESS
EEE8 20A9             (     mon09v37.asm):01876                 BRA     STDPC           SAVE IT
                      (     mon09v37.asm):01877         ;* TEST FOR 'JSR' DIRECT
EEEA 819D             (     mon09v37.asm):01878         JSRDIR  CMPA    #$9D            'JSR' DIRECT PAGE?
EEEC 2604             (     mon09v37.asm):01879                 BNE     JMPDIR          NO, TRY JUMP
EEEE 8D06             (     mon09v37.asm):01880                 BSR     DJMPDI          DO IT
EEF0 2011             (     mon09v37.asm):01881                 BRA     PSHPC           SAVE PC
                      (     mon09v37.asm):01882         ;* TEST FOR 'JMP' DIRECT PAGE
EEF2 810E             (     mon09v37.asm):01883         JMPDIR  CMPA    #$0E            IS IT JUMP DIRECT PAGE?
EEF4 2607             (     mon09v37.asm):01884                 BNE     JSRIND          NO, TRY JUMP INDEXED
EEF6 E6C0             (     mon09v37.asm):01885         DJMPDI  LDB     ,U+             GET LOW ADDRESS
EEF8 B69F71           (     mon09v37.asm):01886                 LDA     SAVDP           GET DIRECT PAGE
EEFB 2096             (     mon09v37.asm):01887                 BRA     STDPC           SAVE IT
                      (     mon09v37.asm):01888         ;* TEST FOR 'JSR' INDEXED
EEFD 81AD             (     mon09v37.asm):01889         JSRIND  CMPA    #$AD            IS IT 'JSR' INDEXED?
EEFF 260B             (     mon09v37.asm):01890                 BNE     JMPIND          NO, TRY NEXT
EF01 8D0F             (     mon09v37.asm):01891                 BSR     DJMPIN          DO IT
EF03 BE9F7A           (     mon09v37.asm):01892         PSHPC   LDX     SAVS            GET ADDRESS
EF06 EF83             (     mon09v37.asm):01893                 STU     ,--X            SAVE
EF08 BF9F7A           (     mon09v37.asm):01894                 STX     SAVS            RESAVE
EF0B 39               (     mon09v37.asm):01895                 RTS
                      (     mon09v37.asm):01896         ;* TEST FOR 'JMP' INDEXED
EF0C 816E             (     mon09v37.asm):01897         JMPIND  CMPA    #$6E            IS IT JUMP INDEXED?
EF0E 102600A9         (     mon09v37.asm):01898                 LBNE    NOREXE          NO, NON-TRANSFER INSTRUCTION
                      (     mon09v37.asm):01899         ;* FIRST POINT Y AT REGISTER INVOLVED
EF12 A6C0             (     mon09v37.asm):01900         DJMPIN  LDA     ,U+             GET POSTBYTE
EF14 3402             (     mon09v37.asm):01901                 PSHS    A               SAVE IT
EF16 8460             (     mon09v37.asm):01902                 ANDA    #%01100000      SAVE ONLY REGISTER
EF18 44               (     mon09v37.asm):01903                 LSRA                    CONVERT
EF19 44               (     mon09v37.asm):01904                 LSRA                    REGISTER
EF1A 44               (     mon09v37.asm):01905                 LSRA                    INTO INDEX VALUE
EF1B 44               (     mon09v37.asm):01906                 LSRA                    SHIFT IT OVER
EF1C 8EF8C2           (     mon09v37.asm):01907                 LDX     #INDTAB         POINT TO TABLE
EF1F 10AE86           (     mon09v37.asm):01908                 LDY     A,X             GET REGISTER ADDRESS
EF22 10BF9F7C         (     mon09v37.asm):01909                 STY     TEMP            SAVE FOR INC/DEC
EF26 10AEA4           (     mon09v37.asm):01910                 LDY     ,Y              GET REGISTER CONTENTS
EF29 A6E4             (     mon09v37.asm):01911                 LDA     ,S              GET POSTBYTE BACK
EF2B 2B0C             (     mon09v37.asm):01912                 BMI     NOT5BO          NOT A FIVE BIT OFFSET
                      (     mon09v37.asm):01913         ;* FIVE BIT REGISTER OFFSET
EF2D 841F             (     mon09v37.asm):01914                 ANDA    #%00011111      SAVE ONLY OFFSET
EF2F 8110             (     mon09v37.asm):01915                 CMPA    #%00010000      NEGATIVE?
EF31 2502             (     mon09v37.asm):01916                 BLO     SINOK           NO, IT'S OK
EF33 8AE0             (     mon09v37.asm):01917                 ORA     #%11100000      CONVERT TO NEGATIVE
EF35 30A6             (     mon09v37.asm):01918         SINOK   LEAX    A,Y             GET ADDRESS
EF37 205E             (     mon09v37.asm):01919                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01920         ;* TEST FOR NO OFFSET
EF39 848F             (     mon09v37.asm):01921         NOT5BO  ANDA    #%10001111      REMOVE REGISTER & INDIRECT BIT
EF3B 8184             (     mon09v37.asm):01922                 CMPA    #$84            NO OFFSET?
EF3D 2604             (     mon09v37.asm):01923                 BNE     TOFF8           NO, TRY OFFSET OF 8
EF3F 1F21             (     mon09v37.asm):01924                 TFR     Y,X             COPY
EF41 2054             (     mon09v37.asm):01925                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01926         ;* TEST FOR EIGHT BIT OFFSET
EF43 8188             (     mon09v37.asm):01927         TOFF8   CMPA    #$88            8 BIT OFSET?
EF45 2604             (     mon09v37.asm):01928                 BNE     TOFF16          NO, TRY 16 BIT OFFSET
EF47 E6C0             (     mon09v37.asm):01929                 LDB     ,U+             GET OFFSET
EF49 201A             (     mon09v37.asm):01930                 BRA     BSAVOF          GO FOR IT
                      (     mon09v37.asm):01931         ;* TEST FOR 16 BIT OFFSET
EF4B 8189             (     mon09v37.asm):01932         TOFF16  CMPA    #$89            16 BIT OFFSET?
EF4D 2606             (     mon09v37.asm):01933                 BNE     TOFFA           TRY A ACCUMULATOR OFFSET
EF4F ECC0             (     mon09v37.asm):01934                 LDD     ,U+             GET OFFSET
EF51 30AB             (     mon09v37.asm):01935                 LEAX    D,Y             DO IT
EF53 2042             (     mon09v37.asm):01936                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01937         ;* TEST FOR ACCA OFFSET
EF55 8186             (     mon09v37.asm):01938         TOFFA   CMPA    #$86            OFFSET BY ACCA
EF57 2605             (     mon09v37.asm):01939                 BNE     TOFFB           NO, TRY B
EF59 F69F6F           (     mon09v37.asm):01940                 LDB     SAVA            GET ACCA
EF5C 2007             (     mon09v37.asm):01941                 BRA     BSAVOF          SAVE IT
                      (     mon09v37.asm):01942         ;* TEST FOR ACCB OFFSET
EF5E 8185             (     mon09v37.asm):01943         TOFFB   CMPA    #$85            B OFFSET
EF60 2607             (     mon09v37.asm):01944                 BNE     TOFFD           NO, TRY D OFFSET
EF62 F69F70           (     mon09v37.asm):01945                 LDB     SAVB            GET B
EF65 30A5             (     mon09v37.asm):01946         BSAVOF  LEAX    B,Y             DO OFFSET
EF67 202E             (     mon09v37.asm):01947                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01948         ;* TEST FOR ACCD OFFSET
EF69 818B             (     mon09v37.asm):01949         TOFFD   CMPA    #$8B            IS IT D OFFSET?
EF6B 2607             (     mon09v37.asm):01950                 BNE     TAINC1          NO, TRY AUTO INC
EF6D FC9F6F           (     mon09v37.asm):01951                 LDD     SAVA            GET D ACCUMULATOR
EF70 30AB             (     mon09v37.asm):01952                 LEAX    D,Y             DO IT
EF72 2023             (     mon09v37.asm):01953                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01954         ;* TEST FOR AUTO INCREMENT
EF74 8180             (     mon09v37.asm):01955         TAINC1  CMPA    #$80            AUTO INC BY 1?
EF76 2604             (     mon09v37.asm):01956                 BNE     TAINC2          NO, TRY AUTO INC BY 2
EF78 30A0             (     mon09v37.asm):01957                 LEAX    ,Y+             GET ADDRESS
EF7A 2016             (     mon09v37.asm):01958                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01959         ;* TEST FOR DOUBLE AUTO INCREMENT
EF7C 8181             (     mon09v37.asm):01960         TAINC2  CMPA    #$81            AUTO INC BY 1?
EF7E 2604             (     mon09v37.asm):01961                 BNE     TADEC1          NO, TRY AUTO DEC
EF80 30A1             (     mon09v37.asm):01962                 LEAX    ,Y++            GET ADDRESS
EF82 200E             (     mon09v37.asm):01963                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01964         ;* TEST FOR AUTO DECREMENT
EF84 8182             (     mon09v37.asm):01965         TADEC1  CMPA    #$82            AUTO DEC?
EF86 2604             (     mon09v37.asm):01966                 BNE     TADEC2          NO, TRY AUTO DEC BY TWO
EF88 30A2             (     mon09v37.asm):01967                 LEAX    ,-Y             GET ADDRESS
EF8A 2006             (     mon09v37.asm):01968                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01969         ;* TEST FOR DOUBLE AUTO DECREMENT
EF8C 8183             (     mon09v37.asm):01970         TADEC2  CMPA    #$83            DOUBLE AUTO DEC.
EF8E 2609             (     mon09v37.asm):01971                 BNE     TPCO8           NO, TRY PC OFFSET
EF90 30A3             (     mon09v37.asm):01972                 LEAX    ,--Y            GET OFFSET
EF92 10AF9F9F7C       (     mon09v37.asm):01973         RSVREG  STY     [TEMP]          RESAVE REGISTER CONTENTS
EF97 2016             (     mon09v37.asm):01974         XSAVPC  BRA     SAVXPC          SAVE NEW PC
                      (     mon09v37.asm):01975         ;* TEST FOR EIGHT BIT OFFSET FROM PCR
EF99 818C             (     mon09v37.asm):01976         TPCO8   CMPA    #$8C            8 BIT PC RELATIVE?
EF9B 2606             (     mon09v37.asm):01977                 BNE     TPCO16          NO, TRY 16 BIT PC RELATIVE
EF9D E6C0             (     mon09v37.asm):01978                 LDB     ,U+             GET BYTE
EF9F 30C5             (     mon09v37.asm):01979                 LEAX    B,U             OFFSET IT
EFA1 200C             (     mon09v37.asm):01980                 BRA     SAVXPC          RESAVE PC
                      (     mon09v37.asm):01981         ;* TEST FOR 16 BIT OFFSET FROM PCR
EFA3 818D             (     mon09v37.asm):01982         TPCO16  CMPA    #$8D            16 BIT OFFSET
EFA5 2606             (     mon09v37.asm):01983                 BNE     TEIND           NO, TRY EXTENDED INDIRECT
EFA7 ECC1             (     mon09v37.asm):01984                 LDD     ,U++            GET VALUE
EFA9 30CB             (     mon09v37.asm):01985                 LEAX    D,U             POINT TO NEW LOCATION
EFAB 2002             (     mon09v37.asm):01986                 BRA     SAVXPC          RESAVE
                      (     mon09v37.asm):01987         ;* EXTENDED ADDRESSING VIA INDEXED POSTBYTE
EFAD AEC1             (     mon09v37.asm):01988         TEIND   LDX     ,U++            GET ADDRESS
                      (     mon09v37.asm):01989         ;* SET SAVED PC TO CALCULATED ADDRESS (IN 'X').
                      (     mon09v37.asm):01990         ;* CHECK FOR & PERFORM INDIRECTION IF REQUIRED
EFAF 3502             (     mon09v37.asm):01991         SAVXPC  PULS    A               RESTORE POSTBYTE
EFB1 8510             (     mon09v37.asm):01992                 BITA    #%00010000      INDIRECT ADDRESSING?
EFB3 2702             (     mon09v37.asm):01993                 BEQ     NINXIN          NOT INDIRECT
EFB5 AE84             (     mon09v37.asm):01994                 LDX     ,X              PERFORM A LEVEL OF INDIRECTION
EFB7 BF9F78           (     mon09v37.asm):01995         NINXIN  STX     SAVPC           SAVE IT
EFBA 39               (     mon09v37.asm):01996                 RTS
                      (     mon09v37.asm):01997         ;* NORMAL EXECUTABLE INSTRUCTION, COPY IT INTO OUR RAM, THEN EXECUTE IT
EFBB 335F             (     mon09v37.asm):01998         NOREXE  LEAU    -1,U            BACKUP TO INSTRUCTION
EFBD 8E9FCD           (     mon09v37.asm):01999                 LDX     #INSRAM         POINT TO RAM FOR INSTRUCTION
                      (     mon09v37.asm):02000         ;* COPY INSTRUCTION INTO RAM
EFC0 11B39F78         (     mon09v37.asm):02001         NORE1   CMPU    SAVPC           ARE WE THERE
EFC4 2406             (     mon09v37.asm):02002                 BHS     NORE2           END OF INSTRUCTION
EFC6 A6C0             (     mon09v37.asm):02003                 LDA     ,U+             GET DATA
EFC8 A780             (     mon09v37.asm):02004                 STA     ,X+             SAVE IN RAM
EFCA 20F4             (     mon09v37.asm):02005                 BRA     NORE1           CONTINUE
                      (     mon09v37.asm):02006         ;* INSERT A JUMP AFTER IT
EFCC 867E             (     mon09v37.asm):02007         NORE2   LDA     #$7E            GET 'JMP' EXTENDED INSTRUCTION
EFCE A780             (     mon09v37.asm):02008                 STA     ,X+             SAVE IT
EFD0 CCEFF7           (     mon09v37.asm):02009                 LDD     #NORE3          POINT AT ADDRESS TO JUMP TO
EFD3 ED84             (     mon09v37.asm):02010                 STD     ,X              SAVE IT
EFD5 10FF9F7C         (     mon09v37.asm):02011                 STS     TEMP            SAVE SP
EFD9 10FE9F7A         (     mon09v37.asm):02012                 LDS     SAVS            RESTORE STACK POINTER
EFDD B69F6E           (     mon09v37.asm):02013                 LDA     SAVCC           GET CC
EFE0 F69F71           (     mon09v37.asm):02014                 LDB     SAVDP           GET DP
EFE3 3406             (     mon09v37.asm):02015                 PSHS    A,B             SAVE CC AND DP
EFE5 FC9F6F           (     mon09v37.asm):02016                 LDD     SAVA            RESTORE A, B
EFE8 BE9F72           (     mon09v37.asm):02017                 LDX     SAVX            RESTORE X
EFEB 10BE9F74         (     mon09v37.asm):02018                 LDY     SAVY            RESTORE Y
EFEF FE9F76           (     mon09v37.asm):02019                 LDU     SAVU            RESTORE U
EFF2 3509             (     mon09v37.asm):02020                 PULS    CC,DP           RESTORE CC AND DP
EFF4 7E9FCD           (     mon09v37.asm):02021                 JMP     INSRAM          EXECUTE INSTRUCTION
                      (     mon09v37.asm):02022         ;* INSTRUCTION SHOULD RETURN TO HERE
EFF7 3409             (     mon09v37.asm):02023         NORE3   PSHS    CC,DP           SAVE REGS
EFF9 FD9F6F           (     mon09v37.asm):02024                 STD     SAVA            SAVE REGS
EFFC BF9F72           (     mon09v37.asm):02025                 STX     SAVX            SAVE X
EFFF 10BF9F74         (     mon09v37.asm):02026                 STY     SAVY            SAVE Y
F003 FF9F76           (     mon09v37.asm):02027                 STU     SAVU            SAVE U
F006 3506             (     mon09v37.asm):02028                 PULS    A,B             GET REGS BACK
F008 B79F6E           (     mon09v37.asm):02029                 STA     SAVCC           SAVE CC
F00B F79F71           (     mon09v37.asm):02030                 STB     SAVDP           SAVE DP
F00E 10FF9F7A         (     mon09v37.asm):02031                 STS     SAVS            SAVE STACK POINTER
F012 10FE9F7C         (     mon09v37.asm):02032                 LDS     TEMP            RESTORE OUR STACK
F016 39               (     mon09v37.asm):02033                 RTS
                      (     mon09v37.asm):02034         ;*
                      (     mon09v37.asm):02035         ;* SUBROUTINE TO EVALUATE CONDITIONAL BRANCH OPCODES, AND DETERMINE
                      (     mon09v37.asm):02036         ;* IF THEY ARE TO BE EXECUTED
                      (     mon09v37.asm):02037         ;*
F017 C603             (     mon09v37.asm):02038         TSTCON  LDB     #3              TEST FOR THREE CONDITIONALS
F019 812F             (     mon09v37.asm):02039                 CMPA    #$2F            IS IT 'BLE'?
F01B 2602             (     mon09v37.asm):02040                 BNE     TSTC0           NO, ITS NORMAL
F01D C606             (     mon09v37.asm):02041                 LDB     #6              HANDLE WRETCHED 'BLE' CASE
F01F 8022             (     mon09v37.asm):02042         TSTC0   SUBA    #$22            CONVERT OPCODE TO SIMPLE INDEX
F021 48               (     mon09v37.asm):02043                 LSLA                    ROTATE..
F022 48               (     mon09v37.asm):02044                 LSLA                    TWICE FOR FOUR BYTE ENTRIES
F023 8EF885           (     mon09v37.asm):02045                 LDX     #CONTAB         POINT TO TABLE
F026 3086             (     mon09v37.asm):02046                 LEAX    A,X             ADVANCE TO TABLE ENTRY
F028 B69F6E           (     mon09v37.asm):02047                 LDA     SAVCC           GET CONDITION CODES
F02B A480             (     mon09v37.asm):02048                 ANDA    ,X+             MASK OUT NON-APPLICABLE ONES
F02D A180             (     mon09v37.asm):02049         TSTC1   CMPA    ,X+             DOES IT MATCH?
F02F 2706             (     mon09v37.asm):02050                 BEQ     TSTC2           IT'S OK
F031 5A               (     mon09v37.asm):02051                 DECB                    REDUCE COUNT
F032 26F9             (     mon09v37.asm):02052                 BNE     TSTC1           CONTINUE
F034 86FF             (     mon09v37.asm):02053                 LDA     #255            INDICATE CONDITIONAL NOT MET
F036 39               (     mon09v37.asm):02054                 RTS
F037 4F               (     mon09v37.asm):02055         TSTC2   CLRA                    INDICATE CONDITIONAL MET
F038 39               (     mon09v37.asm):02056                 RTS
                      (     mon09v37.asm):02057         ;*
                      (     mon09v37.asm):02058         ;* DISASSEMBLE OPCODE POINTED TO BY Y. PLACE IN OUTPUT BUFFER POINTED TO BY U
                      (     mon09v37.asm):02059         ;*
F039 10BF9F7F         (     mon09v37.asm):02060         DISASS  STY     PTRSAV          SAVE INSTRUCTION POINTER
F03D 3440             (     mon09v37.asm):02061                 PSHS    U               SAVE INST POINTER
F03F CC201A           (     mon09v37.asm):02062                 LDD     #$2000+26       GET SPACE+NUMBER OF BYTES TO CLEAR
F042 A7C0             (     mon09v37.asm):02063         DISA1   STA     ,U+             SET A SPACE
F044 5A               (     mon09v37.asm):02064                 DECB                    REDUCE COUNT
F045 26FB             (     mon09v37.asm):02065                 BNE     DISA1           CONTINUE
F047 8EF347           (     mon09v37.asm):02066                 LDX     #OPTAB1         POINT TO GENERAL OPCODE TABLE
F04A A6A4             (     mon09v37.asm):02067                 LDA     ,Y              GET DATA BYTE
F04C 8110             (     mon09v37.asm):02068                 CMPA    #$10            PREFIX BYTE?
F04E 2709             (     mon09v37.asm):02069                 BEQ     SETOP2          NEW TABLE
F050 8111             (     mon09v37.asm):02070                 CMPA    #$11            OTHER PREFIX BYTE
F052 260A             (     mon09v37.asm):02071                 BNE     OPFIND          NO, IT'S OK
F054 8EF656           (     mon09v37.asm):02072                 LDX     #OPTAB3         POINT TO THIRD TABLE
F057 2003             (     mon09v37.asm):02073                 BRA     OPFNXT          OK
F059 8EF5E1           (     mon09v37.asm):02074         SETOP2  LDX     #OPTAB2         POINT TO SECOND OPERAND TABLE
F05C 3121             (     mon09v37.asm):02075         OPFNXT  LEAY    1,Y             SKIP PREFIX BYTE
                      (     mon09v37.asm):02076         ;* LOOK FOR OPCODE IN TABLE
F05E A680             (     mon09v37.asm):02077         OPFIND  LDA     ,X+             GET BYTE FROM TABLE
F060 A1A4             (     mon09v37.asm):02078                 CMPA    ,Y              IS THIS IT?
F062 270C             (     mon09v37.asm):02079                 BEQ     FNDOPC          FOUND IT
F064 81CF             (     mon09v37.asm):02080                 CMPA    #$CF            END OF TABLE?
F066 2704             (     mon09v37.asm):02081                 BEQ     BADOPC          IF SO, FAKE AN OPCODE
F068 3002             (     mon09v37.asm):02082                 LEAX    2,X             ADVANCE
F06A 20F2             (     mon09v37.asm):02083                 BRA     OPFIND          KEEP LOOKING
F06C 10BE9F7F         (     mon09v37.asm):02084         BADOPC  LDY     PTRSAV          INSURE WE ARE AT BEGINNING
                      (     mon09v37.asm):02085         ;* LOCATED OPCODE, GENERATE STRING
F070 3121             (     mon09v37.asm):02086         FNDOPC  LEAY    1,Y             SKIP TO POSTBYTE
F072 A680             (     mon09v37.asm):02087                 LDA     ,X+             GET DATA
F074 B79F81           (     mon09v37.asm):02088                 STA     INSTYP          SAVE FOR LATER
F077 E684             (     mon09v37.asm):02089                 LDB     ,X              GET INSTRUCTION NUMBER
F079 8604             (     mon09v37.asm):02090                 LDA     #4              FOUR BYTES/ENTRY
F07B 3D               (     mon09v37.asm):02091                 MUL                     CALCULATE ENTRY OFFSET
F07C 8EF671           (     mon09v37.asm):02092                 LDX     #ITABLE         POINT TO INSTRUCTION TABLE
F07F 308B             (     mon09v37.asm):02093                 LEAX    D,X             ADVANCE TO IT
F081 C604             (     mon09v37.asm):02094                 LDB     #4              SIZE OF INSTRIUCTION FIELD
F083 A680             (     mon09v37.asm):02095         FNDO1   LDA     ,X+             GET CHAR
F085 A7C0             (     mon09v37.asm):02096                 STA     ,U+             SAVE IN OUTPUT
F087 5A               (     mon09v37.asm):02097                 DECB                    MOVE FOUR CHARACTERS
F088 26F9             (     mon09v37.asm):02098                 BNE     FNDO1           CONTINUE
F08A B69F81           (     mon09v37.asm):02099         FNDO2   LDA     INSTYP          GET TYPE BITS BACK
F08D 840F             (     mon09v37.asm):02100                 ANDA    #$0F            REMOVE CRAP
F08F 10270173         (     mon09v37.asm):02101                 LBEQ    ENDIS           NO OPERANDS
                      (     mon09v37.asm):02102         ;* INSERT SPACES FOR OPERAND
F093 C620             (     mon09v37.asm):02103                 LDB     #' '            GET A SPACE
F095 E7C0             (     mon09v37.asm):02104                 STB     ,U+             SAVE IN OUTPUT
F097 E7C0             (     mon09v37.asm):02105                 STB     ,U+             SAVE IN OUTPUT
F099 4A               (     mon09v37.asm):02106                 DECA                    IS 8 BIT IT IMMEDIATE?
F09A 2606             (     mon09v37.asm):02107                 BNE     IMM16           NO, TRY 16 BIT IMMEDIATE
                      (     mon09v37.asm):02108         ;* EIGHT BIT IMMEDIATE ADDRESSING OPERAND
F09C 8623             (     mon09v37.asm):02109         IMM8    LDA     #'#'            INDICATE IMMEDIATE
F09E A7C0             (     mon09v37.asm):02110                 STA     ,U+             SAVE IT
F0A0 2010             (     mon09v37.asm):02111                 BRA     OP8             QUIT
                      (     mon09v37.asm):02112         ;* SIXTEEN BIT IMMEDIATE ADDRESSING
F0A2 4A               (     mon09v37.asm):02113         IMM16   DECA                    IS THIS IT?
F0A3 2606             (     mon09v37.asm):02114                 BNE     DIRECT          NO, TRY DIRECT
F0A5 8623             (     mon09v37.asm):02115                 LDA     #'#'            INDICATE IMMEDIATE
F0A7 A7C0             (     mon09v37.asm):02116                 STA     ,U+             SAVE IT
F0A9 2011             (     mon09v37.asm):02117                 BRA     OP16            16 BIT OPERAND
                      (     mon09v37.asm):02118         ;* DIRECT PAGE ADDRESSING
F0AB 4A               (     mon09v37.asm):02119         DIRECT  DECA                    IS THIS IT?
F0AC 260B             (     mon09v37.asm):02120                 BNE     EXTEND          NO, TRY EXTENDED
F0AE 863C             (     mon09v37.asm):02121                 LDA     #'<'            INDICATE DIRECT
F0B0 A7C0             (     mon09v37.asm):02122                 STA     ,U+             SAVE IT
F0B2 A6A0             (     mon09v37.asm):02123         OP8     LDA     ,Y+             GET OPERAND BYTE
F0B4 170192           (     mon09v37.asm):02124                 LBSR    WRHEXB          OUTPUT
F0B7 2008             (     mon09v37.asm):02125                 BRA     ENDIS1          END GO HOME
                      (     mon09v37.asm):02126         ;* EXTENDED ADDRESSING
F0B9 4A               (     mon09v37.asm):02127         EXTEND  DECA                    IS THIS IT?
F0BA 2608             (     mon09v37.asm):02128                 BNE     INDEX           NO, TRY INDEXED
F0BC ECA1             (     mon09v37.asm):02129         OP16    LDD     ,Y++            GET OPCODES
F0BE 170190           (     mon09v37.asm):02130                 LBSR    WRHEXW          OUTPUT WORD
F0C1 160142           (     mon09v37.asm):02131         ENDIS1  LBRA    ENDIS           GO HOME
                      (     mon09v37.asm):02132         ;* INDEXED ADDRESSING MODES
F0C4 4A               (     mon09v37.asm):02133         INDEX   DECA                    IS IT INDEXED?
F0C5 102600CB         (     mon09v37.asm):02134                 LBNE    PSHPUL          NO, TRY PUSH OR PUL
F0C9 A6A0             (     mon09v37.asm):02135                 LDA     ,Y+             GET POST BYTE
F0CB B79F82           (     mon09v37.asm):02136                 STA     POSBYT          SAVE FOR LATER
                      (     mon09v37.asm):02137         ;* TEST FOR FIVE BIT OFFSET
F0CE 2B04             (     mon09v37.asm):02138                 BMI     NO5BO           NOT A FIVE BIT OFFSET
F0D0 841F             (     mon09v37.asm):02139                 ANDA    #$1F            CONVERT TO POSTBYTE
F0D2 2014             (     mon09v37.asm):02140                 BRA     EVLX1           INSERT REGISTER AND CONTINUE
                      (     mon09v37.asm):02141         ;* TEST FOR INDIRECT MODE
F0D4 8510             (     mon09v37.asm):02142         NO5BO   BITA    #$10            TEST FOR INDIRECT
F0D6 2704             (     mon09v37.asm):02143                 BEQ     NOIND           NOT INDIRECT
F0D8 C65B             (     mon09v37.asm):02144                 LDB     #'['            GET OPENING
F0DA E7C0             (     mon09v37.asm):02145                 STB     ,U+             SAVE IN OUTPUT
                      (     mon09v37.asm):02146         ;* TEST FOR NO OFFSET
F0DC 848F             (     mon09v37.asm):02147         NOIND   ANDA    #$8F            REMOVE REGS AND INDIRECT BIT
F0DE 8184             (     mon09v37.asm):02148                 CMPA    #$84            NO OFFSET?
F0E0 272E             (     mon09v37.asm):02149                 BEQ     INSR1           INSERT REGISTER AND EXIT
                      (     mon09v37.asm):02150         ;* TEST FOR EIGHT BIT OFFSET
F0E2 8188             (     mon09v37.asm):02151                 CMPA    #$88            EIGHT BIT OFFSET
F0E4 2607             (     mon09v37.asm):02152                 BNE     EVL1            NO, TRY NEXT
F0E6 A6A0             (     mon09v37.asm):02153                 LDA     ,Y+             GET BYTE OFFSET
F0E8 17015E           (     mon09v37.asm):02154         EVLX1   LBSR    WRHEXB          OUTPUT
F0EB 2023             (     mon09v37.asm):02155                 BRA     INSR1           CONTINUE
                      (     mon09v37.asm):02156         ;* TEST FOR 16 BIT OFFSET
F0ED 8189             (     mon09v37.asm):02157         EVL1    CMPA    #$89            16 BIT OFSET?
F0EF 2607             (     mon09v37.asm):02158                 BNE     EVL2            NO, TRY NEXT
F0F1 ECA1             (     mon09v37.asm):02159                 LDD     ,Y++            GET OPERAND
F0F3 17015B           (     mon09v37.asm):02160                 LBSR    WRHEXW          OUTPUT
F0F6 2018             (     mon09v37.asm):02161                 BRA     INSR1           INSERT REGISTER
                      (     mon09v37.asm):02162         ;* TEST FOR A ACCUMULATOR OFFSET
F0F8 8186             (     mon09v37.asm):02163         EVL2    CMPA    #$86            IS IT 'A' OFFSET?
F0FA 2604             (     mon09v37.asm):02164                 BNE     EVL3            NO, TRY NEXT
F0FC 8641             (     mon09v37.asm):02165                 LDA     #'A'            GET ACCA
F0FE 200E             (     mon09v37.asm):02166                 BRA     SAIREG          GO HOME
                      (     mon09v37.asm):02167         ;* TEST FOR B ACCUMULATOR OFFSET
F100 8185             (     mon09v37.asm):02168         EVL3    CMPA    #$85            IS IT 'B' OFFSET?
F102 2604             (     mon09v37.asm):02169                 BNE     EVL4            NO, TRY NEXT
F104 8642             (     mon09v37.asm):02170                 LDA     #'B'            GET B
F106 2006             (     mon09v37.asm):02171                 BRA     SAIREG          GO HOME
                      (     mon09v37.asm):02172         ;* TEST FRO 'D' ACCUMULATOR OFFSET
F108 818B             (     mon09v37.asm):02173         EVL4    CMPA    #$8B            D OFFSET?
F10A 2606             (     mon09v37.asm):02174                 BNE     EVL5            NO, TRY NEXT
F10C 8644             (     mon09v37.asm):02175                 LDA     #'D'            GET D REGISTER
F10E A7C0             (     mon09v37.asm):02176         SAIREG  STA     ,U+             SAVE IT
F110 202C             (     mon09v37.asm):02177         INSR1   BRA     INSREG
                      (     mon09v37.asm):02178         ;* TEST FOR EXTENDED INDIRECT
F112 818F             (     mon09v37.asm):02179         EVL5    CMPA    #$8F            EXTENDED INDIRECT?
F114 2607             (     mon09v37.asm):02180                 BNE     EVL6            NO, TRY NEXT
F116 ECA1             (     mon09v37.asm):02181                 LDD     ,Y++            GET OFFSET
F118 170136           (     mon09v37.asm):02182                 LBSR    WRHEXW          OUTPUT
F11B 2054             (     mon09v37.asm):02183                 BRA     EVLFIN          AND CONTINUE
                      (     mon09v37.asm):02184         ;* TEST FOR PC OFFSET, 8 BIT
F11D 818C             (     mon09v37.asm):02185         EVL6    CMPA    #$8C            EIGHT BIT PC OFFSET?
F11F 2607             (     mon09v37.asm):02186                 BNE     EVL7            NO, TRY NEXT
F121 A6A0             (     mon09v37.asm):02187                 LDA     ,Y+             GET OFFSET
F123 170123           (     mon09v37.asm):02188                 LBSR    WRHEXB          OUTPUT
F126 2009             (     mon09v37.asm):02189                 BRA     WRPCRG          OUTPUT PC REGISTER
                      (     mon09v37.asm):02190         ;* TEST FOR PC OFFSET, 16 BIT
F128 818D             (     mon09v37.asm):02191         EVL7    CMPA    #$8D            PC OFFSET?
F12A 2612             (     mon09v37.asm):02192                 BNE     INSREG          NO, INSERT REGISTER
F12C ECA1             (     mon09v37.asm):02193                 LDD     ,Y++            GET OFFSET
F12E 170120           (     mon09v37.asm):02194                 LBSR    WRHEXW          OUTPUT
F131 8EF312           (     mon09v37.asm):02195         WRPCRG  LDX     #PCRG           POINT TO STRING
F134 A680             (     mon09v37.asm):02196         WRPR1   LDA     ,X+             GET CHAR
F136 A7C0             (     mon09v37.asm):02197                 STA     ,U+             SAVE
F138 8152             (     mon09v37.asm):02198                 CMPA    #'R'            END?
F13A 26F8             (     mon09v37.asm):02199                 BNE     WRPR1           NO, CONTINUE
F13C 2033             (     mon09v37.asm):02200                 BRA     EVLFIN          END IT NOW
                      (     mon09v37.asm):02201         ;* INSERT REGISTER BITS
F13E 862C             (     mon09v37.asm):02202         INSREG  LDA     #','            GET COMMA
F140 A7C0             (     mon09v37.asm):02203                 STA     ,U+             SAVE IT
F142 B69F82           (     mon09v37.asm):02204                 LDA     POSBYT          GET POSTBYTE
F145 C62D             (     mon09v37.asm):02205                 LDB     #'-'            GET MINUS
F147 848F             (     mon09v37.asm):02206                 ANDA    #$8F            REMOVE CRAP
F149 8182             (     mon09v37.asm):02207                 CMPA    #$82            DECREMENT BY ONE?
F14B 2706             (     mon09v37.asm):02208                 BEQ     DEC1            DECREMENT BY ONE
F14D 8183             (     mon09v37.asm):02209                 CMPA    #$83            DECREMENT BY TWO?
F14F 2604             (     mon09v37.asm):02210                 BNE     NODEC           NO, DON'T DEC
F151 E7C0             (     mon09v37.asm):02211                 STB     ,U+             SAVE
F153 E7C0             (     mon09v37.asm):02212         DEC1    STB     ,U+             AGAIN
F155 B69F82           (     mon09v37.asm):02213         NODEC   LDA     POSBYT          GET POSTBYTE
F158 44               (     mon09v37.asm):02214                 LSRA                    SHIFT
F159 44               (     mon09v37.asm):02215                 LSRA                    REGISTER
F15A 44               (     mon09v37.asm):02216                 LSRA                    BITS
F15B 44               (     mon09v37.asm):02217                 LSRA                    INTO
F15C 44               (     mon09v37.asm):02218                 LSRA                    BOTTOM
F15D C658             (     mon09v37.asm):02219                 LDB     #'X'            GET 'X'
F15F 8403             (     mon09v37.asm):02220                 ANDA    #$03            REMOVE CRAP
F161 270C             (     mon09v37.asm):02221                 BEQ     EVLEND          ITS 'X'
F163 C659             (     mon09v37.asm):02222                 LDB     #'Y'            GET 'Y'
F165 4A               (     mon09v37.asm):02223                 DECA                    TEST FOR 'Y'
F166 2707             (     mon09v37.asm):02224                 BEQ     EVLEND          YES
F168 C655             (     mon09v37.asm):02225                 LDB     #'U'            GET 'U'
F16A 4A               (     mon09v37.asm):02226                 DECA                    TEST
F16B 2702             (     mon09v37.asm):02227                 BEQ     EVLEND          ITS 'U'
F16D C653             (     mon09v37.asm):02228                 LDB     #'S'            MUST BE 'S'
F16F E7C0             (     mon09v37.asm):02229         EVLEND  STB     ,U+             SAVE IN OUTPUT
F171 B69F82           (     mon09v37.asm):02230         EVLFIN  LDA     POSBYT          GET POSTBYTE
F174 C62B             (     mon09v37.asm):02231                 LDB     #'+'            GET PLUS
F176 848F             (     mon09v37.asm):02232                 ANDA    #$8F            GET TYPE
F178 8180             (     mon09v37.asm):02233                 CMPA    #$80            IS IT INC BY ONE
F17A 2706             (     mon09v37.asm):02234                 BEQ     INC1            IF SO, WE HAVE IT
F17C 8181             (     mon09v37.asm):02235                 CMPA    #$81            INC BY TWO?
F17E 2604             (     mon09v37.asm):02236                 BNE     NOINC           NO INCREMENT
F180 E7C0             (     mon09v37.asm):02237                 STB     ,U+             SAVE ONE
F182 E7C0             (     mon09v37.asm):02238         INC1    STB     ,U+             SAVE TWO
F184 B69F82           (     mon09v37.asm):02239         NOINC   LDA     POSBYT          GET POSTBYTE
F187 2A08             (     mon09v37.asm):02240                 BPL     NOIND1          FIVE BIT OFFSET
F189 8510             (     mon09v37.asm):02241                 BITA    #$10            INDIRECT?
F18B 2704             (     mon09v37.asm):02242                 BEQ     NOIND1          NO INDIRECT
F18D 865D             (     mon09v37.asm):02243                 LDA     #']'            CLOSING BRACE
F18F A7C0             (     mon09v37.asm):02244                 STA     ,U+             SAVE IT
F191 160072           (     mon09v37.asm):02245         NOIND1  LBRA    ENDIS           END IT
                      (     mon09v37.asm):02246         ;* PULS OR PULL OPCODES
F194 4A               (     mon09v37.asm):02247         PSHPUL  DECA                    IS IT PUSH OR PULL?
F195 2635             (     mon09v37.asm):02248                 BNE     TFREXG          NO, TRY TRANSFER OR EXCHANGE
F197 A6A0             (     mon09v37.asm):02249                 LDA     ,Y+             GET POSTBYTE
F199 8EF336           (     mon09v37.asm):02250                 LDX     #PSHTAB         GET 'CC'
F19C 44               (     mon09v37.asm):02251         PSH1    LSRA                    SHIFT OUT BITS
F19D 2425             (     mon09v37.asm):02252                 BCC     PSHNXT          SKIP THIS ONE
F19F 3406             (     mon09v37.asm):02253                 PSHS    A,B             SAVE REGS
F1A1 EC81             (     mon09v37.asm):02254                 LDD     ,X++            GET DATA
F1A3 8155             (     mon09v37.asm):02255                 CMPA    #'U'            SAVEING U REGISTER
F1A5 2607             (     mon09v37.asm):02256                 BNE     PSH4            NO, IT'S OK
F1A7 7D9F81           (     mon09v37.asm):02257                 TST     INSTYP          SPECIAL CASE
F1AA 2A02             (     mon09v37.asm):02258                 BPL     PSH4            OK
F1AC 8653             (     mon09v37.asm):02259                 LDA     #'S'            CONVERT
F1AE A7C0             (     mon09v37.asm):02260         PSH4    STA     ,U+             SAVE IT
F1B0 5D               (     mon09v37.asm):02261                 TSTB                    MORE?
F1B1 2702             (     mon09v37.asm):02262                 BEQ     PSH2            NO, SKIP IT
F1B3 E7C0             (     mon09v37.asm):02263                 STB     ,U+             SAVE
F1B5 3506             (     mon09v37.asm):02264         PSH2    PULS    A,B             RESTORE REGS
F1B7 4D               (     mon09v37.asm):02265                 TSTA                    MORE BITS?
F1B8 270F             (     mon09v37.asm):02266                 BEQ     PSH3            NO, QUIT
F1BA 3402             (     mon09v37.asm):02267                 PSHS    A               RESAVE
F1BC 862C             (     mon09v37.asm):02268                 LDA     #','            GET COMMA
F1BE A7C0             (     mon09v37.asm):02269                 STA     ,U+             SAVE
F1C0 3502             (     mon09v37.asm):02270                 PULS    A               GET IT BACK
F1C2 20D8             (     mon09v37.asm):02271                 BRA     PSH1            CONTINUE
F1C4 3002             (     mon09v37.asm):02272         PSHNXT  LEAX    2,X             ADVANCE
F1C6 4D               (     mon09v37.asm):02273                 TSTA                    ARE WE OK
F1C7 26D3             (     mon09v37.asm):02274                 BNE     PSH1            KEEP TRYING
F1C9 16003A           (     mon09v37.asm):02275         PSH3    LBRA    ENDIS           DONE
                      (     mon09v37.asm):02276         ;* TRANSFER AND EXCHANGE POSTBYTE OPCODES
F1CC 4A               (     mon09v37.asm):02277         TFREXG  DECA                    TRANSFER OR EXCHANGE?
F1CD 2623             (     mon09v37.asm):02278                 BNE     SBRAN           TRY SHORT BRANCH
F1CF A6A4             (     mon09v37.asm):02279                 LDA     ,Y              GET POSTBYTE
F1D1 44               (     mon09v37.asm):02280                 LSRA                    SHIFT
F1D2 44               (     mon09v37.asm):02281                 LSRA                    INTO
F1D3 44               (     mon09v37.asm):02282                 LSRA                    LOW
F1D4 44               (     mon09v37.asm):02283                 LSRA                    NIBBLE
F1D5 8D0B             (     mon09v37.asm):02284                 BSR     TFRREG          GET REGISTER
F1D7 862C             (     mon09v37.asm):02285                 LDA     #','            SEPERATOR
F1D9 A7C0             (     mon09v37.asm):02286                 STA     ,U+             SAVE
F1DB A6A0             (     mon09v37.asm):02287                 LDA     ,Y+             GET POSTBYTE AGAIN
F1DD 8D03             (     mon09v37.asm):02288                 BSR     TFRREG          PLACE IT
F1DF 160024           (     mon09v37.asm):02289                 LBRA    ENDIS           GO HOME
                      (     mon09v37.asm):02290         ;* CALCULATE TRANSFER REGISTER
F1E2 840F             (     mon09v37.asm):02291         TFRREG  ANDA    #$0F            REMOVE HIGH CRAP
F1E4 48               (     mon09v37.asm):02292                 LSLA                    MULTIPLY BY TWO
F1E5 8EF316           (     mon09v37.asm):02293                 LDX     #REGTAB         POINT TO TABLE
F1E8 EC86             (     mon09v37.asm):02294                 LDD     A,X             GET REGISTER VALUE
F1EA A7C0             (     mon09v37.asm):02295                 STA     ,U+             SAVE IT
F1EC 5D               (     mon09v37.asm):02296                 TSTB                    SECOND BYTE?
F1ED 2702             (     mon09v37.asm):02297                 BEQ     TFRET           NO, SKIP IT
F1EF E7C0             (     mon09v37.asm):02298                 STB     ,U+             SAVE IT
F1F1 39               (     mon09v37.asm):02299         TFRET   RTS
                      (     mon09v37.asm):02300         ;* SHORT BRANCH
F1F2 4A               (     mon09v37.asm):02301         SBRAN   DECA                    SHORT BRANCH
F1F3 2608             (     mon09v37.asm):02302                 BNE     LBRAN           NO, TRY LONG BRANCH
F1F5 E6A0             (     mon09v37.asm):02303                 LDB     ,Y+             GET OPERATOR
F1F7 30A5             (     mon09v37.asm):02304                 LEAX    B,Y             GET NEW ADDRESS
F1F9 1F10             (     mon09v37.asm):02305                 TFR     X,D             COPY
F1FB 2006             (     mon09v37.asm):02306                 BRA     SAVADR          FINISH
                      (     mon09v37.asm):02307         ;* LONG BRANCH
F1FD                  (     mon09v37.asm):02308         LBRAN
F1FD ECA1             (     mon09v37.asm):02309                 LDD     ,Y++            GET OPERAND
F1FF 3420             (     mon09v37.asm):02310                 PSHS    Y               SAVE Y
F201 E3E1             (     mon09v37.asm):02311                 ADDD    ,S++            ADD OFFSET TO REG
F203                  (     mon09v37.asm):02312         SAVADR
F203 17004B           (     mon09v37.asm):02313                 LBSR    WRHEXW          OUTPUT WORD.
F206                  (     mon09v37.asm):02314         ENDIS
F206 86FF             (     mon09v37.asm):02315                 LDA     #$FF            LINE TERMINATOR
F208 A7C4             (     mon09v37.asm):02316                 STA     ,U              SAVE IT
                      (     mon09v37.asm):02317         ;* INSERT ADDRESS/BYTE DATA
F20A EEE4             (     mon09v37.asm):02318                 LDU     ,S              RESTORE U REGISTER
F20C 3420             (     mon09v37.asm):02319                 PSHS    Y               SAVE POINTER TO END
F20E BE9F7F           (     mon09v37.asm):02320                 LDX     PTRSAV          POINT TO STARTING ADDRESS
F211 1F10             (     mon09v37.asm):02321                 TFR     X,D             COPY
F213 170045           (     mon09v37.asm):02322                 LBSR    WRHEX           OUTPUT
F216 1F98             (     mon09v37.asm):02323                 TFR     B,A             COPY
F218 170040           (     mon09v37.asm):02324                 LBSR    WRHEX           OUTPUT
F21B 5F               (     mon09v37.asm):02325                 CLRB                    START WITH ZERO
F21C                  (     mon09v37.asm):02326         END1
F21C ACE4             (     mon09v37.asm):02327                 CMPX    ,S              ARE WE AT END?
F21E 240A             (     mon09v37.asm):02328                 BHS     END2            IF SO, QUIT
F220 5C               (     mon09v37.asm):02329                 INCB                    ADVANCE
F221 3341             (     mon09v37.asm):02330                 LEAU    1,U             ADVANCE
F223 A680             (     mon09v37.asm):02331                 LDA     ,X+             GET BYTE
F225 170033           (     mon09v37.asm):02332                 LBSR    WRHEX           OUTPUT
F228 20F2             (     mon09v37.asm):02333                 BRA     END1            CONTINUE
F22A                  (     mon09v37.asm):02334         END2
F22A 3262             (     mon09v37.asm):02335                 LEAS    2,S             RESTORE STACK
F22C EEE4             (     mon09v37.asm):02336                 LDU     ,S              RESTORE U REGISTER
F22E 33C814           (     mon09v37.asm):02337                 LEAU    20,U            ADVANCE TO TEXT FIELD
F231 BE9F7F           (     mon09v37.asm):02338                 LDX     PTRSAV          GET POINTER BACK
F234                  (     mon09v37.asm):02339         END3
F234 5A               (     mon09v37.asm):02340                 DECB                    REDUCE COUNT
F235 2B10             (     mon09v37.asm):02341                 BMI     END4            CONTINUE
F237 A680             (     mon09v37.asm):02342                 LDA     ,X+             GO IT AGAIN
F239 8120             (     mon09v37.asm):02343                 CMPA    #' '            < SPACE?
F23B 2504             (     mon09v37.asm):02344                 BLO     END5            YES
F23D 817F             (     mon09v37.asm):02345                 CMPA    #$7F            > 7F?
F23F 2502             (     mon09v37.asm):02346                 BLO     END6            OK
F241                  (     mon09v37.asm):02347         END5
F241 862E             (     mon09v37.asm):02348                 LDA     #'.'            CONVERT TO DOT
F243                  (     mon09v37.asm):02349         END6
F243 A7C0             (     mon09v37.asm):02350                 STA     ,U+             SAVE
F245 20ED             (     mon09v37.asm):02351                 BRA     END3
F247                  (     mon09v37.asm):02352         END4
F247 35C0             (     mon09v37.asm):02353                 PULS    U,PC            GO HOME
                      (     mon09v37.asm):02354         
                      (     mon09v37.asm):02355         ;*
                      (     mon09v37.asm):02356         ;* SUBROUTINES
                      (     mon09v37.asm):02357         ;*
F249                  (     mon09v37.asm):02358         WRHEXB
F249 3402             (     mon09v37.asm):02359                 PSHS    A               SAVE IT
F24B 8624             (     mon09v37.asm):02360                 LDA     #'$'            INDICATE HEX
F24D A7C0             (     mon09v37.asm):02361                 STA     ,U+             SAVE
F24F 2008             (     mon09v37.asm):02362                 BRA     WRHEX1          CONTINUE
F251                  (     mon09v37.asm):02363         WRHEXW
F251 3404             (     mon09v37.asm):02364                 PSHS    B               SAVE B
F253 C624             (     mon09v37.asm):02365                 LDB     #'$'            INDICATE HEX
F255 E7C0             (     mon09v37.asm):02366                 STB     ,U+             SAVE IT
F257 8D02             (     mon09v37.asm):02367                 BSR     WRHEX           OUTPUT
F259                  (     mon09v37.asm):02368         WRHEX1
F259 3502             (     mon09v37.asm):02369                 PULS    A               RESTORE
F25B                  (     mon09v37.asm):02370         WRHEX
F25B 3402             (     mon09v37.asm):02371                 PSHS    A               SAVE IT
F25D 44               (     mon09v37.asm):02372                 LSRA                    SHIFT
F25E 44               (     mon09v37.asm):02373                 LSRA                    HIGH BYTE
F25F 44               (     mon09v37.asm):02374                 LSRA                    INTO
F260 44               (     mon09v37.asm):02375                 LSRA                    LOW FOR OUTPUT
F261 8D02             (     mon09v37.asm):02376                 BSR     WRHEXN          OUTPUT NIBBLE
F263 3502             (     mon09v37.asm):02377                 PULS    A               RETORE
F265                  (     mon09v37.asm):02378         WRHEXN
F265 840F             (     mon09v37.asm):02379                 ANDA    #$0F            REMOVE CRAP
F267 8B30             (     mon09v37.asm):02380                 ADDA    #$30            CONVERT
F269 8139             (     mon09v37.asm):02381                 CMPA    #$39            OK?
F26B 2302             (     mon09v37.asm):02382                 BLS     WRNOK           OK
F26D 8B07             (     mon09v37.asm):02383                 ADDA    #7              CONVERT
F26F                  (     mon09v37.asm):02384         WRNOK
F26F A7C0             (     mon09v37.asm):02385                 STA             ,U+             SAVE IT
F271 39               (     mon09v37.asm):02386                 RTS
                      (     mon09v37.asm):02387         
                      (     mon09v37.asm):02388         ;MODS BY JQ
                      (     mon09v37.asm):02389         ;*
                      (     mon09v37.asm):02390         ;* 6309 ILLOP/DIV0 HANDLER
                      (     mon09v37.asm):02391         ;*
                      (     mon09v37.asm):02392          IFNE JQ_ILLOP  USE JQ ILLOP ENHANCEMENTS
F272                  (     mon09v37.asm):02393         MD_DIV0         EQU     $80                     MD.7 = DIV0 FLAG
F272                  (     mon09v37.asm):02394         MD_ILOP         EQU     $40                     MD.6 = ILLOP FLAG
                      (     mon09v37.asm):02395         
F272                  (     mon09v37.asm):02396         ILOPHND
                      (     mon09v37.asm):02397                 LDX             #SAVCC                  POINT TO START OF SAVED REGS
                      (     mon09v37.asm):02398                 LDB             #12                             MOVE 12 BYTES
F272                  (     mon09v37.asm):02399         ILOPH1
                      (     mon09v37.asm):02400                 LDA             ,S+                             GET BYTE
                      (     mon09v37.asm):02401                 STA             ,X+                             SAVE
                      (     mon09v37.asm):02402                 DECB                                    DECREMENT COUNT
                      (     mon09v37.asm):02403                 BNE             ILOPH1                  DO THEM ALL
                      (     mon09v37.asm):02404                 STS             SAVS                    SAVE STACK POINTER
                      (     mon09v37.asm):02405         
                      (     mon09v37.asm):02406         ;       DETERMINE TRAP SOURCE
                      (     mon09v37.asm):02407                 LDX             #MSG_DIV0               DIV0 MESSAGE POINTER
                      (     mon09v37.asm):02408                 BITMD   #MD_DIV0                Trap entry - see if Division by 0 TRAP
                      (     mon09v37.asm):02409                 BNE             ILOPH3                  DIV0 TRAP
                      (     mon09v37.asm):02410         
F272                  (     mon09v37.asm):02411         ILOPH2
                      (     mon09v37.asm):02412                 LDX             #MSG_ILLOP              ILLOP MESSAGE POINTER
                      (     mon09v37.asm):02413                 BITMD   #MD_ILOP                Trap entry - see if ILLOP TRAP
                      (     mon09v37.asm):02414                 BNE             ILOPH3                  illegal instruction TRAP
                      (     mon09v37.asm):02415                 LDX             #MSG_TRAPERR    UNKNOWN TRAP SOURCE
                      (     mon09v37.asm):02416         
F272                  (     mon09v37.asm):02417         ILOPH3
                      (     mon09v37.asm):02418                 JSR             MON09_WRLIN             EMIT THE STRING
                      (     mon09v37.asm):02419                 LBSR    DISREG                  DISPLAY REGISTERS
                      (     mon09v37.asm):02420                 LBRA    MAIN                    AND DO PROMPT
                      (     mon09v37.asm):02421         
F272                  (     mon09v37.asm):02422         MSG_TRAPERR
                      (     mon09v37.asm):02423                 FCC     '*** UKNOWN Trap ***'
                      (     mon09v37.asm):02424                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02425         
F272                  (     mon09v37.asm):02426         MSG_ILLOP
                      (     mon09v37.asm):02427                 FCC     '*** ILLOP Trap ***'
                      (     mon09v37.asm):02428                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02429         
F272                  (     mon09v37.asm):02430         MSG_DIV0
                      (     mon09v37.asm):02431                 FCC     '*** DIV0 Trap ***'
                      (     mon09v37.asm):02432                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02433          ENDC           USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):02434         ;
                      (     mon09v37.asm):02435         ;*
                      (     mon09v37.asm):02436         ;* NMI HANDLER
                      (     mon09v37.asm):02437         ;*
F272                  (     mon09v37.asm):02438         NMIHND
F272 8E9F6E           (     mon09v37.asm):02439                 LDX     #SAVCC          POINT TO START OF SAVED REGS
F275 C60C             (     mon09v37.asm):02440                 LDB     #12             MOVE 12 BYTES
F277                  (     mon09v37.asm):02441         NMIH1
F277 A6E0             (     mon09v37.asm):02442                 LDA     ,S+             GET BYTE
F279 A780             (     mon09v37.asm):02443                 STA     ,X+             SAVE
F27B 5A               (     mon09v37.asm):02444                 DECB                    DECREMENT COUNT
F27C 26F9             (     mon09v37.asm):02445                 BNE     NMIH1           DO THEM ALL
F27E 10FF9F7A         (     mon09v37.asm):02446                 STS     SAVS            SAVE STACK POINTER
F282 17FAB0           (     mon09v37.asm):02447                 LBSR    WRMSG           DISPLAY MESSAGE
F285 2A2A2A204E4D4920 (     mon09v37.asm):02448                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F29A FF               (     mon09v37.asm):02449                 FCB     $FF             NEW LINE
F29B 205C             (     mon09v37.asm):02450                 BRA     BRKREG          DISPLAY REGISTERS
                      (     mon09v37.asm):02451         
                      (     mon09v37.asm):02452         ;*
                      (     mon09v37.asm):02453         ;* SWI HANDLER
                      (     mon09v37.asm):02454         ;*
F29D                  (     mon09v37.asm):02455         SWIHND
F29D 108E9F83         (     mon09v37.asm):02456                 LDY     #BRKTAB         POINT TO BREAKPOINT TABLE
F2A1 AE6A             (     mon09v37.asm):02457                 LDX     10,S            GET STORED PC
F2A3 301F             (     mon09v37.asm):02458                 LEAX    -1,X            BACKUP TO BREAKPOINT ADDRESS
F2A5 C608             (     mon09v37.asm):02459                 LDB     #8              CHECK EIGHT BREAKPOINTS
F2A7                  (     mon09v37.asm):02460         SWIHN1
F2A7 ACA4             (     mon09v37.asm):02461                 CMPX    ,Y              IS THIS IT?
F2A9 2710             (     mon09v37.asm):02462                 BEQ     SWIHN2          YES
F2AB 3123             (     mon09v37.asm):02463                 LEAY    3,Y             SKIP OPCODE
F2AD 5A               (     mon09v37.asm):02464                 DECB                    REDUCE COUNT
F2AE 26F7             (     mon09v37.asm):02465                 BNE     SWIHN1          CONTINUE
F2B0 E662             (     mon09v37.asm):02466                 LDB     2,S                     RESTORE B.
F2B2 AE64             (     mon09v37.asm):02467                 LDX     4,S                     RESTORE X.
F2B4 10AE66           (     mon09v37.asm):02468                 LDY     6,S                     RESTORE Y.
F2B7 6E9F9F5F         (     mon09v37.asm):02469                 JMP     [SWIADR]        NOT A BREAKPOINT, EXECUTE SWI HANDLER
F2BB                  (     mon09v37.asm):02470         SWIHN2
F2BB F79F81           (     mon09v37.asm):02471                 STB     INSTYP          SAVE BREAKPOINT NUMBER
F2BE 8E9F6E           (     mon09v37.asm):02472                 LDX     #SAVCC          POINT TO START OF SAVED REGS
F2C1 C60A             (     mon09v37.asm):02473                 LDB     #10                     MOVE 10
F2C3                  (     mon09v37.asm):02474         SWIHN25
F2C3 A6E0             (     mon09v37.asm):02475                 LDA     ,S+                     GET BYTE
F2C5 A780             (     mon09v37.asm):02476                 STA     ,X+                     SAVE
F2C7 5A               (     mon09v37.asm):02477                 DECB                            DECREMENT COUNT
F2C8 26F9             (     mon09v37.asm):02478                 BNE     SWIHN25         DO THEM ALL
F2CA 3510             (     mon09v37.asm):02479                 PULS    X                       GET PC
F2CC 301F             (     mon09v37.asm):02480                 LEAX    -1,X            SET BACK TO REAL PC
F2CE BF9F78           (     mon09v37.asm):02481                 STX     SAVPC           SAVED PC
F2D1 10FF9F7A         (     mon09v37.asm):02482                 STS     SAVS            SAVE STACK POINTER
F2D5 17FA5D           (     mon09v37.asm):02483                 LBSR    WRMSG           DISPLAY MESSAGE
F2D8 2A2A2A2042726561 (     mon09v37.asm):02484                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
F2E9 8638             (     mon09v37.asm):02485                 LDA     #$38            GET NUMBER, PLUS ASCII CONVERT
F2EB B09F81           (     mon09v37.asm):02486                 SUBA    INSTYP          CONVERT TO PROPER DIGIT
F2EE 17FA90           (     mon09v37.asm):02487                 LBSR    PUTCHR          DISPLAY
F2F1 17FA41           (     mon09v37.asm):02488                 LBSR    WRMSG           OUTPUT MESSAGE
F2F4 202A2A2A         (     mon09v37.asm):02489                 FCC     ' ***'          TRAILING MESSAGE
F2F8 FF               (     mon09v37.asm):02490                 FCB     $FF                     NEW LINE
F2F9                  (     mon09v37.asm):02491         BRKREG
F2F9 17F524           (     mon09v37.asm):02492                 LBSR    DISREG          DISPLAY
F2FC                  (     mon09v37.asm):02493         BRKRES
F2FC 8E9F83           (     mon09v37.asm):02494                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
F2FF C608             (     mon09v37.asm):02495                 LDB     #8                      DO IT EIGHT TIMES
F301                  (     mon09v37.asm):02496         SWIHN3
F301 10AE81           (     mon09v37.asm):02497                 LDY     ,X++            GET REG
F304 2704             (     mon09v37.asm):02498                 BEQ     SWIHN4          NO BRK, NEXT
F306 A684             (     mon09v37.asm):02499                 LDA     ,X              GET OPCODE
F308 A7A4             (     mon09v37.asm):02500                 STA     ,Y              REPLACE IN RAM
F30A                  (     mon09v37.asm):02501         SWIHN4
F30A 3001             (     mon09v37.asm):02502                 LEAX    1,X             SKIP OPCODE
F30C 5A               (     mon09v37.asm):02503                 DECB                    REDUCE COUNT
F30D 26F2             (     mon09v37.asm):02504                 BNE     SWIHN3          GO AGAIN
F30F 16F281           (     mon09v37.asm):02505                 LBRA    MAIN            DO PROMPT
                      (     mon09v37.asm):02506         
                      (     mon09v37.asm):02507         ;*
                      (     mon09v37.asm):02508         ;* CONSTANTS
F312                  (     mon09v37.asm):02509         PCRG
F312 2C504352         (     mon09v37.asm):02510                 FCC     ',PCR'
                      (     mon09v37.asm):02511         
                      (     mon09v37.asm):02512         ;*
                      (     mon09v37.asm):02513         ;* TRANSFER/EXCHANGE REGISTER TABLE
                      (     mon09v37.asm):02514         ;*
F316                  (     mon09v37.asm):02515         REGTAB
F316 4400             (     mon09v37.asm):02516                 FCN     'D'             0
F318 5800             (     mon09v37.asm):02517                 FCN     'X'             1
F31A 5900             (     mon09v37.asm):02518                 FCN     'Y'             2
F31C 5500             (     mon09v37.asm):02519                 FCN     'U'             3
F31E 5300             (     mon09v37.asm):02520                 FCN     'S'             4
F320 5043             (     mon09v37.asm):02521                 FCC     'PC'            5
F322 3F00             (     mon09v37.asm):02522                 FCN     '?'             6
F324 3F00             (     mon09v37.asm):02523                 FCN     '?'             7
F326 4100             (     mon09v37.asm):02524                 FCN     'A'             8
F328 4200             (     mon09v37.asm):02525                 FCN     'B'             9
F32A 4343             (     mon09v37.asm):02526                 FCC     'CC'            A
F32C 4450             (     mon09v37.asm):02527                 FCC     'DP'            B
F32E 3F00             (     mon09v37.asm):02528                 FCN     '?'             C
F330 3F00             (     mon09v37.asm):02529                 FCN     '?'             D
F332 3F00             (     mon09v37.asm):02530                 FCN     '?'             E
F334 3F00             (     mon09v37.asm):02531                 FCN     '?'             F
                      (     mon09v37.asm):02532         
                      (     mon09v37.asm):02533         ;*
                      (     mon09v37.asm):02534         ;* PUSH/PULL REGISTER TABLE
                      (     mon09v37.asm):02535         ;*
F336                  (     mon09v37.asm):02536         PSHTAB
F336 4343             (     mon09v37.asm):02537                 FCC     'CC'
F338 4100             (     mon09v37.asm):02538                 FCN     'A'
F33A 4200             (     mon09v37.asm):02539                 FCN     'B'
F33C 4450             (     mon09v37.asm):02540                 FCC     'DP'
F33E 5800             (     mon09v37.asm):02541                 FCN     'X'
F340 5900             (     mon09v37.asm):02542                 FCN     'Y'
F342 5500             (     mon09v37.asm):02543                 FCN     'U'
F344 504300           (     mon09v37.asm):02544                 FCN     'PC'
                      (     mon09v37.asm):02545         
                      (     mon09v37.asm):02546         ;*
                      (     mon09v37.asm):02547         ;* OPCODE TABLE, OPCODE BYTE, TYPE BYTE, TEXT BYTE
                      (     mon09v37.asm):02548         ;*
F347                  (     mon09v37.asm):02549         OPTAB1
F347 860101           (     mon09v37.asm):02550                 FCB     $86,1,1         'LDA' INSTRUCTIONS
F34A 960301           (     mon09v37.asm):02551                 FCB     $96,3,1
F34D A60501           (     mon09v37.asm):02552                 FCB     $A6,5,1
F350 B60401           (     mon09v37.asm):02553                 FCB     $B6,4,1
F353 C60102           (     mon09v37.asm):02554                 FCB     $C6,1,2         'LDB' INSTRUCTIONS
F356 D60302           (     mon09v37.asm):02555                 FCB     $D6,3,2
F359 E60502           (     mon09v37.asm):02556                 FCB     $E6,5,2
F35C F60402           (     mon09v37.asm):02557                 FCB     $F6,4,2
F35F CC0203           (     mon09v37.asm):02558                 FCB     $CC,2,3         'LDD' INSTRUCTIONS
F362 DC0303           (     mon09v37.asm):02559                 FCB     $DC,3,3
F365 EC0503           (     mon09v37.asm):02560                 FCB     $EC,5,3
F368 FC0403           (     mon09v37.asm):02561                 FCB     $FC,4,3
F36B CE0204           (     mon09v37.asm):02562                 FCB     $CE,2,4         'LDU' INSTRUCTIONS
F36E DE0304           (     mon09v37.asm):02563                 FCB     $DE,3,4
F371 EE0504           (     mon09v37.asm):02564                 FCB     $EE,5,4
F374 FE0404           (     mon09v37.asm):02565                 FCB     $FE,4,4
F377 8E0205           (     mon09v37.asm):02566                 FCB     $8E,2,5         'LDX' INSTRUCTIONS
F37A 9E0305           (     mon09v37.asm):02567                 FCB     $9E,3,5
F37D AE0505           (     mon09v37.asm):02568                 FCB     $AE,5,5
F380 BE0405           (     mon09v37.asm):02569                 FCB     $BE,4,5
F383 970306           (     mon09v37.asm):02570                 FCB     $97,3,6         'STA' INSTRUCTINOS
F386 A70506           (     mon09v37.asm):02571                 FCB     $A7,5,6
F389 B70406           (     mon09v37.asm):02572                 FCB     $B7,4,6
F38C D70307           (     mon09v37.asm):02573                 FCB     $D7,3,7         'STB' INSTRUCTIONS
F38F E70507           (     mon09v37.asm):02574                 FCB     $E7,5,7
F392 F70407           (     mon09v37.asm):02575                 FCB     $F7,4,7
F395 DD0308           (     mon09v37.asm):02576                 FCB     $DD,3,8         'STD' INSTRUCTIONS
F398 ED0508           (     mon09v37.asm):02577                 FCB     $ED,5,8
F39B FD0408           (     mon09v37.asm):02578                 FCB     $FD,4,8
F39E DF0309           (     mon09v37.asm):02579                 FCB     $DF,3,9         'STU' INSTRUCTIONS
F3A1 EF0509           (     mon09v37.asm):02580                 FCB     $EF,5,9
F3A4 FF0409           (     mon09v37.asm):02581                 FCB     $FF,4,9
F3A7 9F030A           (     mon09v37.asm):02582                 FCB     $9F,3,10        'STX' INSTRUCTIONS
F3AA AF050A           (     mon09v37.asm):02583                 FCB     $AF,5,10
F3AD BF040A           (     mon09v37.asm):02584                 FCB     $BF,4,10
F3B0 3A000B           (     mon09v37.asm):02585                 FCB     $3A,0,11        'ABX'
F3B3 89010C           (     mon09v37.asm):02586                 FCB     $89,1,12        'ADCA'
F3B6 99030C           (     mon09v37.asm):02587                 FCB     $99,3,12
F3B9 A9050C           (     mon09v37.asm):02588                 FCB     $A9,5,12
F3BC B9040C           (     mon09v37.asm):02589                 FCB     $B9,4,12
F3BF C9010D           (     mon09v37.asm):02590                 FCB     $C9,1,13        'ADCB'
F3C2 D9030D           (     mon09v37.asm):02591                 FCB     $D9,3,13
F3C5 E9050D           (     mon09v37.asm):02592                 FCB     $E9,5,13
F3C8 F9040D           (     mon09v37.asm):02593                 FCB     $F9,4,13
F3CB 8B010E           (     mon09v37.asm):02594                 FCB     $8B,1,14        'ADDA'
F3CE 9B030E           (     mon09v37.asm):02595                 FCB     $9B,3,14
F3D1 AB050E           (     mon09v37.asm):02596                 FCB     $AB,5,14
F3D4 BB040E           (     mon09v37.asm):02597                 FCB     $BB,4,14
F3D7 CB010F           (     mon09v37.asm):02598                 FCB     $CB,1,15        'ADDB'
F3DA DB030F           (     mon09v37.asm):02599                 FCB     $DB,3,15
F3DD EB050F           (     mon09v37.asm):02600                 FCB     $EB,5,15
F3E0 FB040F           (     mon09v37.asm):02601                 FCB     $FB,4,15
F3E3 C30210           (     mon09v37.asm):02602                 FCB     $C3,2,16        'ADDD'
F3E6 D30310           (     mon09v37.asm):02603                 FCB     $D3,3,16
F3E9 E30510           (     mon09v37.asm):02604                 FCB     $E3,5,16
F3EC F30410           (     mon09v37.asm):02605                 FCB     $F3,4,16
F3EF 480011           (     mon09v37.asm):02606                 FCB     $48,0,17        'ASLA'
F3F2 580012           (     mon09v37.asm):02607                 FCB     $58,0,18        'ASLB'
F3F5 080313           (     mon09v37.asm):02608                 FCB     $08,3,19        'ASL'
F3F8 680513           (     mon09v37.asm):02609                 FCB     $68,5,19
F3FB 780413           (     mon09v37.asm):02610                 FCB     $78,4,19
F3FE 470014           (     mon09v37.asm):02611                 FCB     $47,0,20        'ASRA'
F401 570015           (     mon09v37.asm):02612                 FCB     $57,0,21        'ASRB'
F404 070316           (     mon09v37.asm):02613                 FCB     $07,3,22        'ASR'
F407 670516           (     mon09v37.asm):02614                 FCB     $67,5,22
F40A 770416           (     mon09v37.asm):02615                 FCB     $77,4,22
F40D 850117           (     mon09v37.asm):02616                 FCB     $85,1,23        'BITA'
F410 950317           (     mon09v37.asm):02617                 FCB     $95,3,23
F413 A50517           (     mon09v37.asm):02618                 FCB     $A5,5,23
F416 B50417           (     mon09v37.asm):02619                 FCB     $B5,4,23
F419 C50118           (     mon09v37.asm):02620                 FCB     $C5,1,24        'BITB'
F41C D50318           (     mon09v37.asm):02621                 FCB     $D5,3,24
F41F E50518           (     mon09v37.asm):02622                 FCB     $E5,5,24
F422 F50418           (     mon09v37.asm):02623                 FCB     $F5,4,24
F425 4F0019           (     mon09v37.asm):02624                 FCB     $4F,0,25        'CLRA'
F428 5F001A           (     mon09v37.asm):02625                 FCB     $5F,0,26        'CLRB'
F42B 0F031B           (     mon09v37.asm):02626                 FCB     $0F,3,27        'CLR'
F42E 6F051B           (     mon09v37.asm):02627                 FCB     $6F,5,27
F431 7F041B           (     mon09v37.asm):02628                 FCB     $7F,4,27
F434 81011C           (     mon09v37.asm):02629                 FCB     $81,1,28        'CMPA'
F437 91031C           (     mon09v37.asm):02630                 FCB     $91,3,28
F43A A1051C           (     mon09v37.asm):02631                 FCB     $A1,5,28
F43D B1041C           (     mon09v37.asm):02632                 FCB     $B1,4,28
F440 C1011D           (     mon09v37.asm):02633                 FCB     $C1,1,29        'CMPB'
F443 D1031D           (     mon09v37.asm):02634                 FCB     $D1,3,29
F446 E1051D           (     mon09v37.asm):02635                 FCB     $E1,5,29
F449 F1041D           (     mon09v37.asm):02636                 FCB     $F1,4,29
F44C 8C021E           (     mon09v37.asm):02637                 FCB     $8C,2,30        'CMPX'
F44F 9C031E           (     mon09v37.asm):02638                 FCB     $9C,3,30
F452 AC051E           (     mon09v37.asm):02639                 FCB     $AC,5,30
F455 BC041E           (     mon09v37.asm):02640                 FCB     $BC,4,30
F458 43001F           (     mon09v37.asm):02641                 FCB     $43,0,31        'COMA'
F45B 530020           (     mon09v37.asm):02642                 FCB     $53,0,32        'COMB'
F45E 030321           (     mon09v37.asm):02643                 FCB     $03,3,33        'COM'
F461 630521           (     mon09v37.asm):02644                 FCB     $63,5,33
F464 730421           (     mon09v37.asm):02645                 FCB     $73,4,33
F467 3C0122           (     mon09v37.asm):02646                 FCB     $3C,1,34        'CWAI'
F46A 190023           (     mon09v37.asm):02647                 FCB     $19,0,35        'DAA'
F46D 4A0024           (     mon09v37.asm):02648                 FCB     $4A,0,36        'DECA'
F470 5A0025           (     mon09v37.asm):02649                 FCB     $5A,0,37        'DECB'
F473 0A0326           (     mon09v37.asm):02650                 FCB     $0A,3,38        'DEC'
F476 6A0526           (     mon09v37.asm):02651                 FCB     $6A,5,38
F479 7A0426           (     mon09v37.asm):02652                 FCB     $7A,4,38
F47C 880127           (     mon09v37.asm):02653                 FCB     $88,1,39        'EORA'
F47F 980327           (     mon09v37.asm):02654                 FCB     $98,3,39
F482 A80527           (     mon09v37.asm):02655                 FCB     $A8,5,39
F485 B80427           (     mon09v37.asm):02656                 FCB     $B8,4,39
F488 C80128           (     mon09v37.asm):02657                 FCB     $C8,1,40        'EORB'
F48B D80328           (     mon09v37.asm):02658                 FCB     $D8,3,40
F48E E80528           (     mon09v37.asm):02659                 FCB     $E8,5,40
F491 F80428           (     mon09v37.asm):02660                 FCB     $F8,4,40
F494 1E0729           (     mon09v37.asm):02661                 FCB     $1E,7,41        'EXG'
F497 1F072A           (     mon09v37.asm):02662                 FCB     $1F,7,42        'TFR'
F49A 34062B           (     mon09v37.asm):02663                 FCB     $34,6,43        'PSHS'
F49D 36862C           (     mon09v37.asm):02664                 FCB     $36,$86,44      'PSHU'
F4A0 35062D           (     mon09v37.asm):02665                 FCB     $35,6,45        'PULS'
F4A3 37862E           (     mon09v37.asm):02666                 FCB     $37,$86,46      'PULU'
F4A6 4C002F           (     mon09v37.asm):02667                 FCB     $4C,0,47        'INCA'
F4A9 5C0030           (     mon09v37.asm):02668                 FCB     $5C,0,48        'INCB'
F4AC 0C0331           (     mon09v37.asm):02669                 FCB     $0C,3,49        'INC'
F4AF 6C0531           (     mon09v37.asm):02670                 FCB     $6C,5,49
F4B2 7C0431           (     mon09v37.asm):02671                 FCB     $7C,4,49
F4B5 0E0332           (     mon09v37.asm):02672                 FCB     $0E,3,50        'JMP'
F4B8 6E0532           (     mon09v37.asm):02673                 FCB     $6E,5,50
F4BB 7E0432           (     mon09v37.asm):02674                 FCB     $7E,4,50
F4BE 9D0333           (     mon09v37.asm):02675                 FCB     $9D,3,51        'JSR'
F4C1 AD0533           (     mon09v37.asm):02676                 FCB     $AD,5,51
F4C4 BD0433           (     mon09v37.asm):02677                 FCB     $BD,4,51
F4C7 320534           (     mon09v37.asm):02678                 FCB     $32,5,52        'LEAS'
F4CA 330535           (     mon09v37.asm):02679                 FCB     $33,5,53        'LEAU'
F4CD 300536           (     mon09v37.asm):02680                 FCB     $30,5,54        'LEAX'
F4D0 310537           (     mon09v37.asm):02681                 FCB     $31,5,55        'LEAY'
F4D3 440038           (     mon09v37.asm):02682                 FCB     $44,0,56        'LSRA'
F4D6 540039           (     mon09v37.asm):02683                 FCB     $54,0,57        'LSRB'
F4D9 04033A           (     mon09v37.asm):02684                 FCB     $04,3,58        'LSR'
F4DC 64053A           (     mon09v37.asm):02685                 FCB     $64,5,58
F4DF 74043A           (     mon09v37.asm):02686                 FCB     $74,4,58
F4E2 3D003B           (     mon09v37.asm):02687                 FCB     $3D,0,59        'MUL'
F4E5 40003C           (     mon09v37.asm):02688                 FCB     $40,0,60        'NEGA'
F4E8 50003D           (     mon09v37.asm):02689                 FCB     $50,0,61        'NEGB'
F4EB 00033E           (     mon09v37.asm):02690                 FCB     $00,3,62        'NEG'
F4EE 60053E           (     mon09v37.asm):02691                 FCB     $60,5,62
F4F1 70043E           (     mon09v37.asm):02692                 FCB     $70,4,62
F4F4 12003F           (     mon09v37.asm):02693                 FCB     $12,0,63        'NOP'
F4F7 8A0140           (     mon09v37.asm):02694                 FCB     $8A,1,64        'ORA'
F4FA 9A0340           (     mon09v37.asm):02695                 FCB     $9A,3,64
F4FD AA0540           (     mon09v37.asm):02696                 FCB     $AA,5,64
F500 BA0440           (     mon09v37.asm):02697                 FCB     $BA,4,64
F503 CA0141           (     mon09v37.asm):02698                 FCB     $CA,1,65        'ORB'
F506 DA0341           (     mon09v37.asm):02699                 FCB     $DA,3,65
F509 EA0541           (     mon09v37.asm):02700                 FCB     $EA,5,65
F50C FA0441           (     mon09v37.asm):02701                 FCB     $FA,4,65
F50F 1A0142           (     mon09v37.asm):02702                 FCB     $1A,1,66        'ORCC'
F512 840143           (     mon09v37.asm):02703                 FCB     $84,1,67        'ANDA'
F515 940343           (     mon09v37.asm):02704                 FCB     $94,3,67
F518 A40543           (     mon09v37.asm):02705                 FCB     $A4,5,67
F51B B40443           (     mon09v37.asm):02706                 FCB     $B4,4,67
F51E C40144           (     mon09v37.asm):02707                 FCB     $C4,1,68        'ANDB'
F521 D40344           (     mon09v37.asm):02708                 FCB     $D4,3,68
F524 E40544           (     mon09v37.asm):02709                 FCB     $E4,5,68
F527 F40444           (     mon09v37.asm):02710                 FCB     $F4,4,68
F52A 1C0145           (     mon09v37.asm):02711                 FCB     $1C,1,69        'ANDCC'
F52D 490046           (     mon09v37.asm):02712                 FCB     $49,0,70        'ROLA'
F530 590047           (     mon09v37.asm):02713                 FCB     $59,0,71        'ROLB'
F533 090348           (     mon09v37.asm):02714                 FCB     $09,3,72        'ROL'
F536 690548           (     mon09v37.asm):02715                 FCB     $69,5,72
F539 790448           (     mon09v37.asm):02716                 FCB     $79,4,72
F53C 460049           (     mon09v37.asm):02717                 FCB     $46,0,73        'RORA'
F53F 56004A           (     mon09v37.asm):02718                 FCB     $56,0,74        'RORB'
F542 06034B           (     mon09v37.asm):02719                 FCB     $06,3,75        'ROR'
F545 66054B           (     mon09v37.asm):02720                 FCB     $66,5,75
F548 76044B           (     mon09v37.asm):02721                 FCB     $76,4,75
F54B 3B004C           (     mon09v37.asm):02722                 FCB     $3B,0,76        'RTI'
F54E 39004D           (     mon09v37.asm):02723                 FCB     $39,0,77        'RTS'
F551 82014E           (     mon09v37.asm):02724                 FCB     $82,1,78        'SBCA'
F554 92034E           (     mon09v37.asm):02725                 FCB     $92,3,78
F557 A2054E           (     mon09v37.asm):02726                 FCB     $A2,5,78
F55A B2044E           (     mon09v37.asm):02727                 FCB     $B2,4,78
F55D C2014F           (     mon09v37.asm):02728                 FCB     $C2,1,79        'SBCB'
F560 D2034F           (     mon09v37.asm):02729                 FCB     $D2,3,79
F563 E2054F           (     mon09v37.asm):02730                 FCB     $E2,5,79
F566 F2044F           (     mon09v37.asm):02731                 FCB     $F2,4,79
F569 1D0050           (     mon09v37.asm):02732                 FCB     $1D,0,80
F56C 800151           (     mon09v37.asm):02733                 FCB     $80,1,81        'SUBA'
F56F 900351           (     mon09v37.asm):02734                 FCB     $90,3,81
F572 A00551           (     mon09v37.asm):02735                 FCB     $A0,5,81
F575 B00451           (     mon09v37.asm):02736                 FCB     $B0,4,81
F578 C00152           (     mon09v37.asm):02737                 FCB     $C0,1,82        'SUBB'
F57B D00352           (     mon09v37.asm):02738                 FCB     $D0,3,82
F57E E00552           (     mon09v37.asm):02739                 FCB     $E0,5,82
F581 F00452           (     mon09v37.asm):02740                 FCB     $F0,4,82
F584 830253           (     mon09v37.asm):02741                 FCB     $83,2,83        'SUBD'
F587 930353           (     mon09v37.asm):02742                 FCB     $93,3,83
F58A A30553           (     mon09v37.asm):02743                 FCB     $A3,5,83
F58D B30453           (     mon09v37.asm):02744                 FCB     $B3,4,83
F590 3F0054           (     mon09v37.asm):02745                 FCB     $3F,0,84        'SWI'
F593 130055           (     mon09v37.asm):02746                 FCB     $13,0,85        'SYNC'
F596 4D0056           (     mon09v37.asm):02747                 FCB     $4D,0,86        'TSTA'
F599 5D0057           (     mon09v37.asm):02748                 FCB     $5D,0,87        'TSTB'
F59C 0D0358           (     mon09v37.asm):02749                 FCB     $0D,3,88        'TST'
F59F 6D0558           (     mon09v37.asm):02750                 FCB     $6D,5,88
F5A2 7D0458           (     mon09v37.asm):02751                 FCB     $7D,4,88
F5A5 160963           (     mon09v37.asm):02752                 FCB     $16,9,99        'LBRA'
F5A8 170964           (     mon09v37.asm):02753                 FCB     $17,9,100       'LBSR'
F5AB 200865           (     mon09v37.asm):02754                 FCB     $20,8,101       'BRA'
F5AE 210866           (     mon09v37.asm):02755                 FCB     $21,8,102       'BRN'
F5B1 220867           (     mon09v37.asm):02756                 FCB     $22,8,103       'BHI'
F5B4 230868           (     mon09v37.asm):02757                 FCB     $23,8,104       'BLS'
F5B7 240869           (     mon09v37.asm):02758                 FCB     $24,8,105       'BCC'
F5BA 25086A           (     mon09v37.asm):02759                 FCB     $25,8,106       'BCS'
F5BD 26086B           (     mon09v37.asm):02760                 FCB     $26,8,107       'BNE'
F5C0 27086C           (     mon09v37.asm):02761                 FCB     $27,8,108       'BEQ'
F5C3 28086D           (     mon09v37.asm):02762                 FCB     $28,8,109       'BVC'
F5C6 29086E           (     mon09v37.asm):02763                 FCB     $29,8,110       'BVS'
F5C9 2A086F           (     mon09v37.asm):02764                 FCB     $2A,8,111       'BPL'
F5CC 2B0870           (     mon09v37.asm):02765                 FCB     $2B,8,112       'BMI'
F5CF 2C0871           (     mon09v37.asm):02766                 FCB     $2C,8,113       'BGE'
F5D2 2D0872           (     mon09v37.asm):02767                 FCB     $2D,8,114       'BLT'
F5D5 2E0873           (     mon09v37.asm):02768                 FCB     $2E,8,115       'BGT'
F5D8 2F0874           (     mon09v37.asm):02769                 FCB     $2F,8,116       'BLE'
F5DB 8D0884           (     mon09v37.asm):02770                 FCB     $8D,8,132       'BSR'
F5DE CF0000           (     mon09v37.asm):02771                 FCB     $CF,0,0         'FCB', UNKNOWN OPCODE
                      (     mon09v37.asm):02772         
                      (     mon09v37.asm):02773         ;*
                      (     mon09v37.asm):02774         ;* OPERAND TABLE NUMBER TWO, $10 PREFIX INSTRUCTIONS
                      (     mon09v37.asm):02775         ;*
F5E1                  (     mon09v37.asm):02776         OPTAB2
F5E1 830259           (     mon09v37.asm):02777                 FCB     $83,2,89        'CMPD'
F5E4 8C025A           (     mon09v37.asm):02778                 FCB     $8C,2,90        'CMPY'
F5E7 8E025C           (     mon09v37.asm):02779                 FCB     $8E,2,92        'LDY'
F5EA 930359           (     mon09v37.asm):02780                 FCB     $93,3,89
F5ED 9C035A           (     mon09v37.asm):02781                 FCB     $9C,3,90
F5F0 9E035C           (     mon09v37.asm):02782                 FCB     $9E,3,92
F5F3 9F035E           (     mon09v37.asm):02783                 FCB     $9F,3,94        'STY'
F5F6 A30559           (     mon09v37.asm):02784                 FCB     $A3,5,89
F5F9 AC055A           (     mon09v37.asm):02785                 FCB     $AC,5,90
F5FC AE055C           (     mon09v37.asm):02786                 FCB     $AE,5,92
F5FF AF055E           (     mon09v37.asm):02787                 FCB     $AF,5,94
F602 B30459           (     mon09v37.asm):02788                 FCB     $B3,4,89
F605 BC045A           (     mon09v37.asm):02789                 FCB     $BC,4,90
F608 BE045C           (     mon09v37.asm):02790                 FCB     $BE,4,92
F60B BF045E           (     mon09v37.asm):02791                 FCB     $BF,4,94
F60E CE025B           (     mon09v37.asm):02792                 FCB     $CE,2,91        'LDS'
F611 DE035B           (     mon09v37.asm):02793                 FCB     $DE,3,91
F614 DF035D           (     mon09v37.asm):02794                 FCB     $DF,3,93        'STS'
F617 EE055B           (     mon09v37.asm):02795                 FCB     $EE,5,91
F61A EF055D           (     mon09v37.asm):02796                 FCB     $EF,5,93
F61D FE045B           (     mon09v37.asm):02797                 FCB     $FE,4,91
F620 FF045D           (     mon09v37.asm):02798                 FCB     $FF,4,93
F623 3F005F           (     mon09v37.asm):02799                 FCB     $3F,0,95        'SWI2'
F626 210975           (     mon09v37.asm):02800                 FCB     $21,9,117       'LBRN'
F629 220976           (     mon09v37.asm):02801                 FCB     $22,9,118       'LBHI'
F62C 230977           (     mon09v37.asm):02802                 FCB     $23,9,119       'LBLS'
F62F 240978           (     mon09v37.asm):02803                 FCB     $24,9,120       'LBCC'
F632 250979           (     mon09v37.asm):02804                 FCB     $25,9,121       'LBCS'
F635 26097A           (     mon09v37.asm):02805                 FCB     $26,9,122       'LBNE'
F638 27097B           (     mon09v37.asm):02806                 FCB     $27,9,123       'LBEQ'
F63B 28097C           (     mon09v37.asm):02807                 FCB     $28,9,124       'LBVC'
F63E 29097D           (     mon09v37.asm):02808                 FCB     $29,9,125       'LBVS'
F641 2A097E           (     mon09v37.asm):02809                 FCB     $2A,9,126       'LBPL'
F644 2B097F           (     mon09v37.asm):02810                 FCB     $2B,9,127       'LBMI'
F647 2C0980           (     mon09v37.asm):02811                 FCB     $2C,9,128       'LBGE'
F64A 2D0981           (     mon09v37.asm):02812                 FCB     $2D,9,129       'LBLT'
F64D 2E0982           (     mon09v37.asm):02813                 FCB     $2E,9,130       'LBGT'
F650 2F0983           (     mon09v37.asm):02814                 FCB     $2F,9,131       'LBLE'
F653 CF0100           (     mon09v37.asm):02815                 FCB     $CF,1,0
                      (     mon09v37.asm):02816         
                      (     mon09v37.asm):02817         ;*
                      (     mon09v37.asm):02818         ;* OPERAND TABLE #3, $11 PREFIXES
                      (     mon09v37.asm):02819         ;*
F656                  (     mon09v37.asm):02820         OPTAB3
F656 8C0260           (     mon09v37.asm):02821                 FCB     $8C,2,96        'CMPS'
F659 9C0360           (     mon09v37.asm):02822                 FCB     $9C,3,96
F65C AC0560           (     mon09v37.asm):02823                 FCB     $AC,5,96
F65F BC0460           (     mon09v37.asm):02824                 FCB     $BC,4,96
F662 830261           (     mon09v37.asm):02825                 FCB     $83,2,97        'CMPU'
F665 930361           (     mon09v37.asm):02826                 FCB     $93,3,97
F668 A30561           (     mon09v37.asm):02827                 FCB     $A3,5,97
F66B B30461           (     mon09v37.asm):02828                 FCB     $B3,4,97
F66E 3F0062           (     mon09v37.asm):02829                 FCB     $3F,0,98        'SWI3'
                      (     mon09v37.asm):02830         
                      (     mon09v37.asm):02831         ;*
                      (     mon09v37.asm):02832         ;* INSTRUCTION TEXT TABLE
                      (     mon09v37.asm):02833         ;*
F671                  (     mon09v37.asm):02834         ITABLE
F671 46434220         (     mon09v37.asm):02835                 FCC     'FCB '          0
F675 4C444120         (     mon09v37.asm):02836                 FCC     'LDA '          1
F679 4C444220         (     mon09v37.asm):02837                 FCC     'LDB '          2
F67D 4C444420         (     mon09v37.asm):02838                 FCC     'LDD '          3
F681 4C445520         (     mon09v37.asm):02839                 FCC     'LDU '          4
F685 4C445820         (     mon09v37.asm):02840                 FCC     'LDX '          5
F689 53544120         (     mon09v37.asm):02841                 FCC     'STA '          6
F68D 53544220         (     mon09v37.asm):02842                 FCC     'STB '          7
F691 53544420         (     mon09v37.asm):02843                 FCC     'STD '          8
F695 53545520         (     mon09v37.asm):02844                 FCC     'STU '          9
F699 53545820         (     mon09v37.asm):02845                 FCC     'STX '          10
F69D 41425820         (     mon09v37.asm):02846                 FCC     'ABX '          11
F6A1 41444341         (     mon09v37.asm):02847                 FCC     'ADCA'          12
F6A5 41444342         (     mon09v37.asm):02848                 FCC     'ADCB'          13
F6A9 41444441         (     mon09v37.asm):02849                 FCC     'ADDA'          14
F6AD 41444442         (     mon09v37.asm):02850                 FCC     'ADDB'          15
F6B1 41444444         (     mon09v37.asm):02851                 FCC     'ADDD'          16
F6B5 41534C41         (     mon09v37.asm):02852                 FCC     'ASLA'          17
F6B9 41534C42         (     mon09v37.asm):02853                 FCC     'ASLB'          18
F6BD 41534C20         (     mon09v37.asm):02854                 FCC     'ASL '          19
F6C1 41535241         (     mon09v37.asm):02855                 FCC     'ASRA'          20
F6C5 41535242         (     mon09v37.asm):02856                 FCC     'ASRB'          21
F6C9 41535220         (     mon09v37.asm):02857                 FCC     'ASR '          22
F6CD 42495441         (     mon09v37.asm):02858                 FCC     'BITA'          23
F6D1 42495442         (     mon09v37.asm):02859                 FCC     'BITB'          24
F6D5 434C5241         (     mon09v37.asm):02860                 FCC     'CLRA'          25
F6D9 434C5242         (     mon09v37.asm):02861                 FCC     'CLRB'          26
F6DD 434C5220         (     mon09v37.asm):02862                 FCC     'CLR '          27
F6E1 434D5041         (     mon09v37.asm):02863                 FCC     'CMPA'          28
F6E5 434D5042         (     mon09v37.asm):02864                 FCC     'CMPB'          29
F6E9 434D5058         (     mon09v37.asm):02865                 FCC     'CMPX'          30
F6ED 434F4D41         (     mon09v37.asm):02866                 FCC     'COMA'          31
F6F1 434F4D42         (     mon09v37.asm):02867                 FCC     'COMB'          32
F6F5 434F4D20         (     mon09v37.asm):02868                 FCC     'COM '          33
F6F9 43574149         (     mon09v37.asm):02869                 FCC     'CWAI'          34
F6FD 44414120         (     mon09v37.asm):02870                 FCC     'DAA '          35
F701 44454341         (     mon09v37.asm):02871                 FCC     'DECA'          36
F705 44454342         (     mon09v37.asm):02872                 FCC     'DECB'          37
F709 44454320         (     mon09v37.asm):02873                 FCC     'DEC '          38
F70D 454F5241         (     mon09v37.asm):02874                 FCC     'EORA'          39
F711 454F5242         (     mon09v37.asm):02875                 FCC     'EORB'          40
F715 45584720         (     mon09v37.asm):02876                 FCC     'EXG '          41
F719 54465220         (     mon09v37.asm):02877                 FCC     'TFR '          42
F71D 50534853         (     mon09v37.asm):02878                 FCC     'PSHS'          43
F721 50534855         (     mon09v37.asm):02879                 FCC     'PSHU'          44
F725 50554C53         (     mon09v37.asm):02880                 FCC     'PULS'          45
F729 50554C55         (     mon09v37.asm):02881                 FCC     'PULU'          46
F72D 494E4341         (     mon09v37.asm):02882                 FCC     'INCA'          47
F731 494E4342         (     mon09v37.asm):02883                 FCC     'INCB'          48
F735 494E4320         (     mon09v37.asm):02884                 FCC     'INC '          49
F739 4A4D5020         (     mon09v37.asm):02885                 FCC     'JMP '          50
F73D 4A535220         (     mon09v37.asm):02886                 FCC     'JSR '          51
F741 4C454153         (     mon09v37.asm):02887                 FCC     'LEAS'          52
F745 4C454155         (     mon09v37.asm):02888                 FCC     'LEAU'          53
F749 4C454158         (     mon09v37.asm):02889                 FCC     'LEAX'          54
F74D 4C454159         (     mon09v37.asm):02890                 FCC     'LEAY'          55
F751 4C535241         (     mon09v37.asm):02891                 FCC     'LSRA'          56
F755 4C535242         (     mon09v37.asm):02892                 FCC     'LSRB'          57
F759 4C535220         (     mon09v37.asm):02893                 FCC     'LSR '          58
F75D 4D554C20         (     mon09v37.asm):02894                 FCC     'MUL '          59
F761 4E454741         (     mon09v37.asm):02895                 FCC     'NEGA'          60
F765 4E454742         (     mon09v37.asm):02896                 FCC     'NEGB'          61
F769 4E454720         (     mon09v37.asm):02897                 FCC     'NEG '          62
F76D 4E4F5020         (     mon09v37.asm):02898                 FCC     'NOP '          63
F771 4F524120         (     mon09v37.asm):02899                 FCC     'ORA '          64
F775 4F524220         (     mon09v37.asm):02900                 FCC     'ORB '          65
F779 4F524343         (     mon09v37.asm):02901                 FCC     'ORCC'          66
F77D 414E4441         (     mon09v37.asm):02902                 FCC     'ANDA'          67
F781 414E4442         (     mon09v37.asm):02903                 FCC     'ANDB'          68
F785 414E4443         (     mon09v37.asm):02904                 FCC     'ANDC'          69
F789 524F4C41         (     mon09v37.asm):02905                 FCC     'ROLA'          70
F78D 524F4C42         (     mon09v37.asm):02906                 FCC     'ROLB'          71
F791 524F4C20         (     mon09v37.asm):02907                 FCC     'ROL '          72
F795 524F5241         (     mon09v37.asm):02908                 FCC     'RORA'          73
F799 524F5242         (     mon09v37.asm):02909                 FCC     'RORB'          74
F79D 524F5220         (     mon09v37.asm):02910                 FCC     'ROR '          75
F7A1 52544920         (     mon09v37.asm):02911                 FCC     'RTI '          76
F7A5 52545320         (     mon09v37.asm):02912                 FCC     'RTS '          77
F7A9 53424341         (     mon09v37.asm):02913                 FCC     'SBCA'          78
F7AD 53424342         (     mon09v37.asm):02914                 FCC     'SBCB'          79
F7B1 53455820         (     mon09v37.asm):02915                 FCC     'SEX '          80
F7B5 53554241         (     mon09v37.asm):02916                 FCC     'SUBA'          81
F7B9 53554242         (     mon09v37.asm):02917                 FCC     'SUBB'          82
F7BD 53554244         (     mon09v37.asm):02918                 FCC     'SUBD'          83
F7C1 53574920         (     mon09v37.asm):02919                 FCC     'SWI '          84
F7C5 53594E43         (     mon09v37.asm):02920                 FCC     'SYNC'          85
F7C9 54535441         (     mon09v37.asm):02921                 FCC     'TSTA'          86
F7CD 54535442         (     mon09v37.asm):02922                 FCC     'TSTB'          87
F7D1 54535420         (     mon09v37.asm):02923                 FCC     'TST '          88
F7D5 434D5044         (     mon09v37.asm):02924                 FCC     'CMPD'          89
F7D9 434D5059         (     mon09v37.asm):02925                 FCC     'CMPY'          90
F7DD 4C445320         (     mon09v37.asm):02926                 FCC     'LDS '          91
F7E1 4C445920         (     mon09v37.asm):02927                 FCC     'LDY '          92
F7E5 53545320         (     mon09v37.asm):02928                 FCC     'STS '          93
F7E9 53545920         (     mon09v37.asm):02929                 FCC     'STY '          94
F7ED 53574932         (     mon09v37.asm):02930                 FCC     'SWI2'          95
F7F1 434D5053         (     mon09v37.asm):02931                 FCC     'CMPS'          96
F7F5 434D5055         (     mon09v37.asm):02932                 FCC     'CMPU'          97
F7F9 53574933         (     mon09v37.asm):02933                 FCC     'SWI3'          98
F7FD 4C425241         (     mon09v37.asm):02934                 FCC     'LBRA'          99
F801 4C425352         (     mon09v37.asm):02935                 FCC     'LBSR'          100
F805 42524120         (     mon09v37.asm):02936                 FCC     'BRA '          101
F809 42524E20         (     mon09v37.asm):02937                 FCC     'BRN '          102
F80D 42484920         (     mon09v37.asm):02938                 FCC     'BHI '          103
F811 424C5320         (     mon09v37.asm):02939                 FCC     'BLS '          104
F815 42434320         (     mon09v37.asm):02940                 FCC     'BCC '          105
F819 42435320         (     mon09v37.asm):02941                 FCC     'BCS '          106
F81D 424E4520         (     mon09v37.asm):02942                 FCC     'BNE '          107
F821 42455120         (     mon09v37.asm):02943                 FCC     'BEQ '          108
F825 42564320         (     mon09v37.asm):02944                 FCC     'BVC '          109
F829 42565320         (     mon09v37.asm):02945                 FCC     'BVS '          110
F82D 42504C20         (     mon09v37.asm):02946                 FCC     'BPL '          111
F831 424D4920         (     mon09v37.asm):02947                 FCC     'BMI '          112
F835 42474520         (     mon09v37.asm):02948                 FCC     'BGE '          113
F839 424C5420         (     mon09v37.asm):02949                 FCC     'BLT '          114
F83D 42475420         (     mon09v37.asm):02950                 FCC     'BGT '          115
F841 424C4520         (     mon09v37.asm):02951                 FCC     'BLE '          116
F845 4C42524E         (     mon09v37.asm):02952                 FCC     'LBRN'          117
F849 4C424849         (     mon09v37.asm):02953                 FCC     'LBHI'          118
F84D 4C424C53         (     mon09v37.asm):02954                 FCC     'LBLS'          119
F851 4C424343         (     mon09v37.asm):02955                 FCC     'LBCC'          120
F855 4C424353         (     mon09v37.asm):02956                 FCC     'LBCS'          121
F859 4C424E45         (     mon09v37.asm):02957                 FCC     'LBNE'          122
F85D 4C424551         (     mon09v37.asm):02958                 FCC     'LBEQ'          123
F861 4C425643         (     mon09v37.asm):02959                 FCC     'LBVC'          124
F865 4C425653         (     mon09v37.asm):02960                 FCC     'LBVS'          125
F869 4C42504C         (     mon09v37.asm):02961                 FCC     'LBPL'          126
F86D 4C424D49         (     mon09v37.asm):02962                 FCC     'LBMI'          127
F871 4C424745         (     mon09v37.asm):02963                 FCC     'LBGE'          128
F875 4C424C54         (     mon09v37.asm):02964                 FCC     'LBLT'          129
F879 4C424754         (     mon09v37.asm):02965                 FCC     'LBGT'          130
F87D 4C424C45         (     mon09v37.asm):02966                 FCC     'LBLE'          131
F881 42535220         (     mon09v37.asm):02967                 FCC     'BSR '          132
                      (     mon09v37.asm):02968         
                      (     mon09v37.asm):02969         ;*
                      (     mon09v37.asm):02970         ;* CONDITIONAL TABLE, FIRST BYTE IS MASK, NEXT THREE BYTES ARE POSSIBLE
                      (     mon09v37.asm):02971         ;* BIT SETTINGS
                      (     mon09v37.asm):02972         ;*
F885                  (     mon09v37.asm):02973         CONTAB
F885 05000000         (     mon09v37.asm):02974                 FCB     $05,$00,$00,$00 'BHI', NO C OR Z
F889 05010405         (     mon09v37.asm):02975                 FCB     $05,$01,$04,$05 'BLS', EITHER C OR Z
F88D 01000000         (     mon09v37.asm):02976                 FCB     $01,$00,$00,$00 'BCC', NO C
F891 01010101         (     mon09v37.asm):02977                 FCB     $01,$01,$01,$01 'BCS', C SET
F895 04000000         (     mon09v37.asm):02978                 FCB     $04,$00,$00,$00 'BNE', NO Z
F899 04040404         (     mon09v37.asm):02979                 FCB     $04,$04,$04,$04 'BEQ', Z SET
F89D 02000000         (     mon09v37.asm):02980                 FCB     $02,$00,$00,$00 'BVC', V CLEAR
F8A1 02020202         (     mon09v37.asm):02981                 FCB     $02,$02,$02,$02 'BVS', V SET
F8A5 08000000         (     mon09v37.asm):02982                 FCB     $08,$00,$00,$00 'BPL', N CLEAR
F8A9 08080808         (     mon09v37.asm):02983                 FCB     $08,$08,$08,$08 'BMI', N SET
F8AD 0A000A0A         (     mon09v37.asm):02984                 FCB     $0A,$00,$0A,$0A 'BGE', N=V
F8B1 0A080202         (     mon09v37.asm):02985                 FCB     $0A,$08,$02,$02 'BLT', N -= V
F8B5 0E0A0000         (     mon09v37.asm):02986                 FCB     $0E,$0A,$00,$00 'BGT', N=V, Z=0
F8B9 0E080204         (     mon09v37.asm):02987                 FCB     $0E,$08,$02,$04 'BLE', V-=N OR Z=1
F8BD 0C060E           (     mon09v37.asm):02988                 FCB     $0C,$06,$0E
                      (     mon09v37.asm):02989         
                      (     mon09v37.asm):02990         ;* TRANSFER AND EXCHANGE REGISTER TABLE
F8C0 9F6F             (     mon09v37.asm):02991         TFREGT  FDB     SAVA
F8C2 9F72             (     mon09v37.asm):02992         INDTAB  FDB     SAVX
F8C4 9F74             (     mon09v37.asm):02993                 FDB     SAVY
F8C6 9F76             (     mon09v37.asm):02994                 FDB     SAVU
F8C8 9F7A             (     mon09v37.asm):02995                 FDB     SAVS
F8CA 9F78             (     mon09v37.asm):02996                 FDB     SAVPC
                      (     mon09v37.asm):02997         
                      (     mon09v37.asm):02998         ;* PULL TABLE FOR PULS
F8CC 9F6E             (     mon09v37.asm):02999         PULSTAB FDB     SAVCC
F8CE 9F6F             (     mon09v37.asm):03000                 FDB     SAVA
F8D0 9F70             (     mon09v37.asm):03001                 FDB     SAVB
F8D2 9F71             (     mon09v37.asm):03002                 FDB     SAVDP
F8D4 9F72             (     mon09v37.asm):03003                 FDB     SAVX
F8D6 9F74             (     mon09v37.asm):03004                 FDB     SAVY
F8D8 9F76             (     mon09v37.asm):03005                 FDB     SAVU
F8DA 9F78             (     mon09v37.asm):03006                 FDB     SAVPC
                      (     mon09v37.asm):03007         
                      (     mon09v37.asm):03008         ;* PULL TABLE FOR PULU
F8DC 9F6E             (     mon09v37.asm):03009         PULUTAB FDB     SAVCC
F8DE 9F6F             (     mon09v37.asm):03010                 FDB     SAVA
F8E0 9F70             (     mon09v37.asm):03011                 FDB     SAVB
F8E2 9F71             (     mon09v37.asm):03012                 FDB     SAVDP
F8E4 9F72             (     mon09v37.asm):03013                 FDB     SAVX
F8E6 9F74             (     mon09v37.asm):03014                 FDB     SAVY
F8E8 9F7A             (     mon09v37.asm):03015                 FDB     SAVS
F8EA 9F78             (     mon09v37.asm):03016                 FDB     SAVPC
                      (     mon09v37.asm):03017         
                      (     mon09v37.asm):03018         ;* VECTOR HANDLERS
F8EC 6E9F9F63         (     mon09v37.asm):03019         SWI3    JMP     [SWI3ADR]
F8F0 6E9F9F61         (     mon09v37.asm):03020         SWI2    JMP     [SWI2ADR]
F8F4 6E9F9F65         (     mon09v37.asm):03021         IRQ     JMP     [IRQADR]
F8F8 6E9F9F67         (     mon09v37.asm):03022         FIRQ    JMP     [FIRQADR]
                      (     mon09v37.asm):03023         ;MODS BY JQ
                      (     mon09v37.asm):03024          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
F8FC                  (     mon09v37.asm):03025         NMI     JMP     [NMIADR]
                      (     mon09v37.asm):03026          ENDC
                      (     mon09v37.asm):03027          IFNE JQ_ILLOP          USE JQ ILLOP ENHANCEMENTS
F8FC                  (     mon09v37.asm):03028         ILOP    JMP     [ILOPADR]
                      (     mon09v37.asm):03029          ENDC
                      (     mon09v37.asm):03030         ;
                      (     mon09v37.asm):03031         ;* HELP TEXT
F8FC 00               (     mon09v37.asm):03032         HTEXT   FCB     0               NEW LINE TO START
F8FD 4220302D37203C61 (     mon09v37.asm):03033                 FCN             'B 0-7 <addr>|Set breakpoint (0000=remove)'
     6464723E7C536574
     20627265616B706F
     696E742028303030
     303D72656D6F7665
     2900
F927 4352203C7265673E (     mon09v37.asm):03034                 FCN             'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F947 4355203C75617274 (     mon09v37.asm):03035                 FCN             'CU <uart> <addr>|Change UART address'
     3E203C616464723E
     7C4368616E676520
     5541525420616464
     7265737300
                      (     mon09v37.asm):03036         
                      (     mon09v37.asm):03037          IFNE JQ_ILLOP  JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03038                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-7)'
                      (     mon09v37.asm):03039          ELSE
F96C 4356203C7665633E (     mon09v37.asm):03040                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-6)'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7220
     287665633D312D36
     2900
                      (     mon09v37.asm):03041          ENDC                   JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03042         
F99E 44427C446973706C (     mon09v37.asm):03043                 FCN             'DB|Display breakpoints'
     617920627265616B
     706F696E747300
F9B5 4444203C61646472 (     mon09v37.asm):03044                 FCN             'DD <addr>,<addr>|Display dissasembled memory'
     3E2C3C616464723E
     7C446973706C6179
     2064697373617365
     6D626C6564206D65
     6D6F727900
F9E2 444D203C61646472 (     mon09v37.asm):03045                 FCN             'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
FA15 44527C446973706C (     mon09v37.asm):03046                 FCN             'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
FA34 44557C446973706C (     mon09v37.asm):03047                 FCN             'DU|Display UART addresses'
     6179205541525420
     6164647265737365
     7300
FA4E 44567C446973706C (     mon09v37.asm):03048                 FCN             'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
FA6B 45203C616464723E (     mon09v37.asm):03049                 FCN             'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
FA80 464D203C61646472 (     mon09v37.asm):03050                 FCN             'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
FAA4 47205B3C61646472 (     mon09v37.asm):03051                 FCN             'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
                      (     mon09v37.asm):03052         ;MODS BY JQ
                      (     mon09v37.asm):03053          IFNE JQ_JMPMOD         JQ JUMP ENHANCEMENTS
                      (     mon09v37.asm):03054         ;       FCN             'J <B><T><F>|Jump to <B>ASIC, <T>inyBASIC or <F>ORTH'
                      (     mon09v37.asm):03055         ;       FCN             'J <B><F>|Jump to <B>ASIC or <F>ORTH'
FAC4 4A203C423E7C4A75 (     mon09v37.asm):03056                 FCN             'J <B>|Jump to Extended <B>asic'
     6D7020746F204578
     74656E646564203C
     423E6173696300
                      (     mon09v37.asm):03057          ENDC                           JQ JUMP ENHANCEMENTS
                      (     mon09v37.asm):03058         ;
FAE3 4C7C4C6F61642069 (     mon09v37.asm):03059                 FCN             'L|Load iHEX or S19 image from UART2'
     484558206F722053
     313920696D616765
     2066726F6D205541
     52543200
FB07 4D4D203C61646472 (     mon09v37.asm):03060                 FCN             'MM <addr>,<addr> <addr>|Move memory (Source,End Destination)'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F72792028536F75
     7263652C456E6420
     44657374696E6174
     696F6E2900
FB44 4D54203C61646472 (     mon09v37.asm):03061                 FCN             'MT <addr>,<addr>|Memory test'
     3E2C3C616464723E
     7C4D656D6F727920
     7465737400
FB61 5252203C61646472 (     mon09v37.asm):03062                 FCN             'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
FB81 5257203C61646472 (     mon09v37.asm):03063                 FCN             'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
FBA9 53205B3C61646472 (     mon09v37.asm):03064                 FCN             'S [<addr>]|Single step execution'
     3E5D7C53696E676C
     6520737465702065
     7865637574696F6E
     00
                      (     mon09v37.asm):03065         ;       FCN             'T|Terminal passthrough to UART2'
FBCA 57203C616464723E (     mon09v37.asm):03066                 FCN             'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
FBEA 5852203C61646472 (     mon09v37.asm):03067                 FCN             'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
FC0A 5857203C61646472 (     mon09v37.asm):03068                 FCN             'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
FC32 2B203C76616C7565 (     mon09v37.asm):03069                 FCN             '+ <value>+<value>|Hexadecimal addition'
     3E2B3C76616C7565
     3E7C486578616465
     63696D616C206164
     646974696F6E00
FC59 2D203C76616C7565 (     mon09v37.asm):03070                 FCN             '- <value>-<value>|Hexadecimal subtraction'
     3E2D3C76616C7565
     3E7C486578616465
     63696D616C207375
     627472616374696F
     6E00
FC83 FF               (     mon09v37.asm):03071                 FCB     -1              END OF TABLE
                      (     mon09v37.asm):03072         ;*
                      (     mon09v37.asm):03073         ;
                      (     mon09v37.asm):03074         ;===============================================================================
                      (     mon09v37.asm):03075         ;*
                      (     mon09v37.asm):03076         ;* MACHINE DEPENDANT I/O ROUTINES FOR 68(3)B50 UARTS
                      (     mon09v37.asm):03077         ;*      X REGISTER HOLDS PORT ADDRESS.
                      (     mon09v37.asm):03078         ;===============================================================================
                      (     mon09v37.asm):03079         ;* INITIALIZE UART(X)
FC84                  (     mon09v37.asm):03080         INIT
FC84 8603             (     mon09v37.asm):03081                 LDA     #CTRL1          MASTER RESET
FC86 A784             (     mon09v37.asm):03082                 STA     ,X              WRITE COMMAND REG
FC88 8615             (     mon09v37.asm):03083                 LDA     #CTRL2          ENABLE 115200, 8NO1
FC8A A784             (     mon09v37.asm):03084                 STA     ,X              WRITE COMMAND REG
FC8C 39               (     mon09v37.asm):03085                 RTS
                      (     mon09v37.asm):03086         ;
                      (     mon09v37.asm):03087         ;===============================================================================
                      (     mon09v37.asm):03088         ;* READ UART(X)
FC8D                  (     mon09v37.asm):03089         READ
FC8D A684             (     mon09v37.asm):03090                 LDA     ,X              GET STATUS
FC8F 8501             (     mon09v37.asm):03091                 BITA    #RDRF           RECEIVER READY?
FC91 2705             (     mon09v37.asm):03092                 BEQ     NOCHR           NO CHARACTER
FC93 A601             (     mon09v37.asm):03093                 LDA     1,X             READ CHARACTER
FC95 1A04             (     mon09v37.asm):03094                 ORCC    #%00000100      SET 'Z'
FC97 39               (     mon09v37.asm):03095                 RTS
FC98                  (     mon09v37.asm):03096         NOCHR
FC98 86FF             (     mon09v37.asm):03097                 LDA     #$FF            NO CHAR
FC9A 39               (     mon09v37.asm):03098                 RTS
                      (     mon09v37.asm):03099         ;
                      (     mon09v37.asm):03100         ;===============================================================================
                      (     mon09v37.asm):03101         ;* WRITE UART(X)
FC9B                  (     mon09v37.asm):03102         WRITE
FC9B E684             (     mon09v37.asm):03103                 LDB     ,X              GET STATUS
FC9D C502             (     mon09v37.asm):03104                 BITB    #TDRE           XMITTER READY?
FC9F 27FA             (     mon09v37.asm):03105                 BEQ     WRITE           NO, TRY AGAIN
FCA1 A701             (     mon09v37.asm):03106                 STA     1,X             OUTPUT
FCA3 39               (     mon09v37.asm):03107                 RTS
                      (     mon09v37.asm):03108         ;
                      (     mon09v37.asm):03109         ;===============================================================================
                      (     mon09v37.asm):03110         ; LOOKUP TABLE CONTAINING MON09 RAM INTERRUPT RE-VECTORING ADDRESSES
                      (     mon09v37.asm):03111         ;===============================================================================
FCA4 6E9F9F5F         (     mon09v37.asm):03112         MON09_SWIADR    JMP     [SWIADR]        ;SWI Interrupt vector
FCA8 6E9F9F61         (     mon09v37.asm):03113         MON09_SWI2ADR   JMP     [SWI2ADR]       ;SWI2 Interrupt vector
FCAC 6E9F9F63         (     mon09v37.asm):03114         MON09_SWI3ADR   JMP     [SWI3ADR]       ;SWI3 Interrupt vector
FCB0 6E9F9F67         (     mon09v37.asm):03115         MON09_FIRQADR   JMP     [FIRQADR]       ;FIRQ Interrupt vector
FCB4 6E9F9F65         (     mon09v37.asm):03116         MON09_IRQADR    JMP     [IRQADR]        ;IRQ Interrupt vector
                      (     mon09v37.asm):03117         
                      (     mon09v37.asm):03118           IFNE JQ_NMIRAM        ;JQ NMI ENHANCEMENTS
FCB8                  (     mon09v37.asm):03119         MON09_NMIADR    JMP     [NMIADR]        ;NMI Interrupt vector
                      (     mon09v37.asm):03120           ENDC                          ;               JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):03121           IFNE JQ_ILLOP         ;USE JQ ILLOP ENHANCEMENTS
FCB8                  (     mon09v37.asm):03122         MON09_ILOPADR   JMP     [ILOPADR]       ;ILLOP Interrupt vector
                      (     mon09v37.asm):03123           ENDC                          ;USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03124         ;
                      (     mon09v37.asm):03125          IFLT LOC       ;IF NOT IN RAM
FCB8 FFFFFFFFFFFFFFFF (     mon09v37.asm):03126                 FILL $FF,VECTTBL-*
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFF
                      (     mon09v37.asm):03127         ;*
                      (     mon09v37.asm):03128         ;* MACHINE VECTORS
                      (     mon09v37.asm):03129         ;*
                      (     mon09v37.asm):03130         ;MODS BY JQ
                      (     mon09v37.asm):03131           IFNE JQ_ILLOP         USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03132                 ORG     VECTTBL
                      (     mon09v37.asm):03133                 FDB     ILOP            HD6309 ONLY
                      (     mon09v37.asm):03134           ELSE
                      (     mon09v37.asm):03135                 ORG     VECTTBL
                      (     mon09v37.asm):03136           ENDC                          USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03137         ;
FFF2 F8EC             (     mon09v37.asm):03138                 FDB     SWI3
FFF4 F8F0             (     mon09v37.asm):03139                 FDB     SWI2
FFF6 F8F8             (     mon09v37.asm):03140                 FDB     FIRQ
FFF8 F8F4             (     mon09v37.asm):03141                 FDB     IRQ
FFFA F29D             (     mon09v37.asm):03142                 FDB     SWIHND
                      (     mon09v37.asm):03143         ;MODS BY JQ
                      (     mon09v37.asm):03144           IFNE JQ_NMIRAM        USE JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):03145                 FDB     NMI                     USE LOCAL NMI HANDLER
                      (     mon09v37.asm):03146           ELSE
FFFC F272             (     mon09v37.asm):03147                 FDB     NMIHND          USE MON09 NMI HANDLER
                      (     mon09v37.asm):03148           ENDC
                      (     mon09v37.asm):03149         ;
FFFE E47F             (     mon09v37.asm):03150                 FDB     RESET
                      (     mon09v37.asm):03151          ENDC           ;IF NOT IN RAM
