                      (     mon09v37.asm):00001         ;******************************************************************************
                      (     mon09v37.asm):00002         ;*
                      (     mon09v37.asm):00003         ;* MON09: A software debug monitor for the 6809
                      (     mon09v37.asm):00004         ;*
                      (     mon09v37.asm):00005         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (     mon09v37.asm):00006         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and 48K of RAM
                      (     mon09v37.asm):00007         ;* from $2000-$DFFF. The 8K block from $0000-$1FFF is used for I/O devices
                      (     mon09v37.asm):00008         ;* etc. MON09 uses 160 bytes of memory at the very top of available RAM,
                      (     mon09v37.asm):00009         ;* and the user stack pointer is initialized to point to the beginning of
                      (     mon09v37.asm):00010         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (     mon09v37.asm):00011         ;*
                      (     mon09v37.asm):00012         ;* Console and Host I/O device drivers are included for both 6551 and 6552
                      (     mon09v37.asm):00013         ;* type uarts, which are selected by the set symbol 'utype', and conditionally
                      (     mon09v37.asm):00014         ;* assembled into the code. THIS FILE MUST BE PROCESSED WITH 'MACRO' PRIOR
                      (     mon09v37.asm):00015         ;* TO ASSEMBLING WITH ASM09!!! You can modify the I/O drivers to support a
                      (     mon09v37.asm):00016         ;* different uart device if you wish. The serial I/O drivers are at the very
                      (     mon09v37.asm):00017         ;* end of the monitor source code (Just before the interrupt vectors).
                      (     mon09v37.asm):00018         ;*
                      (     mon09v37.asm):00019         ;* Copyright 1985-2007 Dave Dunfield
                      (     mon09v37.asm):00020         ;* All rights reserved.
                      (     mon09v37.asm):00021         ;*
                      (     mon09v37.asm):00022         ;* Additional modifications for the HB63C09 by Dave Collins, Z80Dad
                      (     mon09v37.asm):00023         ; VERSION 3.7
                      (     mon09v37.asm):00024         ; 2024-0331:    DC      REMOVED OPTION ROM BUILDING FROM CODE FOR TINYBASIC, AND FORTH DUE TO 
                      (     mon09v37.asm):00025         ;                       SIZE CONSTRAINTS (IT IS TRIVIAL TO UNCOMMENT THEM)
                      (     mon09v37.asm):00026         ;               DC      CHANGED ADDRESS RANGES TO SUPPORT THE HB63C09
                      (     mon09v37.asm):00027         ;               DC      FIXED 'WRAP AROUND' BUG FROM ORIGINAL DUNFIELD SOURCE WHICH WOULD CAUSE
                      (     mon09v37.asm):00028         ;                       MEMORY SR TO OUTPUT FOREVER IF YOU TRIED TO DISPLAY AN ADDRESS
                      (     mon09v37.asm):00029         ;                       FROM 0xFFF0 TO THE END OF MEMORY.  THIS SLIGHTLY CHANGES THE BEHAVIOR, 
                      (     mon09v37.asm):00030         ;                       AS NOW, THE START ADDRESS WILL ALIGN WITH THE BEGINNING OF A 16 BYTE
                      (     mon09v37.asm):00031         ;                       BLOCK (STARTING AT A NUMBER WITH THE BOTTOM 4 BITS BEING CLEAR.)
                      (     mon09v37.asm):00032         ;                       SINCE THE SR ALWAYS OUTPUTS 16 BYTES THIS ALIGNS THE LAST INCREMENT OF X 
                      (     mon09v37.asm):00033         ;                       WITH ZERO SO THAT WE CAN CATCH THE REGISTER ROLLING OVER AND THE SR 
                      (     mon09v37.asm):00034         ;                       DOES NOT RUN FOREVER.  ITS ARGUABLE THIS IS THE CORRECT FUNCTIONALITY
                      (     mon09v37.asm):00035         ;                       OF THE DISPLAY MEMORY SR AS IT ALWAYS OUTPUTS 16 BYTES REGARDLESS OF 
                      (     mon09v37.asm):00036         ;                       THE LAST ADDRESS IN THE RANGE.
                      (     mon09v37.asm):00037         ;               DC      FOUND AN ISSUE WITH LOAD SR WITH THE SRECORD FORMAT.  THE SUBROTINE NEEDED 
                      (     mon09v37.asm):00038         ;                       TO IGNORE RECORD TYPE 5 - COUNT. SINCE IT IS A 16 BIT ADDRESS BUS. THE OTHER
                      (     mon09v37.asm):00039         ;                       COUNT RECORD TYPES WONT NEED TO BE TESTED FOR. (FIXED)
                      (     mon09v37.asm):00040         ;               DC      FIXED CRLF HANDLER MOSTLY. OCCASIONALLY IT WILL DUMP A SPURIOUS CR ONTO THE 
                      (     mon09v37.asm):00041         ;                       PROMPT THIS DEPENDS ON HOW THE FILE WAS TERMINATED BY THE COMPLIER. RECORD 
                      (     mon09v37.asm):00042         ;                       TYPE 9 IGNORES ANY START ADDRESS THAT IS PLACED THERE, THIS WAS ALWAYS THE 
                      (     mon09v37.asm):00043         ;                       CASE HOWEVER NOW IT READS THE CHARACTERS IN UNTIL THE END OF THE LINE.
                      (     mon09v37.asm):00044         ;               DC      SWITCHED BASIC ROM TO A MODIFIED DIGICOOLTHINGS ROM, SEE BASIC ROM SOURCE
                      (     mon09v37.asm):00045         ;                       FOR DETAILS.
                      (     mon09v37.asm):00046         ; 
                      (     mon09v37.asm):00047         ;* Additional modifications for the 6809SBC by Johnny Quest.
                      (     mon09v37.asm):00048         ;*
                      (     mon09v37.asm):00049         ;******************************************************************************
                      (     mon09v37.asm):00050         ; VERSION 3.6
                      (     mon09v37.asm):00051         ; 2021-0904:    JQ      ON ILLOP/DIV INTERRUPT, CORRECTED BUG WHERE THE HANDLER
                      (     mon09v37.asm):00052         ;                                        JUMPS TO THE BREAKPOINT DISPLAY TO EXIT BUT THE 'BRKREG'
                      (     mon09v37.asm):00053         ;                                        IS LOCATED WITHIN THE BREAKPOINT ROUTINE, WHICH CAUSES
                      (     mon09v37.asm):00054         ;                                        CONFUSIION AND EVENTUAL HANG.
                      (     mon09v37.asm):00055         ;                               JQ      SEEMS THAT DETECTION OF A 6309 AND SETTING IT TO 'NATIVE'
                      (     mon09v37.asm):00056         ;                                        MODE CAUSES PROBLEMS, SO THE MODE REGISTER IS NOT TOUCHED
                      (     mon09v37.asm):00057         ;                                        AND THE HD6309 IS LEFT IN 'EMULATION MODE'.
                      (     mon09v37.asm):00058         ;                               JQ      CORRECTED BUG IN 'CHGREG' WHERE CHANGING REGISTER 'D' WAS NOT
                      (     mon09v37.asm):00059         ;                                        RECOGNIZED AS A 16-BIT REGISTER.
                      (     mon09v37.asm):00060         ;******************************************************************************
                      (     mon09v37.asm):00061         ; VERSION 3.5
                      (     mon09v37.asm):00062         ; 2021-0824:    JQ      ON ILLOP/DIV INTERRUPT, INFORMS WHICH ONE CAUSED IT.
                      (     mon09v37.asm):00063         ;                               JQ      IF 6309 IS DETECTED, THE MODE REGISTER IS SET TO 'NATIVE'.
                      (     mon09v37.asm):00064         ; 2021-0823:    JQ      ADDED SUPPORT FOR DETECTING IF THE HOST MCU IS AN MC6809
                      (     mon09v37.asm):00065         ;                                        OR AN HD6309 AND EMITS THE PROPER SIGN-ON MESSAGE.
                      (     mon09v37.asm):00066         ;                               JQ      ADDED A BUILD DATE AND TIME TO THE SIGN-ON MESSAGE. THE
                      (     mon09v37.asm):00067         ;                                        LINUX "build.sh" SCRIPT CREATES A SEPARATE ASSEMBLY FILE
                      (     mon09v37.asm):00068         ;                                        THAT IS "INCLUDED" IN THE MAIN ASSEMBLY FILE.
                      (     mon09v37.asm):00069         ;                               JQ      BE AWARE THAT THE DISASSEMBLER DOES NOT YET SUPPORT THE
                      (     mon09v37.asm):00070         ;                                        6309 EXTENDED INSTRUCTIONS.
                      (     mon09v37.asm):00071         ; 2021-0419:    JQ      ADDED SUPPORT FOR MERGING THE BINARY IMAGES OF THE
                      (     mon09v37.asm):00072         ;                                        LANGUAGE SUPPORT MODULES DIRECTLY INTO THE MON09
                      (     mon09v37.asm):00073         ;                                        IMAGE FILE. USE CONDITIONAL ASSEMBLY TO ENABLE/DISABLE.
                      (     mon09v37.asm):00074         ;                                        CONSTRUCTED MASTER BUILD SCRIPT TO ASSEMBLE THE VARIOUS
                      (     mon09v37.asm):00075         ;                                        LANGUAGE MODULES INTO A MASTER FIRMWARE IMAGE FILE. THUS,
                      (     mon09v37.asm):00076         ;                                        INCLUDING THEM INTO THE MON09 IMAGE AS DATA STATEMENTS
                      (     mon09v37.asm):00077         ;                                        IS UNNESSESARY.
                      (     mon09v37.asm):00078         ; 2021-0412:    JQ      CHANGED THE MANNER IN WHICH NMI IS HANDLED SO THAT THE
                      (     mon09v37.asm):00079         ;                                        VECTOR CAN BE SET IN MEMORY JUST AS THE FIRQ, IRQ, SWI2
                      (     mon09v37.asm):00080         ;                                        AND SWI3 HANDLERS DO. IF AN NMI VECTOR IS NOT SPECIFIED,
                      (     mon09v37.asm):00081         ;                                        MON09 DEFAULTS TO THE INTERNAL NMI HANDLER, WHICH IS SHOWN
                      (     mon09v37.asm):00082         ;                                        BY THE 'DV' COMMAND. ADDED ADDITIONAL BYTES TO THE DATA
                      (     mon09v37.asm):00083         ;                                        TABLES AND AN NMI HANDLER. USE CONDITIONAL STATEMENT TO
                      (     mon09v37.asm):00084         ;                                        ENABLE IT.
                      (     mon09v37.asm):00085         ;                               JQ      ADDED HD6309 ILLOP INSTRUCTION HANDLER. IF NO VECTOR
                      (     mon09v37.asm):00086         ;                                        SPECIFIED, DEFAULTS TO THE MON09 ILLOP HANDLER. USE
                      (     mon09v37.asm):00087         ;                                        CONDITIONAL STATEMENT TO ENABLE IT.
                      (     mon09v37.asm):00088         ;                               JQ      ADDED 'JUMP' COMMAND TO ACCESS THE FP BASIC, TINY BASIC
                      (     mon09v37.asm):00089         ;                                        AND FORTH MODULES IN ROM. USE CONDITIONAL STATEMENT TO
                      (     mon09v37.asm):00090         ;                                        ENABLE IT.
                      (     mon09v37.asm):00091         ;                               JQ      ADDED JUMP TABLE OF 'HOOKS' THAT PROVIDES A SUMMARY OF
                      (     mon09v37.asm):00092         ;                                        USER ACCESSIBLE MON09 ROM ENTRY ADDRESSES AND IRQ RE-
                      (     mon09v37.asm):00093         ;                                        VECTORING ADDRESSES IN DATA RAM. IT IS INTENDED TO BE
                      (     mon09v37.asm):00094         ;                                        EASILY IDENTIFIED AND EXTRACTED FROM THE SYMBOL TABLE
                      (     mon09v37.asm):00095         ;                                        TO BE 'INCLUDED' IN THE USER'S PROGRAM FILE. SINCE THE
                      (     mon09v37.asm):00096         ;                                        TABLE IS LOCATED AT
                      (     mon09v37.asm):00097         ;                               JQ      IN 'FILMEM' ROUTINE, ADDED CODE TO LIMIT THE USER
                      (     mon09v37.asm):00098         ;                                        SPECIFIED ENDING ADDRESS SO AS NOT TO OVERWRITE MON09
                      (     mon09v37.asm):00099         ;                                        DATA IN RAM. THIS EFFECTIVELY LIMITS THE 'FM' COMMAND
                      (     mon09v37.asm):00100         ;                                        TO RAM ONLY ON THE 6809SBC.
                      (     mon09v37.asm):00101         ;
                      (     mon09v37.asm):00102         ;******************************************************************************
                      (     mon09v37.asm):00103         ; VERSION 3.4
                      (     mon09v37.asm):00104         ; 2021-0404:    JQ      MODIFIED FOR USE WITH 6809SBC PROJECT USING 6850 ACIA.
                      (     mon09v37.asm):00105         ;                                        ASSEMBLES WITH LWASM V4.18, WHICH SUPPORTS MACROS AND
                      (     mon09v37.asm):00106         ;                                        CONDITIONAL ASSEMBLY STATEMENTS.
                      (     mon09v37.asm):00107         ;
                      (     mon09v37.asm):00108         ;******************************************************************************
                      (     mon09v37.asm):00109         ;MODS BY JQ
     0025             (     mon09v37.asm):00110         VERSION         EQU     37              VERSION TIMES 10
     0001             (     mon09v37.asm):00111         JQ_DETMCU       EQU     1               SET TO '1' TO ENABLE DETECTION OF MCU TYPE
     0001             (     mon09v37.asm):00112         JQ_NMIRAM       EQU     1               SET TO '1' TO ENABLE NMI HANDLER IN RAM
     0001             (     mon09v37.asm):00113         JQ_ILLOP        EQU     1               SET TO '1' TO ENABLE 6309 ILLOP HANDLER
     0001             (     mon09v37.asm):00114         JQ_JMPMOD       EQU     1               SET TO '1' TO ENABLE JUMP TO MODULES
     0000             (     mon09v37.asm):00115         JQ_EMBEDBIN     EQU     0               SET TO '1' TO EMBED MODULE BINARY IMAGES
     0000             (     mon09v37.asm):00116         JQ_EFORTH       EQU     0               SET TO '1' TO USE EFORTH, ELSE Z79FORTH
                      (     mon09v37.asm):00117         ;
                      (     mon09v37.asm):00118         ; TO-DO
     0000             (     mon09v37.asm):00119         JQ_EEPROM       EQU     0               SET TO '1' TO ENABLE EEPROM WRITING
                      (     mon09v37.asm):00120         
                      (     mon09v37.asm):00121         ;
                      (     mon09v37.asm):00122         ;TNYBASSTRT     EQU     $8C00                   START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00123         ;TNYBASEND      EQU     TNYBASSTRT+$1000        END ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00124         
                      (     mon09v37.asm):00125         ;FTHIMGSTRT     EQU     $9C00                   START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00126         ;FTHIMGEND      EQU     FTHIMGSTRT+$2000        END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00127         ; IFNE JQ_EFORTH                                IF USING EFORTH
                      (     mon09v37.asm):00128         ;FORTHCOLD      EQU     $0100                   DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v37.asm):00129         ; ELSE
                      (     mon09v37.asm):00130         ;FORTHCOLD      EQU     FTHIMGSTRT              DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v37.asm):00131         ; ENDC                                          IF USING EFORTH
                      (     mon09v37.asm):00132         
     C000             (     mon09v37.asm):00133         FPBASSTRT       EQU     $C000                   START ADDRESS OF FP BASIC IN ROM
     E600             (     mon09v37.asm):00134         FPBASEND        EQU     FPBASSTRT+$2600         END ADDRESS OF FP BASIC IN ROM
                      (     mon09v37.asm):00135         ;
                      (     mon09v37.asm):00136         ;== HARDWARE CONSTANTS =================================================
     E437             (     mon09v37.asm):00137         CODE            EQU     $E437   MON09 code goes here
     0000             (     mon09v37.asm):00138         RAMSTRT         EQU     $0000   START OF RAM
     9FFF             (     mon09v37.asm):00139         RAMEND          EQU     $9FFF   END OF RAM
                      (     mon09v37.asm):00140         
     C000             (     mon09v37.asm):00141         ROMSTRT         EQU     $C000   START OF ROM
     0000             (     mon09v37.asm):00142         ROMEND          EQU     $10000  END OF ROM
                      (     mon09v37.asm):00143         
                      (     mon09v37.asm):00144          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
     FFF0             (     mon09v37.asm):00145         VECTTBL         EQU     $FFF0
                      (     mon09v37.asm):00146          ELSE
0000                  (     mon09v37.asm):00147         VECTTBL         EQU     $FFF2
                      (     mon09v37.asm):00148          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00149         
     BBC8             (     mon09v37.asm):00150         LOC             EQU     RAMEND-CODE     OFFSET -> RAM OR ROM CODE LOCATION
                      (     mon09v37.asm):00151         
     9FFE             (     mon09v37.asm):00152         STACK   EQU     RAMEND-1        MON09 Stack (Top of RAM)
                      (     mon09v37.asm):00153         
                      (     mon09v37.asm):00154         ;MODS BY JQ
     9F5F             (     mon09v37.asm):00155         RAM             SET     RAMEND-160      MON09 data goes here
                      (     mon09v37.asm):00156          IFNE JQ_NMIRAM                         NO JQ NMI ENHANCEMENTS
     9F5D             (     mon09v37.asm):00157         RAM             SET     RAM-2           MON09 NMI VECTOR STORAGE
                      (     mon09v37.asm):00158          ENDC                                   NO JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00159          IFNE JQ_ILLOP                          JQ ILLOP ENHANCEMENTS
     9F5B             (     mon09v37.asm):00160         RAM             SET     RAM-2           MON09 ILLOP VECTOR STORAGE
                      (     mon09v37.asm):00161          ENDC                                   NO JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00162          IFNE JQ_EEPROM                         JQ EEPROM WRITE ENHANCEMENTS
0000                  (     mon09v37.asm):00163         RAM             SET     RAM-2           MON09 E2P PAGE-BYTE COUNTER STORAGE
                      (     mon09v37.asm):00164          ENDC                                   JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00165         ;
                      (     mon09v37.asm):00166         ;== 6850 ACIA CONSTANTS ===============================================
     A000             (     mon09v37.asm):00167         SER1    EQU     $A000           Serial Port 1 (Console)
     A000             (     mon09v37.asm):00168         SER2    EQU     $A000           Serial Port 2 (Aux)
                      (     mon09v37.asm):00169         
     0001             (     mon09v37.asm):00170         RDRF    EQU     1               BIT MASK POSITION FOR RDRF FLAG
     0002             (     mon09v37.asm):00171         TDRE    EQU     2               BIT MASK POSITION FOR TDRE FLAG
                      (     mon09v37.asm):00172         
     0003             (     mon09v37.asm):00173         CTRL1   EQU     $03             MASTER RESET
     0015             (     mon09v37.asm):00174         CTRL2   EQU     $15             115.2K BAUD @8N1
                      (     mon09v37.asm):00175         ;
                      (     mon09v37.asm):00176         ;======================================================================
                      (     mon09v37.asm):00177         ;*
                      (     mon09v37.asm):00178                 ORG     RAM             Internal MON09 variables
                      (     mon09v37.asm):00179         ;*
                      (     mon09v37.asm):00180         ;* MON09 INTERNAL MEMORY
                      (     mon09v37.asm):00181         ;*
9F5B                  (     mon09v37.asm):00182         SWIADR  RMB     2               SWI VECTOR ADDRESS
9F5D                  (     mon09v37.asm):00183         SWI2ADR RMB     2               SWI2 VECTOR ADDRESS
9F5F                  (     mon09v37.asm):00184         SWI3ADR RMB     2               SWI3 VECTOR ADDRESS
9F61                  (     mon09v37.asm):00185         IRQADR  RMB     2               IRQ VECTOR ADDRESS
9F63                  (     mon09v37.asm):00186         FIRQADR RMB     2               FIRQ VECTOR ADDRESS
                      (     mon09v37.asm):00187         ;MODS BY JQ
                      (     mon09v37.asm):00188          IFNE JQ_NMIRAM                 USE LOCAL NMI HANDLER
9F65                  (     mon09v37.asm):00189         NMIADR  RMB     2               NMI VECTOR ADDRESS
                      (     mon09v37.asm):00190          ENDC
                      (     mon09v37.asm):00191          IFNE JQ_ILLOP                  USE LOCAL ILLOP HANDLER
9F67                  (     mon09v37.asm):00192         ILOPADR RMB     2               6309 ILLOP VECTOR ADDRESS
                      (     mon09v37.asm):00193          ENDC
                      (     mon09v37.asm):00194          IFNE JQ_EEPROM                 JQ EEPROM WRITE ENHANCEMENTS
9F69                  (     mon09v37.asm):00195         E2PCNT  RMB     1               EEPROM PAGE-BYTE COUNTER
                      (     mon09v37.asm):00196          ENDC                           JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00197         ;
9F69                  (     mon09v37.asm):00198         IOCON   RMB     1               I/O CONFIGURATION BYTE
9F6A                  (     mon09v37.asm):00199         UART1   RMB     2               UART 1 ADDRESS
9F6C                  (     mon09v37.asm):00200         UART2   RMB     2               UART 2 ADDRESS
9F6E                  (     mon09v37.asm):00201         SAVCC   RMB     1               SAVED CONDITION CODE REGISTER
9F6F                  (     mon09v37.asm):00202         SAVA    RMB     1               SAVED 6809 A REGISTER
9F70                  (     mon09v37.asm):00203         SAVB    RMB     1               SAVED 6809 B REGISTER
9F71                  (     mon09v37.asm):00204         SAVDP   RMB     1               SAVED DIRECT PAGE REGISTER
9F72                  (     mon09v37.asm):00205         SAVX    RMB     2               SAVED X REGISTER
9F74                  (     mon09v37.asm):00206         SAVY    RMB     2               SAVED Y REGISTER
9F76                  (     mon09v37.asm):00207         SAVU    RMB     2               SAVED U REGISTER
9F78                  (     mon09v37.asm):00208         SAVPC   RMB     2               SAVED PROGRAM COUNTER
9F7A                  (     mon09v37.asm):00209         SAVS    RMB     2               SAVED S REGISTER
9F7C                  (     mon09v37.asm):00210         TEMP    RMB     2               TEMPORARY STORAGE
9F7E                  (     mon09v37.asm):00211         STPFLG  RMB     1               REGISTER DISPLAY WHILE STEPPING FLAG
9F7F                  (     mon09v37.asm):00212         PTRSAV  RMB     2               SINGLE STEP AND DISASSEMBLER CODE POINTER
9F81                  (     mon09v37.asm):00213         INSTYP  RMB     1               DISASSEMBLED INSTRUCTION TYPE
9F82                  (     mon09v37.asm):00214         POSBYT  RMB     1               POSTBYTE STORAGE AREA
9F83                  (     mon09v37.asm):00215         BRKTAB  RMB     24              BREAKPOINT TABLE
9F9B                  (     mon09v37.asm):00216         DSPBUF  RMB     50              DISASSEMBLER DISPLAY BUFFER
9FCD                  (     mon09v37.asm):00217         INSRAM  RMB     7               INSTRUCTION EXECUTION ADDRESS
                      (     mon09v37.asm):00218         
                      (     mon09v37.asm):00219         ;**********************************************************************
                      (     mon09v37.asm):00220          IFNE JQ_EMBEDBIN               ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v37.asm):00221         ;*
                      (     mon09v37.asm):00222                 ; INCLUDE BINARY IMAGES OF ADDITONAL LANGUAGE MODULES
                      (     mon09v37.asm):00223                 ; NOTE: THE MASTER FIRMWARE BUILD SCRIPT HANDLES
                      (     mon09v37.asm):00224                 ;       COMBINING THE VARIOUS LANGUAGE MODULES INTO
                      (     mon09v37.asm):00225                 ;       THE PROPER ADDRESSES IN THE FINAL HEX AND BIN
                      (     mon09v37.asm):00226                 ;       FILES.
                      (     mon09v37.asm):00227         ;*
                      (     mon09v37.asm):00228         ;========> START OF MICRO BASIC PLUS BINARY IMAGE <==========
                      (     mon09v37.asm):00229                         ORG     TNYBASSTRT      START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00230                         JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00231                         FILL $FF,FTHIMGSTRT-*
                      (     mon09v37.asm):00232         
                      (     mon09v37.asm):00233         ;========> START OF FORTH BINARY IMAGE <=====================
                      (     mon09v37.asm):00234                         ORG     FTHIMGSTRT      START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00235         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00236                 INCLUDEBIN      ../../forth/eForth/ef09.bin
                      (     mon09v37.asm):00237                         FILL $FF,FPBASSTRT-*
                      (     mon09v37.asm):00238         
                      (     mon09v37.asm):00239         ;========> START OF FP BASIC BINARY IMAGE <==================
                      (     mon09v37.asm):00240                         ORG     FPBASSTRT       START ADDRESS OF FP BASIC IN ROM
                      (     mon09v37.asm):00241         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00242                 INCLUDEBIN      ../../basic/exbasrom/ExBasROM.bin
                      (     mon09v37.asm):00243                         FILL $FF,CODE-*
                      (     mon09v37.asm):00244         ;
                      (     mon09v37.asm):00245         ;**********************************************************************
                      (     mon09v37.asm):00246          ENDC                           ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v37.asm):00247         ;*
                      (     mon09v37.asm):00248                 ORG     CODE            MONITOR CODE STARTS HERE
                      (     mon09v37.asm):00249         
E437 7EE47F           (     mon09v37.asm):00250                 JMP     RESET           JUMP TO MON09 COLD-START
                      (     mon09v37.asm):00251         
                      (     mon09v37.asm):00252         ;===============================================================================
                      (     mon09v37.asm):00253         ; TRAMPOLINE JUMP TABLE CONTAINING MON09 ROM ENTRY POINTS FOR USER PROGRAMS
                      (     mon09v37.asm):00254         ;===============================================================================
E43A 7EEE0D           (     mon09v37.asm):00255         MON09_GETCHR    JMP     GETCHR                  ;Reads character from selected input device, returns
                      (     mon09v37.asm):00256                                                         ; in ACCA.
E43D 7EEDED           (     mon09v37.asm):00257         MON09_GETECH    JMP     GETECH                  ;Reads and echos char. from selected input device,
                      (     mon09v37.asm):00258                                                         ; converts it to capital, and returns in ACCA.
E440 7EEDA3           (     mon09v37.asm):00259         MON09_GETNIB    JMP     GETNIB                  ;Gets a single hex nibble from selected input device,
                      (     mon09v37.asm):00260                                                         ; and returns in ACCA. Sets 'Z' flag if successful.
E443 7EED81           (     mon09v37.asm):00261         MON09_GETBYT    JMP     GETBYT                  ;Gets a single hex byte from selected  input  device,
                      (     mon09v37.asm):00262                                                         ; and returns in ACCA. Sets 'Z' flag is successful.
E446 7EED3A           (     mon09v37.asm):00263         MON09_GETADR    JMP     GETADR                  ;Gets a hex word from selected input device, and
                      (     mon09v37.asm):00264                                                         ; returns in D accumulator. Sets 'Z' if successful.
E449 7EED1D           (     mon09v37.asm):00265         MON09_GETRNG    JMP     GETRNG                  ;Gets an address range from selected input device,
                      (     mon09v37.asm):00266                                                         ; first address is returned in 'X', and second address
                      (     mon09v37.asm):00267                                                         ; is returned in 'D'. Sets 'Z' if successful.
E44C 7EEE40           (     mon09v37.asm):00268         MON09_CHKCHR    JMP     CHKCHR                  ;Checks for character from terminal, and  returns  in
                      (     mon09v37.asm):00269                                                         ; ACCA if found, otherwise returns $FF. Sets 'Z' flag
                      (     mon09v37.asm):00270                                                         ; If character is found, and is the escape character.
E44F 7EEE22           (     mon09v37.asm):00271         MON09_PUTCHR    JMP     PUTCHR                  ;Writes character in ACCA to all enabled output devs.
E452 7EEDFB           (     mon09v37.asm):00272         MON09_SPACE     JMP     SPACE                   ;Writes a space to all enabled output devices.
E455 7EEE01           (     mon09v37.asm):00273         MON09_LFCR      JMP     LFCR                    ;Writes a line-feed, Carriage-return pair to all
                      (     mon09v37.asm):00274                                                         ; enabled output devices.
E458 7EEDCA           (     mon09v37.asm):00275         MON09_HOUT      JMP     HOUT                    ;Outputs nibble in ACCA to output devices in HEX.
E45B 7EEDC0           (     mon09v37.asm):00276         MON09_HEXOUT    JMP     HEXOUT                  ;Outputs byte in ACCA to output devices in HEX.
E45E 7EEDBC           (     mon09v37.asm):00277         MON09_WRDOUT    JMP     WRDOUT                  ;Outputs word in ACCD to output devices in HEX.
E461 7EEDE0           (     mon09v37.asm):00278         MON09_WRLIN     JMP     WRLIN                   ;Outputs message string pointed to by X to enabled
                      (     mon09v37.asm):00279                                                         ; output devices. String ends with null ($00) or with
                      (     mon09v37.asm):00280                                                         ; Carriage-Return ($0D). If strings ends with Carriage
                      (     mon09v37.asm):00281                                                         ; Return, then LFCR is displayed at end.
E464 7EEDD6           (     mon09v37.asm):00282         MON09_WRMSG     JMP     WRMSG                   ;Same as above, except message string in inline with
                      (     mon09v37.asm):00283                                                         ; code, and immediatly follows call to WRMSG.
E467 7EEC24           (     mon09v37.asm):00284         MON09_DLOAD     JMP     DLOAD                   ;Downloads one record of a motorola hex format file
                      (     mon09v37.asm):00285                                                         ; from the selected input device. Sets 'C' if record
                      (     mon09v37.asm):00286                                                         ; was NOT an end of file record.
E46A 7EEC01           (     mon09v37.asm):00287         MON09_LOAD      JMP     LOAD                    ;Selects AUX input, and downloads entire motorola hex
                      (     mon09v37.asm):00288                                                         ; format file. Prints '.' for every record received.
E46D 7EF0DA           (     mon09v37.asm):00289         MON09_DISASS    JMP     DISASS                  ;Disassembles opcode pointed to by Y, and placed  the
                      (     mon09v37.asm):00290                                                         ; disasembler output text in memory pointed to by U.
                      (     mon09v37.asm):00291                                                         ; disassembler output text ends with carriage return.
                      (     mon09v37.asm):00292                                                         ; Y is left pointing to next opcode in memory.
E470 7EEE7C           (     mon09v37.asm):00293         MON09_STEP      JMP     STEP                    ;Steps one instruction, from address in saved program
                      (     mon09v37.asm):00294                                                         ; counter. All saved registers are updated.
E473 7EEE6B           (     mon09v37.asm):00295         MON09_STEPDI    JMP     STEPDI                  ;Same as above, except  disassembled  instruction  is
                      (     mon09v37.asm):00296                                                         ; Displayed.
E476 7EE8C1           (     mon09v37.asm):00297         MON09_DISREG    JMP     DISREG                  ;Displays all of the saved registers.
E479 7EE4BB           (     mon09v37.asm):00298         MON09_MONITOR   JMP     MONITOR                 ;Reenters the monitor.
E47C 7EE47F           (     mon09v37.asm):00299         MON09_RESET     JMP     RESET                   ;Reinitializes the monitor via RESET.
                      (     mon09v37.asm):00300         ;===============================================================================
                      (     mon09v37.asm):00301         ;*
                      (     mon09v37.asm):00302         ;* INITIALIZATIONS.
                      (     mon09v37.asm):00303         ;*
E47F                  (     mon09v37.asm):00304         RESET
E47F 10CE9FFE         (     mon09v37.asm):00305                 LDS     #STACK          SET UP STACK
E483 8E9F5B           (     mon09v37.asm):00306                 LDX     #SWIADR         POINT TO START
E486                  (     mon09v37.asm):00307         CLRRAM                          ;CLEAR MON09 DATA AREA
E486 6F80             (     mon09v37.asm):00308                 CLR     ,X+             CLEAR IT
E488 8C9FCD           (     mon09v37.asm):00309                 CMPX    #INSRAM         AT BUFFER?
E48B 25F9             (     mon09v37.asm):00310                 BLO     CLRRAM          KEEP GOING
                      (     mon09v37.asm):00311         
                      (     mon09v37.asm):00312                 ;INIT ACIA1
E48D 8EA000           (     mon09v37.asm):00313                 LDX     #SER1           GET SERIAL PORT 1
E490 BF9F6A           (     mon09v37.asm):00314                 STX     >UART1          SET IT UP
E493 171902           (     mon09v37.asm):00315                 LBSR    INIT            INITIALIZE IT
                      (     mon09v37.asm):00316         
                      (     mon09v37.asm):00317                 ;INIT ACIA2
E496 8EA000           (     mon09v37.asm):00318                 LDX     #SER2           GET SERIAL PORT 2
E499 BF9F6C           (     mon09v37.asm):00319                 STX     >UART2          SET IT UP
E49C 1718F9           (     mon09v37.asm):00320                 LBSR    INIT            INITIALIZE IT
                      (     mon09v37.asm):00321         
                      (     mon09v37.asm):00322                 ;INIT I/O CONFIG FLAG
E49F 8603             (     mon09v37.asm):00323                 LDA     #3              DEFAULT I/O CONFIGURATION
E4A1 B79F69           (     mon09v37.asm):00324                 STA     IOCON           SET IT
                      (     mon09v37.asm):00325         
                      (     mon09v37.asm):00326                 ;INIT SHADOW STACK
E4A4 CC9F5B           (     mon09v37.asm):00327                 LDD     #RAM            DEFAULT STACK AT TOP OF RAM
E4A7 FD9F7A           (     mon09v37.asm):00328                 STD     SAVS            SAVE IT
                      (     mon09v37.asm):00329         
                      (     mon09v37.asm):00330                 ;INIT SHADOW CONDITION REGISTER
E4AA 86D0             (     mon09v37.asm):00331                 LDA     #$D0            SET CC
E4AC B79F6E           (     mon09v37.asm):00332                 STA     SAVCC           SAVE IT
                      (     mon09v37.asm):00333         
                      (     mon09v37.asm):00334         ;MODS BY JQ
                      (     mon09v37.asm):00335          IFNE JQ_NMIRAM                 JQ NMI ENHANCEMENTS
E4AF CCF37E           (     mon09v37.asm):00336                 LDD     #NMIHND         SET DEFAULT NMI HANDLER
E4B2 FD9F65           (     mon09v37.asm):00337                 STD     NMIADR          SAVE IT
                      (     mon09v37.asm):00338          ENDC                           JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00339         ;
                      (     mon09v37.asm):00340          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
E4B5 CCF313           (     mon09v37.asm):00341                 LDD     #ILOPHND        SET DEFAULT ILLOP HANDLER
E4B8 FD9F67           (     mon09v37.asm):00342                 STD     ILOPADR         SAVE IT
                      (     mon09v37.asm):00343          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00344         ;
                      (     mon09v37.asm):00345         ;* Emit the sign-on message
E4BB                  (     mon09v37.asm):00346         MONITOR
                      (     mon09v37.asm):00347                 ; Emit the first part of the sign-on message
E4BB 170918           (     mon09v37.asm):00348                 LBSR    WRMSG           OUTPUT MESSAGE
E4BE 0A0D             (     mon09v37.asm):00349                 FCB     $0A,$0D
E4C0 4D4F4E3039205665 (     mon09v37.asm):00350                 FCC     'MON09 Version '
     7273696F6E20
E4CE 332E37           (     mon09v37.asm):00351                 FCB     VERSION/10+$30,'.',VERSION%10+$30
E4D1 0D0A             (     mon09v37.asm):00352                 FCB     $0D,$0A
                      (     mon09v37.asm):00353         
                      (     mon09v37.asm):00354         ;       INCLUDE A DATE OF BUILD STRING
                      (     mon09v37.asm):00355                 INCLUDE datestring.asm
E4D3 4275696C643A2032 (   datestring.asm):00001                 FCC     'Build: 2024-0406 @22:43:42 CDT'
     3032342D30343036
     204032323A34333A
     343220434454
                      (     mon09v37.asm):00356         
E4F1 0D0A             (     mon09v37.asm):00357                 FCB     $0D,$0A
E4F3 284329313938352D (     mon09v37.asm):00358                 FCC     '(C)1985-2007 Dave Dunfield'
     3230303720446176
     652044756E666965
     6C64
E50D 0A0D             (     mon09v37.asm):00359                 FCB     $0A,$0D
E50F 4D6F646966696361 (     mon09v37.asm):00360                 FCC     'Modifications (C)2021 Johnny Quest'
     74696F6E73202843
     2932303231204A6F
     686E6E7920517565
     7374
E531 0A0D             (     mon09v37.asm):00361                 FCB     $0A,$0D
E533 204D6F6469666965 (     mon09v37.asm):00362                 FCC     ' Modified for the HB63C09M By Z80Dad'
     6420666F72207468
     6520484236334330
     394D204279205A38
     30446164
                      (     mon09v37.asm):00363         ;       FCB     $0A,$0D,$FF
E557 FF               (     mon09v37.asm):00364                 FCB     $FF
                      (     mon09v37.asm):00365         ;
                      (     mon09v37.asm):00366         ;------------------------------------------------------------
                      (     mon09v37.asm):00367          IFNE JQ_DETMCU         JQ MCU DETECTION
                      (     mon09v37.asm):00368         ; Added by JQ - Determine MCU and send message string
                      (     mon09v37.asm):00369         ;* Determine whether processor is 6309 or 6809
                      (     mon09v37.asm):00370         ;* Returns Z clear if 6309, set if 6809
E558 8EE580           (     mon09v37.asm):00371                 LDX     #NOT6809        POINT TO 6309 STRING
E55B 3406             (     mon09v37.asm):00372                 PSHS    D               SAVE D REGISTER
E55D 1043             (     mon09v37.asm):00373                 FDB     $1043           6309 COMD INSRUCTION (COMA on 6809)
E55F E161             (     mon09v37.asm):00374                 CMPB    1,S             NOT EQUAL IF 6309
E561 3506             (     mon09v37.asm):00375                 PULS    D               RESTORE D REGISTER
E563 2603             (     mon09v37.asm):00376                 BNE     MONITOR1        BRANCH IF 6309 DETECTED
E565 8EE56D           (     mon09v37.asm):00377                 LDX     #MOT6809        MODIFY POINTER TO 6809 STRING
                      (     mon09v37.asm):00378         ;
E568                  (     mon09v37.asm):00379         MONITOR1
E568 BDE461           (     mon09v37.asm):00380                 JSR             MON09_WRLIN             EMIT THE STRING
                      (     mon09v37.asm):00381         ;       LDMD    #$01                            SET 6309 NATIVE MODE
E56B 2026             (     mon09v37.asm):00382                 BRA             MONITOR2                CONTINUE SIGN-ON MESSAGE
                      (     mon09v37.asm):00383         ;
E56D                  (     mon09v37.asm):00384         MOT6809
E56D 204D43553A202020 (     mon09v37.asm):00385                 FCC             ' MCU:     MC6809'
     20204D4336383039
E57D 0A0D00           (     mon09v37.asm):00386                 FCB             $0A,$0D,0
E580                  (     mon09v37.asm):00387         NOT6809
E580 204D43553A202020 (     mon09v37.asm):00388                 FCC             ' MCU:     HD6309'
     2020484436333039
E590 0A0D00           (     mon09v37.asm):00389                 FCB             $0A,$0D,0
                      (     mon09v37.asm):00390          ENDC                           JQ MCU DETECTION
                      (     mon09v37.asm):00391         ;------------------------------------------------------------
                      (     mon09v37.asm):00392         ;
E593                  (     mon09v37.asm):00393         MONITOR2
                      (     mon09v37.asm):00394                 ; Emit the rest of the sign-on message
E593 170840           (     mon09v37.asm):00395                 LBSR    WRMSG                           OUTPUT MESSAGE
                      (     mon09v37.asm):00396         ;       FCC     ' UART(s): 6850 ACIA'
E596 2055415254287329 (     mon09v37.asm):00397                 FCC     ' UART(s): ATMEGA32A 68B50 Wrapper'
     3A2041544D454741
     3332412036384235
     3020577261707065
     72
E5B7 0A0D             (     mon09v37.asm):00398                 FCB     $0A,$0D
                      (     mon09v37.asm):00399         ;MODS BY JQ
                      (     mon09v37.asm):00400          IFNE JQ_NMIRAM                                 JQ NMI ENHANCEMENTS
E5B9 20456E61626C6564 (     mon09v37.asm):00401                 FCC     ' Enabled: NMI Trapping'
     3A204E4D49205472
     617070696E67
E5CF 0A0D             (     mon09v37.asm):00402                 FCB     $0A,$0D
                      (     mon09v37.asm):00403          ENDC                                           JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00404          IFNE JQ_ILLOP                                  JQ ILLOP ENHANCEMENTS
E5D1 20456E61626C6564 (     mon09v37.asm):00405                 FCC     ' Enabled: 6309 ILLOP & DIV0 Trapping'
     3A20363330392049
     4C4C4F5020262044
     4956302054726170
     70696E67
E5F5 0A0D             (     mon09v37.asm):00406                 FCB     $0A,$0D
                      (     mon09v37.asm):00407          ENDC                                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00408          IFNE JQ_EEPROM                                 JQ EEPROM ENHANCEMENTS
                      (     mon09v37.asm):00409                 FCC     ' Enabled: EEPROM Write'
                      (     mon09v37.asm):00410                 FCB     $0A,$0D
                      (     mon09v37.asm):00411          ENDC                                           JQ EEPROM ENHANCEMENTS
                      (     mon09v37.asm):00412         ;
E5F7 416C6C2072696768 (     mon09v37.asm):00413                 FCC     'All rights & remedies reserved.'
     747320262072656D
     6564696573207265
     7365727665642E
E616 0AFF             (     mon09v37.asm):00414                 FCB     $0A,$FF
                      (     mon09v37.asm):00415         
E618                  (     mon09v37.asm):00416         MAIN
E618 10CE9FFE         (     mon09v37.asm):00417                 LDS     #STACK                          FIX STACK IN CASE ERROR
E61C 1707B7           (     mon09v37.asm):00418                 LBSR    WRMSG                           OUTPUT MESSAGE
E61F 2A2000           (     mon09v37.asm):00419                 FCN             '* '
E622 1707C8           (     mon09v37.asm):00420                 LBSR    GETECH                          GET CHARACTER
E625 5F               (     mon09v37.asm):00421                 CLRB                                    INDICATE NO SECOND CHAR
                      (     mon09v37.asm):00422         ;* LOOK FOR COMMAND IN TABLE
E626                  (     mon09v37.asm):00423         LOOKC
E626 8EE65E           (     mon09v37.asm):00424                 LDX     #CMDTAB         POINT TO COMMAND TABLE
E629 7F9F7C           (     mon09v37.asm):00425                 CLR     TEMP            INDICATE NO PARTIAL MATCH
E62C                  (     mon09v37.asm):00426         LOOK1
E62C 10A381           (     mon09v37.asm):00427                 CMPD    ,X++            DOES IT MATCH
E62F 271E             (     mon09v37.asm):00428                 BEQ     LOOK3           YES IT DOES
E631 A11E             (     mon09v37.asm):00429                 CMPA    -2,X            DOES FIRST CHAR MATCH?
E633 2603             (     mon09v37.asm):00430                 BNE     LOOK2           NO, DON'T RECORD
E635 7A9F7C           (     mon09v37.asm):00431                 DEC     TEMP            SET FLAG
E638                  (     mon09v37.asm):00432         LOOK2
E638 3002             (     mon09v37.asm):00433                 LEAX    2,X             ADVANCE TO NEXT
E63A 6D84             (     mon09v37.asm):00434                 TST     ,X              HAVE WE HIT THE END
E63C 26EE             (     mon09v37.asm):00435                 BNE     LOOK1           NO, KEEP LOOKING
E63E 5D               (     mon09v37.asm):00436                 TSTB                    ALREADY HAVE TWO CHARS?
E63F 2615             (     mon09v37.asm):00437                 BNE     ERROR           YES, ERROR
E641 F69F7C           (     mon09v37.asm):00438                 LDB     TEMP            ANY PARTIAL MATCHES?
E644 2710             (     mon09v37.asm):00439                 BEQ     ERROR           NO, ERROR
E646 1F89             (     mon09v37.asm):00440                 TFR     A,B             SAVE CHAR IN 'A'
E648 1707A2           (     mon09v37.asm):00441                 LBSR    GETECH          GET NEXT CHAR
E64B 1E89             (     mon09v37.asm):00442                 EXG     A,B             SWAP BACK
E64D 20D7             (     mon09v37.asm):00443                 BRA     LOOKC           AND CONTINUE
                      (     mon09v37.asm):00444         ;* COMMAND WAS FOUND, EXECUTE IT
E64F                  (     mon09v37.asm):00445         LOOK3
E64F 1707A9           (     mon09v37.asm):00446                 LBSR    SPACE           OUTPUT SPACE
E652 AD94             (     mon09v37.asm):00447                 JSR     [,X]            EXECUTE COMMAND
E654 20C2             (     mon09v37.asm):00448                 BRA     MAIN            AND RETURN
                      (     mon09v37.asm):00449         ;* ERROR HAS OCCURED
E656                  (     mon09v37.asm):00450         ERROR
E656 17077D           (     mon09v37.asm):00451                 LBSR    WRMSG           OUTPUT MESSAGE
E659 203F             (     mon09v37.asm):00452                 FCC     ' ?'
E65B FF               (     mon09v37.asm):00453                 FCB     $FF
E65C 20BA             (     mon09v37.asm):00454                 BRA     MAIN            TRY AGAIN
                      (     mon09v37.asm):00455         ;* COMMAND LOOKUP TABLE
E65E                  (     mon09v37.asm):00456         CMDTAB
E65E 444D             (     mon09v37.asm):00457                 FCB     'D','M'         DISPLAY MEMORY
E660 E72F             (     mon09v37.asm):00458                 FDB     MEMORY
E662 4444             (     mon09v37.asm):00459                 FCB     'D','D'         DISASSEMBLE
E664 E7DE             (     mon09v37.asm):00460                 FDB     DISASM
E666 4452             (     mon09v37.asm):00461                 FCB     'D','R'         DISPLAY REGISTERS
E668 E8C1             (     mon09v37.asm):00462                 FDB     DISREG
E66A 4442             (     mon09v37.asm):00463                 FCB     'D','B'         VIEW BREAKPOINTS
E66C E992             (     mon09v37.asm):00464                 FDB     DSPBRK
E66E 4456             (     mon09v37.asm):00465                 FCB     'D','V'         DISPLAY VECTORS
E670 E800             (     mon09v37.asm):00466                 FDB     DISVEC
E672 4455             (     mon09v37.asm):00467                 FCB     'D','U'         DISPLAY UARTS
E674 E845             (     mon09v37.asm):00468                 FDB     DISURT
E676 4352             (     mon09v37.asm):00469                 FCB     'C','R'         CHANGE REGISTER
E678 E947             (     mon09v37.asm):00470                 FDB     CHGREG
E67A 4356             (     mon09v37.asm):00471                 FCB     'C','V'         CHANGE VECTORS
E67C E85E             (     mon09v37.asm):00472                 FDB     CHGVEC
E67E 4355             (     mon09v37.asm):00473                 FCB     'C','U'         CHANGE UARTS
E680 E8A0             (     mon09v37.asm):00474                 FDB     CHGURT          DO IT
E682 4500             (     mon09v37.asm):00475                 FCB     'E',0           SUBSTITUTE MEMORY
E684 E79B             (     mon09v37.asm):00476                 FDB     SUBMEM
                      (     mon09v37.asm):00477          IFNE JQ_JMPMOD         JQ JUMP MODULE ENHANCEMENTS
E686 4A42             (     mon09v37.asm):00478                 FCB     'J','B'         JUMP TO FP BASIC MODULE
E688 E6CB             (     mon09v37.asm):00479                 FDB     JUMPFPBAS
                      (     mon09v37.asm):00480         ;       FCB     'J','T'         JUMP TO TINYBASIC MODULE
                      (     mon09v37.asm):00481         ;       FDB     JUMPTNYBAS
                      (     mon09v37.asm):00482         ;       FCB     'J','F'         JUMP TO FORTH MODULE
                      (     mon09v37.asm):00483         ;       FDB     JUMPFORTH
                      (     mon09v37.asm):00484          ENDC                   JQ JUMP MODULE ENHANCEMENTS
                      (     mon09v37.asm):00485         ;
E68A 4C00             (     mon09v37.asm):00486                 FCB     'L',0           DOWNLOAD
E68C EC01             (     mon09v37.asm):00487                 FDB     LOAD
E68E 4200             (     mon09v37.asm):00488                 FCB     'B',0           SET BREAKPOINT
E690 E9C8             (     mon09v37.asm):00489                 FDB     SETBRK
E692 5300             (     mon09v37.asm):00490                 FCB     'S',0           STEP
E694 E9E8             (     mon09v37.asm):00491                 FDB     GOSTEP
E696 4700             (     mon09v37.asm):00492                 FCB     'G',0           GO
E698 EA12             (     mon09v37.asm):00493                 FDB     GOEXEC
E69A 5400             (     mon09v37.asm):00494                 FCB     'T',0           TRANSPARENT MODE
E69C EBDD             (     mon09v37.asm):00495                 FDB     TMODE
E69E 464D             (     mon09v37.asm):00496                 FCB     'F','M'         FILL MEMORY
E6A0 E6F2             (     mon09v37.asm):00497                 FDB     FILMEM
E6A2 5252             (     mon09v37.asm):00498                 FCB     'R','R'         REPEATING READ
E6A4 EA51             (     mon09v37.asm):00499                 FDB     RDLOOP
E6A6 5257             (     mon09v37.asm):00500                 FCB     'R','W'         REPEATING WRITE
E6A8 EA61             (     mon09v37.asm):00501                 FDB     WRLOOP
E6AA 4D54             (     mon09v37.asm):00502                 FCB     'M','T'         MEMORY TEST
E6AC EAAB             (     mon09v37.asm):00503                 FDB     RAMTEST
E6AE 5700             (     mon09v37.asm):00504                 FCB     'W',0           WRITE MEMORY
E6B0 E78B             (     mon09v37.asm):00505                 FDB     WRIMEM
E6B2 4D4D             (     mon09v37.asm):00506                 FCB     'M','M'         MOVE MEMORY
E6B4 E715             (     mon09v37.asm):00507                 FDB     MOVMEM
E6B6 5852             (     mon09v37.asm):00508                 FCB     'X','R'         REPEATING 16 BIT READ
E6B8 EA80             (     mon09v37.asm):00509                 FDB     XRLOOP
E6BA 5857             (     mon09v37.asm):00510                 FCB     'X','W'         REPEATING 16 BIT WRITE
E6BC EA90             (     mon09v37.asm):00511                 FDB     XWLOOP
E6BE 2B00             (     mon09v37.asm):00512                 FCB     '+',0           HEX ADDITION
E6C0 EB7C             (     mon09v37.asm):00513                 FDB     HEXADD
E6C2 2D00             (     mon09v37.asm):00514                 FCB     '-',0           HEX SUBTRACTION
E6C4 EB8D             (     mon09v37.asm):00515                 FDB     HEXSUB
E6C6 3F00             (     mon09v37.asm):00516                 FCB     '?',0           HELP COMMAND
E6C8 EBAF             (     mon09v37.asm):00517                 FDB     HELP
E6CA 00               (     mon09v37.asm):00518                 FCB     0               MARK END OF TABLE
                      (     mon09v37.asm):00519         
                      (     mon09v37.asm):00520         ;MODS BY JQ, MODIFIED FOR HB63C09
                      (     mon09v37.asm):00521         ;******************************************************************************
                      (     mon09v37.asm):00522         ;* 'J' - JUMP TO MODULE
                      (     mon09v37.asm):00523         ;******************************************************************************
                      (     mon09v37.asm):00524          IFNE JQ_JMPMOD         JQ JUMP TO MODULES
                      (     mon09v37.asm):00525         ;==============================================
E6CB                  (     mon09v37.asm):00526         JUMPFPBAS
E6CB 8EE6D7           (     mon09v37.asm):00527                 LDX     #FPBASMSG       POINT TO MESSAGE START
E6CE 17070F           (     mon09v37.asm):00528                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00529         
E6D1 7EC000           (     mon09v37.asm):00530                 JMP     FPBASSTRT       JUMP TO BASIC COLD START
                      (     mon09v37.asm):00531         
E6D4 16072A           (     mon09v37.asm):00532                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00533         
E6D7                  (     mon09v37.asm):00534         FPBASMSG
E6D7 0D0A             (     mon09v37.asm):00535                 FCB     $0D,$0A
E6D9 426F6F74696E6720 (     mon09v37.asm):00536                 FCC     'Booting MS FP BASIC...'
     4D53204650204241
     5349432E2E2E
E6EF 0D0A             (     mon09v37.asm):00537                 FCB     $0D,$0A
E6F1 FF               (     mon09v37.asm):00538                 FCB     $FF                     END OF TABLE
                      (     mon09v37.asm):00539         ;
                      (     mon09v37.asm):00540         ;==============================================
                      (     mon09v37.asm):00541         ;JUMPTNYBAS
                      (     mon09v37.asm):00542         ;       LDX             #TNYBASMSG      POINT TO MESSAGE START
                      (     mon09v37.asm):00543         ;       LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00544         
                      (     mon09v37.asm):00545         ;       JMP             TNYBASSTRT      JUMP TO FORTH COLD START
                      (     mon09v37.asm):00546         
                      (     mon09v37.asm):00547         ;       LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00548         
                      (     mon09v37.asm):00549         ;TNYBASMSG
                      (     mon09v37.asm):00550         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00551         ;       FCC             'Booting TinyBASIC...'
                      (     mon09v37.asm):00552         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00553         ;       FCB             $FF                     END OF TABLE
                      (     mon09v37.asm):00554         
                      (     mon09v37.asm):00555         ;==============================================
                      (     mon09v37.asm):00556         ; Load Forth into RAM.
                      (     mon09v37.asm):00557         ;INTERNAL MOVMEM ROUTINE: IMAGE START IN X, IMAGE END IN D, DESTINATION
                      (     mon09v37.asm):00558         ;  START ADDRESS IN Y.
                      (     mon09v37.asm):00559         ;JUMPFORTH
                      (     mon09v37.asm):00560         ; IFNE JQ_EFORTH                        IF USING EFORTH
                      (     mon09v37.asm):00561         ;       LDX             #FTHIMGSTRT     START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00562         ;       LDY             #FORTHCOLD      DESTINATION ADDRESS IN RAM
                      (     mon09v37.asm):00563         ;       LDD             #FTHIMGEND      END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00564         ;       STD             TEMP            MOVE TO VARIABLE
                      (     mon09v37.asm):00565         
                      (     mon09v37.asm):00566         ;JMPFTH1
                      (     mon09v37.asm):00567         ;       LDA             ,X+                     GET SOURCE BYTE
                      (     mon09v37.asm):00568         ;       STA             ,Y+                     SAVE IN DEST
                      (     mon09v37.asm):00569         ;       CMPX    TEMP            SAVE IT
                      (     mon09v37.asm):00570         ;       BLS             JMPFTH1         KEEP MOVING
                      (     mon09v37.asm):00571          ;ENDC                                  IF USING EFORTH
                      (     mon09v37.asm):00572         
                      (     mon09v37.asm):00573         ;       LDX             #FTHBTMSG       POINT TO MESSAGE START
                      (     mon09v37.asm):00574         ;       LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00575         
                      (     mon09v37.asm):00576         ;       JSR             FORTHCOLD       EXECUTE A CALL TO FORTH COLD START
                      (     mon09v37.asm):00577         
                      (     mon09v37.asm):00578         ;       LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00579         
                      (     mon09v37.asm):00580         ;FTHBTMSG
                      (     mon09v37.asm):00581         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00582         ;       FCC             'Booting FORTH...'
                      (     mon09v37.asm):00583         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00584         ;       FCB             $FF                     END OF TABLE
                      (     mon09v37.asm):00585         
                      (     mon09v37.asm):00586          ENDC                           JQ JUMP TO MODULES
                      (     mon09v37.asm):00587         ;
                      (     mon09v37.asm):00588         ;******************************************************************************
                      (     mon09v37.asm):00589         ;* 'F' - FILL MEMORY
                      (     mon09v37.asm):00590         ;******************************************************************************
E6F2                  (     mon09v37.asm):00591         FILMEM
E6F2 170628           (     mon09v37.asm):00592                 LBSR    GETRNG          GET ADDRESSES
                      (     mon09v37.asm):00593         ;MODS BY JQ
E6F5 10839F5A         (     mon09v37.asm):00594                 CMPD    #RAM-1          START OF MON09 DATA?
E6F9 2F03             (     mon09v37.asm):00595                 BLE     FILL1           NO, ADDRESS OKAY
E6FB CC9F5A           (     mon09v37.asm):00596                 LDD     #RAM-1          STOP AT MON09 DATA-1
                      (     mon09v37.asm):00597         ;
E6FE                  (     mon09v37.asm):00598         FILL1
E6FE FD9F7C           (     mon09v37.asm):00599                 STD     TEMP            SAVE IT
E701 1706F7           (     mon09v37.asm):00600                 LBSR    SPACE           SPACE OVER
E704 17067A           (     mon09v37.asm):00601                 LBSR    GETBYT          GET DATA BYTE
E707 1026FF4B         (     mon09v37.asm):00602                 LBNE    ERROR           INVALID
E70B                  (     mon09v37.asm):00603         FILL2
E70B A780             (     mon09v37.asm):00604                 STA     ,X+                     WRITE IT
E70D BC9F7C           (     mon09v37.asm):00605                 CMPX    TEMP            ARE WE THERE
E710 23F9             (     mon09v37.asm):00606                 BLS     FILL2           NO, KEEP GOING
E712 1606EC           (     mon09v37.asm):00607                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00608         ;
                      (     mon09v37.asm):00609         ;******************************************************************************
                      (     mon09v37.asm):00610         * 'MM' - MOVE MEMORY
                      (     mon09v37.asm):00611         ;******************************************************************************
E715                  (     mon09v37.asm):00612         MOVMEM
                      (     mon09v37.asm):00613          IFNE 0         FOR TESTING
                      (     mon09v37.asm):00614                 JMP     $2000
                      (     mon09v37.asm):00615          ELSE
E715 170605           (     mon09v37.asm):00616                 LBSR    GETRNG          GET A RANGE
E718 FD9F7C           (     mon09v37.asm):00617                 STD     TEMP            SAVE LAST VALUE
E71B 1706DD           (     mon09v37.asm):00618                 LBSR    SPACE           SEPERATOR
E71E 170619           (     mon09v37.asm):00619                 LBSR    GETADR          GET DEST ADDRESS
E721 1F02             (     mon09v37.asm):00620                 TFR     D,Y             SET IT UP
                      (     mon09v37.asm):00621         
E723                  (     mon09v37.asm):00622         MOVM1
E723 A680             (     mon09v37.asm):00623                 LDA     ,X+             GET SOURCE BYTE
E725 A7A0             (     mon09v37.asm):00624                 STA     ,Y+             SAVE IN DEST
E727 BC9F7C           (     mon09v37.asm):00625                 CMPX    TEMP            SAVE IT
E72A 23F7             (     mon09v37.asm):00626                 BLS     MOVM1           KEEP MOVEING
E72C 1606D2           (     mon09v37.asm):00627                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00628         
                      (     mon09v37.asm):00629         ;  IFNE JQ_EEPROM               JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00630         ;  ENDC                         JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00631          ENDC           FOR TESTING
                      (     mon09v37.asm):00632         ;
                      (     mon09v37.asm):00633         ;******************************************************************************
                      (     mon09v37.asm):00634         ;* 'DM' - DISPLAY MEMORY
                      (     mon09v37.asm):00635         ;   FIX FOR 'LOOP' BUG - MOVE START ADDRESS TO BEGINING OF 16 BYTE BOUNDRY
                      (     mon09v37.asm):00636         ;   CHECK TO SEE IF WE'VE LOOPED PAST FFFF AT THE END. THIS MAY DISPLAY MORE 
                      (     mon09v37.asm):00637         ;   BYTES THEN REQUESTED, HOWEVER IT WILL STOP AT FFFF - DC 3.31.24
                      (     mon09v37.asm):00638         ;******************************************************************************
E72F                  (     mon09v37.asm):00639         MEMORY
                      (     mon09v37.asm):00640          IFNE 0         FOR TESTING
                      (     mon09v37.asm):00641                 JMP             $1000
                      (     mon09v37.asm):00642          ELSE
                      (     mon09v37.asm):00643         
E72F 1705EB           (     mon09v37.asm):00644                 LBSR    GETRNG          ; GET ADDRESS
E732 FD9F7C           (     mon09v37.asm):00645                 STD     TEMP            ; SAVE
                      (     mon09v37.asm):00646                                 
E735                  (     mon09v37.asm):00647         MEM1
E735 1706C9           (     mon09v37.asm):00648                 LBSR    LFCR            ; NEW LINE
E738 170705           (     mon09v37.asm):00649                 LBSR    CHKCHR          ; CHECK FOR CHAR
E73B 1027FED9         (     mon09v37.asm):00650                 LBEQ    MAIN            ; ESCAPE, QUIT
E73F 1F10             (     mon09v37.asm):00651                 TFR     X,D             ; GET ADDRESS
E741 1084FFF0         (     mon09v37.asm):00652                 ANDD    #$FFF0          ; CLEAR THE LOWER 4 BITS 
E745 1F01             (     mon09v37.asm):00653                 TFR     D,X             ; UPDATE X TO FIX BIT READ OUT 
E747 3406             (     mon09v37.asm):00654                 PSHS    D               ; SAVE FOR LATER
E749 170670           (     mon09v37.asm):00655                 LBSR    WRDOUT          ; DISPLAY
E74C C610             (     mon09v37.asm):00656                 LDB     #16             ; DISPLAY 16 TO A LINE
E74E                  (     mon09v37.asm):00657         MEM2
E74E 1706AA           (     mon09v37.asm):00658                 LBSR    SPACE           ; OUTPUT A SPACE
E751 C503             (     mon09v37.asm):00659                 BITB    #3              ; ON A BOUNDARY?
E753 2603             (     mon09v37.asm):00660                 BNE     MEM3            ; NO, SPACE
E755 1706A3           (     mon09v37.asm):00661                 LBSR    SPACE           ; EXTRA SPACE
E758                  (     mon09v37.asm):00662         MEM3
E758 A680             (     mon09v37.asm):00663                 LDA     ,X+             ; GET BYTE
E75A 170663           (     mon09v37.asm):00664                 LBSR    HEXOUT          ; DISPLAY
E75D 5A               (     mon09v37.asm):00665                 DECB                    ; REDUCE COUNT
E75E 26EE             (     mon09v37.asm):00666                 BNE     MEM2            ; CONTINUE
E760 C604             (     mon09v37.asm):00667                 LDB     #4              ; FOUR SPACES
E762                  (     mon09v37.asm):00668         MEM4
E762 170696           (     mon09v37.asm):00669                 LBSR    SPACE           ; DISPLAY A SPACE
E765 5A               (     mon09v37.asm):00670                 DECB                    ; REDUCE COUNT
E766 26FA             (     mon09v37.asm):00671                 BNE     MEM4            ; CONTINUE
E768 3510             (     mon09v37.asm):00672                 PULS    X               ; RESTORE D TO X
E76A C610             (     mon09v37.asm):00673                 LDB     #16             ; COUNT OF 16
E76C                  (     mon09v37.asm):00674         MEM5
E76C A680             (     mon09v37.asm):00675                 LDA     ,X+             ; GET CHAR
E76E 8120             (     mon09v37.asm):00676                 CMPA    #' '            ; <SPACE
E770 2504             (     mon09v37.asm):00677                 BLO     MEM6            ; CONVERT TO DOT
E772 817F             (     mon09v37.asm):00678                 CMPA    #$7F            ; PRINTABLE?
E774 2502             (     mon09v37.asm):00679                 BLO     MEM7            ; OK TO DISPLAY
E776                  (     mon09v37.asm):00680         MEM6
E776 862E             (     mon09v37.asm):00681                 LDA     #'.'            ; CHANGE TO DOT
E778                  (     mon09v37.asm):00682         MEM7
E778 1706A7           (     mon09v37.asm):00683                 LBSR    PUTCHR          ; OUTPUT
E77B 5A               (     mon09v37.asm):00684                 DECB                    ; REDUCE COUNT
E77C 26EE             (     mon09v37.asm):00685                 BNE     MEM5            ; DISPLAY THEM ALL
E77E 8C0000           (     mon09v37.asm):00686                 CMPX    #0              ; DID WE WRAP AROUND?
E781 2705             (     mon09v37.asm):00687                 BEQ     MEM8            ; YES, WE NEED TO SKIP 
E783 BC9F7C           (     mon09v37.asm):00688                 CMPX    TEMP            ; PAST END?
E786 23AD             (     mon09v37.asm):00689                 BLS     MEM1            ; NO, KEEP GOING
E788                  (     mon09v37.asm):00690         MEM8
E788 160676           (     mon09v37.asm):00691                 LBRA    LFCR            ; NEW LINE
                      (     mon09v37.asm):00692          ENDC                           ; FOR TESTING
                      (     mon09v37.asm):00693         
                      (     mon09v37.asm):00694         
                      (     mon09v37.asm):00695         ;*
                      (     mon09v37.asm):00696         ;* 'W' - WRITE TO MEMORY
                      (     mon09v37.asm):00697         ;*
E78B                  (     mon09v37.asm):00698         WRIMEM
E78B 1705AC           (     mon09v37.asm):00699                 LBSR    GETADR          GET ADDRESS
E78E 1F01             (     mon09v37.asm):00700                 TFR     D,X             SET IT UP
E790 170668           (     mon09v37.asm):00701                 LBSR    SPACE           STEP OVER
E793 1705EB           (     mon09v37.asm):00702                 LBSR    GETBYT          GET BYTE
E796 A784             (     mon09v37.asm):00703                 STA     ,X              WRITE TO MEMORY
E798 160666           (     mon09v37.asm):00704                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00705         ;*
                      (     mon09v37.asm):00706         ;* 'E' - EDIT MEMORY
                      (     mon09v37.asm):00707         ;*
E79B                  (     mon09v37.asm):00708         SUBMEM
E79B 17059C           (     mon09v37.asm):00709                 LBSR    GETADR          GET ADDRESS
E79E 1F01             (     mon09v37.asm):00710                 TFR     D,X             COPY
E7A0                  (     mon09v37.asm):00711         SUBM1
E7A0 17065E           (     mon09v37.asm):00712                 LBSR    LFCR            NEW LINE
E7A3 1F10             (     mon09v37.asm):00713                 TFR     X,D             GET ADDRESS
E7A5 170614           (     mon09v37.asm):00714                 LBSR    WRDOUT          OUTPUT
E7A8 C608             (     mon09v37.asm):00715                 LDB     #8              NEW COUNT
E7AA                  (     mon09v37.asm):00716         SUBM2
E7AA 17064E           (     mon09v37.asm):00717                 LBSR    SPACE           SEPERATOR
E7AD A684             (     mon09v37.asm):00718                 LDA     ,X              GET BYTE
E7AF 17060E           (     mon09v37.asm):00719                 LBSR    HEXOUT          DISPLAY
E7B2 862D             (     mon09v37.asm):00720                 LDA     #'-'            PROMPT
E7B4 17066B           (     mon09v37.asm):00721                 LBSR    PUTCHR          OUTPUT
E7B7 1705C7           (     mon09v37.asm):00722                 LBSR    GETBYT          GET A BYTE
E7BA 2609             (     mon09v37.asm):00723                 BNE     SUBM4           INVALID
E7BC A784             (     mon09v37.asm):00724                 STA     ,X              RESAVE
E7BE                  (     mon09v37.asm):00725         SUBM3
E7BE 3001             (     mon09v37.asm):00726                 LEAX    1,X             ADVANCE
E7C0 5A               (     mon09v37.asm):00727                 DECB                    REDUCE COUNT
E7C1 26E7             (     mon09v37.asm):00728                 BNE     SUBM2           MORE, CONTINUE
E7C3 20DB             (     mon09v37.asm):00729                 BRA     SUBM1           NEW LINE
E7C5                  (     mon09v37.asm):00730         SUBM4
E7C5 810D             (     mon09v37.asm):00731                 CMPA    #$0D            CR?
E7C7 10270636         (     mon09v37.asm):00732                 LBEQ    LFCR            IF SO, QUIT
E7CB 8120             (     mon09v37.asm):00733                 CMPA    #' '            SPACE?
E7CD 2605             (     mon09v37.asm):00734                 BNE     SUBM5           NO
E7CF 170629           (     mon09v37.asm):00735                 LBSR    SPACE           FILL FOR TWO DIGITS
E7D2 20EA             (     mon09v37.asm):00736                 BRA     SUBM3           ADVANCE
E7D4                  (     mon09v37.asm):00737         SUBM5
E7D4 8108             (     mon09v37.asm):00738                 CMPA    #$08            BACKSPACE?
E7D6 1026FE7C         (     mon09v37.asm):00739                 LBNE    ERROR           INVALID
E7DA 301F             (     mon09v37.asm):00740                 LEAX    -1,X            BACKUP
E7DC 20C2             (     mon09v37.asm):00741                 BRA     SUBM1           NEW LINE
                      (     mon09v37.asm):00742         ;*
                      (     mon09v37.asm):00743         ;* 'DI' - DISASSEMBLE
                      (     mon09v37.asm):00744         ;*
E7DE                  (     mon09v37.asm):00745         DISASM
E7DE 17053C           (     mon09v37.asm):00746                 LBSR    GETRNG          GET ADDRESS
E7E1 FD9F7C           (     mon09v37.asm):00747                 STD     TEMP            SAVE
E7E4 1F12             (     mon09v37.asm):00748                 TFR     X,Y             COPY TO Y
E7E6 170618           (     mon09v37.asm):00749                 LBSR    LFCR            NEW LINE
E7E9 CE9F9B           (     mon09v37.asm):00750                 LDU     #DSPBUF         POINT TO INPUT BUFFER
E7EC                  (     mon09v37.asm):00751         DISS1
E7EC 1708EB           (     mon09v37.asm):00752                 LBSR    DISASS          DISASSEMBLE
E7EF 1F31             (     mon09v37.asm):00753                 TFR     U,X             COPY
E7F1 1705EC           (     mon09v37.asm):00754                 LBSR    WRLIN           OUTPUT
E7F4 170649           (     mon09v37.asm):00755                 LBSR    CHKCHR          END?
E7F7 2706             (     mon09v37.asm):00756                 BEQ     DISS2           YES, QUIT
E7F9 10BC9F7C         (     mon09v37.asm):00757                 CMPY    TEMP            OVER?
E7FD 25ED             (     mon09v37.asm):00758                 BLO     DISS1           TRY AGAIN
E7FF                  (     mon09v37.asm):00759         DISS2
E7FF 39               (     mon09v37.asm):00760                 RTS
                      (     mon09v37.asm):00761         ;*
                      (     mon09v37.asm):00762         ;* 'DV' - DISPLAY VECTORS
                      (     mon09v37.asm):00763         ;*
E800                  (     mon09v37.asm):00764         DISVEC
E800 8EE816           (     mon09v37.asm):00765                 LDX     #VECTXT         POINT TO VECTOR TEXT
E803 108E9F5B         (     mon09v37.asm):00766                 LDY     #SWIADR         POINT TO FIRST VECTOR
E807                  (     mon09v37.asm):00767         DISV1
E807 1705D6           (     mon09v37.asm):00768                 LBSR    WRLIN           OUTPUT A MESSAGE
E80A ECA1             (     mon09v37.asm):00769                 LDD     ,Y++            GET A VECTOR
E80C 1705AD           (     mon09v37.asm):00770                 LBSR    WRDOUT          OUTPUT VECTOR ADDRESS
E80F A684             (     mon09v37.asm):00771                 LDA     ,X              MORE TEXT?
E811 26F4             (     mon09v37.asm):00772                 BNE     DISV1           AND CONTINUE
E813 1605EB           (     mon09v37.asm):00773                 LBRA    LFCR            NEW LINE
E816                  (     mon09v37.asm):00774         VECTXT
E816 5357493D00       (     mon09v37.asm):00775                 FCN             'SWI='
E81B 20535749323D00   (     mon09v37.asm):00776                 FCN             ' SWI2='
E822 20535749333D00   (     mon09v37.asm):00777                 FCN             ' SWI3='
E829 204952513D00     (     mon09v37.asm):00778                 FCN             ' IRQ='
E82F 20464952513D00   (     mon09v37.asm):00779                 FCN             ' FIRQ='
                      (     mon09v37.asm):00780         ;MODS BY JQ
                      (     mon09v37.asm):00781          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
E836 204E4D493D00     (     mon09v37.asm):00782                 FCN             ' NMI='
                      (     mon09v37.asm):00783          ENDC
                      (     mon09v37.asm):00784          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E83C 20494C4C4F503D00 (     mon09v37.asm):00785                 FCN             ' ILLOP='
                      (     mon09v37.asm):00786          ENDC
                      (     mon09v37.asm):00787         ;
E844 00               (     mon09v37.asm):00788                 FCB     0               END OF TABLE
                      (     mon09v37.asm):00789         ;*
                      (     mon09v37.asm):00790         ;* 'DU' DISPLAY UARTS
                      (     mon09v37.asm):00791         ;*
E845                  (     mon09v37.asm):00792         DISURT
E845 8EE84E           (     mon09v37.asm):00793                 LDX     #URTEXT         POINT TO TEXT
E848 108E9F6A         (     mon09v37.asm):00794                 LDY     #UART1          POINT TO UART
E84C 20B9             (     mon09v37.asm):00795                 BRA     DISV1           DISPLAY IT
E84E                  (     mon09v37.asm):00796         URTEXT
E84E 55415254313D00   (     mon09v37.asm):00797                 FCN     'UART1='
E855 2055415254323D00 (     mon09v37.asm):00798                 FCN     ' UART2='
E85D 00               (     mon09v37.asm):00799                 FCB     0
                      (     mon09v37.asm):00800         ;*
                      (     mon09v37.asm):00801         ;* 'CV' - CHANGE VECTOR
                      (     mon09v37.asm):00802         ;*
E85E                  (     mon09v37.asm):00803         CHGVEC
E85E 17058C           (     mon09v37.asm):00804                 LBSR    GETECH          GET CHAR & ECHO
E861 8153             (     mon09v37.asm):00805                 CMPA    #'S'            SWI?
E863 2604             (     mon09v37.asm):00806                 BNE     CHGV1           NO
E865 8631             (     mon09v37.asm):00807                 LDA     #'1'            SAME AS '1'
E867 201E             (     mon09v37.asm):00808                 BRA     CHGV5           AND CONTINUE
E869                  (     mon09v37.asm):00809         CHGV1
E869 8149             (     mon09v37.asm):00810                 CMPA    #'I'            IRQ?
E86B 2604             (     mon09v37.asm):00811                 BNE     CHGV2           NO, ITS OK
E86D 8634             (     mon09v37.asm):00812                 LDA     #'4'            CONVERT
E86F 2016             (     mon09v37.asm):00813                 BRA     CHGV5           AND CONTINUE
E871                  (     mon09v37.asm):00814         CHGV2
E871 8146             (     mon09v37.asm):00815                 CMPA    #'F'            FIRQ?
E873 2604             (     mon09v37.asm):00816                 BNE     CHGV3           NO
E875 8635             (     mon09v37.asm):00817                 LDA     #'5'            CONVERT
E877 200E             (     mon09v37.asm):00818                 BRA     CHGV5           AND CONTINUE
E879                  (     mon09v37.asm):00819         CHGV3
                      (     mon09v37.asm):00820         ;MODS BY JQ
                      (     mon09v37.asm):00821          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
E879 814E             (     mon09v37.asm):00822                 CMPA    #'N'            NMI?
E87B 2604             (     mon09v37.asm):00823                 BNE     CHGV4           NO
E87D 8636             (     mon09v37.asm):00824                 LDA     #'6'            CONVERT
E87F 2006             (     mon09v37.asm):00825                 BRA     CHGV5           AND CONTINUE
                      (     mon09v37.asm):00826          ENDC                           USE JQ NMI ENHANCEMENTS
E881                  (     mon09v37.asm):00827         CHGV4
                      (     mon09v37.asm):00828          IFNE JQ_ILLOP          USE ILLOP HANDLER
E881 814C             (     mon09v37.asm):00829                 CMPA    #'L'            6309 ILLOP?
E883 2602             (     mon09v37.asm):00830                 BNE     CHGV5           NO
E885 8637             (     mon09v37.asm):00831                 LDA     #'7'            CONVERT
                      (     mon09v37.asm):00832          ENDC                           USE ILLOP HANDLER
                      (     mon09v37.asm):00833         ;
E887                  (     mon09v37.asm):00834         CHGV5
E887 8031             (     mon09v37.asm):00835                 SUBA    #'1'            TEST IT
                      (     mon09v37.asm):00836         ;---------------------
                      (     mon09v37.asm):00837         ;MODS BY JQ
     0004             (     mon09v37.asm):00838         CHKRNG  SET     4                       IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00839          IFNE JQ_NMIRAM         NO JQ NMI ENHANCEMENTS
     0005             (     mon09v37.asm):00840         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00841          ENDC                           NO JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00842          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
     0006             (     mon09v37.asm):00843         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00844           ENDC                          NO JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00845         ;---------------------
E889 8106             (     mon09v37.asm):00846                 CMPA    #CHKRNG         CHECK RANGE
                      (     mon09v37.asm):00847         ;
E88B 1022FDC7         (     mon09v37.asm):00848                 LBHI    ERROR           INVALID
E88F 8E9F5B           (     mon09v37.asm):00849                 LDX     #SWIADR         POINT TO IT
E892                  (     mon09v37.asm):00850         CHGV6
E892 48               (     mon09v37.asm):00851                 LSLA                    X2 FOR 2 BYTE ENTRIES
E893 3086             (     mon09v37.asm):00852                 LEAX    A,X             ADVANCE TO VECTOR
E895 170563           (     mon09v37.asm):00853                 LBSR    SPACE           SEPERATOR
E898 17049F           (     mon09v37.asm):00854                 LBSR    GETADR          GET NEW VALUE
E89B ED84             (     mon09v37.asm):00855                 STD     ,X              WRITE NEW VECTOR
E89D 160561           (     mon09v37.asm):00856                 LBRA    LFCR            NEW LINE & EXIT
                      (     mon09v37.asm):00857         
                      (     mon09v37.asm):00858         ;*
                      (     mon09v37.asm):00859         ;* 'CU' - CHANGE UART ADDRESS
                      (     mon09v37.asm):00860         ;*
E8A0                  (     mon09v37.asm):00861         CHGURT
E8A0 17054A           (     mon09v37.asm):00862                 LBSR    GETECH          GET AND ECHO
E8A3 8031             (     mon09v37.asm):00863                 SUBA    #'1'            CONVERT
E8A5 8101             (     mon09v37.asm):00864                 CMPA    #1              IN RANGE?
E8A7 1022FDAB         (     mon09v37.asm):00865                 LBHI    ERROR           INVALID
E8AB 8E9F6A           (     mon09v37.asm):00866                 LDX     #UART1          POINT TO IT
E8AE 48               (     mon09v37.asm):00867                 LSLA                    X2 FOR 2 BYTE ENTRIES
E8AF 3086             (     mon09v37.asm):00868                 LEAX    A,X             ADVANCE TO IT
E8B1 170547           (     mon09v37.asm):00869                 LBSR    SPACE           SEPERATOR
E8B4 170483           (     mon09v37.asm):00870                 LBSR    GETADR          GET ADDRESS
E8B7 ED84             (     mon09v37.asm):00871                 STD     ,X              SET IT
E8B9 1F01             (     mon09v37.asm):00872                 TFR     D,X             SET UP POINTER
E8BB 1714DA           (     mon09v37.asm):00873                 LBSR    INIT            INITIALIZE IT
E8BE 160540           (     mon09v37.asm):00874                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00875         ;*
                      (     mon09v37.asm):00876         ;* 'DR' - DISPLAY REGISTERS
                      (     mon09v37.asm):00877         ;*
E8C1                  (     mon09v37.asm):00878         DISREG
E8C1 8EE90B           (     mon09v37.asm):00879                 LDX     #REGTXT         POINT TO TEXT
E8C4 108E9F6E         (     mon09v37.asm):00880                 LDY     #SAVCC          POINT TO VALUE
E8C8 8D31             (     mon09v37.asm):00881                 BSR     RSUB1           'CC='
E8CA 170513           (     mon09v37.asm):00882                 LBSR    WRLIN           ' ['
E8CD CEE935           (     mon09v37.asm):00883                 LDU     #CCBITS         POINT TO BIT TABLE
E8D0 E63F             (     mon09v37.asm):00884                 LDB     -1,Y            GET BITS BACK
E8D2 3420             (     mon09v37.asm):00885                 PSHS    Y               SAVE POINTER
E8D4 108E0008         (     mon09v37.asm):00886                 LDY     #8              EIGHT BITS IN BYTE
E8D8                  (     mon09v37.asm):00887         REGB1
E8D8 A6C0             (     mon09v37.asm):00888                 LDA     ,U+             GET BIT IDENTIFIER
E8DA 58               (     mon09v37.asm):00889                 ASLB                    IS IT SET?
E8DB 2502             (     mon09v37.asm):00890                 BCS     RBITS           YES, DISPLAY IT
E8DD 862D             (     mon09v37.asm):00891                 LDA     #'-'            NO, DISPLAY DASH
E8DF                  (     mon09v37.asm):00892         RBITS
E8DF 170540           (     mon09v37.asm):00893                 LBSR    PUTCHR          OUTPUT A CHARACTER
E8E2 313F             (     mon09v37.asm):00894                 LEAY    -1,Y            REDUCE COUNT
E8E4 26F2             (     mon09v37.asm):00895                 BNE     REGB1           MORE TO GO
E8E6 3520             (     mon09v37.asm):00896                 PULS    Y               RESTORE Y
E8E8 8D11             (     mon09v37.asm):00897                 BSR     RSUB1           '] A='
E8EA 8D0F             (     mon09v37.asm):00898                 BSR     RSUB1           ' B='
E8EC 8D0D             (     mon09v37.asm):00899                 BSR     RSUB1           ' DP='
E8EE 8D13             (     mon09v37.asm):00900                 BSR     RSUB2           ' X='
E8F0 8D11             (     mon09v37.asm):00901                 BSR     RSUB2           ' Y='
E8F2 8D0F             (     mon09v37.asm):00902                 BSR     RSUB2           ' U='
E8F4 8D0D             (     mon09v37.asm):00903                 BSR     RSUB2           ' PC='
E8F6 8D0B             (     mon09v37.asm):00904                 BSR     RSUB2           ' S='
E8F8 160506           (     mon09v37.asm):00905                 LBRA    LFCR            QUIT
                      (     mon09v37.asm):00906         
                      (     mon09v37.asm):00907         ;* DISPLAY 8 BIT REGISTER VALUE
E8FB                  (     mon09v37.asm):00908         RSUB1
E8FB 1704E2           (     mon09v37.asm):00909                 LBSR    WRLIN           OUTPUT BYTE VALUE
E8FE A6A0             (     mon09v37.asm):00910                 LDA     ,Y+             GET REGISTER VALUE
E900 1604BD           (     mon09v37.asm):00911                 LBRA    HEXOUT          OUTPUT IN HEX
                      (     mon09v37.asm):00912         ;* DISPLAY 16 BIT REGISTER VALUE
E903                  (     mon09v37.asm):00913         RSUB2
E903 1704DA           (     mon09v37.asm):00914                 LBSR    WRLIN           OUTPUT WORD VALUE
E906 ECA1             (     mon09v37.asm):00915                 LDD     ,Y++            GET REGISTER VALUE
E908 1604B1           (     mon09v37.asm):00916                 LBRA    WRDOUT          OUTPUT IN HEX
                      (     mon09v37.asm):00917         
                      (     mon09v37.asm):00918         ;* TABLE OF TEXT FOR REGISTER DISPLAY
E90B                  (     mon09v37.asm):00919         REGTXT
E90B 43433D00         (     mon09v37.asm):00920                 FCN     'CC='
E90F 205B00           (     mon09v37.asm):00921                 FCN     ' ['
E912 5D20413D00       (     mon09v37.asm):00922                 FCN     '] A='
E917 20423D00         (     mon09v37.asm):00923                 FCN     ' B='
E91B 2044503D00       (     mon09v37.asm):00924                 FCN     ' DP='
E920 20583D00         (     mon09v37.asm):00925                 FCN     ' X='
E924 20593D00         (     mon09v37.asm):00926                 FCN     ' Y='
E928 20553D00         (     mon09v37.asm):00927                 FCN     ' U='
E92C 2050433D00       (     mon09v37.asm):00928                 FCN     ' PC='
E931 20533D00         (     mon09v37.asm):00929                 FCN     ' S='
                      (     mon09v37.asm):00930         ;* TABLE OF CONDITION CODE BIT MEANINGS
E935                  (     mon09v37.asm):00931         CCBITS
E935 454648494E5A5643 (     mon09v37.asm):00932                 FCC     'EFHINZVC'
                      (     mon09v37.asm):00933         ;*
                      (     mon09v37.asm):00934         ;* 'CR' - CHANGE REGISTER
                      (     mon09v37.asm):00935         ;*
                      (     mon09v37.asm):00936         ;* TABLE OF REGISTER NAMES
E93D                  (     mon09v37.asm):00937         CHGTAB
E93D 4341424458595550 (     mon09v37.asm):00938                 FCN     'CABDXYUPS'
     5300
                      (     mon09v37.asm):00939         ;
E947                  (     mon09v37.asm):00940         CHGREG
E947 1704A3           (     mon09v37.asm):00941                 LBSR    GETECH          GET OPERAND
E94A 8120             (     mon09v37.asm):00942                 CMPA    #' '            A+B?
E94C 2727             (     mon09v37.asm):00943                 BEQ     CHG4            YES
E94E 8EE93D           (     mon09v37.asm):00944                 LDX     #CHGTAB         POINT TO TABLE
E951 5F               (     mon09v37.asm):00945                 CLRB                    ZERO INDICATOR
E952                  (     mon09v37.asm):00946         CHG1
E952 A184             (     mon09v37.asm):00947                 CMPA    ,X              IS THIS IT?
E954 2708             (     mon09v37.asm):00948                 BEQ     CHG2            YES
E956 5C               (     mon09v37.asm):00949                 INCB                    ADVANCE COUNT
E957 6D80             (     mon09v37.asm):00950                 TST     ,X+             END OF TABLE
E959 26F7             (     mon09v37.asm):00951                 BNE     CHG1            NO, KEEP TRYING
E95B 16FCF8           (     mon09v37.asm):00952                 LBRA    ERROR           INDICATE ERROR
E95E                  (     mon09v37.asm):00953         CHG2
E95E 17049A           (     mon09v37.asm):00954                 LBSR    SPACE           OUTPUT SPACE
E961 8E9F6E           (     mon09v37.asm):00955                 LDX     #SAVCC          POINT TO START OF REGISTERS
                      (     mon09v37.asm):00956         
                      (     mon09v37.asm):00957         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v37.asm):00958         ;       CMPB    #4              16 BIT?
E964 C103             (     mon09v37.asm):00959                 CMPB    #3              16 BIT?
                      (     mon09v37.asm):00960         ;-----------
E966 241B             (     mon09v37.asm):00961                 BHS     R16             YES
E968 3085             (     mon09v37.asm):00962                 LEAX    B,X             OFFSET TO ADDRESS
E96A 170414           (     mon09v37.asm):00963                 LBSR    GETBYT          GET NEW VALUE
E96D 1026FCE5         (     mon09v37.asm):00964                 LBNE    ERROR           INVALID
E971 A784             (     mon09v37.asm):00965                 STA     ,X              SAVE IN REGISTER
E973 201A             (     mon09v37.asm):00966                 BRA     CHG3            AND QUIT
E975                  (     mon09v37.asm):00967         CHG4
E975 17045E           (     mon09v37.asm):00968                 LBSR    WRMSG           OUTPUT MESSAGE
E978 5B41425D2000     (     mon09v37.asm):00969                 FCN     '[AB] '
                      (     mon09v37.asm):00970         ;MODS BY JQ - UNNEEDED SPACE
                      (     mon09v37.asm):00971         ;       LBSR    SPACE           OUTPUT SPACE
                      (     mon09v37.asm):00972         ;-----------
E97E 8E9F6F           (     mon09v37.asm):00973                 LDX     #SAVA           POINT TO 'D'
E981 2007             (     mon09v37.asm):00974                 BRA     R17             MAKE LIKE 16 BIT REG
E983                  (     mon09v37.asm):00975         R16
                      (     mon09v37.asm):00976         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v37.asm):00977         ;       LEAX    4,X             OFFSET TO 16 BIT REGISTERS
E983 3003             (     mon09v37.asm):00978                 LEAX    3,X             OFFSET TO 16 BIT REGISTERS
                      (     mon09v37.asm):00979         ;-----------
E985 C004             (     mon09v37.asm):00980                 SUBB    #4              CONVERT TO ZERO ORIGIN
E987 58               (     mon09v37.asm):00981                 LSLB                    DOUBLE FOR WORD VALUES
E988 3085             (     mon09v37.asm):00982                 LEAX    B,X             MOVE TO CORRECT OFFSET
E98A                  (     mon09v37.asm):00983         R17
E98A 1703AD           (     mon09v37.asm):00984                 LBSR    GETADR          GET WORD VALUE
E98D ED84             (     mon09v37.asm):00985                 STD     ,X              SET REGISTER VALUE
E98F                  (     mon09v37.asm):00986         CHG3
E98F 16046F           (     mon09v37.asm):00987                 LBRA    LFCR            QUIT
                      (     mon09v37.asm):00988         ;*
                      (     mon09v37.asm):00989         ;* 'DB' - DISPLAY BREAKPOINTS
                      (     mon09v37.asm):00990         ;*
E992                  (     mon09v37.asm):00991         DSPBRK
E992 8630             (     mon09v37.asm):00992                 LDA     #'0'            START WITH BRKPT ZERO
E994 8E9F83           (     mon09v37.asm):00993                 LDX     #BRKTAB         POINT TO TABLE
E997                  (     mon09v37.asm):00994         DSPB1
E997 3402             (     mon09v37.asm):00995                 PSHS    A               SAVE NUMBER
E999 8642             (     mon09v37.asm):00996                 LDA     #'B'            PRECEDE WITH 'B'
E99B 170484           (     mon09v37.asm):00997                 LBSR    PUTCHR          OUTPUT
E99E A6E4             (     mon09v37.asm):00998                 LDA     ,S              GET NUMBER BACK
E9A0 17047F           (     mon09v37.asm):00999                 LBSR    PUTCHR          OUTPUT
E9A3 863D             (     mon09v37.asm):01000                 LDA     #'='            AND FOLLOW WITH '='
E9A5 17047A           (     mon09v37.asm):01001                 LBSR    PUTCHR          OUTPUT
E9A8 EC81             (     mon09v37.asm):01002                 LDD     ,X++            GET VALUE
E9AA 260A             (     mon09v37.asm):01003                 BNE     DSPB2           NON-ZERO, DISPLAY
E9AC 170427           (     mon09v37.asm):01004                 LBSR    WRMSG           OUTPUT MESSAGE INSTEAD
E9AF 2A2A2A2A00       (     mon09v37.asm):01005                 FCN     '****'
E9B4 2003             (     mon09v37.asm):01006                 BRA     DSPB3           CONTINUE
E9B6                  (     mon09v37.asm):01007         DSPB2
E9B6 170403           (     mon09v37.asm):01008                 LBSR    WRDOUT          OUTPUT VALUE
E9B9                  (     mon09v37.asm):01009         DSPB3
E9B9 17043F           (     mon09v37.asm):01010                 LBSR    SPACE           SEPERATE WITH SPACE
E9BC 3001             (     mon09v37.asm):01011                 LEAX    1,X             SKIP OPCODE SAVE
E9BE 3502             (     mon09v37.asm):01012                 PULS    A               RESTORE NUMBER
E9C0 4C               (     mon09v37.asm):01013                 INCA                    ADVANCE
E9C1 8138             (     mon09v37.asm):01014                 CMPA    #'8'            BEYOND END?
E9C3 25D2             (     mon09v37.asm):01015                 BLO     DSPB1           NO, CONTINUE
E9C5 160439           (     mon09v37.asm):01016                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v37.asm):01017         ;*
                      (     mon09v37.asm):01018         ;* 'B' - SET BREAKPOINT
                      (     mon09v37.asm):01019         ;*
E9C8                  (     mon09v37.asm):01020         SETBRK
E9C8 170422           (     mon09v37.asm):01021                 LBSR    GETECH          GET CHARACTER
E9CB 8030             (     mon09v37.asm):01022                 SUBA    #'0'            CONVERT TO NUMBER
E9CD 8108             (     mon09v37.asm):01023                 CMPA    #8              IN RANGE?
E9CF 1024FC83         (     mon09v37.asm):01024                 LBHS    ERROR           NO, QUIT
E9D3 3402             (     mon09v37.asm):01025                 PSHS    A               SAVE NUMBER
E9D5 48               (     mon09v37.asm):01026                 LSLA                    DOUBLE FOR 16 BIT VALUES
E9D6 ABE0             (     mon09v37.asm):01027                 ADDA    ,S+             TRIPLE FOR OPCODE BYTE
E9D8 8E9F83           (     mon09v37.asm):01028                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
E9DB 3086             (     mon09v37.asm):01029                 LEAX    A,X             ADVANCE TO BREAKPOINT
E9DD 17041B           (     mon09v37.asm):01030                 LBSR    SPACE           SEPERATE WITH SPACE
E9E0 170357           (     mon09v37.asm):01031                 LBSR    GETADR          GET VALUE
E9E3 ED84             (     mon09v37.asm):01032                 STD     ,X              SAVE IN TABLE
E9E5 160419           (     mon09v37.asm):01033                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v37.asm):01034         ;*
                      (     mon09v37.asm):01035         ;* 'S' - SINGLE STEP
                      (     mon09v37.asm):01036         ;*
E9E8                  (     mon09v37.asm):01037         GOSTEP
E9E8 17031A           (     mon09v37.asm):01038                 LBSR    GETPC           GET ADDRESS
E9EB 170413           (     mon09v37.asm):01039                 LBSR    LFCR            OUTPUT MESSAGE
E9EE                  (     mon09v37.asm):01040         GOSTP1
E9EE 17047A           (     mon09v37.asm):01041                 LBSR    STEPDI          STEP AND DISPLAY INSTRUCTION
E9F1 7D9F7E           (     mon09v37.asm):01042                 TST     STPFLG          DISPLAY REGISTERS?
E9F4 2B03             (     mon09v37.asm):01043                 BMI     NODSR           NO, DON'T DISPLAY
E9F6                  (     mon09v37.asm):01044         STPREG
E9F6 17FEC8           (     mon09v37.asm):01045                 LBSR    DISREG          DISPLAY REGISTERS
E9F9                  (     mon09v37.asm):01046         NODSR
E9F9 170411           (     mon09v37.asm):01047                 LBSR    GETCHR          GET KEY FROM TERMINAL
E9FC 813F             (     mon09v37.asm):01048                 CMPA    #'?'            DISPLAY REGS?
E9FE 27F6             (     mon09v37.asm):01049                 BEQ     STPREG          IF SO, DISPLAY
EA00 8120             (     mon09v37.asm):01050                 CMPA    #' '            STEP TO NEXT?
EA02 27EA             (     mon09v37.asm):01051                 BEQ     GOSTP1          IF SO, STEP
EA04 811B             (     mon09v37.asm):01052                 CMPA    #$1B            EXIT STEPPING?
EA06 2709             (     mon09v37.asm):01053                 BEQ     GOSTP2          IF SO, QUIT
EA08 810D             (     mon09v37.asm):01054                 CMPA    #$0D            TOGGLE REGISTER DISPLAY?
EA0A 26ED             (     mon09v37.asm):01055                 BNE     NODSR           IF NOT, IGNORE
EA0C 739F7E           (     mon09v37.asm):01056                 COM     STPFLG          TOGGLE DISPLAY FLAG
EA0F 20E8             (     mon09v37.asm):01057                 BRA     NODSR           GET NEXT KEY
EA11                  (     mon09v37.asm):01058         GOSTP2
EA11 39               (     mon09v37.asm):01059                 RTS
                      (     mon09v37.asm):01060         ;*
                      (     mon09v37.asm):01061         ;* 'G' - GO (EXECUTE)
                      (     mon09v37.asm):01062         ;*
EA12                  (     mon09v37.asm):01063         GOEXEC
EA12 1702F0           (     mon09v37.asm):01064                 LBSR    GETPC           GET ADDRESS
EA15 1703E9           (     mon09v37.asm):01065                 LBSR    LFCR            NEW LINE
                      (     mon09v37.asm):01066         
                      (     mon09v37.asm):01067         ;*      STEP ONE INST. BEFORE INSERTING BREAKPOINTS, SO THAT BREAKPOINTS
                      (     mon09v37.asm):01068         ;*      CAN BE USED WITHIN LOOPS ETC.
                      (     mon09v37.asm):01069         
EA18 170461           (     mon09v37.asm):01070                 LBSR    STEP            STEP ONE INSTRUCTION
                      (     mon09v37.asm):01071         
                      (     mon09v37.asm):01072         ;*      INSERT BREAKPOINTS
EA1B 8E9F83           (     mon09v37.asm):01073                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
EA1E C608             (     mon09v37.asm):01074                 LDB     #8              EIGHT BREAKPOINTS
EA20                  (     mon09v37.asm):01075         GOEX3
EA20 10AE81           (     mon09v37.asm):01076                 LDY     ,X++            GET BREAKPOINT ADDRESS
EA23 2708             (     mon09v37.asm):01077                 BEQ     GOEX4           NO BREAKPOINT, QUIT
EA25 A6A4             (     mon09v37.asm):01078                 LDA     ,Y              GET OPCODE
EA27 A784             (     mon09v37.asm):01079                 STA     ,X              SAVE IN TABLE
EA29 863F             (     mon09v37.asm):01080                 LDA     #$3F            GET 'SWI' BREAKPOINT OPCODE
EA2B A7A4             (     mon09v37.asm):01081                 STA     ,Y              SAVE IN CODE SPACE
EA2D                  (     mon09v37.asm):01082         GOEX4
EA2D 3001             (     mon09v37.asm):01083                 LEAX    1,X             ADVANCE TO NEXT IN TABLE
EA2F 5A               (     mon09v37.asm):01084                 DECB                    REDUCE COUNT OF BRKPTS
EA30 26EE             (     mon09v37.asm):01085                 BNE     GOEX3           DO ALL EIGHT
EA32 10FE9F7A         (     mon09v37.asm):01086                 LDS     SAVS            RESTORE STACK POINTER
EA36 B69F6E           (     mon09v37.asm):01087                 LDA     SAVCC           GET SAVED CC
EA39 F69F71           (     mon09v37.asm):01088                 LDB     SAVDP           GET SAVED DPR
EA3C 3406             (     mon09v37.asm):01089                 PSHS    A,B             SAVE ON STACK FOR LAST RESTORE
EA3E FC9F6F           (     mon09v37.asm):01090                 LDD     SAVA            RESTORE A, B REGISTERS
EA41 BE9F72           (     mon09v37.asm):01091                 LDX     SAVX            RESTORE X REGISTER
EA44 10BE9F74         (     mon09v37.asm):01092                 LDY     SAVY            RESTORE Y REGISTER
EA48 FE9F76           (     mon09v37.asm):01093                 LDU     SAVU            RESTORE U REGISTER
EA4B 3509             (     mon09v37.asm):01094                 PULS    CC,DP           RESTORE CC + DP
EA4D 6E9F9F78         (     mon09v37.asm):01095                 JMP     [SAVPC]         EXECUTE USER PGM
                      (     mon09v37.asm):01096         ;*
                      (     mon09v37.asm):01097         ;* 'RR' - REPEATING READ
                      (     mon09v37.asm):01098         ;*
EA51                  (     mon09v37.asm):01099         RDLOOP
EA51 1702E6           (     mon09v37.asm):01100                 LBSR    GETADR          GET ADDRESS
EA54 1F01             (     mon09v37.asm):01101                 TFR     D,X             SET UP 'X'
EA56 1703A8           (     mon09v37.asm):01102                 LBSR    LFCR            NEW LINE
EA59                  (     mon09v37.asm):01103         RDLP1
EA59 A684             (     mon09v37.asm):01104                 LDA     ,X              READ LOCATION
EA5B 1703E2           (     mon09v37.asm):01105                 LBSR    CHKCHR          ABORT?
EA5E 26F9             (     mon09v37.asm):01106                 BNE     RDLP1           NO, ITS OK
EA60 39               (     mon09v37.asm):01107                 RTS
                      (     mon09v37.asm):01108         ;*
                      (     mon09v37.asm):01109         ;* 'RW' - REPEATING WRITE
                      (     mon09v37.asm):01110         ;*
EA61                  (     mon09v37.asm):01111         WRLOOP
EA61 1702D6           (     mon09v37.asm):01112                 LBSR    GETADR          GET ADDRESS
EA64 1F01             (     mon09v37.asm):01113                 TFR     D,X             SET UP 'X'
EA66 170392           (     mon09v37.asm):01114                 LBSR    SPACE           SPACE OVER
EA69 170315           (     mon09v37.asm):01115                 LBSR    GETBYT          GET DATA
EA6C 1026FBE6         (     mon09v37.asm):01116                 LBNE    ERROR           INVALID
EA70 3402             (     mon09v37.asm):01117                 PSHS    A               SAVE ACCA
EA72 17038C           (     mon09v37.asm):01118                 LBSR    LFCR            NEW LINE
EA75                  (     mon09v37.asm):01119         WRLP1
EA75 A6E4             (     mon09v37.asm):01120                 LDA     ,S              GET CHAR
EA77 A784             (     mon09v37.asm):01121                 STA     ,X              WRITE IT OUT
EA79 1703C4           (     mon09v37.asm):01122                 LBSR    CHKCHR          ABORT COMMAND?
EA7C 26F7             (     mon09v37.asm):01123                 BNE     WRLP1           CONTINUE
EA7E 3582             (     mon09v37.asm):01124                 PULS    A,PC            GO HOME
                      (     mon09v37.asm):01125         ;*
                      (     mon09v37.asm):01126         ;* 'XR' - REPEATING 16 BIT READ
                      (     mon09v37.asm):01127         ;*
EA80                  (     mon09v37.asm):01128         XRLOOP
EA80 1702B7           (     mon09v37.asm):01129                 LBSR    GETADR          GET ADDRESS
EA83 1F01             (     mon09v37.asm):01130                 TFR     D,X             SET UP 'X'
EA85 170379           (     mon09v37.asm):01131                 LBSR    LFCR            NEW LINE
EA88                  (     mon09v37.asm):01132         XRLP1
EA88 EC84             (     mon09v37.asm):01133                 LDD     ,X              READ LOCATION
EA8A 1703B3           (     mon09v37.asm):01134                 LBSR    CHKCHR          ABORT?
EA8D 26F9             (     mon09v37.asm):01135                 BNE     XRLP1           NO, ITS OK
EA8F 39               (     mon09v37.asm):01136                 RTS
                      (     mon09v37.asm):01137         ;*
                      (     mon09v37.asm):01138         ;* 'XW' - REPEATING 16 BITWRITE
                      (     mon09v37.asm):01139         ;*
EA90                  (     mon09v37.asm):01140         XWLOOP
EA90 1702A7           (     mon09v37.asm):01141                 LBSR    GETADR          GET ADDRESS
EA93 1F01             (     mon09v37.asm):01142                 TFR     D,X             SET UP 'X'
EA95 170363           (     mon09v37.asm):01143                 LBSR    SPACE           SPACE OVER
EA98 17029F           (     mon09v37.asm):01144                 LBSR    GETADR          GET DATA
EA9B 3406             (     mon09v37.asm):01145                 PSHS    A,B             SAVE ACCA
EA9D 170361           (     mon09v37.asm):01146                 LBSR    LFCR            NEW LINE
EAA0                  (     mon09v37.asm):01147         XWLP1
EAA0 ECE4             (     mon09v37.asm):01148                 LDD     ,S              GET CHAR
EAA2 ED84             (     mon09v37.asm):01149                 STD     ,X              WRITE IT OUT
EAA4 170399           (     mon09v37.asm):01150                 LBSR    CHKCHR          ABORT COMMAND?
EAA7 26F7             (     mon09v37.asm):01151                 BNE     XWLP1           CONTINUE
EAA9 3586             (     mon09v37.asm):01152                 PULS    A,B,PC          GO HOME
                      (     mon09v37.asm):01153         ;*
                      (     mon09v37.asm):01154         ;* 'MT' - MEMORY TEST
                      (     mon09v37.asm):01155         ;*
EAAB 17026F           (     mon09v37.asm):01156         RAMTEST LBSR    GETRNG          GET ADDRESS RANGE
EAAE FD9F7C           (     mon09v37.asm):01157                 STD     TEMP            SAVE ENDING ADDRESS
EAB1 CCFFFF           (     mon09v37.asm):01158                 LDD     #-1             BEGIN WITH NEGATIVE 1
EAB4 FD9F9B           (     mon09v37.asm):01159                 STD     DSPBUF          SAVE PASS COUNT
EAB7 170347           (     mon09v37.asm):01160                 LBSR    LFCR            NEW LINE
EABA 1F12             (     mon09v37.asm):01161                 TFR     X,Y             COPY STARTING ADDRESS
EABC 6F80             (     mon09v37.asm):01162         RAM0    CLR     ,X+             ZAP ONE BYTE
EABE BC9F7C           (     mon09v37.asm):01163                 CMPX    TEMP            ARE WE OVER?
EAC1 23F9             (     mon09v37.asm):01164                 BLS     RAM0            NO, CLEAR EM ALL
EAC3 1F21             (     mon09v37.asm):01165         RAM1    TFR     Y,X             RESET STARTING ADDRESS
EAC5 860D             (     mon09v37.asm):01166                 LDA     #$0D            GET CR
EAC7 170358           (     mon09v37.asm):01167                 LBSR    PUTCHR          BACK TO START OF LINE
EACA 170309           (     mon09v37.asm):01168                 LBSR    WRMSG           OUTPUT MESSAGE
EACD 506173733A2000   (     mon09v37.asm):01169                 FCN     'Pass: '
EAD4 FC9F9B           (     mon09v37.asm):01170                 LDD     DSPBUF          GET COUNTER
EAD7 C30001           (     mon09v37.asm):01171                 ADDD    #1              ADVANCE PASS COUNT
EADA FD9F9B           (     mon09v37.asm):01172                 STD     DSPBUF          RESAVE
EADD 1702DC           (     mon09v37.asm):01173                 LBSR    WRDOUT          OUTPUT
EAE0 170318           (     mon09v37.asm):01174                 LBSR    SPACE           SPACE OVER
EAE3 17035A           (     mon09v37.asm):01175         RAM2    LBSR    CHKCHR          CHARACTER READY?
EAE6 271C             (     mon09v37.asm):01176                 BEQ     RAM5            ESCAPE, QUIT & RESTART MONITOR
EAE8 F69F9C           (     mon09v37.asm):01177                 LDB     DSPBUF+1        GET EXPECTED VALUE
EAEB E184             (     mon09v37.asm):01178                 CMPB    ,X              DID IT KEEP ITS VALUE
EAED 264E             (     mon09v37.asm):01179                 BNE     RAM7            NO, ERROR
EAEF 8601             (     mon09v37.asm):01180                 LDA     #%00000001      FIRST DATA VALUE
EAF1 A784             (     mon09v37.asm):01181         RAM3    STA     ,X              RESAVE IT
EAF3 A184             (     mon09v37.asm):01182                 CMPA    ,X              SAME ?
EAF5 2613             (     mon09v37.asm):01183                 BNE     RAM6            FAILED
EAF7 48               (     mon09v37.asm):01184                 LSLA                    SHIFT THE BIT
EAF8 26F7             (     mon09v37.asm):01185                 BNE     RAM3            CONTINUE TILL ALL DONE
EAFA 5C               (     mon09v37.asm):01186         RAM4    INCB                    ADVANCE TO NEXT VALUE
EAFB E780             (     mon09v37.asm):01187                 STB     ,X+             SAVE REGISTER
EAFD BC9F7C           (     mon09v37.asm):01188                 CMPX    TEMP            ARE WE IN RANGE?
EB00 23E1             (     mon09v37.asm):01189                 BLS     RAM2            YES, ITS OK
EB02 20BF             (     mon09v37.asm):01190                 BRA     RAM1            AND RESTART
EB04 1702FA           (     mon09v37.asm):01191         RAM5    LBSR    LFCR            NEW LINE
EB07 16FB0E           (     mon09v37.asm):01192                 LBRA    MAIN            AND RESTART MONITOR
                      (     mon09v37.asm):01193         ;* VERIFY OF LOCATION FAILED
EB0A 3402             (     mon09v37.asm):01194         RAM6    PSHS    A               SAVE VALUE WRITTEN
EB0C 1702C7           (     mon09v37.asm):01195                 LBSR    WRMSG           OUTPUT MESSAGE
EB0F 416464723A2000   (     mon09v37.asm):01196                 FCN             'Addr: '
EB16 1F10             (     mon09v37.asm):01197                 TFR     X,D             GET ADDRESS
EB18 1702A1           (     mon09v37.asm):01198                 LBSR    WRDOUT          OUTPUT
EB1B 1702B8           (     mon09v37.asm):01199                 LBSR    WRMSG           OUTPUT MESSAGE
EB1E 2C2057726F74653A (     mon09v37.asm):01200                 FCN             ', Wrote: '
     2000
EB28 3502             (     mon09v37.asm):01201                 PULS    A               RESTORE VALUE
EB2A 170293           (     mon09v37.asm):01202                 LBSR    HEXOUT          OUTPUT
EB2D 1702A6           (     mon09v37.asm):01203                 LBSR    WRMSG           OUTPUT MESSAGE
EB30 2C20526561643A20 (     mon09v37.asm):01204                 FCN             ', Read: '
     00
EB39 A684             (     mon09v37.asm):01205                 LDA     ,X              GET VALUE READ
EB3B 2033             (     mon09v37.asm):01206                 BRA     RAM8            CONTINUE
                      (     mon09v37.asm):01207         ;* DATA WAS CORRUPTED BY OTHER WRITES
EB3D 170296           (     mon09v37.asm):01208         RAM7    LBSR    WRMSG           OUTPUT MESSAGE
EB40 416464723A2000   (     mon09v37.asm):01209                 FCN             'Addr: '
EB47 1F10             (     mon09v37.asm):01210                 TFR     X,D             GET ADDR
EB49 170270           (     mon09v37.asm):01211                 LBSR    WRDOUT          OUTPUT
EB4C 170287           (     mon09v37.asm):01212                 LBSR    WRMSG           OUTPUT MESSAGE
EB4F 2C20457870656374 (     mon09v37.asm):01213                 FCN             ', Expected: '
     65643A2000
EB5C B69F9C           (     mon09v37.asm):01214                 LDA     DSPBUF+1        GET VALUE
EB5F 17025E           (     mon09v37.asm):01215                 LBSR    HEXOUT          OUTPUT
EB62 170271           (     mon09v37.asm):01216                 LBSR    WRMSG           OUTPUT MESSAGE
EB65 2C20526561643A20 (     mon09v37.asm):01217                 FCN             ', Read: '
     00
EB6E A684             (     mon09v37.asm):01218                 LDA     ,X              GET VALUE BACK
EB70 17024D           (     mon09v37.asm):01219         RAM8    LBSR    HEXOUT          OUTPUT VALUE
EB73 17028B           (     mon09v37.asm):01220                 LBSR    LFCR            NEW LINE
EB76 F69F9C           (     mon09v37.asm):01221                 LDB     DSPBUF+1        GET CORRECT NEXT VALUE
EB79 16FF7E           (     mon09v37.asm):01222                 LBRA    RAM4
                      (     mon09v37.asm):01223         ;*
                      (     mon09v37.asm):01224         ;* '+' - HEXIDECIMAL ADDITION
                      (     mon09v37.asm):01225         ;*
EB7C                  (     mon09v37.asm):01226         HEXADD
EB7C 1701BB           (     mon09v37.asm):01227                 LBSR    GETADR          GET FIRST VALUE
EB7F 3406             (     mon09v37.asm):01228                 PSHS    A,B             SAVE IT
EB81 862B             (     mon09v37.asm):01229                 LDA     #'+'            PLUS SIGN
EB83 17029C           (     mon09v37.asm):01230                 LBSR    PUTCHR          DISPLAY
EB86 1701B1           (     mon09v37.asm):01231                 LBSR    GETADR          GET SECOND VALUE
EB89 E3E4             (     mon09v37.asm):01232                 ADDD    ,S              PERFORM ADDITION
EB8B 2013             (     mon09v37.asm):01233                 BRA     HEXSHO          DISPLAY IT
                      (     mon09v37.asm):01234         ;*
                      (     mon09v37.asm):01235         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (     mon09v37.asm):01236         ;*
EB8D                  (     mon09v37.asm):01237         HEXSUB
EB8D 1701AA           (     mon09v37.asm):01238                 LBSR    GETADR          GET FIRST
EB90 3406             (     mon09v37.asm):01239                 PSHS    A,B             SAVE IT
EB92 862D             (     mon09v37.asm):01240                 LDA     #'-'            MINUS SIGN
EB94 17028B           (     mon09v37.asm):01241                 LBSR    PUTCHR          DISPLAY
EB97 1701A0           (     mon09v37.asm):01242                 LBSR    GETADR          GET SECOND ADDRESS
EB9A 3406             (     mon09v37.asm):01243                 PSHS    A,B             SAVE IT
EB9C EC62             (     mon09v37.asm):01244                 LDD     2,S             GET FIRST VALUE
EB9E A3E1             (     mon09v37.asm):01245                 SUBD    ,S++            PERFORM SUBTRACTION
EBA0                  (     mon09v37.asm):01246         HEXSHO
EBA0 EDE4             (     mon09v37.asm):01247                 STD     ,S              SAVE RESULT
EBA2 863D             (     mon09v37.asm):01248                 LDA     #'='            EQUALS SIGN
EBA4 17027B           (     mon09v37.asm):01249                 LBSR    PUTCHR          DISPLAY
EBA7 3506             (     mon09v37.asm):01250                 PULS    A,B             RESTORE RESULT
EBA9 170210           (     mon09v37.asm):01251                 LBSR    WRDOUT          OUTPUT
EBAC 160252           (     mon09v37.asm):01252                 LBRA    LFCR            NEW LINE & RETURN
                      (     mon09v37.asm):01253         ;*
                      (     mon09v37.asm):01254         ;* '?' - HELP COMMAND
                      (     mon09v37.asm):01255         ;*
EBAF                  (     mon09v37.asm):01256         HELP
EBAF 8EFA10           (     mon09v37.asm):01257                 LDX     #HTEXT          POINT TO HELP TEXT
EBB2                  (     mon09v37.asm):01258         HLP1
EBB2 C619             (     mon09v37.asm):01259                 LDB     #25             COLUMN COUNTER
EBB4                  (     mon09v37.asm):01260         HLP2
EBB4 A680             (     mon09v37.asm):01261                 LDA     ,X+             GET CHAR FROM TEXT
EBB6 2718             (     mon09v37.asm):01262                 BEQ     HLP4            EXIT THIS LINE
EBB8 817C             (     mon09v37.asm):01263                 CMPA    #'|'            SEPERATOR?
EBBA 2706             (     mon09v37.asm):01264                 BEQ     HLP3            YES, EXIT
EBBC 170263           (     mon09v37.asm):01265                 LBSR    PUTCHR          OUTPUT
EBBF 5A               (     mon09v37.asm):01266                 DECB                    BACKUP
EBC0 20F2             (     mon09v37.asm):01267                 BRA     HLP2            NEXT
EBC2                  (     mon09v37.asm):01268         HLP3
EBC2 170236           (     mon09v37.asm):01269                 LBSR    SPACE           OUTPUT SPACE
EBC5 5A               (     mon09v37.asm):01270                 DECB                    REDUCE COUNT
EBC6 26FA             (     mon09v37.asm):01271                 BNE     HLP3            KEEP GOING
EBC8 17020B           (     mon09v37.asm):01272                 LBSR    WRMSG           OUTPUT MESSAGE
EBCB 2D2000           (     mon09v37.asm):01273                 FCN     '- '            SEPERATOR
EBCE 20E4             (     mon09v37.asm):01274                 BRA     HLP2            AND CONTINUE
EBD0                  (     mon09v37.asm):01275         HLP4
EBD0 17022E           (     mon09v37.asm):01276                 LBSR    LFCR            NEW LINE
EBD3 17026A           (     mon09v37.asm):01277                 LBSR    CHKCHR          TEST FOR CHARACTER ENTERED
EBD6 2704             (     mon09v37.asm):01278                 BEQ     HLP5            IF SO, EXIT
EBD8 A684             (     mon09v37.asm):01279                 LDA     ,X              IS THIS THE END?
EBDA 2AD6             (     mon09v37.asm):01280                 BPL     HLP1            NO, KEEP GOING
EBDC                  (     mon09v37.asm):01281         HLP5
EBDC 39               (     mon09v37.asm):01282                 RTS
                      (     mon09v37.asm):01283         
                      (     mon09v37.asm):01284         ;******************************************************************************
                      (     mon09v37.asm):01285         ;* 'T' - TRANSPARENT MODE
                      (     mon09v37.asm):01286         ;******************************************************************************
     EBDD             (     mon09v37.asm):01287         TMODE   EQU     *               TERMINAL ROUTINE
EBDD                  (     mon09v37.asm):01288         TM1
EBDD BE9F6A           (     mon09v37.asm):01289                 LDX     >UART1          POINT TO MAIN UART
EBE0                  (     mon09v37.asm):01290         TM2
EBE0 1711BE           (     mon09v37.asm):01291                 LBSR    READ            TEST FOR CHAR FROM TERMINAL
EBE3 260C             (     mon09v37.asm):01292                 BNE     TM3             NONE, IGNORE
EBE5 811B             (     mon09v37.asm):01293                 CMPA    #$1B            ESCAPE?
EBE7 10270216         (     mon09v37.asm):01294                 LBEQ    LFCR            NEW LINE, AND RETURN
EBEB BE9F6C           (     mon09v37.asm):01295                 LDX     >UART2          POINT TO UART 2
EBEE 1711BE           (     mon09v37.asm):01296                 LBSR    WRITE           OUTPUT TO AUX PORT
EBF1                  (     mon09v37.asm):01297         TM3
EBF1 BE9F6C           (     mon09v37.asm):01298                 LDX     >UART2          POINT TO UART 2
EBF4 1711AA           (     mon09v37.asm):01299                 LBSR    READ            TEST FOR CHAR FROM AUX
EBF7 26E4             (     mon09v37.asm):01300                 BNE     TM1             NONE, IGNORE
EBF9 BE9F6A           (     mon09v37.asm):01301                 LDX     >UART1          POINT TO UART 1
EBFC 1711B0           (     mon09v37.asm):01302                 LBSR    WRITE           OUTPUT TO TERMINAL
EBFF 20DF             (     mon09v37.asm):01303                 BRA     TM2             GET NEXT CHAR
                      (     mon09v37.asm):01304         
                      (     mon09v37.asm):01305         ;******************************************************************************
                      (     mon09v37.asm):01306         ;* 'L' - LOAD
                      (     mon09v37.asm):01307         ;* FIXED LEAD OUT BEING ECHOED (MOSTLY)  4/4/23 DC
                      (     mon09v37.asm):01308         ;******************************************************************************
EC01                  (     mon09v37.asm):01309         LOAD
EC01 B69F69           (     mon09v37.asm):01310                 LDA     IOCON                   ; GET I/O CONFIG
EC04 3402             (     mon09v37.asm):01311                 PSHS    A                       ; SAVE
EC06 1701F8           (     mon09v37.asm):01312                 LBSR    LFCR                    ; NEW LINE
EC09                  (     mon09v37.asm):01313         DLO1
EC09 7F9F69           (     mon09v37.asm):01314                 CLR     IOCON                   : INDICATE NO OUTPUT, READ UART
EC0C 8D16             (     mon09v37.asm):01315                 BSR     DLOAD                   ; DOWNLOAD RECORD
EC0E 240C             (     mon09v37.asm):01316                 BCC     DLO2                    ; END
EC10 A6E4             (     mon09v37.asm):01317                 LDA     ,S                      ; GET OLD I/O CONFIG
EC12 B79F69           (     mon09v37.asm):01318                 STA     IOCON                   ; RESET
EC15 862E             (     mon09v37.asm):01319                 LDA     #'.'                    ; GET DOT
EC17 170208           (     mon09v37.asm):01320                 LBSR    PUTCHR                  ; OUTPUT
EC1A 20ED             (     mon09v37.asm):01321                 BRA     DLO1                    ; CONTINUE
EC1C                  (     mon09v37.asm):01322         DLO2
EC1C 3502             (     mon09v37.asm):01323                 PULS    A                       ; RESTORE A
EC1E B79F69           (     mon09v37.asm):01324                 STA     IOCON                   ; SAVE
EC21 1601DD           (     mon09v37.asm):01325                 LBRA    LFCR                    ; New line & return
                      (     mon09v37.asm):01326         ;
                      (     mon09v37.asm):01327         ;* Download a record in either MOTOROLA or INTEL hex format
EC24                  (     mon09v37.asm):01328         DLOAD
EC24 1701E6           (     mon09v37.asm):01329                 LBSR    GETCHR                  ; Get a character
EC27 813A             (     mon09v37.asm):01330                 CMPA    #':'                    ; Start of INTEL record?
EC29 10270081         (     mon09v37.asm):01331                 LBEQ    DLINT                   ; Yes, download INTEL
EC2D 8153             (     mon09v37.asm):01332                 CMPA    #'S'                    ; Start of MOTOROLA record?
EC2F 26F3             (     mon09v37.asm):01333                 BNE     DLOAD                   ; No, keep looking
                      (     mon09v37.asm):01334         ;
                      (     mon09v37.asm):01335         ;* Download a record in MOTOROLA hex format
EC31                  (     mon09v37.asm):01336         DLMOT
EC31 1701D9           (     mon09v37.asm):01337                 LBSR    GETCHR                  ; GET NEXT CHAR
EC34 8130             (     mon09v37.asm):01338                 CMPA    #'0'                    ; HEADER RECORD?
EC36 27EC             (     mon09v37.asm):01339                 BEQ     DLOAD                   ; SKIP IT
EC38 8135             (     mon09v37.asm):01340                 CMPA    #'5'                    ; COUNT RECORD?
EC3A 27E8             (     mon09v37.asm):01341                 BEQ     DLOAD                   ; SKIP IT       
EC3C 8139             (     mon09v37.asm):01342                 CMPA    #'9'                    ; END OF FILE?
EC3E 275E             (     mon09v37.asm):01343                 BEQ     DLMEOF                  ; END OF FILE
EC40 8131             (     mon09v37.asm):01344                 CMPA    #'1'                    ; DATA RECORD?
EC42 2642             (     mon09v37.asm):01345                 BNE     LODERR                  ; LOAD ERROR
EC44 17013A           (     mon09v37.asm):01346                 LBSR    GETBYT                  ; GET LENGTH
EC47 263D             (     mon09v37.asm):01347                 BNE     LODERR                  ; Report error
EC49 B79F7C           (     mon09v37.asm):01348                 STA     TEMP                    ; START CHECKSUM
EC4C 8003             (     mon09v37.asm):01349                 SUBA    #3                      ; CONVERT
EC4E B79F7D           (     mon09v37.asm):01350                 STA     TEMP+1                  ; Set length
EC51 17012D           (     mon09v37.asm):01351                 LBSR    GETBYT                  ; Get first byte of address
EC54 2630             (     mon09v37.asm):01352                 BNE     LODERR                  ; Report error
EC56 1F89             (     mon09v37.asm):01353                 TFR     A,B                     ; Save for later
EC58 BB9F7C           (     mon09v37.asm):01354                 ADDA    TEMP                    ; Include in checksum
EC5B B79F7C           (     mon09v37.asm):01355                 STA     TEMP                    ; Resave
EC5E 170120           (     mon09v37.asm):01356                 LBSR    GETBYT                  ; Get next byte of address
EC61 2623             (     mon09v37.asm):01357                 BNE     LODERR                  ; Report error
EC63 1E89             (     mon09v37.asm):01358                 EXG     A,B                     ; Swap
EC65 1F01             (     mon09v37.asm):01359                 TFR     D,X                     ; Set pointer
EC67 FB9F7C           (     mon09v37.asm):01360                 ADDB    TEMP                    ; Include in checksum
EC6A F79F7C           (     mon09v37.asm):01361                 STB     TEMP                    ; Resave checksum
EC6D                  (     mon09v37.asm):01362         DLMOT1
EC6D 170111           (     mon09v37.asm):01363                 LBSR    GETBYT                  ; Get a data byte
EC70 A780             (     mon09v37.asm):01364                 STA     ,X+                     ; Save in RAM
EC72 BB9F7C           (     mon09v37.asm):01365                 ADDA    TEMP                    ; Include checksum
EC75 B79F7C           (     mon09v37.asm):01366                 STA     TEMP                    ; Resave
EC78 7A9F7D           (     mon09v37.asm):01367                 DEC     TEMP+1                  ; Reduce length
EC7B 26F0             (     mon09v37.asm):01368                 BNE     DLMOT1                  ; Do them all
EC7D 170101           (     mon09v37.asm):01369                 LBSR    GETBYT                  ; Get a byte
EC80 BB9F7C           (     mon09v37.asm):01370                 ADDA    TEMP                    ; Add computed checksum
EC83 4C               (     mon09v37.asm):01371                 INCA                            ; Test for success
EC84 2725             (     mon09v37.asm):01372                 BEQ     DLRTS                   ; Download OK
                      (     mon09v37.asm):01373         ;
                      (     mon09v37.asm):01374         ;* Error occured on loading
EC86                  (     mon09v37.asm):01375         LODERR
EC86 8603             (     mon09v37.asm):01376                 LDA     #3                      ; GET DEFAULT I/O
EC88 B79F69           (     mon09v37.asm):01377                 STA     IOCON                   ; SET I/O
EC8B 170148           (     mon09v37.asm):01378                 LBSR    WRMSG                   ; OUTPUT
EC8E 203F4C6F61642065 (     mon09v37.asm):01379                 FCC     ' ?Load error'          
     72726F72
EC9A FF               (     mon09v37.asm):01380                 FCB     $FF
EC9B 16F97A           (     mon09v37.asm):01381                 LBRA    MAIN                    ; BACK FOR COMMAND
                      (     mon09v37.asm):01382         
                      (     mon09v37.asm):01383         ;* Read out the end of the file (simply reads until buffer is empty)
EC9E                  (     mon09v37.asm):01384         DLMEOF
EC9E 17016C           (     mon09v37.asm):01385                 LBSR    GETCHR                  ; load a character
ECA1 810A             (     mon09v37.asm):01386                 CMPA    #$0A                    ; LF?
ECA3 2708             (     mon09v37.asm):01387                 BEQ     DLEOF                   ; WE ARE DONE
ECA5 810D             (     mon09v37.asm):01388                 CMPA    #$0D                    ; CR? (JUST INCASE?)
ECA7 2704             (     mon09v37.asm):01389                 BEQ     DLEOF                   ; WE ARE DONE
ECA9 20F3             (     mon09v37.asm):01390                 BRA     DLMEOF                  ; WE ARE NOT DONE
                      (     mon09v37.asm):01391         
                      (     mon09v37.asm):01392         ;
                      (     mon09v37.asm):01393         ;* Return indicating another record
ECAB                  (     mon09v37.asm):01394         DLRTS
ECAB 1A01             (     mon09v37.asm):01395                 ORCC    #$01                    ; SET 'C' FLAG
ECAD                  (     mon09v37.asm):01396         DLEOF
ECAD 39               (     mon09v37.asm):01397                 RTS                             ; RETURN TO CALLER
                      (     mon09v37.asm):01398         
                      (     mon09v37.asm):01399         ;
                      (     mon09v37.asm):01400         ;* Download record in INTEL format
ECAE                  (     mon09v37.asm):01401         DLINT
ECAE 1700D0           (     mon09v37.asm):01402                 LBSR    GETBYT                  ; Get count
ECB1 26D3             (     mon09v37.asm):01403                 BNE     LODERR                  ; Report error
ECB3 B79F7C           (     mon09v37.asm):01404                 STA     TEMP                    ; Start checksum
ECB6 B79F7D           (     mon09v37.asm):01405                 STA     TEMP+1                  ; Record length
ECB9 8100             (     mon09v37.asm):01406                 CMPA    #0                      ; Test & clear C
ECBB 27E1             (     mon09v37.asm):01407                 BEQ     DLMEOF                  ; End of file
                      (     mon09v37.asm):01408         ;* Get address
ECBD 1700C1           (     mon09v37.asm):01409                 LBSR    GETBYT                  ; Get first byte of address
ECC0 26C4             (     mon09v37.asm):01410                 BNE     LODERR                  ; Report error
ECC2 1F89             (     mon09v37.asm):01411                 TFR     A,B                     ; Save for later
ECC4 BB9F7C           (     mon09v37.asm):01412                 ADDA    TEMP                    ; Include in checksum
ECC7 B79F7C           (     mon09v37.asm):01413                 STA     TEMP                    ; Resave
ECCA 1700B4           (     mon09v37.asm):01414                 LBSR    GETBYT                  ; Get next byte of address
ECCD 26B7             (     mon09v37.asm):01415                 BNE     LODERR                  ; Report error
ECCF 1E89             (     mon09v37.asm):01416                 EXG     A,B                     ; Swap
ECD1 1F01             (     mon09v37.asm):01417                 TFR     D,X                     ; Set pointer
ECD3 FB9F7C           (     mon09v37.asm):01418                 ADDB    TEMP                    ; Include in checksum
ECD6 F79F7C           (     mon09v37.asm):01419                 STB     TEMP                    ; Resave checksum
                      (     mon09v37.asm):01420         ;* Get record type
ECD9 1700A5           (     mon09v37.asm):01421                 LBSR    GETBYT                  ; Get type value
ECDC 26A8             (     mon09v37.asm):01422                 BNE     LODERR                  ; Report error
ECDE BB9F7C           (     mon09v37.asm):01423                 ADDA    TEMP                    ; Include checksum
ECE1 B79F7C           (     mon09v37.asm):01424                 STA     TEMP                    ; Resave checksum
                      (     mon09v37.asm):01425         ;* Get data bytes
ECE4                  (     mon09v37.asm):01426         DLINT1
ECE4 17009A           (     mon09v37.asm):01427                 LBSR    GETBYT                  ; Get data byte
ECE7 269D             (     mon09v37.asm):01428                 BNE     LODERR                  ; Report error
ECE9 A780             (     mon09v37.asm):01429                 STA     ,X+                     ; Write to memory
ECEB BB9F7C           (     mon09v37.asm):01430                 ADDA    TEMP                    ; Include checksum
ECEE B79F7C           (     mon09v37.asm):01431                 STA     TEMP                    ; Resave checksum
ECF1 7A9F7D           (     mon09v37.asm):01432                 DEC     TEMP+1                  ; Reduce length
ECF4 26EE             (     mon09v37.asm):01433                 BNE     DLINT1                  ; Do them all
                      (     mon09v37.asm):01434         ;* Get checksum
ECF6 BDED81           (     mon09v37.asm):01435                 JSR     GETBYT                  ; Read a byte
ECF9 1026FF89         (     mon09v37.asm):01436                 LBNE    LODERR                  ; Report error
ECFD BB9F7C           (     mon09v37.asm):01437                 ADDA    TEMP                    ; Include checksum
ED00 27A9             (     mon09v37.asm):01438                 BEQ     DLRTS                   ; Report success
ED02 16FF81           (     mon09v37.asm):01439                 LBRA    LODERR                  ; Report failure
                      (     mon09v37.asm):01440         
                      (     mon09v37.asm):01441         ;*
                      (     mon09v37.asm):01442         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (     mon09v37.asm):01443         ;*
ED05                  (     mon09v37.asm):01444         GETPC
ED05 8D3A             (     mon09v37.asm):01445                 BSR     GETAD1          Get address
ED07 2710             (     mon09v37.asm):01446                 BEQ     GETPC1          Normal data
ED09 8120             (     mon09v37.asm):01447                 CMPA    #' '            Space?
ED0B 2631             (     mon09v37.asm):01448                 BNE     GETERR          Report error
ED0D 1700C6           (     mon09v37.asm):01449                 LBSR    WRMSG           Output message
ED10 2D3E00           (     mon09v37.asm):01450                 FCN     '->'            Display address
ED13 FC9F78           (     mon09v37.asm):01451                 LDD     SAVPC           Get PC value
ED16 1600A3           (     mon09v37.asm):01452                 LBRA    WRDOUT          Display
ED19                  (     mon09v37.asm):01453         GETPC1
ED19 FD9F78           (     mon09v37.asm):01454                 STD     SAVPC           Set new PC
ED1C 39               (     mon09v37.asm):01455                 RTS
                      (     mon09v37.asm):01456         ;*
                      (     mon09v37.asm):01457         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (     mon09v37.asm):01458         ;*
ED1D                  (     mon09v37.asm):01459         GETRNG
ED1D 8D1B             (     mon09v37.asm):01460                 BSR     GETADR          Get first address
ED1F 1F01             (     mon09v37.asm):01461                 TFR     D,X             Save in X
ED21 862C             (     mon09v37.asm):01462                 LDA     #','            Separator
ED23 1700FC           (     mon09v37.asm):01463                 LBSR    PUTCHR          Display
ED26 8D19             (     mon09v37.asm):01464                 BSR     GETAD1          Get second address
ED28 2783             (     mon09v37.asm):01465                 BEQ     DLEOF           Normal data
ED2A 8120             (     mon09v37.asm):01466                 CMPA    #' '            Space?
ED2C 2610             (     mon09v37.asm):01467                 BNE     GETERR          No, report error
ED2E 1700A5           (     mon09v37.asm):01468                 LBSR    WRMSG           Output message
ED31 4646464600       (     mon09v37.asm):01469                 FCN     'FFFF'
ED36 CCFFFF           (     mon09v37.asm):01470                 LDD     #$FFFF          Assume top of RAM
ED39 39               (     mon09v37.asm):01471                 RTS
                      (     mon09v37.asm):01472         ;*
                      (     mon09v37.asm):01473         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (     mon09v37.asm):01474         ;*
ED3A                  (     mon09v37.asm):01475         GETADR
ED3A 8D05             (     mon09v37.asm):01476                 BSR     GETAD1          Get word value
ED3C 270F             (     mon09v37.asm):01477                 BEQ     GETAD2          Its OK
ED3E                  (     mon09v37.asm):01478         GETERR
ED3E 16F915           (     mon09v37.asm):01479                 LBRA    ERROR           Report error
                      (     mon09v37.asm):01480         ;* Get word value without error checking
ED41                  (     mon09v37.asm):01481         GETAD1
ED41 8D3E             (     mon09v37.asm):01482                 BSR     GETBYT          Get HIGH byte
ED43 2609             (     mon09v37.asm):01483                 BNE     GETAD3          Test for special register
ED45 1F89             (     mon09v37.asm):01484                 TFR     A,B             Copy for later
ED47 8D38             (     mon09v37.asm):01485                 BSR     GETBYT          Get LOW byte
ED49 26F3             (     mon09v37.asm):01486                 BNE     GETERR          Report error
ED4B 1E89             (     mon09v37.asm):01487                 EXG     A,B             Correct order
ED4D                  (     mon09v37.asm):01488         GETAD2
ED4D 39               (     mon09v37.asm):01489                 RTS
                      (     mon09v37.asm):01490         ;* Handle special register names
ED4E                  (     mon09v37.asm):01491         GETAD3
ED4E 3410             (     mon09v37.asm):01492                 PSHS    X               Save X
ED50 BE9F72           (     mon09v37.asm):01493                 LDX     SAVX            Assume X
ED53 8158             (     mon09v37.asm):01494                 CMPA    #'X'            Is it X?
ED55 271C             (     mon09v37.asm):01495                 BEQ     GETAD4          Yes
ED57 BE9F74           (     mon09v37.asm):01496                 LDX     SAVY            Assume Y
ED5A 8159             (     mon09v37.asm):01497                 CMPA    #'Y'            Is it Y?
ED5C 2715             (     mon09v37.asm):01498                 BEQ     GETAD4          Yes
ED5E BE9F76           (     mon09v37.asm):01499                 LDX     SAVU            Assume U
ED61 8155             (     mon09v37.asm):01500                 CMPA    #'U'            Is it U?
ED63 270E             (     mon09v37.asm):01501                 BEQ     GETAD4          Yes
ED65 BE9F72           (     mon09v37.asm):01502                 LDX     SAVX            Assume S
ED68 8153             (     mon09v37.asm):01503                 CMPA    #'S'            Is it S?
ED6A 2707             (     mon09v37.asm):01504                 BEQ     GETAD4          Yes
ED6C BE9F78           (     mon09v37.asm):01505                 LDX     SAVPC           Assume PC?
ED6F 8150             (     mon09v37.asm):01506                 CMPA    #'P'            Is it PC?
ED71 260C             (     mon09v37.asm):01507                 BNE     GETAD5          No, error
ED73                  (     mon09v37.asm):01508         GETAD4
ED73 863D             (     mon09v37.asm):01509                 LDA     #'='            Separator
ED75 1700AA           (     mon09v37.asm):01510                 LBSR    PUTCHR          Echo it
ED78 1F10             (     mon09v37.asm):01511                 TFR     X,D             D = value
ED7A 8D40             (     mon09v37.asm):01512                 BSR     WRDOUT          Display it
ED7C 4F               (     mon09v37.asm):01513                 CLRA                    Set 'Z'
ED7D 1F10             (     mon09v37.asm):01514                 TFR     X,D             Get value back
ED7F                  (     mon09v37.asm):01515         GETAD5
ED7F 3590             (     mon09v37.asm):01516                 PULS    X,PC            Restore & return
                      (     mon09v37.asm):01517         
                      (     mon09v37.asm):01518         ;*
                      (     mon09v37.asm):01519         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (     mon09v37.asm):01520         ;*
ED81                  (     mon09v37.asm):01521         GETBYT
ED81 8D20             (     mon09v37.asm):01522                 BSR     GETNIB          Get FIRST nibble
ED83 2611             (     mon09v37.asm):01523                 BNE     GETB3           Invalid, test for quote
ED85 48               (     mon09v37.asm):01524                 LSLA                    Rotate
ED86 48               (     mon09v37.asm):01525                 LSLA                    into
ED87 48               (     mon09v37.asm):01526                 LSLA                    high
ED88 48               (     mon09v37.asm):01527                 LSLA                    nibble
ED89 3402             (     mon09v37.asm):01528                 PSHS    A               Save for later
ED8B 8D16             (     mon09v37.asm):01529                 BSR     GETNIB          Get SECOND nibble
ED8D 2604             (     mon09v37.asm):01530                 BNE     GETB2           Report error
ED8F AAE4             (     mon09v37.asm):01531                 ORA     ,S              Include high
ED91                  (     mon09v37.asm):01532         GETB4
ED91 1A04             (     mon09v37.asm):01533                 ORCC    #$04            Indicate success (SET 'Z')
ED93                  (     mon09v37.asm):01534         GETB2
ED93 3261             (     mon09v37.asm):01535                 LEAS    1,S             Skip saved value
ED95                  (     mon09v37.asm):01536         GETB1
ED95 39               (     mon09v37.asm):01537                 RTS
ED96                  (     mon09v37.asm):01538         GETB3
ED96 8127             (     mon09v37.asm):01539                 CMPA    #$27            Single quote?
ED98 26FB             (     mon09v37.asm):01540                 BNE     GETB1           No, abort
ED9A 170070           (     mon09v37.asm):01541                 LBSR    GETCHR          Get ASCII character
ED9D 170082           (     mon09v37.asm):01542                 LBSR    PUTCHR          Echo on terminal
EDA0 1A04             (     mon09v37.asm):01543                 ORCC    #$04            Indicate success (SET 'Z')
EDA2 39               (     mon09v37.asm):01544                 RTS
                      (     mon09v37.asm):01545         
                      (     mon09v37.asm):01546         
                      (     mon09v37.asm):01547         ;*
                      (     mon09v37.asm):01548         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (     mon09v37.asm):01549         ;*
EDA3                  (     mon09v37.asm):01550         GETNIB
EDA3 170047           (     mon09v37.asm):01551                 LBSR    GETECH          Get character
EDA6 8030             (     mon09v37.asm):01552                 SUBA    #'0'            Convert numbers
EDA8 8109             (     mon09v37.asm):01553                 CMPA    #9              Numeric?
EDAA 230A             (     mon09v37.asm):01554                 BLS     GETN1           Yes, OK
EDAC 8007             (     mon09v37.asm):01555                 SUBA    #7              Convert alphas
EDAE 810A             (     mon09v37.asm):01556                 CMPA    #$A             Under?
EDB0 2507             (     mon09v37.asm):01557                 BLO     GETN2           Yer, error
EDB2 810F             (     mon09v37.asm):01558                 CMPA    #$F             Over?
EDB4 2203             (     mon09v37.asm):01559                 BHI     GETN2           Yes, error
EDB6                  (     mon09v37.asm):01560         GETN1
EDB6 1A04             (     mon09v37.asm):01561                 ORCC    #$04            SET 'Z' FLAG, INDICATE OK
EDB8 39               (     mon09v37.asm):01562                 RTS
EDB9                  (     mon09v37.asm):01563         GETN2
EDB9 8B37             (     mon09v37.asm):01564                 ADDA    #$37            Normalize character + clear Z
EDBB 39               (     mon09v37.asm):01565                 RTS
                      (     mon09v37.asm):01566         ;*
                      (     mon09v37.asm):01567         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (     mon09v37.asm):01568         ;*
EDBC                  (     mon09v37.asm):01569         WRDOUT
EDBC 8D02             (     mon09v37.asm):01570                 BSR     HEXOUT          Output first byte
EDBE 1F98             (     mon09v37.asm):01571                 TFR     B,A             Get second byte
                      (     mon09v37.asm):01572         ;*
                      (     mon09v37.asm):01573         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (     mon09v37.asm):01574         ;*
EDC0                  (     mon09v37.asm):01575         HEXOUT
EDC0 3402             (     mon09v37.asm):01576                 PSHS    A               Save low nibble
EDC2 44               (     mon09v37.asm):01577                 LSRA                    Rotate
EDC3 44               (     mon09v37.asm):01578                 LSRA                    upper nibble
EDC4 44               (     mon09v37.asm):01579                 LSRA                    into
EDC5 44               (     mon09v37.asm):01580                 LSRA                    lower nibble
EDC6 8D02             (     mon09v37.asm):01581                 BSR     HOUT            Output high nibble
EDC8 3502             (     mon09v37.asm):01582                 PULS    A               Restore low nibble
                      (     mon09v37.asm):01583         ;*
                      (     mon09v37.asm):01584         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (     mon09v37.asm):01585         ;*
EDCA                  (     mon09v37.asm):01586         HOUT
EDCA 840F             (     mon09v37.asm):01587                 ANDA    #$0F            Remove upper half
EDCC 8B30             (     mon09v37.asm):01588                 ADDA    #'0'            Convert to printable
EDCE 8139             (     mon09v37.asm):01589                 CMPA    #'9'            In range?
EDD0 2302             (     mon09v37.asm):01590                 BLS     HOUT1           Yes, display
EDD2 8B07             (     mon09v37.asm):01591                 ADDA    #7              Convert to alpha
EDD4                  (     mon09v37.asm):01592         HOUT1
EDD4 204C             (     mon09v37.asm):01593                 BRA     PUTCHR          Output character
                      (     mon09v37.asm):01594         
                      (     mon09v37.asm):01595         ;******************************************************************************
                      (     mon09v37.asm):01596         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (     mon09v37.asm):01597         ;******************************************************************************
EDD6 3410             (     mon09v37.asm):01598         WRMSG   PSHS    X               SAVE X
EDD8 AE62             (     mon09v37.asm):01599                 LDX     2,S             GET OLD PC
EDDA 8D04             (     mon09v37.asm):01600                 BSR     WRLIN           OUTPUT LINE
EDDC AF62             (     mon09v37.asm):01601                 STX     2,S             UPDATE OLD PC
EDDE 3590             (     mon09v37.asm):01602                 PULS    X,PC            RESTORE X, RETURN
                      (     mon09v37.asm):01603         
                      (     mon09v37.asm):01604         ;******************************************************************************
                      (     mon09v37.asm):01605         ;* DISPLAY MESSAGE(X)
                      (     mon09v37.asm):01606         ;******************************************************************************
EDE0                  (     mon09v37.asm):01607         WRLIN
EDE0 A680             (     mon09v37.asm):01608                 LDA     ,X+             GET CHAR FROM MESSAGE
EDE2 2708             (     mon09v37.asm):01609                 BEQ     WRLND           END, QUIT
EDE4 81FF             (     mon09v37.asm):01610                 CMPA    #$FF            NEWLINE END, LFCR & EXIT
EDE6 2719             (     mon09v37.asm):01611                 BEQ     LFCR            IF SO, NEW LINE, RETURN
EDE8 8D38             (     mon09v37.asm):01612                 BSR     PUTCHR          OUTPUT TO TERM
EDEA 20F4             (     mon09v37.asm):01613                 BRA     WRLIN           KEEP GOING
EDEC                  (     mon09v37.asm):01614         WRLND
EDEC 39               (     mon09v37.asm):01615                 RTS
                      (     mon09v37.asm):01616         
                      (     mon09v37.asm):01617         ;******************************************************************************
                      (     mon09v37.asm):01618         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (     mon09v37.asm):01619         ;******************************************************************************
EDED                  (     mon09v37.asm):01620         GETECH
EDED 8D1E             (     mon09v37.asm):01621                 BSR     GETCHR          GET CHARACTER
EDEF 8120             (     mon09v37.asm):01622                 CMPA    #' '            SPACE?
EDF1 23F9             (     mon09v37.asm):01623                 BLS     WRLND           IF < DON'T DISPLAY
EDF3 8161             (     mon09v37.asm):01624                 CMPA    #$61            LOWER CASE?
EDF5 252B             (     mon09v37.asm):01625                 BLO     PUTCHR          OK
EDF7 845F             (     mon09v37.asm):01626                 ANDA    #$5F            CONVERT TO UPPER
EDF9 2027             (     mon09v37.asm):01627                 BRA     PUTCHR          ECHO
                      (     mon09v37.asm):01628         
                      (     mon09v37.asm):01629         ;******************************************************************************
                      (     mon09v37.asm):01630         ;* DISPLAY A SPACE ON THE TERMINAL
                      (     mon09v37.asm):01631         ;******************************************************************************
EDFB                  (     mon09v37.asm):01632         SPACE
EDFB 3402             (     mon09v37.asm):01633                 PSHS    A               SAVE A
EDFD 8620             (     mon09v37.asm):01634                 LDA     #' '            GET SPACE
EDFF 2008             (     mon09v37.asm):01635                 BRA     LFC1            DISLAY AND GO HOME
                      (     mon09v37.asm):01636         
                      (     mon09v37.asm):01637         ;******************************************************************************
                      (     mon09v37.asm):01638         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (     mon09v37.asm):01639         ;******************************************************************************
EE01                  (     mon09v37.asm):01640         LFCR
EE01 3402             (     mon09v37.asm):01641                 PSHS    A                       SAVE
EE03 860A             (     mon09v37.asm):01642                 LDA     #$0A                    GET LF
EE05 8D1B             (     mon09v37.asm):01643                 BSR     PUTCHR                  OUTPUT
EE07 860D             (     mon09v37.asm):01644                 LDA     #$0D                    GET CR
EE09                  (     mon09v37.asm):01645         LFC1
EE09 8D17             (     mon09v37.asm):01646                 BSR     PUTCHR                  OUTPUT
EE0B 3582             (     mon09v37.asm):01647                 PULS    A,PC                    RESTORE AND GO HOME
                      (     mon09v37.asm):01648         
                      (     mon09v37.asm):01649         ;******************************************************************************
                      (     mon09v37.asm):01650         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (     mon09v37.asm):01651         ;******************************************************************************
EE0D                  (     mon09v37.asm):01652         GETCHR
EE0D 3410             (     mon09v37.asm):01653                 PSHS    X                       SAVE 'X'
EE0F BE9F6A           (     mon09v37.asm):01654                 LDX     >UART1                  POINT TO CONSOLE
EE12 B69F69           (     mon09v37.asm):01655                 LDA     IOCON                   GET I/O CONFIG
EE15 44               (     mon09v37.asm):01656                 LSRA                            SHIFT TO CARRY
EE16 2503             (     mon09v37.asm):01657                 BCS     GETC1                   READ FROM UART
EE18 BE9F6C           (     mon09v37.asm):01658                 LDX     >UART2                  POINT TO AUX UART
EE1B                  (     mon09v37.asm):01659         GETC1
EE1B 170F83           (     mon09v37.asm):01660                 LBSR    READ                    READ TERMINAL
EE1E 26FB             (     mon09v37.asm):01661                 BNE     GETC1                   KEEP TRYING
EE20 3590             (     mon09v37.asm):01662                 PULS    X,PC
                      (     mon09v37.asm):01663         
                      (     mon09v37.asm):01664         ;******************************************************************************
                      (     mon09v37.asm):01665         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (     mon09v37.asm):01666         ;******************************************************************************
EE22                  (     mon09v37.asm):01667         PUTCHR
EE22 3416             (     mon09v37.asm):01668                 PSHS    A,B,X                   SAVE REGS
EE24 F69F69           (     mon09v37.asm):01669                 LDB     IOCON                   GET I/O CONFIG
EE27 C502             (     mon09v37.asm):01670                 BITB    #2                      WRITE TO TERM?
EE29 2706             (     mon09v37.asm):01671                 BEQ     PUT1                    NO, TRY UART
EE2B BE9F6A           (     mon09v37.asm):01672                 LDX     >UART1                  POINT TO UART1
EE2E 170F7E           (     mon09v37.asm):01673                 LBSR    WRITE                   OUTPUT TO TERMINAL
EE31                  (     mon09v37.asm):01674         PUT1
EE31 F69F69           (     mon09v37.asm):01675                 LDB     IOCON                   INCASE CORRUPTED
EE34 C504             (     mon09v37.asm):01676                 BITB    #4                      WRITE TO UART?
EE36 2706             (     mon09v37.asm):01677                 BEQ     PUT2                    NO, SKIP IT
EE38 BE9F6C           (     mon09v37.asm):01678                 LDX     >UART2                  POINT TO UART2
EE3B 170F71           (     mon09v37.asm):01679                 LBSR    WRITE                   OUTPUT TO UART
EE3E                  (     mon09v37.asm):01680         PUT2
EE3E 3596             (     mon09v37.asm):01681                 PULS    A,B,X,PC                RESTORE AND GO HOME
                      (     mon09v37.asm):01682         
                      (     mon09v37.asm):01683         ;******************************************************************************
                      (     mon09v37.asm):01684         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (     mon09v37.asm):01685         ;* SCREEN OUTPUT FLOW CONTROL.
                      (     mon09v37.asm):01686         ;******************************************************************************
EE40                  (     mon09v37.asm):01687         CHKCHR
EE40 3410             (     mon09v37.asm):01688                 PSHS    X                       SAVE PTR
EE42 BE9F6A           (     mon09v37.asm):01689                 LDX     >UART1                  POINT TO CONSOLE UART
EE45 F69F69           (     mon09v37.asm):01690                 LDB     IOCON                   GET I/O CONFIG
EE48 2B07             (     mon09v37.asm):01691                 BMI     CHKC1                   ALREADY HELD
EE4A 170F54           (     mon09v37.asm):01692                 LBSR    READ                    READ TERMINAL
EE4D 8120             (     mon09v37.asm):01693                 CMPA    #' '                    SPACE?
EE4F 2616             (     mon09v37.asm):01694                 BNE     CHKC3                   NO, IGNORE IT
EE51                  (     mon09v37.asm):01695         CHKC1
EE51 CA80             (     mon09v37.asm):01696                 ORB     #%10000000              SET HELD BIT
EE53 170F4B           (     mon09v37.asm):01697                 LBSR    READ                    GET KEY FROM CONSOLE
EE56 8120             (     mon09v37.asm):01698                 CMPA    #' '                    SPACE?
EE58 270A             (     mon09v37.asm):01699                 BEQ     CHKC2                   YES, ALLOW
EE5A C47F             (     mon09v37.asm):01700                 ANDB    #%01111111              DISABLE HELD BIT
EE5C 810D             (     mon09v37.asm):01701                 CMPA    #$0D                    CARRIAGE RETURN?
EE5E 2704             (     mon09v37.asm):01702                 BEQ     CHKC2                   ALLOW
EE60 811B             (     mon09v37.asm):01703                 CMPA    #$1B                    ESCAPE?
EE62 26ED             (     mon09v37.asm):01704                 BNE     CHKC1                   NO, IGNORE
EE64                  (     mon09v37.asm):01705         CHKC2
EE64 F79F69           (     mon09v37.asm):01706                 STB     IOCON                   RESAVE I/O CONFIG BYTE
EE67                  (     mon09v37.asm):01707         CHKC3
EE67 811B             (     mon09v37.asm):01708                 CMPA    #$1B                    TEST FOR ESCAPE CHARACTER
EE69 3590             (     mon09v37.asm):01709                 PULS    X,PC
                      (     mon09v37.asm):01710         
                      (     mon09v37.asm):01711         ;******************************************************************************
                      (     mon09v37.asm):01712         ;* STEP ONE INSTRUCTION
                      (     mon09v37.asm):01713         ;******************************************************************************
EE6B                  (     mon09v37.asm):01714         STEPDI
EE6B 10BE9F78         (     mon09v37.asm):01715                 LDY     SAVPC                   GET PC
EE6F CE9F9B           (     mon09v37.asm):01716                 LDU     #DSPBUF                 GET INPUT BUFFER
EE72 170265           (     mon09v37.asm):01717                 LBSR    DISASS                  DISPLAY
EE75 1F31             (     mon09v37.asm):01718                 TFR     U,X                     POINT TO IT
EE77 17FF66           (     mon09v37.asm):01719                 LBSR    WRLIN                   DISPLAY
EE7A 200A             (     mon09v37.asm):01720                 BRA     STEPCE                  AND PERFORM STEP
                      (     mon09v37.asm):01721         
                      (     mon09v37.asm):01722         ;******************************************************************************
                      (     mon09v37.asm):01723         ;* STEP WITHOUT DISPLAYING INSTRUCTION
                      (     mon09v37.asm):01724         ;******************************************************************************
EE7C 10BE9F78         (     mon09v37.asm):01725         STEP    LDY     SAVPC           GET PROGRAM COUNTER
EE80 CE9F9B           (     mon09v37.asm):01726                 LDU     #DSPBUF         POINT TO FREE RAM FOR DISASEMBLY OUTPUT
EE83 170254           (     mon09v37.asm):01727                 LBSR    DISASS          PERFORM DISASSEMBLY
EE86 10BF9F78         (     mon09v37.asm):01728         STEPCE  STY     SAVPC           SAVE NEW PC
EE8A FE9F7F           (     mon09v37.asm):01729                 LDU     PTRSAV          GET POINTER BACK
EE8D ECC0             (     mon09v37.asm):01730                 LDD     ,U+             GET OPCODE
                      (     mon09v37.asm):01731         ;* TEST FOR LONG CONDITIONAL BRANCHES
EE8F 8110             (     mon09v37.asm):01732         LCBRAN  CMPA    #$10            PREFIX?
EE91 2612             (     mon09v37.asm):01733                 BNE     LOBRAN          NO, GOT FOR IT
EE93 E6C4             (     mon09v37.asm):01734                 LDB     ,U              GET OPCODE
EE95 C122             (     mon09v37.asm):01735                 CMPB    #$22            IN RANGE?
EE97 250C             (     mon09v37.asm):01736                 BLO     LOBRAN          NO
EE99 C12F             (     mon09v37.asm):01737                 CMPB    #$2F            IN RANGE?
EE9B 2208             (     mon09v37.asm):01738                 BHI     LOBRAN          NO
EE9D A6C0             (     mon09v37.asm):01739                 LDA     ,U+             GET OPCOIDE BYTE
EE9F 170216           (     mon09v37.asm):01740                 LBSR    TSTCON          TEST CONDITIONAL
EEA2 2705             (     mon09v37.asm):01741                 BEQ     LBRAN1          YES, DO IT
EEA4 39               (     mon09v37.asm):01742                 RTS
                      (     mon09v37.asm):01743         ;* TEST FOR LONG BRANCHES
EEA5 8116             (     mon09v37.asm):01744         LOBRAN  CMPA    #$16            IS IT LBRA?
EEA7 2606             (     mon09v37.asm):01745                 BNE     LBRANS          NO, TRY LBSR
EEA9 ECC1             (     mon09v37.asm):01746         LBRAN1  LDD     ,U++            GET OFFSET
EEAB 30CB             (     mon09v37.asm):01747                 LEAX    D,U             PERFORM BRANCH
EEAD 2034             (     mon09v37.asm):01748                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v37.asm):01749         ;* TEST FOR LONG BRANCH TO SUB
EEAF 8117             (     mon09v37.asm):01750         LBRANS  CMPA    #$17            'LBSR'?
EEB1 2606             (     mon09v37.asm):01751                 BNE     SCOBRA          NO, TRY SHORT CONDITIONALS
EEB3 ECC1             (     mon09v37.asm):01752                 LDD     ,U++            GET OFFSET
EEB5 30CB             (     mon09v37.asm):01753                 LEAX    D,U             SET UP ADDRESS
EEB7 2020             (     mon09v37.asm):01754                 BRA     SAVSTK
                      (     mon09v37.asm):01755         ;* TEST FOR SHORT CONDITIONAL BRANCHES
EEB9 8122             (     mon09v37.asm):01756         SCOBRA  CMPA    #$22            < 'BHI'?
EEBB 250A             (     mon09v37.asm):01757                 BLO     SHBRAN          NO, TRY SHORT BRANCHES
EEBD 812F             (     mon09v37.asm):01758                 CMPA    #$2F            > 'BLE'?
EEBF 2206             (     mon09v37.asm):01759                 BHI     SHBRAN          NO, TRY SHORT BRANCHES
EEC1 1701F4           (     mon09v37.asm):01760                 LBSR    TSTCON          SEE OF CONDITIONAL IS OK
EEC4 2705             (     mon09v37.asm):01761                 BEQ     SBRAN1          YES, DO IT
EEC6 39               (     mon09v37.asm):01762                 RTS
                      (     mon09v37.asm):01763         ;* TEST FOR SHORT BRANCHES
EEC7 8120             (     mon09v37.asm):01764         SHBRAN  CMPA    #$20            SHORT BRANCH?
EEC9 2606             (     mon09v37.asm):01765                 BNE     SBRANS          NO, TRY SHORT BRANCH TO SUB
EECB E6C0             (     mon09v37.asm):01766         SBRAN1  LDB     ,U+             GET OFFSET
EECD 30C5             (     mon09v37.asm):01767                 LEAX    B,U             EMULATE JUMP
EECF 2012             (     mon09v37.asm):01768                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v37.asm):01769         ;* TEST FOR SHORT BRANCH TO SUBROUTINE
EED1 818D             (     mon09v37.asm):01770         SBRANS  CMPA    #$8D            'BSR'?
EED3 2612             (     mon09v37.asm):01771                 BNE     TSTTFR          NO, TRY TRANSFER
EED5 E6C0             (     mon09v37.asm):01772                 LDB     ,U+             GET OFFSET
EED7 30C5             (     mon09v37.asm):01773                 LEAX    B,U             PERFORM BRANCH
EED9 10BE9F7A         (     mon09v37.asm):01774         SAVSTK  LDY     SAVS            GET STACK POINTER
EEDD EFA3             (     mon09v37.asm):01775                 STU     ,--Y            PUSH ADDRESS
EEDF 10BF9F7A         (     mon09v37.asm):01776                 STY     SAVS            RESAVE
EEE3 BF9F78           (     mon09v37.asm):01777         SAVNPC  STX     SAVPC           SAVE IT
EEE6 39               (     mon09v37.asm):01778                 RTS
                      (     mon09v37.asm):01779         ;* TEST FOR TRANSFER
EEE7 811F             (     mon09v37.asm):01780         TSTTFR  CMPA    #$1F            TRANSFER?
EEE9 2620             (     mon09v37.asm):01781                 BNE     TSTEXG          NO, TRY EXCHANGE
EEEB 8D01             (     mon09v37.asm):01782                 BSR     LOKREG          LOOKUP REGISTER
EEED 39               (     mon09v37.asm):01783                 RTS
                      (     mon09v37.asm):01784         ;* LOOKUP REGISTER, AND SIMULATE IF PC XFER OR EXCHANGE
EEEE A6C4             (     mon09v37.asm):01785         LOKREG  LDA     ,U              GET POSTBYTE
EEF0 840F             (     mon09v37.asm):01786                 ANDA    #$0F            REMOVE HIGH REGISTER
EEF2 8105             (     mon09v37.asm):01787                 CMPA    #5              IS IT PC?
EEF4 2610             (     mon09v37.asm):01788                 BNE     LOK1            NO, IT'S OK TO EXECUTE
EEF6 A6C4             (     mon09v37.asm):01789                 LDA     ,U              GET REG POSTBYTE BACK
EEF8 44               (     mon09v37.asm):01790                 LSRA                    SHIFT
EEF9 44               (     mon09v37.asm):01791                 LSRA                    HIGH REGISTER
EEFA 44               (     mon09v37.asm):01792                 LSRA                    TO LOW (LEAVE X 2)
EEFB 8EF9CC           (     mon09v37.asm):01793         LOK2    LDX     #TFREGT         POINT TO TABLE
EEFE 840F             (     mon09v37.asm):01794                 ANDA    #$0F            INSURE WE GET VALID REG
EF00 AE86             (     mon09v37.asm):01795                 LDX     A,X             GET ADDRESS OF VARIABLE
EF02 EC84             (     mon09v37.asm):01796                 LDD     ,X              GET REGISTER VALUE
EF04 202E             (     mon09v37.asm):01797                 BRA     STDPC           SAVE IT
EF06 3262             (     mon09v37.asm):01798         LOK1    LEAS    2,S             SKIP LAST CALL
EF08 160151           (     mon09v37.asm):01799                 LBRA    NOREXE          EXECUTE NORMAL INSTRUCTION
                      (     mon09v37.asm):01800         ;* TEST FOR EXCHANGE
EF0B 811E             (     mon09v37.asm):01801         TSTEXG  CMPA    #$1E            IS IT EXCHANGE
EF0D 2619             (     mon09v37.asm):01802                 BNE     TSTRTS          NO, TRY RTS
EF0F 10BE9F78         (     mon09v37.asm):01803                 LDY     SAVPC           GET OLD PC VALUE
EF13 A6C4             (     mon09v37.asm):01804                 LDA     ,U              GET REGISTER
EF15 84F0             (     mon09v37.asm):01805                 ANDA    #$F0            USE HIGH ONLY
EF17 8150             (     mon09v37.asm):01806                 CMPA    #$50            IS PC FIRST?
EF19 2607             (     mon09v37.asm):01807                 BNE     TSTE1           NO, SKIP
EF1B A6C4             (     mon09v37.asm):01808                 LDA     ,U              GET REG BACK
EF1D 48               (     mon09v37.asm):01809                 LSLA                    DOUBLE
EF1E 8DDB             (     mon09v37.asm):01810                 BSR     LOK2            GET ADDRESS OF REG TO SWAP WITH
EF20 2002             (     mon09v37.asm):01811                 BRA     TSTE2           PERFORM MOVE TO PC
EF22 8DCA             (     mon09v37.asm):01812         TSTE1   BSR     LOKREG          GET REGISTER SEE IF PC IS LOW REGISTER
EF24 10AF84           (     mon09v37.asm):01813         TSTE2   STY     ,X              SAVE PC IN REGISTER
EF27 39               (     mon09v37.asm):01814                 RTS
                      (     mon09v37.asm):01815         ;* TEST FOR 'RTS' INSTRUCTIONS
EF28 8139             (     mon09v37.asm):01816         TSTRTS  CMPA    #$39            IS IT 'RTS'
EF2A 260C             (     mon09v37.asm):01817                 BNE     TPULS           NO, TRY PULS
EF2C FE9F7A           (     mon09v37.asm):01818                 LDU     SAVS            POINT TO STACK
EF2F 3706             (     mon09v37.asm):01819                 PULU    A,B             GET DATA
EF31 FF9F7A           (     mon09v37.asm):01820                 STU     SAVS            RESAVE SP
EF34 FD9F78           (     mon09v37.asm):01821         STDPC   STD     SAVPC
EF37 39               (     mon09v37.asm):01822                 RTS
                      (     mon09v37.asm):01823         ;* TEST FOR 'PULS' INSTRUCTION
EF38 8135             (     mon09v37.asm):01824         TPULS   CMPA    #$35            PULLING FROM S?
EF3A 260D             (     mon09v37.asm):01825                 BNE     TPULU           NO, TRY PULU
EF3C BE9F7A           (     mon09v37.asm):01826                 LDX     SAVS            GET SAVED 'S' REG
EF3F 108EF9D8         (     mon09v37.asm):01827                 LDY     #PULSTAB        POINT TO TABLE
EF43 8D15             (     mon09v37.asm):01828                 BSR     DOPUL           PERFORM PULL
EF45 BF9F7A           (     mon09v37.asm):01829                 STX     SAVS            RESAVE NEW 'S' REGISTER
EF48 39               (     mon09v37.asm):01830                 RTS
                      (     mon09v37.asm):01831         ;* TEST FOR A 'PULU' INSTRUCTION
EF49 8137             (     mon09v37.asm):01832         TPULU   CMPA    #$37            IS IT 'PULU'?
EF4B 262E             (     mon09v37.asm):01833                 BNE     JSREXT          NO, TRY JSR EXTENDED
EF4D BE9F76           (     mon09v37.asm):01834                 LDX     SAVU            GET SAVED 'U'
EF50 108EF9E8         (     mon09v37.asm):01835                 LDY     #PULUTAB        POINT TO TABLE
EF54 8D04             (     mon09v37.asm):01836                 BSR     DOPUL           PERFORM PULL
EF56 BF9F76           (     mon09v37.asm):01837                 STX     SAVU            RESAVE 'S'
EF59 39               (     mon09v37.asm):01838                 RTS
                      (     mon09v37.asm):01839         ;* PERFORM PUL OPERATIONS
EF5A A6C4             (     mon09v37.asm):01840         DOPUL   LDA     ,U              GET POSTBYTE
EF5C C604             (     mon09v37.asm):01841                 LDB     #4              TEST FOR FIRST FOUR BITS (8 BIT REG)
EF5E 5A               (     mon09v37.asm):01842         DOPUL1  DECB                    DECREMENT COUNT
EF5F 44               (     mon09v37.asm):01843                 LSRA                    SHIFT
EF60 2413             (     mon09v37.asm):01844                 BCC     DOPUL2          NOTHING, GO AGAIN
EF62 3406             (     mon09v37.asm):01845                 PSHS    A,B             SAVE REGS
EF64 5D               (     mon09v37.asm):01846                 TSTB                    ARE WE INTO 16 BITS?
EF65 2B06             (     mon09v37.asm):01847                 BMI     PUL16           YES, PERFORM 16 BITS
EF67 A680             (     mon09v37.asm):01848                 LDA     ,X+             PULL A BYTE
EF69 A7B1             (     mon09v37.asm):01849                 STA     [,Y++]          SAVE IN REGISTER
EF6B 2004             (     mon09v37.asm):01850                 BRA     DOPUL3          GO AGAIN
EF6D EC81             (     mon09v37.asm):01851         PUL16   LDD     ,X++            GET 16 BIT VALUE
EF6F EDB1             (     mon09v37.asm):01852                 STD     [,Y++]          SAVE IN REGISTER
EF71 3506             (     mon09v37.asm):01853         DOPUL3  PULS    A,B             RESTORE
EF73 20E9             (     mon09v37.asm):01854                 BRA     DOPUL1          CONTINUE
EF75 3122             (     mon09v37.asm):01855         DOPUL2  LEAY    2,Y             ADVANCE
EF77 4D               (     mon09v37.asm):01856                 TSTA                    ARE WE CONE
EF78 26E4             (     mon09v37.asm):01857                 BNE     DOPUL1          CONTINUE
EF7A 39               (     mon09v37.asm):01858                 RTS
                      (     mon09v37.asm):01859         ;* TEST FOR 'JSR' EXTENDED
EF7B 81BD             (     mon09v37.asm):01860         JSREXT  CMPA    #$BD            IS IT EXTENDED JSR
EF7D 2604             (     mon09v37.asm):01861                 BNE     JMPEXT          NO, TRY JUMP EXTENDED
EF7F 8D06             (     mon09v37.asm):01862                 BSR     DJMPEX          FAKE JUMP
EF81 2021             (     mon09v37.asm):01863                 BRA     PSHPC           SAVE PC
                      (     mon09v37.asm):01864         ;* TEST FOR 'JMP' EXTENDED
EF83 817E             (     mon09v37.asm):01865         JMPEXT  CMPA    #$7E            IS IT JMP EXTENDED?
EF85 2604             (     mon09v37.asm):01866                 BNE     JSRDIR          NO, TRY JMP DIRECT
EF87 ECC1             (     mon09v37.asm):01867         DJMPEX  LDD     ,U++            GET ADDRESS
EF89 20A9             (     mon09v37.asm):01868                 BRA     STDPC           SAVE IT
                      (     mon09v37.asm):01869         ;* TEST FOR 'JSR' DIRECT
EF8B 819D             (     mon09v37.asm):01870         JSRDIR  CMPA    #$9D            'JSR' DIRECT PAGE?
EF8D 2604             (     mon09v37.asm):01871                 BNE     JMPDIR          NO, TRY JUMP
EF8F 8D06             (     mon09v37.asm):01872                 BSR     DJMPDI          DO IT
EF91 2011             (     mon09v37.asm):01873                 BRA     PSHPC           SAVE PC
                      (     mon09v37.asm):01874         ;* TEST FOR 'JMP' DIRECT PAGE
EF93 810E             (     mon09v37.asm):01875         JMPDIR  CMPA    #$0E            IS IT JUMP DIRECT PAGE?
EF95 2607             (     mon09v37.asm):01876                 BNE     JSRIND          NO, TRY JUMP INDEXED
EF97 E6C0             (     mon09v37.asm):01877         DJMPDI  LDB     ,U+             GET LOW ADDRESS
EF99 B69F71           (     mon09v37.asm):01878                 LDA     SAVDP           GET DIRECT PAGE
EF9C 2096             (     mon09v37.asm):01879                 BRA     STDPC           SAVE IT
                      (     mon09v37.asm):01880         ;* TEST FOR 'JSR' INDEXED
EF9E 81AD             (     mon09v37.asm):01881         JSRIND  CMPA    #$AD            IS IT 'JSR' INDEXED?
EFA0 260B             (     mon09v37.asm):01882                 BNE     JMPIND          NO, TRY NEXT
EFA2 8D0F             (     mon09v37.asm):01883                 BSR     DJMPIN          DO IT
EFA4 BE9F7A           (     mon09v37.asm):01884         PSHPC   LDX     SAVS            GET ADDRESS
EFA7 EF83             (     mon09v37.asm):01885                 STU     ,--X            SAVE
EFA9 BF9F7A           (     mon09v37.asm):01886                 STX     SAVS            RESAVE
EFAC 39               (     mon09v37.asm):01887                 RTS
                      (     mon09v37.asm):01888         ;* TEST FOR 'JMP' INDEXED
EFAD 816E             (     mon09v37.asm):01889         JMPIND  CMPA    #$6E            IS IT JUMP INDEXED?
EFAF 102600A9         (     mon09v37.asm):01890                 LBNE    NOREXE          NO, NON-TRANSFER INSTRUCTION
                      (     mon09v37.asm):01891         ;* FIRST POINT Y AT REGISTER INVOLVED
EFB3 A6C0             (     mon09v37.asm):01892         DJMPIN  LDA     ,U+             GET POSTBYTE
EFB5 3402             (     mon09v37.asm):01893                 PSHS    A               SAVE IT
EFB7 8460             (     mon09v37.asm):01894                 ANDA    #%01100000      SAVE ONLY REGISTER
EFB9 44               (     mon09v37.asm):01895                 LSRA                    CONVERT
EFBA 44               (     mon09v37.asm):01896                 LSRA                    REGISTER
EFBB 44               (     mon09v37.asm):01897                 LSRA                    INTO INDEX VALUE
EFBC 44               (     mon09v37.asm):01898                 LSRA                    SHIFT IT OVER
EFBD 8EF9CE           (     mon09v37.asm):01899                 LDX     #INDTAB         POINT TO TABLE
EFC0 10AE86           (     mon09v37.asm):01900                 LDY     A,X             GET REGISTER ADDRESS
EFC3 10BF9F7C         (     mon09v37.asm):01901                 STY     TEMP            SAVE FOR INC/DEC
EFC7 10AEA4           (     mon09v37.asm):01902                 LDY     ,Y              GET REGISTER CONTENTS
EFCA A6E4             (     mon09v37.asm):01903                 LDA     ,S              GET POSTBYTE BACK
EFCC 2B0C             (     mon09v37.asm):01904                 BMI     NOT5BO          NOT A FIVE BIT OFFSET
                      (     mon09v37.asm):01905         ;* FIVE BIT REGISTER OFFSET
EFCE 841F             (     mon09v37.asm):01906                 ANDA    #%00011111      SAVE ONLY OFFSET
EFD0 8110             (     mon09v37.asm):01907                 CMPA    #%00010000      NEGATIVE?
EFD2 2502             (     mon09v37.asm):01908                 BLO     SINOK           NO, IT'S OK
EFD4 8AE0             (     mon09v37.asm):01909                 ORA     #%11100000      CONVERT TO NEGATIVE
EFD6 30A6             (     mon09v37.asm):01910         SINOK   LEAX    A,Y             GET ADDRESS
EFD8 205E             (     mon09v37.asm):01911                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01912         ;* TEST FOR NO OFFSET
EFDA 848F             (     mon09v37.asm):01913         NOT5BO  ANDA    #%10001111      REMOVE REGISTER & INDIRECT BIT
EFDC 8184             (     mon09v37.asm):01914                 CMPA    #$84            NO OFFSET?
EFDE 2604             (     mon09v37.asm):01915                 BNE     TOFF8           NO, TRY OFFSET OF 8
EFE0 1F21             (     mon09v37.asm):01916                 TFR     Y,X             COPY
EFE2 2054             (     mon09v37.asm):01917                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01918         ;* TEST FOR EIGHT BIT OFFSET
EFE4 8188             (     mon09v37.asm):01919         TOFF8   CMPA    #$88            8 BIT OFSET?
EFE6 2604             (     mon09v37.asm):01920                 BNE     TOFF16          NO, TRY 16 BIT OFFSET
EFE8 E6C0             (     mon09v37.asm):01921                 LDB     ,U+             GET OFFSET
EFEA 201A             (     mon09v37.asm):01922                 BRA     BSAVOF          GO FOR IT
                      (     mon09v37.asm):01923         ;* TEST FOR 16 BIT OFFSET
EFEC 8189             (     mon09v37.asm):01924         TOFF16  CMPA    #$89            16 BIT OFFSET?
EFEE 2606             (     mon09v37.asm):01925                 BNE     TOFFA           TRY A ACCUMULATOR OFFSET
EFF0 ECC0             (     mon09v37.asm):01926                 LDD     ,U+             GET OFFSET
EFF2 30AB             (     mon09v37.asm):01927                 LEAX    D,Y             DO IT
EFF4 2042             (     mon09v37.asm):01928                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01929         ;* TEST FOR ACCA OFFSET
EFF6 8186             (     mon09v37.asm):01930         TOFFA   CMPA    #$86            OFFSET BY ACCA
EFF8 2605             (     mon09v37.asm):01931                 BNE     TOFFB           NO, TRY B
EFFA F69F6F           (     mon09v37.asm):01932                 LDB     SAVA            GET ACCA
EFFD 2007             (     mon09v37.asm):01933                 BRA     BSAVOF          SAVE IT
                      (     mon09v37.asm):01934         ;* TEST FOR ACCB OFFSET
EFFF 8185             (     mon09v37.asm):01935         TOFFB   CMPA    #$85            B OFFSET
F001 2607             (     mon09v37.asm):01936                 BNE     TOFFD           NO, TRY D OFFSET
F003 F69F70           (     mon09v37.asm):01937                 LDB     SAVB            GET B
F006 30A5             (     mon09v37.asm):01938         BSAVOF  LEAX    B,Y             DO OFFSET
F008 202E             (     mon09v37.asm):01939                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01940         ;* TEST FOR ACCD OFFSET
F00A 818B             (     mon09v37.asm):01941         TOFFD   CMPA    #$8B            IS IT D OFFSET?
F00C 2607             (     mon09v37.asm):01942                 BNE     TAINC1          NO, TRY AUTO INC
F00E FC9F6F           (     mon09v37.asm):01943                 LDD     SAVA            GET D ACCUMULATOR
F011 30AB             (     mon09v37.asm):01944                 LEAX    D,Y             DO IT
F013 2023             (     mon09v37.asm):01945                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01946         ;* TEST FOR AUTO INCREMENT
F015 8180             (     mon09v37.asm):01947         TAINC1  CMPA    #$80            AUTO INC BY 1?
F017 2604             (     mon09v37.asm):01948                 BNE     TAINC2          NO, TRY AUTO INC BY 2
F019 30A0             (     mon09v37.asm):01949                 LEAX    ,Y+             GET ADDRESS
F01B 2016             (     mon09v37.asm):01950                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01951         ;* TEST FOR DOUBLE AUTO INCREMENT
F01D 8181             (     mon09v37.asm):01952         TAINC2  CMPA    #$81            AUTO INC BY 1?
F01F 2604             (     mon09v37.asm):01953                 BNE     TADEC1          NO, TRY AUTO DEC
F021 30A1             (     mon09v37.asm):01954                 LEAX    ,Y++            GET ADDRESS
F023 200E             (     mon09v37.asm):01955                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01956         ;* TEST FOR AUTO DECREMENT
F025 8182             (     mon09v37.asm):01957         TADEC1  CMPA    #$82            AUTO DEC?
F027 2604             (     mon09v37.asm):01958                 BNE     TADEC2          NO, TRY AUTO DEC BY TWO
F029 30A2             (     mon09v37.asm):01959                 LEAX    ,-Y             GET ADDRESS
F02B 2006             (     mon09v37.asm):01960                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01961         ;* TEST FOR DOUBLE AUTO DECREMENT
F02D 8183             (     mon09v37.asm):01962         TADEC2  CMPA    #$83            DOUBLE AUTO DEC.
F02F 2609             (     mon09v37.asm):01963                 BNE     TPCO8           NO, TRY PC OFFSET
F031 30A3             (     mon09v37.asm):01964                 LEAX    ,--Y            GET OFFSET
F033 10AF9F9F7C       (     mon09v37.asm):01965         RSVREG  STY     [TEMP]          RESAVE REGISTER CONTENTS
F038 2016             (     mon09v37.asm):01966         XSAVPC  BRA     SAVXPC          SAVE NEW PC
                      (     mon09v37.asm):01967         ;* TEST FOR EIGHT BIT OFFSET FROM PCR
F03A 818C             (     mon09v37.asm):01968         TPCO8   CMPA    #$8C            8 BIT PC RELATIVE?
F03C 2606             (     mon09v37.asm):01969                 BNE     TPCO16          NO, TRY 16 BIT PC RELATIVE
F03E E6C0             (     mon09v37.asm):01970                 LDB     ,U+             GET BYTE
F040 30C5             (     mon09v37.asm):01971                 LEAX    B,U             OFFSET IT
F042 200C             (     mon09v37.asm):01972                 BRA     SAVXPC          RESAVE PC
                      (     mon09v37.asm):01973         ;* TEST FOR 16 BIT OFFSET FROM PCR
F044 818D             (     mon09v37.asm):01974         TPCO16  CMPA    #$8D            16 BIT OFFSET
F046 2606             (     mon09v37.asm):01975                 BNE     TEIND           NO, TRY EXTENDED INDIRECT
F048 ECC1             (     mon09v37.asm):01976                 LDD     ,U++            GET VALUE
F04A 30CB             (     mon09v37.asm):01977                 LEAX    D,U             POINT TO NEW LOCATION
F04C 2002             (     mon09v37.asm):01978                 BRA     SAVXPC          RESAVE
                      (     mon09v37.asm):01979         ;* EXTENDED ADDRESSING VIA INDEXED POSTBYTE
F04E AEC1             (     mon09v37.asm):01980         TEIND   LDX     ,U++            GET ADDRESS
                      (     mon09v37.asm):01981         ;* SET SAVED PC TO CALCULATED ADDRESS (IN 'X').
                      (     mon09v37.asm):01982         ;* CHECK FOR & PERFORM INDIRECTION IF REQUIRED
F050 3502             (     mon09v37.asm):01983         SAVXPC  PULS    A               RESTORE POSTBYTE
F052 8510             (     mon09v37.asm):01984                 BITA    #%00010000      INDIRECT ADDRESSING?
F054 2702             (     mon09v37.asm):01985                 BEQ     NINXIN          NOT INDIRECT
F056 AE84             (     mon09v37.asm):01986                 LDX     ,X              PERFORM A LEVEL OF INDIRECTION
F058 BF9F78           (     mon09v37.asm):01987         NINXIN  STX     SAVPC           SAVE IT
F05B 39               (     mon09v37.asm):01988                 RTS
                      (     mon09v37.asm):01989         ;* NORMAL EXECUTABLE INSTRUCTION, COPY IT INTO OUR RAM, THEN EXECUTE IT
F05C 335F             (     mon09v37.asm):01990         NOREXE  LEAU    -1,U            BACKUP TO INSTRUCTION
F05E 8E9FCD           (     mon09v37.asm):01991                 LDX     #INSRAM         POINT TO RAM FOR INSTRUCTION
                      (     mon09v37.asm):01992         ;* COPY INSTRUCTION INTO RAM
F061 11B39F78         (     mon09v37.asm):01993         NORE1   CMPU    SAVPC           ARE WE THERE
F065 2406             (     mon09v37.asm):01994                 BHS     NORE2           END OF INSTRUCTION
F067 A6C0             (     mon09v37.asm):01995                 LDA     ,U+             GET DATA
F069 A780             (     mon09v37.asm):01996                 STA     ,X+             SAVE IN RAM
F06B 20F4             (     mon09v37.asm):01997                 BRA     NORE1           CONTINUE
                      (     mon09v37.asm):01998         ;* INSERT A JUMP AFTER IT
F06D 867E             (     mon09v37.asm):01999         NORE2   LDA     #$7E            GET 'JMP' EXTENDED INSTRUCTION
F06F A780             (     mon09v37.asm):02000                 STA     ,X+             SAVE IT
F071 CCF098           (     mon09v37.asm):02001                 LDD     #NORE3          POINT AT ADDRESS TO JUMP TO
F074 ED84             (     mon09v37.asm):02002                 STD     ,X              SAVE IT
F076 10FF9F7C         (     mon09v37.asm):02003                 STS     TEMP            SAVE SP
F07A 10FE9F7A         (     mon09v37.asm):02004                 LDS     SAVS            RESTORE STACK POINTER
F07E B69F6E           (     mon09v37.asm):02005                 LDA     SAVCC           GET CC
F081 F69F71           (     mon09v37.asm):02006                 LDB     SAVDP           GET DP
F084 3406             (     mon09v37.asm):02007                 PSHS    A,B             SAVE CC AND DP
F086 FC9F6F           (     mon09v37.asm):02008                 LDD     SAVA            RESTORE A, B
F089 BE9F72           (     mon09v37.asm):02009                 LDX     SAVX            RESTORE X
F08C 10BE9F74         (     mon09v37.asm):02010                 LDY     SAVY            RESTORE Y
F090 FE9F76           (     mon09v37.asm):02011                 LDU     SAVU            RESTORE U
F093 3509             (     mon09v37.asm):02012                 PULS    CC,DP           RESTORE CC AND DP
F095 7E9FCD           (     mon09v37.asm):02013                 JMP     INSRAM          EXECUTE INSTRUCTION
                      (     mon09v37.asm):02014         ;* INSTRUCTION SHOULD RETURN TO HERE
F098 3409             (     mon09v37.asm):02015         NORE3   PSHS    CC,DP           SAVE REGS
F09A FD9F6F           (     mon09v37.asm):02016                 STD     SAVA            SAVE REGS
F09D BF9F72           (     mon09v37.asm):02017                 STX     SAVX            SAVE X
F0A0 10BF9F74         (     mon09v37.asm):02018                 STY     SAVY            SAVE Y
F0A4 FF9F76           (     mon09v37.asm):02019                 STU     SAVU            SAVE U
F0A7 3506             (     mon09v37.asm):02020                 PULS    A,B             GET REGS BACK
F0A9 B79F6E           (     mon09v37.asm):02021                 STA     SAVCC           SAVE CC
F0AC F79F71           (     mon09v37.asm):02022                 STB     SAVDP           SAVE DP
F0AF 10FF9F7A         (     mon09v37.asm):02023                 STS     SAVS            SAVE STACK POINTER
F0B3 10FE9F7C         (     mon09v37.asm):02024                 LDS     TEMP            RESTORE OUR STACK
F0B7 39               (     mon09v37.asm):02025                 RTS
                      (     mon09v37.asm):02026         ;*
                      (     mon09v37.asm):02027         ;* SUBROUTINE TO EVALUATE CONDITIONAL BRANCH OPCODES, AND DETERMINE
                      (     mon09v37.asm):02028         ;* IF THEY ARE TO BE EXECUTED
                      (     mon09v37.asm):02029         ;*
F0B8 C603             (     mon09v37.asm):02030         TSTCON  LDB     #3              TEST FOR THREE CONDITIONALS
F0BA 812F             (     mon09v37.asm):02031                 CMPA    #$2F            IS IT 'BLE'?
F0BC 2602             (     mon09v37.asm):02032                 BNE     TSTC0           NO, ITS NORMAL
F0BE C606             (     mon09v37.asm):02033                 LDB     #6              HANDLE WRETCHED 'BLE' CASE
F0C0 8022             (     mon09v37.asm):02034         TSTC0   SUBA    #$22            CONVERT OPCODE TO SIMPLE INDEX
F0C2 48               (     mon09v37.asm):02035                 LSLA                    ROTATE..
F0C3 48               (     mon09v37.asm):02036                 LSLA                    TWICE FOR FOUR BYTE ENTRIES
F0C4 8EF991           (     mon09v37.asm):02037                 LDX     #CONTAB         POINT TO TABLE
F0C7 3086             (     mon09v37.asm):02038                 LEAX    A,X             ADVANCE TO TABLE ENTRY
F0C9 B69F6E           (     mon09v37.asm):02039                 LDA     SAVCC           GET CONDITION CODES
F0CC A480             (     mon09v37.asm):02040                 ANDA    ,X+             MASK OUT NON-APPLICABLE ONES
F0CE A180             (     mon09v37.asm):02041         TSTC1   CMPA    ,X+             DOES IT MATCH?
F0D0 2706             (     mon09v37.asm):02042                 BEQ     TSTC2           IT'S OK
F0D2 5A               (     mon09v37.asm):02043                 DECB                    REDUCE COUNT
F0D3 26F9             (     mon09v37.asm):02044                 BNE     TSTC1           CONTINUE
F0D5 86FF             (     mon09v37.asm):02045                 LDA     #255            INDICATE CONDITIONAL NOT MET
F0D7 39               (     mon09v37.asm):02046                 RTS
F0D8 4F               (     mon09v37.asm):02047         TSTC2   CLRA                    INDICATE CONDITIONAL MET
F0D9 39               (     mon09v37.asm):02048                 RTS
                      (     mon09v37.asm):02049         ;*
                      (     mon09v37.asm):02050         ;* DISASSEMBLE OPCODE POINTED TO BY Y. PLACE IN OUTPUT BUFFER POINTED TO BY U
                      (     mon09v37.asm):02051         ;*
F0DA 10BF9F7F         (     mon09v37.asm):02052         DISASS  STY     PTRSAV          SAVE INSTRUCTION POINTER
F0DE 3440             (     mon09v37.asm):02053                 PSHS    U               SAVE INST POINTER
F0E0 CC201A           (     mon09v37.asm):02054                 LDD     #$2000+26       GET SPACE+NUMBER OF BYTES TO CLEAR
F0E3 A7C0             (     mon09v37.asm):02055         DISA1   STA     ,U+             SET A SPACE
F0E5 5A               (     mon09v37.asm):02056                 DECB                    REDUCE COUNT
F0E6 26FB             (     mon09v37.asm):02057                 BNE     DISA1           CONTINUE
F0E8 8EF453           (     mon09v37.asm):02058                 LDX     #OPTAB1         POINT TO GENERAL OPCODE TABLE
F0EB A6A4             (     mon09v37.asm):02059                 LDA     ,Y              GET DATA BYTE
F0ED 8110             (     mon09v37.asm):02060                 CMPA    #$10            PREFIX BYTE?
F0EF 2709             (     mon09v37.asm):02061                 BEQ     SETOP2          NEW TABLE
F0F1 8111             (     mon09v37.asm):02062                 CMPA    #$11            OTHER PREFIX BYTE
F0F3 260A             (     mon09v37.asm):02063                 BNE     OPFIND          NO, IT'S OK
F0F5 8EF762           (     mon09v37.asm):02064                 LDX     #OPTAB3         POINT TO THIRD TABLE
F0F8 2003             (     mon09v37.asm):02065                 BRA     OPFNXT          OK
F0FA 8EF6ED           (     mon09v37.asm):02066         SETOP2  LDX     #OPTAB2         POINT TO SECOND OPERAND TABLE
F0FD 3121             (     mon09v37.asm):02067         OPFNXT  LEAY    1,Y             SKIP PREFIX BYTE
                      (     mon09v37.asm):02068         ;* LOOK FOR OPCODE IN TABLE
F0FF A680             (     mon09v37.asm):02069         OPFIND  LDA     ,X+             GET BYTE FROM TABLE
F101 A1A4             (     mon09v37.asm):02070                 CMPA    ,Y              IS THIS IT?
F103 270C             (     mon09v37.asm):02071                 BEQ     FNDOPC          FOUND IT
F105 81CF             (     mon09v37.asm):02072                 CMPA    #$CF            END OF TABLE?
F107 2704             (     mon09v37.asm):02073                 BEQ     BADOPC          IF SO, FAKE AN OPCODE
F109 3002             (     mon09v37.asm):02074                 LEAX    2,X             ADVANCE
F10B 20F2             (     mon09v37.asm):02075                 BRA     OPFIND          KEEP LOOKING
F10D 10BE9F7F         (     mon09v37.asm):02076         BADOPC  LDY     PTRSAV          INSURE WE ARE AT BEGINNING
                      (     mon09v37.asm):02077         ;* LOCATED OPCODE, GENERATE STRING
F111 3121             (     mon09v37.asm):02078         FNDOPC  LEAY    1,Y             SKIP TO POSTBYTE
F113 A680             (     mon09v37.asm):02079                 LDA     ,X+             GET DATA
F115 B79F81           (     mon09v37.asm):02080                 STA     INSTYP          SAVE FOR LATER
F118 E684             (     mon09v37.asm):02081                 LDB     ,X              GET INSTRUCTION NUMBER
F11A 8604             (     mon09v37.asm):02082                 LDA     #4              FOUR BYTES/ENTRY
F11C 3D               (     mon09v37.asm):02083                 MUL                     CALCULATE ENTRY OFFSET
F11D 8EF77D           (     mon09v37.asm):02084                 LDX     #ITABLE         POINT TO INSTRUCTION TABLE
F120 308B             (     mon09v37.asm):02085                 LEAX    D,X             ADVANCE TO IT
F122 C604             (     mon09v37.asm):02086                 LDB     #4              SIZE OF INSTRIUCTION FIELD
F124 A680             (     mon09v37.asm):02087         FNDO1   LDA     ,X+             GET CHAR
F126 A7C0             (     mon09v37.asm):02088                 STA     ,U+             SAVE IN OUTPUT
F128 5A               (     mon09v37.asm):02089                 DECB                    MOVE FOUR CHARACTERS
F129 26F9             (     mon09v37.asm):02090                 BNE     FNDO1           CONTINUE
F12B B69F81           (     mon09v37.asm):02091         FNDO2   LDA     INSTYP          GET TYPE BITS BACK
F12E 840F             (     mon09v37.asm):02092                 ANDA    #$0F            REMOVE CRAP
F130 10270173         (     mon09v37.asm):02093                 LBEQ    ENDIS           NO OPERANDS
                      (     mon09v37.asm):02094         ;* INSERT SPACES FOR OPERAND
F134 C620             (     mon09v37.asm):02095                 LDB     #' '            GET A SPACE
F136 E7C0             (     mon09v37.asm):02096                 STB     ,U+             SAVE IN OUTPUT
F138 E7C0             (     mon09v37.asm):02097                 STB     ,U+             SAVE IN OUTPUT
F13A 4A               (     mon09v37.asm):02098                 DECA                    IS 8 BIT IT IMMEDIATE?
F13B 2606             (     mon09v37.asm):02099                 BNE     IMM16           NO, TRY 16 BIT IMMEDIATE
                      (     mon09v37.asm):02100         ;* EIGHT BIT IMMEDIATE ADDRESSING OPERAND
F13D 8623             (     mon09v37.asm):02101         IMM8    LDA     #'#'            INDICATE IMMEDIATE
F13F A7C0             (     mon09v37.asm):02102                 STA     ,U+             SAVE IT
F141 2010             (     mon09v37.asm):02103                 BRA     OP8             QUIT
                      (     mon09v37.asm):02104         ;* SIXTEEN BIT IMMEDIATE ADDRESSING
F143 4A               (     mon09v37.asm):02105         IMM16   DECA                    IS THIS IT?
F144 2606             (     mon09v37.asm):02106                 BNE     DIRECT          NO, TRY DIRECT
F146 8623             (     mon09v37.asm):02107                 LDA     #'#'            INDICATE IMMEDIATE
F148 A7C0             (     mon09v37.asm):02108                 STA     ,U+             SAVE IT
F14A 2011             (     mon09v37.asm):02109                 BRA     OP16            16 BIT OPERAND
                      (     mon09v37.asm):02110         ;* DIRECT PAGE ADDRESSING
F14C 4A               (     mon09v37.asm):02111         DIRECT  DECA                    IS THIS IT?
F14D 260B             (     mon09v37.asm):02112                 BNE     EXTEND          NO, TRY EXTENDED
F14F 863C             (     mon09v37.asm):02113                 LDA     #'<'            INDICATE DIRECT
F151 A7C0             (     mon09v37.asm):02114                 STA     ,U+             SAVE IT
F153 A6A0             (     mon09v37.asm):02115         OP8     LDA     ,Y+             GET OPERAND BYTE
F155 170192           (     mon09v37.asm):02116                 LBSR    WRHEXB          OUTPUT
F158 2008             (     mon09v37.asm):02117                 BRA     ENDIS1          END GO HOME
                      (     mon09v37.asm):02118         ;* EXTENDED ADDRESSING
F15A 4A               (     mon09v37.asm):02119         EXTEND  DECA                    IS THIS IT?
F15B 2608             (     mon09v37.asm):02120                 BNE     INDEX           NO, TRY INDEXED
F15D ECA1             (     mon09v37.asm):02121         OP16    LDD     ,Y++            GET OPCODES
F15F 170190           (     mon09v37.asm):02122                 LBSR    WRHEXW          OUTPUT WORD
F162 160142           (     mon09v37.asm):02123         ENDIS1  LBRA    ENDIS           GO HOME
                      (     mon09v37.asm):02124         ;* INDEXED ADDRESSING MODES
F165 4A               (     mon09v37.asm):02125         INDEX   DECA                    IS IT INDEXED?
F166 102600CB         (     mon09v37.asm):02126                 LBNE    PSHPUL          NO, TRY PUSH OR PUL
F16A A6A0             (     mon09v37.asm):02127                 LDA     ,Y+             GET POST BYTE
F16C B79F82           (     mon09v37.asm):02128                 STA     POSBYT          SAVE FOR LATER
                      (     mon09v37.asm):02129         ;* TEST FOR FIVE BIT OFFSET
F16F 2B04             (     mon09v37.asm):02130                 BMI     NO5BO           NOT A FIVE BIT OFFSET
F171 841F             (     mon09v37.asm):02131                 ANDA    #$1F            CONVERT TO POSTBYTE
F173 2014             (     mon09v37.asm):02132                 BRA     EVLX1           INSERT REGISTER AND CONTINUE
                      (     mon09v37.asm):02133         ;* TEST FOR INDIRECT MODE
F175 8510             (     mon09v37.asm):02134         NO5BO   BITA    #$10            TEST FOR INDIRECT
F177 2704             (     mon09v37.asm):02135                 BEQ     NOIND           NOT INDIRECT
F179 C65B             (     mon09v37.asm):02136                 LDB     #'['            GET OPENING
F17B E7C0             (     mon09v37.asm):02137                 STB     ,U+             SAVE IN OUTPUT
                      (     mon09v37.asm):02138         ;* TEST FOR NO OFFSET
F17D 848F             (     mon09v37.asm):02139         NOIND   ANDA    #$8F            REMOVE REGS AND INDIRECT BIT
F17F 8184             (     mon09v37.asm):02140                 CMPA    #$84            NO OFFSET?
F181 272E             (     mon09v37.asm):02141                 BEQ     INSR1           INSERT REGISTER AND EXIT
                      (     mon09v37.asm):02142         ;* TEST FOR EIGHT BIT OFFSET
F183 8188             (     mon09v37.asm):02143                 CMPA    #$88            EIGHT BIT OFFSET
F185 2607             (     mon09v37.asm):02144                 BNE     EVL1            NO, TRY NEXT
F187 A6A0             (     mon09v37.asm):02145                 LDA     ,Y+             GET BYTE OFFSET
F189 17015E           (     mon09v37.asm):02146         EVLX1   LBSR    WRHEXB          OUTPUT
F18C 2023             (     mon09v37.asm):02147                 BRA     INSR1           CONTINUE
                      (     mon09v37.asm):02148         ;* TEST FOR 16 BIT OFFSET
F18E 8189             (     mon09v37.asm):02149         EVL1    CMPA    #$89            16 BIT OFSET?
F190 2607             (     mon09v37.asm):02150                 BNE     EVL2            NO, TRY NEXT
F192 ECA1             (     mon09v37.asm):02151                 LDD     ,Y++            GET OPERAND
F194 17015B           (     mon09v37.asm):02152                 LBSR    WRHEXW          OUTPUT
F197 2018             (     mon09v37.asm):02153                 BRA     INSR1           INSERT REGISTER
                      (     mon09v37.asm):02154         ;* TEST FOR A ACCUMULATOR OFFSET
F199 8186             (     mon09v37.asm):02155         EVL2    CMPA    #$86            IS IT 'A' OFFSET?
F19B 2604             (     mon09v37.asm):02156                 BNE     EVL3            NO, TRY NEXT
F19D 8641             (     mon09v37.asm):02157                 LDA     #'A'            GET ACCA
F19F 200E             (     mon09v37.asm):02158                 BRA     SAIREG          GO HOME
                      (     mon09v37.asm):02159         ;* TEST FOR B ACCUMULATOR OFFSET
F1A1 8185             (     mon09v37.asm):02160         EVL3    CMPA    #$85            IS IT 'B' OFFSET?
F1A3 2604             (     mon09v37.asm):02161                 BNE     EVL4            NO, TRY NEXT
F1A5 8642             (     mon09v37.asm):02162                 LDA     #'B'            GET B
F1A7 2006             (     mon09v37.asm):02163                 BRA     SAIREG          GO HOME
                      (     mon09v37.asm):02164         ;* TEST FRO 'D' ACCUMULATOR OFFSET
F1A9 818B             (     mon09v37.asm):02165         EVL4    CMPA    #$8B            D OFFSET?
F1AB 2606             (     mon09v37.asm):02166                 BNE     EVL5            NO, TRY NEXT
F1AD 8644             (     mon09v37.asm):02167                 LDA     #'D'            GET D REGISTER
F1AF A7C0             (     mon09v37.asm):02168         SAIREG  STA     ,U+             SAVE IT
F1B1 202C             (     mon09v37.asm):02169         INSR1   BRA     INSREG
                      (     mon09v37.asm):02170         ;* TEST FOR EXTENDED INDIRECT
F1B3 818F             (     mon09v37.asm):02171         EVL5    CMPA    #$8F            EXTENDED INDIRECT?
F1B5 2607             (     mon09v37.asm):02172                 BNE     EVL6            NO, TRY NEXT
F1B7 ECA1             (     mon09v37.asm):02173                 LDD     ,Y++            GET OFFSET
F1B9 170136           (     mon09v37.asm):02174                 LBSR    WRHEXW          OUTPUT
F1BC 2054             (     mon09v37.asm):02175                 BRA     EVLFIN          AND CONTINUE
                      (     mon09v37.asm):02176         ;* TEST FOR PC OFFSET, 8 BIT
F1BE 818C             (     mon09v37.asm):02177         EVL6    CMPA    #$8C            EIGHT BIT PC OFFSET?
F1C0 2607             (     mon09v37.asm):02178                 BNE     EVL7            NO, TRY NEXT
F1C2 A6A0             (     mon09v37.asm):02179                 LDA     ,Y+             GET OFFSET
F1C4 170123           (     mon09v37.asm):02180                 LBSR    WRHEXB          OUTPUT
F1C7 2009             (     mon09v37.asm):02181                 BRA     WRPCRG          OUTPUT PC REGISTER
                      (     mon09v37.asm):02182         ;* TEST FOR PC OFFSET, 16 BIT
F1C9 818D             (     mon09v37.asm):02183         EVL7    CMPA    #$8D            PC OFFSET?
F1CB 2612             (     mon09v37.asm):02184                 BNE     INSREG          NO, INSERT REGISTER
F1CD ECA1             (     mon09v37.asm):02185                 LDD     ,Y++            GET OFFSET
F1CF 170120           (     mon09v37.asm):02186                 LBSR    WRHEXW          OUTPUT
F1D2 8EF41E           (     mon09v37.asm):02187         WRPCRG  LDX     #PCRG           POINT TO STRING
F1D5 A680             (     mon09v37.asm):02188         WRPR1   LDA     ,X+             GET CHAR
F1D7 A7C0             (     mon09v37.asm):02189                 STA     ,U+             SAVE
F1D9 8152             (     mon09v37.asm):02190                 CMPA    #'R'            END?
F1DB 26F8             (     mon09v37.asm):02191                 BNE     WRPR1           NO, CONTINUE
F1DD 2033             (     mon09v37.asm):02192                 BRA     EVLFIN          END IT NOW
                      (     mon09v37.asm):02193         ;* INSERT REGISTER BITS
F1DF 862C             (     mon09v37.asm):02194         INSREG  LDA     #','            GET COMMA
F1E1 A7C0             (     mon09v37.asm):02195                 STA     ,U+             SAVE IT
F1E3 B69F82           (     mon09v37.asm):02196                 LDA     POSBYT          GET POSTBYTE
F1E6 C62D             (     mon09v37.asm):02197                 LDB     #'-'            GET MINUS
F1E8 848F             (     mon09v37.asm):02198                 ANDA    #$8F            REMOVE CRAP
F1EA 8182             (     mon09v37.asm):02199                 CMPA    #$82            DECREMENT BY ONE?
F1EC 2706             (     mon09v37.asm):02200                 BEQ     DEC1            DECREMENT BY ONE
F1EE 8183             (     mon09v37.asm):02201                 CMPA    #$83            DECREMENT BY TWO?
F1F0 2604             (     mon09v37.asm):02202                 BNE     NODEC           NO, DON'T DEC
F1F2 E7C0             (     mon09v37.asm):02203                 STB     ,U+             SAVE
F1F4 E7C0             (     mon09v37.asm):02204         DEC1    STB     ,U+             AGAIN
F1F6 B69F82           (     mon09v37.asm):02205         NODEC   LDA     POSBYT          GET POSTBYTE
F1F9 44               (     mon09v37.asm):02206                 LSRA                    SHIFT
F1FA 44               (     mon09v37.asm):02207                 LSRA                    REGISTER
F1FB 44               (     mon09v37.asm):02208                 LSRA                    BITS
F1FC 44               (     mon09v37.asm):02209                 LSRA                    INTO
F1FD 44               (     mon09v37.asm):02210                 LSRA                    BOTTOM
F1FE C658             (     mon09v37.asm):02211                 LDB     #'X'            GET 'X'
F200 8403             (     mon09v37.asm):02212                 ANDA    #$03            REMOVE CRAP
F202 270C             (     mon09v37.asm):02213                 BEQ     EVLEND          ITS 'X'
F204 C659             (     mon09v37.asm):02214                 LDB     #'Y'            GET 'Y'
F206 4A               (     mon09v37.asm):02215                 DECA                    TEST FOR 'Y'
F207 2707             (     mon09v37.asm):02216                 BEQ     EVLEND          YES
F209 C655             (     mon09v37.asm):02217                 LDB     #'U'            GET 'U'
F20B 4A               (     mon09v37.asm):02218                 DECA                    TEST
F20C 2702             (     mon09v37.asm):02219                 BEQ     EVLEND          ITS 'U'
F20E C653             (     mon09v37.asm):02220                 LDB     #'S'            MUST BE 'S'
F210 E7C0             (     mon09v37.asm):02221         EVLEND  STB     ,U+             SAVE IN OUTPUT
F212 B69F82           (     mon09v37.asm):02222         EVLFIN  LDA     POSBYT          GET POSTBYTE
F215 C62B             (     mon09v37.asm):02223                 LDB     #'+'            GET PLUS
F217 848F             (     mon09v37.asm):02224                 ANDA    #$8F            GET TYPE
F219 8180             (     mon09v37.asm):02225                 CMPA    #$80            IS IT INC BY ONE
F21B 2706             (     mon09v37.asm):02226                 BEQ     INC1            IF SO, WE HAVE IT
F21D 8181             (     mon09v37.asm):02227                 CMPA    #$81            INC BY TWO?
F21F 2604             (     mon09v37.asm):02228                 BNE     NOINC           NO INCREMENT
F221 E7C0             (     mon09v37.asm):02229                 STB     ,U+             SAVE ONE
F223 E7C0             (     mon09v37.asm):02230         INC1    STB     ,U+             SAVE TWO
F225 B69F82           (     mon09v37.asm):02231         NOINC   LDA     POSBYT          GET POSTBYTE
F228 2A08             (     mon09v37.asm):02232                 BPL     NOIND1          FIVE BIT OFFSET
F22A 8510             (     mon09v37.asm):02233                 BITA    #$10            INDIRECT?
F22C 2704             (     mon09v37.asm):02234                 BEQ     NOIND1          NO INDIRECT
F22E 865D             (     mon09v37.asm):02235                 LDA     #']'            CLOSING BRACE
F230 A7C0             (     mon09v37.asm):02236                 STA     ,U+             SAVE IT
F232 160072           (     mon09v37.asm):02237         NOIND1  LBRA    ENDIS           END IT
                      (     mon09v37.asm):02238         ;* PULS OR PULL OPCODES
F235 4A               (     mon09v37.asm):02239         PSHPUL  DECA                    IS IT PUSH OR PULL?
F236 2635             (     mon09v37.asm):02240                 BNE     TFREXG          NO, TRY TRANSFER OR EXCHANGE
F238 A6A0             (     mon09v37.asm):02241                 LDA     ,Y+             GET POSTBYTE
F23A 8EF442           (     mon09v37.asm):02242                 LDX     #PSHTAB         GET 'CC'
F23D 44               (     mon09v37.asm):02243         PSH1    LSRA                    SHIFT OUT BITS
F23E 2425             (     mon09v37.asm):02244                 BCC     PSHNXT          SKIP THIS ONE
F240 3406             (     mon09v37.asm):02245                 PSHS    A,B             SAVE REGS
F242 EC81             (     mon09v37.asm):02246                 LDD     ,X++            GET DATA
F244 8155             (     mon09v37.asm):02247                 CMPA    #'U'            SAVEING U REGISTER
F246 2607             (     mon09v37.asm):02248                 BNE     PSH4            NO, IT'S OK
F248 7D9F81           (     mon09v37.asm):02249                 TST     INSTYP          SPECIAL CASE
F24B 2A02             (     mon09v37.asm):02250                 BPL     PSH4            OK
F24D 8653             (     mon09v37.asm):02251                 LDA     #'S'            CONVERT
F24F A7C0             (     mon09v37.asm):02252         PSH4    STA     ,U+             SAVE IT
F251 5D               (     mon09v37.asm):02253                 TSTB                    MORE?
F252 2702             (     mon09v37.asm):02254                 BEQ     PSH2            NO, SKIP IT
F254 E7C0             (     mon09v37.asm):02255                 STB     ,U+             SAVE
F256 3506             (     mon09v37.asm):02256         PSH2    PULS    A,B             RESTORE REGS
F258 4D               (     mon09v37.asm):02257                 TSTA                    MORE BITS?
F259 270F             (     mon09v37.asm):02258                 BEQ     PSH3            NO, QUIT
F25B 3402             (     mon09v37.asm):02259                 PSHS    A               RESAVE
F25D 862C             (     mon09v37.asm):02260                 LDA     #','            GET COMMA
F25F A7C0             (     mon09v37.asm):02261                 STA     ,U+             SAVE
F261 3502             (     mon09v37.asm):02262                 PULS    A               GET IT BACK
F263 20D8             (     mon09v37.asm):02263                 BRA     PSH1            CONTINUE
F265 3002             (     mon09v37.asm):02264         PSHNXT  LEAX    2,X             ADVANCE
F267 4D               (     mon09v37.asm):02265                 TSTA                    ARE WE OK
F268 26D3             (     mon09v37.asm):02266                 BNE     PSH1            KEEP TRYING
F26A 16003A           (     mon09v37.asm):02267         PSH3    LBRA    ENDIS           DONE
                      (     mon09v37.asm):02268         ;* TRANSFER AND EXCHANGE POSTBYTE OPCODES
F26D 4A               (     mon09v37.asm):02269         TFREXG  DECA                    TRANSFER OR EXCHANGE?
F26E 2623             (     mon09v37.asm):02270                 BNE     SBRAN           TRY SHORT BRANCH
F270 A6A4             (     mon09v37.asm):02271                 LDA     ,Y              GET POSTBYTE
F272 44               (     mon09v37.asm):02272                 LSRA                    SHIFT
F273 44               (     mon09v37.asm):02273                 LSRA                    INTO
F274 44               (     mon09v37.asm):02274                 LSRA                    LOW
F275 44               (     mon09v37.asm):02275                 LSRA                    NIBBLE
F276 8D0B             (     mon09v37.asm):02276                 BSR     TFRREG          GET REGISTER
F278 862C             (     mon09v37.asm):02277                 LDA     #','            SEPERATOR
F27A A7C0             (     mon09v37.asm):02278                 STA     ,U+             SAVE
F27C A6A0             (     mon09v37.asm):02279                 LDA     ,Y+             GET POSTBYTE AGAIN
F27E 8D03             (     mon09v37.asm):02280                 BSR     TFRREG          PLACE IT
F280 160024           (     mon09v37.asm):02281                 LBRA    ENDIS           GO HOME
                      (     mon09v37.asm):02282         ;* CALCULATE TRANSFER REGISTER
F283 840F             (     mon09v37.asm):02283         TFRREG  ANDA    #$0F            REMOVE HIGH CRAP
F285 48               (     mon09v37.asm):02284                 LSLA                    MULTIPLY BY TWO
F286 8EF422           (     mon09v37.asm):02285                 LDX     #REGTAB         POINT TO TABLE
F289 EC86             (     mon09v37.asm):02286                 LDD     A,X             GET REGISTER VALUE
F28B A7C0             (     mon09v37.asm):02287                 STA     ,U+             SAVE IT
F28D 5D               (     mon09v37.asm):02288                 TSTB                    SECOND BYTE?
F28E 2702             (     mon09v37.asm):02289                 BEQ     TFRET           NO, SKIP IT
F290 E7C0             (     mon09v37.asm):02290                 STB     ,U+             SAVE IT
F292 39               (     mon09v37.asm):02291         TFRET   RTS
                      (     mon09v37.asm):02292         ;* SHORT BRANCH
F293 4A               (     mon09v37.asm):02293         SBRAN   DECA                    SHORT BRANCH
F294 2608             (     mon09v37.asm):02294                 BNE     LBRAN           NO, TRY LONG BRANCH
F296 E6A0             (     mon09v37.asm):02295                 LDB     ,Y+             GET OPERATOR
F298 30A5             (     mon09v37.asm):02296                 LEAX    B,Y             GET NEW ADDRESS
F29A 1F10             (     mon09v37.asm):02297                 TFR     X,D             COPY
F29C 2006             (     mon09v37.asm):02298                 BRA     SAVADR          FINISH
                      (     mon09v37.asm):02299         ;* LONG BRANCH
F29E                  (     mon09v37.asm):02300         LBRAN
F29E ECA1             (     mon09v37.asm):02301                 LDD     ,Y++            GET OPERAND
F2A0 3420             (     mon09v37.asm):02302                 PSHS    Y               SAVE Y
F2A2 E3E1             (     mon09v37.asm):02303                 ADDD    ,S++            ADD OFFSET TO REG
F2A4                  (     mon09v37.asm):02304         SAVADR
F2A4 17004B           (     mon09v37.asm):02305                 LBSR    WRHEXW          OUTPUT WORD.
F2A7                  (     mon09v37.asm):02306         ENDIS
F2A7 86FF             (     mon09v37.asm):02307                 LDA     #$FF            LINE TERMINATOR
F2A9 A7C4             (     mon09v37.asm):02308                 STA     ,U              SAVE IT
                      (     mon09v37.asm):02309         ;* INSERT ADDRESS/BYTE DATA
F2AB EEE4             (     mon09v37.asm):02310                 LDU     ,S              RESTORE U REGISTER
F2AD 3420             (     mon09v37.asm):02311                 PSHS    Y               SAVE POINTER TO END
F2AF BE9F7F           (     mon09v37.asm):02312                 LDX     PTRSAV          POINT TO STARTING ADDRESS
F2B2 1F10             (     mon09v37.asm):02313                 TFR     X,D             COPY
F2B4 170045           (     mon09v37.asm):02314                 LBSR    WRHEX           OUTPUT
F2B7 1F98             (     mon09v37.asm):02315                 TFR     B,A             COPY
F2B9 170040           (     mon09v37.asm):02316                 LBSR    WRHEX           OUTPUT
F2BC 5F               (     mon09v37.asm):02317                 CLRB                    START WITH ZERO
F2BD                  (     mon09v37.asm):02318         END1
F2BD ACE4             (     mon09v37.asm):02319                 CMPX    ,S              ARE WE AT END?
F2BF 240A             (     mon09v37.asm):02320                 BHS     END2            IF SO, QUIT
F2C1 5C               (     mon09v37.asm):02321                 INCB                    ADVANCE
F2C2 3341             (     mon09v37.asm):02322                 LEAU    1,U             ADVANCE
F2C4 A680             (     mon09v37.asm):02323                 LDA     ,X+             GET BYTE
F2C6 170033           (     mon09v37.asm):02324                 LBSR    WRHEX           OUTPUT
F2C9 20F2             (     mon09v37.asm):02325                 BRA     END1            CONTINUE
F2CB                  (     mon09v37.asm):02326         END2
F2CB 3262             (     mon09v37.asm):02327                 LEAS    2,S             RESTORE STACK
F2CD EEE4             (     mon09v37.asm):02328                 LDU     ,S              RESTORE U REGISTER
F2CF 33C814           (     mon09v37.asm):02329                 LEAU    20,U            ADVANCE TO TEXT FIELD
F2D2 BE9F7F           (     mon09v37.asm):02330                 LDX     PTRSAV          GET POINTER BACK
F2D5                  (     mon09v37.asm):02331         END3
F2D5 5A               (     mon09v37.asm):02332                 DECB                    REDUCE COUNT
F2D6 2B10             (     mon09v37.asm):02333                 BMI     END4            CONTINUE
F2D8 A680             (     mon09v37.asm):02334                 LDA     ,X+             GO IT AGAIN
F2DA 8120             (     mon09v37.asm):02335                 CMPA    #' '            < SPACE?
F2DC 2504             (     mon09v37.asm):02336                 BLO     END5            YES
F2DE 817F             (     mon09v37.asm):02337                 CMPA    #$7F            > 7F?
F2E0 2502             (     mon09v37.asm):02338                 BLO     END6            OK
F2E2                  (     mon09v37.asm):02339         END5
F2E2 862E             (     mon09v37.asm):02340                 LDA     #'.'            CONVERT TO DOT
F2E4                  (     mon09v37.asm):02341         END6
F2E4 A7C0             (     mon09v37.asm):02342                 STA     ,U+             SAVE
F2E6 20ED             (     mon09v37.asm):02343                 BRA     END3
F2E8                  (     mon09v37.asm):02344         END4
F2E8 35C0             (     mon09v37.asm):02345                 PULS    U,PC            GO HOME
                      (     mon09v37.asm):02346         
                      (     mon09v37.asm):02347         ;*
                      (     mon09v37.asm):02348         ;* SUBROUTINES
                      (     mon09v37.asm):02349         ;*
F2EA                  (     mon09v37.asm):02350         WRHEXB
F2EA 3402             (     mon09v37.asm):02351                 PSHS    A               SAVE IT
F2EC 8624             (     mon09v37.asm):02352                 LDA     #'$'            INDICATE HEX
F2EE A7C0             (     mon09v37.asm):02353                 STA     ,U+             SAVE
F2F0 2008             (     mon09v37.asm):02354                 BRA     WRHEX1          CONTINUE
F2F2                  (     mon09v37.asm):02355         WRHEXW
F2F2 3404             (     mon09v37.asm):02356                 PSHS    B               SAVE B
F2F4 C624             (     mon09v37.asm):02357                 LDB     #'$'            INDICATE HEX
F2F6 E7C0             (     mon09v37.asm):02358                 STB     ,U+             SAVE IT
F2F8 8D02             (     mon09v37.asm):02359                 BSR     WRHEX           OUTPUT
F2FA                  (     mon09v37.asm):02360         WRHEX1
F2FA 3502             (     mon09v37.asm):02361                 PULS    A               RESTORE
F2FC                  (     mon09v37.asm):02362         WRHEX
F2FC 3402             (     mon09v37.asm):02363                 PSHS    A               SAVE IT
F2FE 44               (     mon09v37.asm):02364                 LSRA                    SHIFT
F2FF 44               (     mon09v37.asm):02365                 LSRA                    HIGH BYTE
F300 44               (     mon09v37.asm):02366                 LSRA                    INTO
F301 44               (     mon09v37.asm):02367                 LSRA                    LOW FOR OUTPUT
F302 8D02             (     mon09v37.asm):02368                 BSR     WRHEXN          OUTPUT NIBBLE
F304 3502             (     mon09v37.asm):02369                 PULS    A               RETORE
F306                  (     mon09v37.asm):02370         WRHEXN
F306 840F             (     mon09v37.asm):02371                 ANDA    #$0F            REMOVE CRAP
F308 8B30             (     mon09v37.asm):02372                 ADDA    #$30            CONVERT
F30A 8139             (     mon09v37.asm):02373                 CMPA    #$39            OK?
F30C 2302             (     mon09v37.asm):02374                 BLS     WRNOK           OK
F30E 8B07             (     mon09v37.asm):02375                 ADDA    #7              CONVERT
F310                  (     mon09v37.asm):02376         WRNOK
F310 A7C0             (     mon09v37.asm):02377                 STA             ,U+             SAVE IT
F312 39               (     mon09v37.asm):02378                 RTS
                      (     mon09v37.asm):02379         
                      (     mon09v37.asm):02380         ;MODS BY JQ
                      (     mon09v37.asm):02381         ;*
                      (     mon09v37.asm):02382         ;* 6309 ILLOP/DIV0 HANDLER
                      (     mon09v37.asm):02383         ;*
                      (     mon09v37.asm):02384          IFNE JQ_ILLOP  USE JQ ILLOP ENHANCEMENTS
     0080             (     mon09v37.asm):02385         MD_DIV0         EQU     $80                     MD.7 = DIV0 FLAG
     0040             (     mon09v37.asm):02386         MD_ILOP         EQU     $40                     MD.6 = ILLOP FLAG
                      (     mon09v37.asm):02387         
F313                  (     mon09v37.asm):02388         ILOPHND
F313 8E9F6E           (     mon09v37.asm):02389                 LDX             #SAVCC                  POINT TO START OF SAVED REGS
F316 C60C             (     mon09v37.asm):02390                 LDB             #12                             MOVE 12 BYTES
F318                  (     mon09v37.asm):02391         ILOPH1
F318 A6E0             (     mon09v37.asm):02392                 LDA             ,S+                             GET BYTE
F31A A780             (     mon09v37.asm):02393                 STA             ,X+                             SAVE
F31C 5A               (     mon09v37.asm):02394                 DECB                                    DECREMENT COUNT
F31D 26F9             (     mon09v37.asm):02395                 BNE             ILOPH1                  DO THEM ALL
F31F 10FF9F7A         (     mon09v37.asm):02396                 STS             SAVS                    SAVE STACK POINTER
                      (     mon09v37.asm):02397         
                      (     mon09v37.asm):02398         ;       DETERMINE TRAP SOURCE
F323 8EF36A           (     mon09v37.asm):02399                 LDX             #MSG_DIV0               DIV0 MESSAGE POINTER
F326 113C80           (     mon09v37.asm):02400                 BITMD   #MD_DIV0                Trap entry - see if Division by 0 TRAP
F329 260B             (     mon09v37.asm):02401                 BNE             ILOPH3                  DIV0 TRAP
                      (     mon09v37.asm):02402         
F32B                  (     mon09v37.asm):02403         ILOPH2
F32B 8EF355           (     mon09v37.asm):02404                 LDX             #MSG_ILLOP              ILLOP MESSAGE POINTER
F32E 113C40           (     mon09v37.asm):02405                 BITMD   #MD_ILOP                Trap entry - see if ILLOP TRAP
F331 2603             (     mon09v37.asm):02406                 BNE             ILOPH3                  illegal instruction TRAP
F333 8EF33F           (     mon09v37.asm):02407                 LDX             #MSG_TRAPERR    UNKNOWN TRAP SOURCE
                      (     mon09v37.asm):02408         
F336                  (     mon09v37.asm):02409         ILOPH3
F336 BDE461           (     mon09v37.asm):02410                 JSR             MON09_WRLIN             EMIT THE STRING
F339 17F585           (     mon09v37.asm):02411                 LBSR    DISREG                  DISPLAY REGISTERS
F33C 16F2D9           (     mon09v37.asm):02412                 LBRA    MAIN                    AND DO PROMPT
                      (     mon09v37.asm):02413         
F33F                  (     mon09v37.asm):02414         MSG_TRAPERR
F33F 2A2A2A20554B4E4F (     mon09v37.asm):02415                 FCC     '*** UKNOWN Trap ***'
     574E205472617020
     2A2A2A
F352 0D0A00           (     mon09v37.asm):02416                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02417         
F355                  (     mon09v37.asm):02418         MSG_ILLOP
F355 2A2A2A20494C4C4F (     mon09v37.asm):02419                 FCC     '*** ILLOP Trap ***'
     502054726170202A
     2A2A
F367 0D0A00           (     mon09v37.asm):02420                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02421         
F36A                  (     mon09v37.asm):02422         MSG_DIV0
F36A 2A2A2A2044495630 (     mon09v37.asm):02423                 FCC     '*** DIV0 Trap ***'
     2054726170202A2A
     2A
F37B 0D0A00           (     mon09v37.asm):02424                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02425          ENDC           USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):02426         ;
                      (     mon09v37.asm):02427         ;*
                      (     mon09v37.asm):02428         ;* NMI HANDLER
                      (     mon09v37.asm):02429         ;*
F37E                  (     mon09v37.asm):02430         NMIHND
F37E 8E9F6E           (     mon09v37.asm):02431                 LDX     #SAVCC          POINT TO START OF SAVED REGS
F381 C60C             (     mon09v37.asm):02432                 LDB     #12             MOVE 12 BYTES
F383                  (     mon09v37.asm):02433         NMIH1
F383 A6E0             (     mon09v37.asm):02434                 LDA     ,S+             GET BYTE
F385 A780             (     mon09v37.asm):02435                 STA     ,X+             SAVE
F387 5A               (     mon09v37.asm):02436                 DECB                    DECREMENT COUNT
F388 26F9             (     mon09v37.asm):02437                 BNE     NMIH1           DO THEM ALL
F38A 10FF9F7A         (     mon09v37.asm):02438                 STS     SAVS            SAVE STACK POINTER
F38E 17FA45           (     mon09v37.asm):02439                 LBSR    WRMSG           DISPLAY MESSAGE
F391 2A2A2A204E4D4920 (     mon09v37.asm):02440                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F3A6 FF               (     mon09v37.asm):02441                 FCB     $FF             NEW LINE
F3A7 205C             (     mon09v37.asm):02442                 BRA     BRKREG          DISPLAY REGISTERS
                      (     mon09v37.asm):02443         
                      (     mon09v37.asm):02444         ;*
                      (     mon09v37.asm):02445         ;* SWI HANDLER
                      (     mon09v37.asm):02446         ;*
F3A9                  (     mon09v37.asm):02447         SWIHND
F3A9 108E9F83         (     mon09v37.asm):02448                 LDY     #BRKTAB         POINT TO BREAKPOINT TABLE
F3AD AE6A             (     mon09v37.asm):02449                 LDX     10,S            GET STORED PC
F3AF 301F             (     mon09v37.asm):02450                 LEAX    -1,X            BACKUP TO BREAKPOINT ADDRESS
F3B1 C608             (     mon09v37.asm):02451                 LDB     #8              CHECK EIGHT BREAKPOINTS
F3B3                  (     mon09v37.asm):02452         SWIHN1
F3B3 ACA4             (     mon09v37.asm):02453                 CMPX    ,Y              IS THIS IT?
F3B5 2710             (     mon09v37.asm):02454                 BEQ     SWIHN2          YES
F3B7 3123             (     mon09v37.asm):02455                 LEAY    3,Y             SKIP OPCODE
F3B9 5A               (     mon09v37.asm):02456                 DECB                    REDUCE COUNT
F3BA 26F7             (     mon09v37.asm):02457                 BNE     SWIHN1          CONTINUE
F3BC E662             (     mon09v37.asm):02458                 LDB     2,S                     RESTORE B.
F3BE AE64             (     mon09v37.asm):02459                 LDX     4,S                     RESTORE X.
F3C0 10AE66           (     mon09v37.asm):02460                 LDY     6,S                     RESTORE Y.
F3C3 6E9F9F5B         (     mon09v37.asm):02461                 JMP     [SWIADR]        NOT A BREAKPOINT, EXECUTE SWI HANDLER
F3C7                  (     mon09v37.asm):02462         SWIHN2
F3C7 F79F81           (     mon09v37.asm):02463                 STB     INSTYP          SAVE BREAKPOINT NUMBER
F3CA 8E9F6E           (     mon09v37.asm):02464                 LDX     #SAVCC          POINT TO START OF SAVED REGS
F3CD C60A             (     mon09v37.asm):02465                 LDB     #10                     MOVE 10
F3CF                  (     mon09v37.asm):02466         SWIHN25
F3CF A6E0             (     mon09v37.asm):02467                 LDA     ,S+                     GET BYTE
F3D1 A780             (     mon09v37.asm):02468                 STA     ,X+                     SAVE
F3D3 5A               (     mon09v37.asm):02469                 DECB                            DECREMENT COUNT
F3D4 26F9             (     mon09v37.asm):02470                 BNE     SWIHN25         DO THEM ALL
F3D6 3510             (     mon09v37.asm):02471                 PULS    X                       GET PC
F3D8 301F             (     mon09v37.asm):02472                 LEAX    -1,X            SET BACK TO REAL PC
F3DA BF9F78           (     mon09v37.asm):02473                 STX     SAVPC           SAVED PC
F3DD 10FF9F7A         (     mon09v37.asm):02474                 STS     SAVS            SAVE STACK POINTER
F3E1 17F9F2           (     mon09v37.asm):02475                 LBSR    WRMSG           DISPLAY MESSAGE
F3E4 2A2A2A2042726561 (     mon09v37.asm):02476                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
F3F5 8638             (     mon09v37.asm):02477                 LDA     #$38            GET NUMBER, PLUS ASCII CONVERT
F3F7 B09F81           (     mon09v37.asm):02478                 SUBA    INSTYP          CONVERT TO PROPER DIGIT
F3FA 17FA25           (     mon09v37.asm):02479                 LBSR    PUTCHR          DISPLAY
F3FD 17F9D6           (     mon09v37.asm):02480                 LBSR    WRMSG           OUTPUT MESSAGE
F400 202A2A2A         (     mon09v37.asm):02481                 FCC     ' ***'          TRAILING MESSAGE
F404 FF               (     mon09v37.asm):02482                 FCB     $FF                     NEW LINE
F405                  (     mon09v37.asm):02483         BRKREG
F405 17F4B9           (     mon09v37.asm):02484                 LBSR    DISREG          DISPLAY
F408                  (     mon09v37.asm):02485         BRKRES
F408 8E9F83           (     mon09v37.asm):02486                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
F40B C608             (     mon09v37.asm):02487                 LDB     #8                      DO IT EIGHT TIMES
F40D                  (     mon09v37.asm):02488         SWIHN3
F40D 10AE81           (     mon09v37.asm):02489                 LDY     ,X++            GET REG
F410 2704             (     mon09v37.asm):02490                 BEQ     SWIHN4          NO BRK, NEXT
F412 A684             (     mon09v37.asm):02491                 LDA     ,X              GET OPCODE
F414 A7A4             (     mon09v37.asm):02492                 STA     ,Y              REPLACE IN RAM
F416                  (     mon09v37.asm):02493         SWIHN4
F416 3001             (     mon09v37.asm):02494                 LEAX    1,X             SKIP OPCODE
F418 5A               (     mon09v37.asm):02495                 DECB                    REDUCE COUNT
F419 26F2             (     mon09v37.asm):02496                 BNE     SWIHN3          GO AGAIN
F41B 16F1FA           (     mon09v37.asm):02497                 LBRA    MAIN            DO PROMPT
                      (     mon09v37.asm):02498         
                      (     mon09v37.asm):02499         ;*
                      (     mon09v37.asm):02500         ;* CONSTANTS
F41E                  (     mon09v37.asm):02501         PCRG
F41E 2C504352         (     mon09v37.asm):02502                 FCC     ',PCR'
                      (     mon09v37.asm):02503         
                      (     mon09v37.asm):02504         ;*
                      (     mon09v37.asm):02505         ;* TRANSFER/EXCHANGE REGISTER TABLE
                      (     mon09v37.asm):02506         ;*
F422                  (     mon09v37.asm):02507         REGTAB
F422 4400             (     mon09v37.asm):02508                 FCN     'D'             0
F424 5800             (     mon09v37.asm):02509                 FCN     'X'             1
F426 5900             (     mon09v37.asm):02510                 FCN     'Y'             2
F428 5500             (     mon09v37.asm):02511                 FCN     'U'             3
F42A 5300             (     mon09v37.asm):02512                 FCN     'S'             4
F42C 5043             (     mon09v37.asm):02513                 FCC     'PC'            5
F42E 3F00             (     mon09v37.asm):02514                 FCN     '?'             6
F430 3F00             (     mon09v37.asm):02515                 FCN     '?'             7
F432 4100             (     mon09v37.asm):02516                 FCN     'A'             8
F434 4200             (     mon09v37.asm):02517                 FCN     'B'             9
F436 4343             (     mon09v37.asm):02518                 FCC     'CC'            A
F438 4450             (     mon09v37.asm):02519                 FCC     'DP'            B
F43A 3F00             (     mon09v37.asm):02520                 FCN     '?'             C
F43C 3F00             (     mon09v37.asm):02521                 FCN     '?'             D
F43E 3F00             (     mon09v37.asm):02522                 FCN     '?'             E
F440 3F00             (     mon09v37.asm):02523                 FCN     '?'             F
                      (     mon09v37.asm):02524         
                      (     mon09v37.asm):02525         ;*
                      (     mon09v37.asm):02526         ;* PUSH/PULL REGISTER TABLE
                      (     mon09v37.asm):02527         ;*
F442                  (     mon09v37.asm):02528         PSHTAB
F442 4343             (     mon09v37.asm):02529                 FCC     'CC'
F444 4100             (     mon09v37.asm):02530                 FCN     'A'
F446 4200             (     mon09v37.asm):02531                 FCN     'B'
F448 4450             (     mon09v37.asm):02532                 FCC     'DP'
F44A 5800             (     mon09v37.asm):02533                 FCN     'X'
F44C 5900             (     mon09v37.asm):02534                 FCN     'Y'
F44E 5500             (     mon09v37.asm):02535                 FCN     'U'
F450 504300           (     mon09v37.asm):02536                 FCN     'PC'
                      (     mon09v37.asm):02537         
                      (     mon09v37.asm):02538         ;*
                      (     mon09v37.asm):02539         ;* OPCODE TABLE, OPCODE BYTE, TYPE BYTE, TEXT BYTE
                      (     mon09v37.asm):02540         ;*
F453                  (     mon09v37.asm):02541         OPTAB1
F453 860101           (     mon09v37.asm):02542                 FCB     $86,1,1         'LDA' INSTRUCTIONS
F456 960301           (     mon09v37.asm):02543                 FCB     $96,3,1
F459 A60501           (     mon09v37.asm):02544                 FCB     $A6,5,1
F45C B60401           (     mon09v37.asm):02545                 FCB     $B6,4,1
F45F C60102           (     mon09v37.asm):02546                 FCB     $C6,1,2         'LDB' INSTRUCTIONS
F462 D60302           (     mon09v37.asm):02547                 FCB     $D6,3,2
F465 E60502           (     mon09v37.asm):02548                 FCB     $E6,5,2
F468 F60402           (     mon09v37.asm):02549                 FCB     $F6,4,2
F46B CC0203           (     mon09v37.asm):02550                 FCB     $CC,2,3         'LDD' INSTRUCTIONS
F46E DC0303           (     mon09v37.asm):02551                 FCB     $DC,3,3
F471 EC0503           (     mon09v37.asm):02552                 FCB     $EC,5,3
F474 FC0403           (     mon09v37.asm):02553                 FCB     $FC,4,3
F477 CE0204           (     mon09v37.asm):02554                 FCB     $CE,2,4         'LDU' INSTRUCTIONS
F47A DE0304           (     mon09v37.asm):02555                 FCB     $DE,3,4
F47D EE0504           (     mon09v37.asm):02556                 FCB     $EE,5,4
F480 FE0404           (     mon09v37.asm):02557                 FCB     $FE,4,4
F483 8E0205           (     mon09v37.asm):02558                 FCB     $8E,2,5         'LDX' INSTRUCTIONS
F486 9E0305           (     mon09v37.asm):02559                 FCB     $9E,3,5
F489 AE0505           (     mon09v37.asm):02560                 FCB     $AE,5,5
F48C BE0405           (     mon09v37.asm):02561                 FCB     $BE,4,5
F48F 970306           (     mon09v37.asm):02562                 FCB     $97,3,6         'STA' INSTRUCTINOS
F492 A70506           (     mon09v37.asm):02563                 FCB     $A7,5,6
F495 B70406           (     mon09v37.asm):02564                 FCB     $B7,4,6
F498 D70307           (     mon09v37.asm):02565                 FCB     $D7,3,7         'STB' INSTRUCTIONS
F49B E70507           (     mon09v37.asm):02566                 FCB     $E7,5,7
F49E F70407           (     mon09v37.asm):02567                 FCB     $F7,4,7
F4A1 DD0308           (     mon09v37.asm):02568                 FCB     $DD,3,8         'STD' INSTRUCTIONS
F4A4 ED0508           (     mon09v37.asm):02569                 FCB     $ED,5,8
F4A7 FD0408           (     mon09v37.asm):02570                 FCB     $FD,4,8
F4AA DF0309           (     mon09v37.asm):02571                 FCB     $DF,3,9         'STU' INSTRUCTIONS
F4AD EF0509           (     mon09v37.asm):02572                 FCB     $EF,5,9
F4B0 FF0409           (     mon09v37.asm):02573                 FCB     $FF,4,9
F4B3 9F030A           (     mon09v37.asm):02574                 FCB     $9F,3,10        'STX' INSTRUCTIONS
F4B6 AF050A           (     mon09v37.asm):02575                 FCB     $AF,5,10
F4B9 BF040A           (     mon09v37.asm):02576                 FCB     $BF,4,10
F4BC 3A000B           (     mon09v37.asm):02577                 FCB     $3A,0,11        'ABX'
F4BF 89010C           (     mon09v37.asm):02578                 FCB     $89,1,12        'ADCA'
F4C2 99030C           (     mon09v37.asm):02579                 FCB     $99,3,12
F4C5 A9050C           (     mon09v37.asm):02580                 FCB     $A9,5,12
F4C8 B9040C           (     mon09v37.asm):02581                 FCB     $B9,4,12
F4CB C9010D           (     mon09v37.asm):02582                 FCB     $C9,1,13        'ADCB'
F4CE D9030D           (     mon09v37.asm):02583                 FCB     $D9,3,13
F4D1 E9050D           (     mon09v37.asm):02584                 FCB     $E9,5,13
F4D4 F9040D           (     mon09v37.asm):02585                 FCB     $F9,4,13
F4D7 8B010E           (     mon09v37.asm):02586                 FCB     $8B,1,14        'ADDA'
F4DA 9B030E           (     mon09v37.asm):02587                 FCB     $9B,3,14
F4DD AB050E           (     mon09v37.asm):02588                 FCB     $AB,5,14
F4E0 BB040E           (     mon09v37.asm):02589                 FCB     $BB,4,14
F4E3 CB010F           (     mon09v37.asm):02590                 FCB     $CB,1,15        'ADDB'
F4E6 DB030F           (     mon09v37.asm):02591                 FCB     $DB,3,15
F4E9 EB050F           (     mon09v37.asm):02592                 FCB     $EB,5,15
F4EC FB040F           (     mon09v37.asm):02593                 FCB     $FB,4,15
F4EF C30210           (     mon09v37.asm):02594                 FCB     $C3,2,16        'ADDD'
F4F2 D30310           (     mon09v37.asm):02595                 FCB     $D3,3,16
F4F5 E30510           (     mon09v37.asm):02596                 FCB     $E3,5,16
F4F8 F30410           (     mon09v37.asm):02597                 FCB     $F3,4,16
F4FB 480011           (     mon09v37.asm):02598                 FCB     $48,0,17        'ASLA'
F4FE 580012           (     mon09v37.asm):02599                 FCB     $58,0,18        'ASLB'
F501 080313           (     mon09v37.asm):02600                 FCB     $08,3,19        'ASL'
F504 680513           (     mon09v37.asm):02601                 FCB     $68,5,19
F507 780413           (     mon09v37.asm):02602                 FCB     $78,4,19
F50A 470014           (     mon09v37.asm):02603                 FCB     $47,0,20        'ASRA'
F50D 570015           (     mon09v37.asm):02604                 FCB     $57,0,21        'ASRB'
F510 070316           (     mon09v37.asm):02605                 FCB     $07,3,22        'ASR'
F513 670516           (     mon09v37.asm):02606                 FCB     $67,5,22
F516 770416           (     mon09v37.asm):02607                 FCB     $77,4,22
F519 850117           (     mon09v37.asm):02608                 FCB     $85,1,23        'BITA'
F51C 950317           (     mon09v37.asm):02609                 FCB     $95,3,23
F51F A50517           (     mon09v37.asm):02610                 FCB     $A5,5,23
F522 B50417           (     mon09v37.asm):02611                 FCB     $B5,4,23
F525 C50118           (     mon09v37.asm):02612                 FCB     $C5,1,24        'BITB'
F528 D50318           (     mon09v37.asm):02613                 FCB     $D5,3,24
F52B E50518           (     mon09v37.asm):02614                 FCB     $E5,5,24
F52E F50418           (     mon09v37.asm):02615                 FCB     $F5,4,24
F531 4F0019           (     mon09v37.asm):02616                 FCB     $4F,0,25        'CLRA'
F534 5F001A           (     mon09v37.asm):02617                 FCB     $5F,0,26        'CLRB'
F537 0F031B           (     mon09v37.asm):02618                 FCB     $0F,3,27        'CLR'
F53A 6F051B           (     mon09v37.asm):02619                 FCB     $6F,5,27
F53D 7F041B           (     mon09v37.asm):02620                 FCB     $7F,4,27
F540 81011C           (     mon09v37.asm):02621                 FCB     $81,1,28        'CMPA'
F543 91031C           (     mon09v37.asm):02622                 FCB     $91,3,28
F546 A1051C           (     mon09v37.asm):02623                 FCB     $A1,5,28
F549 B1041C           (     mon09v37.asm):02624                 FCB     $B1,4,28
F54C C1011D           (     mon09v37.asm):02625                 FCB     $C1,1,29        'CMPB'
F54F D1031D           (     mon09v37.asm):02626                 FCB     $D1,3,29
F552 E1051D           (     mon09v37.asm):02627                 FCB     $E1,5,29
F555 F1041D           (     mon09v37.asm):02628                 FCB     $F1,4,29
F558 8C021E           (     mon09v37.asm):02629                 FCB     $8C,2,30        'CMPX'
F55B 9C031E           (     mon09v37.asm):02630                 FCB     $9C,3,30
F55E AC051E           (     mon09v37.asm):02631                 FCB     $AC,5,30
F561 BC041E           (     mon09v37.asm):02632                 FCB     $BC,4,30
F564 43001F           (     mon09v37.asm):02633                 FCB     $43,0,31        'COMA'
F567 530020           (     mon09v37.asm):02634                 FCB     $53,0,32        'COMB'
F56A 030321           (     mon09v37.asm):02635                 FCB     $03,3,33        'COM'
F56D 630521           (     mon09v37.asm):02636                 FCB     $63,5,33
F570 730421           (     mon09v37.asm):02637                 FCB     $73,4,33
F573 3C0122           (     mon09v37.asm):02638                 FCB     $3C,1,34        'CWAI'
F576 190023           (     mon09v37.asm):02639                 FCB     $19,0,35        'DAA'
F579 4A0024           (     mon09v37.asm):02640                 FCB     $4A,0,36        'DECA'
F57C 5A0025           (     mon09v37.asm):02641                 FCB     $5A,0,37        'DECB'
F57F 0A0326           (     mon09v37.asm):02642                 FCB     $0A,3,38        'DEC'
F582 6A0526           (     mon09v37.asm):02643                 FCB     $6A,5,38
F585 7A0426           (     mon09v37.asm):02644                 FCB     $7A,4,38
F588 880127           (     mon09v37.asm):02645                 FCB     $88,1,39        'EORA'
F58B 980327           (     mon09v37.asm):02646                 FCB     $98,3,39
F58E A80527           (     mon09v37.asm):02647                 FCB     $A8,5,39
F591 B80427           (     mon09v37.asm):02648                 FCB     $B8,4,39
F594 C80128           (     mon09v37.asm):02649                 FCB     $C8,1,40        'EORB'
F597 D80328           (     mon09v37.asm):02650                 FCB     $D8,3,40
F59A E80528           (     mon09v37.asm):02651                 FCB     $E8,5,40
F59D F80428           (     mon09v37.asm):02652                 FCB     $F8,4,40
F5A0 1E0729           (     mon09v37.asm):02653                 FCB     $1E,7,41        'EXG'
F5A3 1F072A           (     mon09v37.asm):02654                 FCB     $1F,7,42        'TFR'
F5A6 34062B           (     mon09v37.asm):02655                 FCB     $34,6,43        'PSHS'
F5A9 36862C           (     mon09v37.asm):02656                 FCB     $36,$86,44      'PSHU'
F5AC 35062D           (     mon09v37.asm):02657                 FCB     $35,6,45        'PULS'
F5AF 37862E           (     mon09v37.asm):02658                 FCB     $37,$86,46      'PULU'
F5B2 4C002F           (     mon09v37.asm):02659                 FCB     $4C,0,47        'INCA'
F5B5 5C0030           (     mon09v37.asm):02660                 FCB     $5C,0,48        'INCB'
F5B8 0C0331           (     mon09v37.asm):02661                 FCB     $0C,3,49        'INC'
F5BB 6C0531           (     mon09v37.asm):02662                 FCB     $6C,5,49
F5BE 7C0431           (     mon09v37.asm):02663                 FCB     $7C,4,49
F5C1 0E0332           (     mon09v37.asm):02664                 FCB     $0E,3,50        'JMP'
F5C4 6E0532           (     mon09v37.asm):02665                 FCB     $6E,5,50
F5C7 7E0432           (     mon09v37.asm):02666                 FCB     $7E,4,50
F5CA 9D0333           (     mon09v37.asm):02667                 FCB     $9D,3,51        'JSR'
F5CD AD0533           (     mon09v37.asm):02668                 FCB     $AD,5,51
F5D0 BD0433           (     mon09v37.asm):02669                 FCB     $BD,4,51
F5D3 320534           (     mon09v37.asm):02670                 FCB     $32,5,52        'LEAS'
F5D6 330535           (     mon09v37.asm):02671                 FCB     $33,5,53        'LEAU'
F5D9 300536           (     mon09v37.asm):02672                 FCB     $30,5,54        'LEAX'
F5DC 310537           (     mon09v37.asm):02673                 FCB     $31,5,55        'LEAY'
F5DF 440038           (     mon09v37.asm):02674                 FCB     $44,0,56        'LSRA'
F5E2 540039           (     mon09v37.asm):02675                 FCB     $54,0,57        'LSRB'
F5E5 04033A           (     mon09v37.asm):02676                 FCB     $04,3,58        'LSR'
F5E8 64053A           (     mon09v37.asm):02677                 FCB     $64,5,58
F5EB 74043A           (     mon09v37.asm):02678                 FCB     $74,4,58
F5EE 3D003B           (     mon09v37.asm):02679                 FCB     $3D,0,59        'MUL'
F5F1 40003C           (     mon09v37.asm):02680                 FCB     $40,0,60        'NEGA'
F5F4 50003D           (     mon09v37.asm):02681                 FCB     $50,0,61        'NEGB'
F5F7 00033E           (     mon09v37.asm):02682                 FCB     $00,3,62        'NEG'
F5FA 60053E           (     mon09v37.asm):02683                 FCB     $60,5,62
F5FD 70043E           (     mon09v37.asm):02684                 FCB     $70,4,62
F600 12003F           (     mon09v37.asm):02685                 FCB     $12,0,63        'NOP'
F603 8A0140           (     mon09v37.asm):02686                 FCB     $8A,1,64        'ORA'
F606 9A0340           (     mon09v37.asm):02687                 FCB     $9A,3,64
F609 AA0540           (     mon09v37.asm):02688                 FCB     $AA,5,64
F60C BA0440           (     mon09v37.asm):02689                 FCB     $BA,4,64
F60F CA0141           (     mon09v37.asm):02690                 FCB     $CA,1,65        'ORB'
F612 DA0341           (     mon09v37.asm):02691                 FCB     $DA,3,65
F615 EA0541           (     mon09v37.asm):02692                 FCB     $EA,5,65
F618 FA0441           (     mon09v37.asm):02693                 FCB     $FA,4,65
F61B 1A0142           (     mon09v37.asm):02694                 FCB     $1A,1,66        'ORCC'
F61E 840143           (     mon09v37.asm):02695                 FCB     $84,1,67        'ANDA'
F621 940343           (     mon09v37.asm):02696                 FCB     $94,3,67
F624 A40543           (     mon09v37.asm):02697                 FCB     $A4,5,67
F627 B40443           (     mon09v37.asm):02698                 FCB     $B4,4,67
F62A C40144           (     mon09v37.asm):02699                 FCB     $C4,1,68        'ANDB'
F62D D40344           (     mon09v37.asm):02700                 FCB     $D4,3,68
F630 E40544           (     mon09v37.asm):02701                 FCB     $E4,5,68
F633 F40444           (     mon09v37.asm):02702                 FCB     $F4,4,68
F636 1C0145           (     mon09v37.asm):02703                 FCB     $1C,1,69        'ANDCC'
F639 490046           (     mon09v37.asm):02704                 FCB     $49,0,70        'ROLA'
F63C 590047           (     mon09v37.asm):02705                 FCB     $59,0,71        'ROLB'
F63F 090348           (     mon09v37.asm):02706                 FCB     $09,3,72        'ROL'
F642 690548           (     mon09v37.asm):02707                 FCB     $69,5,72
F645 790448           (     mon09v37.asm):02708                 FCB     $79,4,72
F648 460049           (     mon09v37.asm):02709                 FCB     $46,0,73        'RORA'
F64B 56004A           (     mon09v37.asm):02710                 FCB     $56,0,74        'RORB'
F64E 06034B           (     mon09v37.asm):02711                 FCB     $06,3,75        'ROR'
F651 66054B           (     mon09v37.asm):02712                 FCB     $66,5,75
F654 76044B           (     mon09v37.asm):02713                 FCB     $76,4,75
F657 3B004C           (     mon09v37.asm):02714                 FCB     $3B,0,76        'RTI'
F65A 39004D           (     mon09v37.asm):02715                 FCB     $39,0,77        'RTS'
F65D 82014E           (     mon09v37.asm):02716                 FCB     $82,1,78        'SBCA'
F660 92034E           (     mon09v37.asm):02717                 FCB     $92,3,78
F663 A2054E           (     mon09v37.asm):02718                 FCB     $A2,5,78
F666 B2044E           (     mon09v37.asm):02719                 FCB     $B2,4,78
F669 C2014F           (     mon09v37.asm):02720                 FCB     $C2,1,79        'SBCB'
F66C D2034F           (     mon09v37.asm):02721                 FCB     $D2,3,79
F66F E2054F           (     mon09v37.asm):02722                 FCB     $E2,5,79
F672 F2044F           (     mon09v37.asm):02723                 FCB     $F2,4,79
F675 1D0050           (     mon09v37.asm):02724                 FCB     $1D,0,80
F678 800151           (     mon09v37.asm):02725                 FCB     $80,1,81        'SUBA'
F67B 900351           (     mon09v37.asm):02726                 FCB     $90,3,81
F67E A00551           (     mon09v37.asm):02727                 FCB     $A0,5,81
F681 B00451           (     mon09v37.asm):02728                 FCB     $B0,4,81
F684 C00152           (     mon09v37.asm):02729                 FCB     $C0,1,82        'SUBB'
F687 D00352           (     mon09v37.asm):02730                 FCB     $D0,3,82
F68A E00552           (     mon09v37.asm):02731                 FCB     $E0,5,82
F68D F00452           (     mon09v37.asm):02732                 FCB     $F0,4,82
F690 830253           (     mon09v37.asm):02733                 FCB     $83,2,83        'SUBD'
F693 930353           (     mon09v37.asm):02734                 FCB     $93,3,83
F696 A30553           (     mon09v37.asm):02735                 FCB     $A3,5,83
F699 B30453           (     mon09v37.asm):02736                 FCB     $B3,4,83
F69C 3F0054           (     mon09v37.asm):02737                 FCB     $3F,0,84        'SWI'
F69F 130055           (     mon09v37.asm):02738                 FCB     $13,0,85        'SYNC'
F6A2 4D0056           (     mon09v37.asm):02739                 FCB     $4D,0,86        'TSTA'
F6A5 5D0057           (     mon09v37.asm):02740                 FCB     $5D,0,87        'TSTB'
F6A8 0D0358           (     mon09v37.asm):02741                 FCB     $0D,3,88        'TST'
F6AB 6D0558           (     mon09v37.asm):02742                 FCB     $6D,5,88
F6AE 7D0458           (     mon09v37.asm):02743                 FCB     $7D,4,88
F6B1 160963           (     mon09v37.asm):02744                 FCB     $16,9,99        'LBRA'
F6B4 170964           (     mon09v37.asm):02745                 FCB     $17,9,100       'LBSR'
F6B7 200865           (     mon09v37.asm):02746                 FCB     $20,8,101       'BRA'
F6BA 210866           (     mon09v37.asm):02747                 FCB     $21,8,102       'BRN'
F6BD 220867           (     mon09v37.asm):02748                 FCB     $22,8,103       'BHI'
F6C0 230868           (     mon09v37.asm):02749                 FCB     $23,8,104       'BLS'
F6C3 240869           (     mon09v37.asm):02750                 FCB     $24,8,105       'BCC'
F6C6 25086A           (     mon09v37.asm):02751                 FCB     $25,8,106       'BCS'
F6C9 26086B           (     mon09v37.asm):02752                 FCB     $26,8,107       'BNE'
F6CC 27086C           (     mon09v37.asm):02753                 FCB     $27,8,108       'BEQ'
F6CF 28086D           (     mon09v37.asm):02754                 FCB     $28,8,109       'BVC'
F6D2 29086E           (     mon09v37.asm):02755                 FCB     $29,8,110       'BVS'
F6D5 2A086F           (     mon09v37.asm):02756                 FCB     $2A,8,111       'BPL'
F6D8 2B0870           (     mon09v37.asm):02757                 FCB     $2B,8,112       'BMI'
F6DB 2C0871           (     mon09v37.asm):02758                 FCB     $2C,8,113       'BGE'
F6DE 2D0872           (     mon09v37.asm):02759                 FCB     $2D,8,114       'BLT'
F6E1 2E0873           (     mon09v37.asm):02760                 FCB     $2E,8,115       'BGT'
F6E4 2F0874           (     mon09v37.asm):02761                 FCB     $2F,8,116       'BLE'
F6E7 8D0884           (     mon09v37.asm):02762                 FCB     $8D,8,132       'BSR'
F6EA CF0000           (     mon09v37.asm):02763                 FCB     $CF,0,0         'FCB', UNKNOWN OPCODE
                      (     mon09v37.asm):02764         
                      (     mon09v37.asm):02765         ;*
                      (     mon09v37.asm):02766         ;* OPERAND TABLE NUMBER TWO, $10 PREFIX INSTRUCTIONS
                      (     mon09v37.asm):02767         ;*
F6ED                  (     mon09v37.asm):02768         OPTAB2
F6ED 830259           (     mon09v37.asm):02769                 FCB     $83,2,89        'CMPD'
F6F0 8C025A           (     mon09v37.asm):02770                 FCB     $8C,2,90        'CMPY'
F6F3 8E025C           (     mon09v37.asm):02771                 FCB     $8E,2,92        'LDY'
F6F6 930359           (     mon09v37.asm):02772                 FCB     $93,3,89
F6F9 9C035A           (     mon09v37.asm):02773                 FCB     $9C,3,90
F6FC 9E035C           (     mon09v37.asm):02774                 FCB     $9E,3,92
F6FF 9F035E           (     mon09v37.asm):02775                 FCB     $9F,3,94        'STY'
F702 A30559           (     mon09v37.asm):02776                 FCB     $A3,5,89
F705 AC055A           (     mon09v37.asm):02777                 FCB     $AC,5,90
F708 AE055C           (     mon09v37.asm):02778                 FCB     $AE,5,92
F70B AF055E           (     mon09v37.asm):02779                 FCB     $AF,5,94
F70E B30459           (     mon09v37.asm):02780                 FCB     $B3,4,89
F711 BC045A           (     mon09v37.asm):02781                 FCB     $BC,4,90
F714 BE045C           (     mon09v37.asm):02782                 FCB     $BE,4,92
F717 BF045E           (     mon09v37.asm):02783                 FCB     $BF,4,94
F71A CE025B           (     mon09v37.asm):02784                 FCB     $CE,2,91        'LDS'
F71D DE035B           (     mon09v37.asm):02785                 FCB     $DE,3,91
F720 DF035D           (     mon09v37.asm):02786                 FCB     $DF,3,93        'STS'
F723 EE055B           (     mon09v37.asm):02787                 FCB     $EE,5,91
F726 EF055D           (     mon09v37.asm):02788                 FCB     $EF,5,93
F729 FE045B           (     mon09v37.asm):02789                 FCB     $FE,4,91
F72C FF045D           (     mon09v37.asm):02790                 FCB     $FF,4,93
F72F 3F005F           (     mon09v37.asm):02791                 FCB     $3F,0,95        'SWI2'
F732 210975           (     mon09v37.asm):02792                 FCB     $21,9,117       'LBRN'
F735 220976           (     mon09v37.asm):02793                 FCB     $22,9,118       'LBHI'
F738 230977           (     mon09v37.asm):02794                 FCB     $23,9,119       'LBLS'
F73B 240978           (     mon09v37.asm):02795                 FCB     $24,9,120       'LBCC'
F73E 250979           (     mon09v37.asm):02796                 FCB     $25,9,121       'LBCS'
F741 26097A           (     mon09v37.asm):02797                 FCB     $26,9,122       'LBNE'
F744 27097B           (     mon09v37.asm):02798                 FCB     $27,9,123       'LBEQ'
F747 28097C           (     mon09v37.asm):02799                 FCB     $28,9,124       'LBVC'
F74A 29097D           (     mon09v37.asm):02800                 FCB     $29,9,125       'LBVS'
F74D 2A097E           (     mon09v37.asm):02801                 FCB     $2A,9,126       'LBPL'
F750 2B097F           (     mon09v37.asm):02802                 FCB     $2B,9,127       'LBMI'
F753 2C0980           (     mon09v37.asm):02803                 FCB     $2C,9,128       'LBGE'
F756 2D0981           (     mon09v37.asm):02804                 FCB     $2D,9,129       'LBLT'
F759 2E0982           (     mon09v37.asm):02805                 FCB     $2E,9,130       'LBGT'
F75C 2F0983           (     mon09v37.asm):02806                 FCB     $2F,9,131       'LBLE'
F75F CF0100           (     mon09v37.asm):02807                 FCB     $CF,1,0
                      (     mon09v37.asm):02808         
                      (     mon09v37.asm):02809         ;*
                      (     mon09v37.asm):02810         ;* OPERAND TABLE #3, $11 PREFIXES
                      (     mon09v37.asm):02811         ;*
F762                  (     mon09v37.asm):02812         OPTAB3
F762 8C0260           (     mon09v37.asm):02813                 FCB     $8C,2,96        'CMPS'
F765 9C0360           (     mon09v37.asm):02814                 FCB     $9C,3,96
F768 AC0560           (     mon09v37.asm):02815                 FCB     $AC,5,96
F76B BC0460           (     mon09v37.asm):02816                 FCB     $BC,4,96
F76E 830261           (     mon09v37.asm):02817                 FCB     $83,2,97        'CMPU'
F771 930361           (     mon09v37.asm):02818                 FCB     $93,3,97
F774 A30561           (     mon09v37.asm):02819                 FCB     $A3,5,97
F777 B30461           (     mon09v37.asm):02820                 FCB     $B3,4,97
F77A 3F0062           (     mon09v37.asm):02821                 FCB     $3F,0,98        'SWI3'
                      (     mon09v37.asm):02822         
                      (     mon09v37.asm):02823         ;*
                      (     mon09v37.asm):02824         ;* INSTRUCTION TEXT TABLE
                      (     mon09v37.asm):02825         ;*
F77D                  (     mon09v37.asm):02826         ITABLE
F77D 46434220         (     mon09v37.asm):02827                 FCC     'FCB '          0
F781 4C444120         (     mon09v37.asm):02828                 FCC     'LDA '          1
F785 4C444220         (     mon09v37.asm):02829                 FCC     'LDB '          2
F789 4C444420         (     mon09v37.asm):02830                 FCC     'LDD '          3
F78D 4C445520         (     mon09v37.asm):02831                 FCC     'LDU '          4
F791 4C445820         (     mon09v37.asm):02832                 FCC     'LDX '          5
F795 53544120         (     mon09v37.asm):02833                 FCC     'STA '          6
F799 53544220         (     mon09v37.asm):02834                 FCC     'STB '          7
F79D 53544420         (     mon09v37.asm):02835                 FCC     'STD '          8
F7A1 53545520         (     mon09v37.asm):02836                 FCC     'STU '          9
F7A5 53545820         (     mon09v37.asm):02837                 FCC     'STX '          10
F7A9 41425820         (     mon09v37.asm):02838                 FCC     'ABX '          11
F7AD 41444341         (     mon09v37.asm):02839                 FCC     'ADCA'          12
F7B1 41444342         (     mon09v37.asm):02840                 FCC     'ADCB'          13
F7B5 41444441         (     mon09v37.asm):02841                 FCC     'ADDA'          14
F7B9 41444442         (     mon09v37.asm):02842                 FCC     'ADDB'          15
F7BD 41444444         (     mon09v37.asm):02843                 FCC     'ADDD'          16
F7C1 41534C41         (     mon09v37.asm):02844                 FCC     'ASLA'          17
F7C5 41534C42         (     mon09v37.asm):02845                 FCC     'ASLB'          18
F7C9 41534C20         (     mon09v37.asm):02846                 FCC     'ASL '          19
F7CD 41535241         (     mon09v37.asm):02847                 FCC     'ASRA'          20
F7D1 41535242         (     mon09v37.asm):02848                 FCC     'ASRB'          21
F7D5 41535220         (     mon09v37.asm):02849                 FCC     'ASR '          22
F7D9 42495441         (     mon09v37.asm):02850                 FCC     'BITA'          23
F7DD 42495442         (     mon09v37.asm):02851                 FCC     'BITB'          24
F7E1 434C5241         (     mon09v37.asm):02852                 FCC     'CLRA'          25
F7E5 434C5242         (     mon09v37.asm):02853                 FCC     'CLRB'          26
F7E9 434C5220         (     mon09v37.asm):02854                 FCC     'CLR '          27
F7ED 434D5041         (     mon09v37.asm):02855                 FCC     'CMPA'          28
F7F1 434D5042         (     mon09v37.asm):02856                 FCC     'CMPB'          29
F7F5 434D5058         (     mon09v37.asm):02857                 FCC     'CMPX'          30
F7F9 434F4D41         (     mon09v37.asm):02858                 FCC     'COMA'          31
F7FD 434F4D42         (     mon09v37.asm):02859                 FCC     'COMB'          32
F801 434F4D20         (     mon09v37.asm):02860                 FCC     'COM '          33
F805 43574149         (     mon09v37.asm):02861                 FCC     'CWAI'          34
F809 44414120         (     mon09v37.asm):02862                 FCC     'DAA '          35
F80D 44454341         (     mon09v37.asm):02863                 FCC     'DECA'          36
F811 44454342         (     mon09v37.asm):02864                 FCC     'DECB'          37
F815 44454320         (     mon09v37.asm):02865                 FCC     'DEC '          38
F819 454F5241         (     mon09v37.asm):02866                 FCC     'EORA'          39
F81D 454F5242         (     mon09v37.asm):02867                 FCC     'EORB'          40
F821 45584720         (     mon09v37.asm):02868                 FCC     'EXG '          41
F825 54465220         (     mon09v37.asm):02869                 FCC     'TFR '          42
F829 50534853         (     mon09v37.asm):02870                 FCC     'PSHS'          43
F82D 50534855         (     mon09v37.asm):02871                 FCC     'PSHU'          44
F831 50554C53         (     mon09v37.asm):02872                 FCC     'PULS'          45
F835 50554C55         (     mon09v37.asm):02873                 FCC     'PULU'          46
F839 494E4341         (     mon09v37.asm):02874                 FCC     'INCA'          47
F83D 494E4342         (     mon09v37.asm):02875                 FCC     'INCB'          48
F841 494E4320         (     mon09v37.asm):02876                 FCC     'INC '          49
F845 4A4D5020         (     mon09v37.asm):02877                 FCC     'JMP '          50
F849 4A535220         (     mon09v37.asm):02878                 FCC     'JSR '          51
F84D 4C454153         (     mon09v37.asm):02879                 FCC     'LEAS'          52
F851 4C454155         (     mon09v37.asm):02880                 FCC     'LEAU'          53
F855 4C454158         (     mon09v37.asm):02881                 FCC     'LEAX'          54
F859 4C454159         (     mon09v37.asm):02882                 FCC     'LEAY'          55
F85D 4C535241         (     mon09v37.asm):02883                 FCC     'LSRA'          56
F861 4C535242         (     mon09v37.asm):02884                 FCC     'LSRB'          57
F865 4C535220         (     mon09v37.asm):02885                 FCC     'LSR '          58
F869 4D554C20         (     mon09v37.asm):02886                 FCC     'MUL '          59
F86D 4E454741         (     mon09v37.asm):02887                 FCC     'NEGA'          60
F871 4E454742         (     mon09v37.asm):02888                 FCC     'NEGB'          61
F875 4E454720         (     mon09v37.asm):02889                 FCC     'NEG '          62
F879 4E4F5020         (     mon09v37.asm):02890                 FCC     'NOP '          63
F87D 4F524120         (     mon09v37.asm):02891                 FCC     'ORA '          64
F881 4F524220         (     mon09v37.asm):02892                 FCC     'ORB '          65
F885 4F524343         (     mon09v37.asm):02893                 FCC     'ORCC'          66
F889 414E4441         (     mon09v37.asm):02894                 FCC     'ANDA'          67
F88D 414E4442         (     mon09v37.asm):02895                 FCC     'ANDB'          68
F891 414E4443         (     mon09v37.asm):02896                 FCC     'ANDC'          69
F895 524F4C41         (     mon09v37.asm):02897                 FCC     'ROLA'          70
F899 524F4C42         (     mon09v37.asm):02898                 FCC     'ROLB'          71
F89D 524F4C20         (     mon09v37.asm):02899                 FCC     'ROL '          72
F8A1 524F5241         (     mon09v37.asm):02900                 FCC     'RORA'          73
F8A5 524F5242         (     mon09v37.asm):02901                 FCC     'RORB'          74
F8A9 524F5220         (     mon09v37.asm):02902                 FCC     'ROR '          75
F8AD 52544920         (     mon09v37.asm):02903                 FCC     'RTI '          76
F8B1 52545320         (     mon09v37.asm):02904                 FCC     'RTS '          77
F8B5 53424341         (     mon09v37.asm):02905                 FCC     'SBCA'          78
F8B9 53424342         (     mon09v37.asm):02906                 FCC     'SBCB'          79
F8BD 53455820         (     mon09v37.asm):02907                 FCC     'SEX '          80
F8C1 53554241         (     mon09v37.asm):02908                 FCC     'SUBA'          81
F8C5 53554242         (     mon09v37.asm):02909                 FCC     'SUBB'          82
F8C9 53554244         (     mon09v37.asm):02910                 FCC     'SUBD'          83
F8CD 53574920         (     mon09v37.asm):02911                 FCC     'SWI '          84
F8D1 53594E43         (     mon09v37.asm):02912                 FCC     'SYNC'          85
F8D5 54535441         (     mon09v37.asm):02913                 FCC     'TSTA'          86
F8D9 54535442         (     mon09v37.asm):02914                 FCC     'TSTB'          87
F8DD 54535420         (     mon09v37.asm):02915                 FCC     'TST '          88
F8E1 434D5044         (     mon09v37.asm):02916                 FCC     'CMPD'          89
F8E5 434D5059         (     mon09v37.asm):02917                 FCC     'CMPY'          90
F8E9 4C445320         (     mon09v37.asm):02918                 FCC     'LDS '          91
F8ED 4C445920         (     mon09v37.asm):02919                 FCC     'LDY '          92
F8F1 53545320         (     mon09v37.asm):02920                 FCC     'STS '          93
F8F5 53545920         (     mon09v37.asm):02921                 FCC     'STY '          94
F8F9 53574932         (     mon09v37.asm):02922                 FCC     'SWI2'          95
F8FD 434D5053         (     mon09v37.asm):02923                 FCC     'CMPS'          96
F901 434D5055         (     mon09v37.asm):02924                 FCC     'CMPU'          97
F905 53574933         (     mon09v37.asm):02925                 FCC     'SWI3'          98
F909 4C425241         (     mon09v37.asm):02926                 FCC     'LBRA'          99
F90D 4C425352         (     mon09v37.asm):02927                 FCC     'LBSR'          100
F911 42524120         (     mon09v37.asm):02928                 FCC     'BRA '          101
F915 42524E20         (     mon09v37.asm):02929                 FCC     'BRN '          102
F919 42484920         (     mon09v37.asm):02930                 FCC     'BHI '          103
F91D 424C5320         (     mon09v37.asm):02931                 FCC     'BLS '          104
F921 42434320         (     mon09v37.asm):02932                 FCC     'BCC '          105
F925 42435320         (     mon09v37.asm):02933                 FCC     'BCS '          106
F929 424E4520         (     mon09v37.asm):02934                 FCC     'BNE '          107
F92D 42455120         (     mon09v37.asm):02935                 FCC     'BEQ '          108
F931 42564320         (     mon09v37.asm):02936                 FCC     'BVC '          109
F935 42565320         (     mon09v37.asm):02937                 FCC     'BVS '          110
F939 42504C20         (     mon09v37.asm):02938                 FCC     'BPL '          111
F93D 424D4920         (     mon09v37.asm):02939                 FCC     'BMI '          112
F941 42474520         (     mon09v37.asm):02940                 FCC     'BGE '          113
F945 424C5420         (     mon09v37.asm):02941                 FCC     'BLT '          114
F949 42475420         (     mon09v37.asm):02942                 FCC     'BGT '          115
F94D 424C4520         (     mon09v37.asm):02943                 FCC     'BLE '          116
F951 4C42524E         (     mon09v37.asm):02944                 FCC     'LBRN'          117
F955 4C424849         (     mon09v37.asm):02945                 FCC     'LBHI'          118
F959 4C424C53         (     mon09v37.asm):02946                 FCC     'LBLS'          119
F95D 4C424343         (     mon09v37.asm):02947                 FCC     'LBCC'          120
F961 4C424353         (     mon09v37.asm):02948                 FCC     'LBCS'          121
F965 4C424E45         (     mon09v37.asm):02949                 FCC     'LBNE'          122
F969 4C424551         (     mon09v37.asm):02950                 FCC     'LBEQ'          123
F96D 4C425643         (     mon09v37.asm):02951                 FCC     'LBVC'          124
F971 4C425653         (     mon09v37.asm):02952                 FCC     'LBVS'          125
F975 4C42504C         (     mon09v37.asm):02953                 FCC     'LBPL'          126
F979 4C424D49         (     mon09v37.asm):02954                 FCC     'LBMI'          127
F97D 4C424745         (     mon09v37.asm):02955                 FCC     'LBGE'          128
F981 4C424C54         (     mon09v37.asm):02956                 FCC     'LBLT'          129
F985 4C424754         (     mon09v37.asm):02957                 FCC     'LBGT'          130
F989 4C424C45         (     mon09v37.asm):02958                 FCC     'LBLE'          131
F98D 42535220         (     mon09v37.asm):02959                 FCC     'BSR '          132
                      (     mon09v37.asm):02960         
                      (     mon09v37.asm):02961         ;*
                      (     mon09v37.asm):02962         ;* CONDITIONAL TABLE, FIRST BYTE IS MASK, NEXT THREE BYTES ARE POSSIBLE
                      (     mon09v37.asm):02963         ;* BIT SETTINGS
                      (     mon09v37.asm):02964         ;*
F991                  (     mon09v37.asm):02965         CONTAB
F991 05000000         (     mon09v37.asm):02966                 FCB     $05,$00,$00,$00 'BHI', NO C OR Z
F995 05010405         (     mon09v37.asm):02967                 FCB     $05,$01,$04,$05 'BLS', EITHER C OR Z
F999 01000000         (     mon09v37.asm):02968                 FCB     $01,$00,$00,$00 'BCC', NO C
F99D 01010101         (     mon09v37.asm):02969                 FCB     $01,$01,$01,$01 'BCS', C SET
F9A1 04000000         (     mon09v37.asm):02970                 FCB     $04,$00,$00,$00 'BNE', NO Z
F9A5 04040404         (     mon09v37.asm):02971                 FCB     $04,$04,$04,$04 'BEQ', Z SET
F9A9 02000000         (     mon09v37.asm):02972                 FCB     $02,$00,$00,$00 'BVC', V CLEAR
F9AD 02020202         (     mon09v37.asm):02973                 FCB     $02,$02,$02,$02 'BVS', V SET
F9B1 08000000         (     mon09v37.asm):02974                 FCB     $08,$00,$00,$00 'BPL', N CLEAR
F9B5 08080808         (     mon09v37.asm):02975                 FCB     $08,$08,$08,$08 'BMI', N SET
F9B9 0A000A0A         (     mon09v37.asm):02976                 FCB     $0A,$00,$0A,$0A 'BGE', N=V
F9BD 0A080202         (     mon09v37.asm):02977                 FCB     $0A,$08,$02,$02 'BLT', N -= V
F9C1 0E0A0000         (     mon09v37.asm):02978                 FCB     $0E,$0A,$00,$00 'BGT', N=V, Z=0
F9C5 0E080204         (     mon09v37.asm):02979                 FCB     $0E,$08,$02,$04 'BLE', V-=N OR Z=1
F9C9 0C060E           (     mon09v37.asm):02980                 FCB     $0C,$06,$0E
                      (     mon09v37.asm):02981         
                      (     mon09v37.asm):02982         ;* TRANSFER AND EXCHANGE REGISTER TABLE
F9CC 9F6F             (     mon09v37.asm):02983         TFREGT  FDB     SAVA
F9CE 9F72             (     mon09v37.asm):02984         INDTAB  FDB     SAVX
F9D0 9F74             (     mon09v37.asm):02985                 FDB     SAVY
F9D2 9F76             (     mon09v37.asm):02986                 FDB     SAVU
F9D4 9F7A             (     mon09v37.asm):02987                 FDB     SAVS
F9D6 9F78             (     mon09v37.asm):02988                 FDB     SAVPC
                      (     mon09v37.asm):02989         
                      (     mon09v37.asm):02990         ;* PULL TABLE FOR PULS
F9D8 9F6E             (     mon09v37.asm):02991         PULSTAB FDB     SAVCC
F9DA 9F6F             (     mon09v37.asm):02992                 FDB     SAVA
F9DC 9F70             (     mon09v37.asm):02993                 FDB     SAVB
F9DE 9F71             (     mon09v37.asm):02994                 FDB     SAVDP
F9E0 9F72             (     mon09v37.asm):02995                 FDB     SAVX
F9E2 9F74             (     mon09v37.asm):02996                 FDB     SAVY
F9E4 9F76             (     mon09v37.asm):02997                 FDB     SAVU
F9E6 9F78             (     mon09v37.asm):02998                 FDB     SAVPC
                      (     mon09v37.asm):02999         
                      (     mon09v37.asm):03000         ;* PULL TABLE FOR PULU
F9E8 9F6E             (     mon09v37.asm):03001         PULUTAB FDB     SAVCC
F9EA 9F6F             (     mon09v37.asm):03002                 FDB     SAVA
F9EC 9F70             (     mon09v37.asm):03003                 FDB     SAVB
F9EE 9F71             (     mon09v37.asm):03004                 FDB     SAVDP
F9F0 9F72             (     mon09v37.asm):03005                 FDB     SAVX
F9F2 9F74             (     mon09v37.asm):03006                 FDB     SAVY
F9F4 9F7A             (     mon09v37.asm):03007                 FDB     SAVS
F9F6 9F78             (     mon09v37.asm):03008                 FDB     SAVPC
                      (     mon09v37.asm):03009         
                      (     mon09v37.asm):03010         ;* VECTOR HANDLERS
F9F8 6E9F9F5F         (     mon09v37.asm):03011         SWI3    JMP     [SWI3ADR]
F9FC 6E9F9F5D         (     mon09v37.asm):03012         SWI2    JMP     [SWI2ADR]
FA00 6E9F9F61         (     mon09v37.asm):03013         IRQ     JMP     [IRQADR]
FA04 6E9F9F63         (     mon09v37.asm):03014         FIRQ    JMP     [FIRQADR]
                      (     mon09v37.asm):03015         ;MODS BY JQ
                      (     mon09v37.asm):03016          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
FA08 6E9F9F65         (     mon09v37.asm):03017         NMI     JMP     [NMIADR]
                      (     mon09v37.asm):03018          ENDC
                      (     mon09v37.asm):03019          IFNE JQ_ILLOP          USE JQ ILLOP ENHANCEMENTS
FA0C 6E9F9F67         (     mon09v37.asm):03020         ILOP    JMP     [ILOPADR]
                      (     mon09v37.asm):03021          ENDC
                      (     mon09v37.asm):03022         ;
                      (     mon09v37.asm):03023         ;* HELP TEXT
FA10 00               (     mon09v37.asm):03024         HTEXT   FCB     0               NEW LINE TO START
FA11 4220302D37203C61 (     mon09v37.asm):03025                 FCN             'B 0-7 <addr>|Set breakpoint (0000=remove)'
     6464723E7C536574
     20627265616B706F
     696E742028303030
     303D72656D6F7665
     2900
FA3B 4352203C7265673E (     mon09v37.asm):03026                 FCN             'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
FA5B 4355203C75617274 (     mon09v37.asm):03027                 FCN             'CU <uart> <addr>|Change UART address'
     3E203C616464723E
     7C4368616E676520
     5541525420616464
     7265737300
                      (     mon09v37.asm):03028         
                      (     mon09v37.asm):03029          IFNE JQ_ILLOP  JQ ILLOP ENHANCEMENTS
FA80 4356203C7665633E (     mon09v37.asm):03030                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-7)'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7220
     287665633D312D37
     2900
                      (     mon09v37.asm):03031          ELSE
                      (     mon09v37.asm):03032                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-6)'
                      (     mon09v37.asm):03033          ENDC                   JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03034         
FAB2 44427C446973706C (     mon09v37.asm):03035                 FCN             'DB|Display breakpoints'
     617920627265616B
     706F696E747300
FAC9 4444203C61646472 (     mon09v37.asm):03036                 FCN             'DD <addr>,<addr>|Display dissasembled memory'
     3E2C3C616464723E
     7C446973706C6179
     2064697373617365
     6D626C6564206D65
     6D6F727900
FAF6 444D203C61646472 (     mon09v37.asm):03037                 FCN             'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
FB29 44527C446973706C (     mon09v37.asm):03038                 FCN             'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
FB48 44557C446973706C (     mon09v37.asm):03039                 FCN             'DU|Display UART addresses'
     6179205541525420
     6164647265737365
     7300
FB62 44567C446973706C (     mon09v37.asm):03040                 FCN             'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
FB7F 45203C616464723E (     mon09v37.asm):03041                 FCN             'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
FB94 464D203C61646472 (     mon09v37.asm):03042                 FCN             'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
FBB8 47205B3C61646472 (     mon09v37.asm):03043                 FCN             'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
                      (     mon09v37.asm):03044         ;MODS BY JQ
                      (     mon09v37.asm):03045          IFNE JQ_JMPMOD         JQ JUMP ENHANCEMENTS
                      (     mon09v37.asm):03046         ;       FCN             'J <B><T><F>|Jump to <B>ASIC, <T>inyBASIC or <F>ORTH'
                      (     mon09v37.asm):03047         ;       FCN             'J <B><F>|Jump to <B>ASIC or <F>ORTH'
FBD8 4A203C423E7C4A75 (     mon09v37.asm):03048                 FCN             'J <B>|Jump to Extended <B>asic'
     6D7020746F204578
     74656E646564203C
     423E6173696300
                      (     mon09v37.asm):03049          ENDC                           JQ JUMP ENHANCEMENTS
                      (     mon09v37.asm):03050         ;
FBF7 4C7C4C6F61642069 (     mon09v37.asm):03051                 FCN             'L|Load iHEX or S19 image from UART2'
     484558206F722053
     313920696D616765
     2066726F6D205541
     52543200
FC1B 4D4D203C61646472 (     mon09v37.asm):03052                 FCN             'MM <addr>,<addr> <addr>|Move memory (Source,End Destination)'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F72792028536F75
     7263652C456E6420
     44657374696E6174
     696F6E2900
FC58 4D54203C61646472 (     mon09v37.asm):03053                 FCN             'MT <addr>,<addr>|Memory test'
     3E2C3C616464723E
     7C4D656D6F727920
     7465737400
FC75 5252203C61646472 (     mon09v37.asm):03054                 FCN             'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
FC95 5257203C61646472 (     mon09v37.asm):03055                 FCN             'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
FCBD 53205B3C61646472 (     mon09v37.asm):03056                 FCN             'S [<addr>]|Single step execution'
     3E5D7C53696E676C
     6520737465702065
     7865637574696F6E
     00
                      (     mon09v37.asm):03057         ;       FCN             'T|Terminal passthrough to UART2'
FCDE 57203C616464723E (     mon09v37.asm):03058                 FCN             'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
FCFE 5852203C61646472 (     mon09v37.asm):03059                 FCN             'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
FD1E 5857203C61646472 (     mon09v37.asm):03060                 FCN             'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
FD46 2B203C76616C7565 (     mon09v37.asm):03061                 FCN             '+ <value>+<value>|Hexadecimal addition'
     3E2B3C76616C7565
     3E7C486578616465
     63696D616C206164
     646974696F6E00
FD6D 2D203C76616C7565 (     mon09v37.asm):03062                 FCN             '- <value>-<value>|Hexadecimal subtraction'
     3E2D3C76616C7565
     3E7C486578616465
     63696D616C207375
     627472616374696F
     6E00
FD97 FF               (     mon09v37.asm):03063                 FCB     -1              END OF TABLE
                      (     mon09v37.asm):03064         ;*
                      (     mon09v37.asm):03065         ;
                      (     mon09v37.asm):03066         ;===============================================================================
                      (     mon09v37.asm):03067         ;*
                      (     mon09v37.asm):03068         ;* MACHINE DEPENDANT I/O ROUTINES FOR 68(3)B50 UARTS
                      (     mon09v37.asm):03069         ;*      X REGISTER HOLDS PORT ADDRESS.
                      (     mon09v37.asm):03070         ;===============================================================================
                      (     mon09v37.asm):03071         ;* INITIALIZE UART(X)
FD98                  (     mon09v37.asm):03072         INIT
FD98 8603             (     mon09v37.asm):03073                 LDA     #CTRL1          MASTER RESET
FD9A A784             (     mon09v37.asm):03074                 STA     ,X              WRITE COMMAND REG
FD9C 8615             (     mon09v37.asm):03075                 LDA     #CTRL2          ENABLE 115200, 8NO1
FD9E A784             (     mon09v37.asm):03076                 STA     ,X              WRITE COMMAND REG
FDA0 39               (     mon09v37.asm):03077                 RTS
                      (     mon09v37.asm):03078         ;
                      (     mon09v37.asm):03079         ;===============================================================================
                      (     mon09v37.asm):03080         ;* READ UART(X)
FDA1                  (     mon09v37.asm):03081         READ
FDA1 A684             (     mon09v37.asm):03082                 LDA     ,X              GET STATUS
FDA3 8501             (     mon09v37.asm):03083                 BITA    #RDRF           RECEIVER READY?
FDA5 2705             (     mon09v37.asm):03084                 BEQ     NOCHR           NO CHARACTER
FDA7 A601             (     mon09v37.asm):03085                 LDA     1,X             READ CHARACTER
FDA9 1A04             (     mon09v37.asm):03086                 ORCC    #%00000100      SET 'Z'
FDAB 39               (     mon09v37.asm):03087                 RTS
FDAC                  (     mon09v37.asm):03088         NOCHR
FDAC 86FF             (     mon09v37.asm):03089                 LDA     #$FF            NO CHAR
FDAE 39               (     mon09v37.asm):03090                 RTS
                      (     mon09v37.asm):03091         ;
                      (     mon09v37.asm):03092         ;===============================================================================
                      (     mon09v37.asm):03093         ;* WRITE UART(X)
FDAF                  (     mon09v37.asm):03094         WRITE
FDAF E684             (     mon09v37.asm):03095                 LDB     ,X              GET STATUS
FDB1 C502             (     mon09v37.asm):03096                 BITB    #TDRE           XMITTER READY?
FDB3 27FA             (     mon09v37.asm):03097                 BEQ     WRITE           NO, TRY AGAIN
FDB5 A701             (     mon09v37.asm):03098                 STA     1,X             OUTPUT
FDB7 39               (     mon09v37.asm):03099                 RTS
                      (     mon09v37.asm):03100         ;
                      (     mon09v37.asm):03101         ;===============================================================================
                      (     mon09v37.asm):03102         ; LOOKUP TABLE CONTAINING MON09 RAM INTERRUPT RE-VECTORING ADDRESSES
                      (     mon09v37.asm):03103         ;===============================================================================
FDB8 6E9F9F5B         (     mon09v37.asm):03104         MON09_SWIADR    JMP     [SWIADR]        ;SWI Interrupt vector
FDBC 6E9F9F5D         (     mon09v37.asm):03105         MON09_SWI2ADR   JMP     [SWI2ADR]       ;SWI2 Interrupt vector
FDC0 6E9F9F5F         (     mon09v37.asm):03106         MON09_SWI3ADR   JMP     [SWI3ADR]       ;SWI3 Interrupt vector
FDC4 6E9F9F63         (     mon09v37.asm):03107         MON09_FIRQADR   JMP     [FIRQADR]       ;FIRQ Interrupt vector
FDC8 6E9F9F61         (     mon09v37.asm):03108         MON09_IRQADR    JMP     [IRQADR]        ;IRQ Interrupt vector
                      (     mon09v37.asm):03109         
                      (     mon09v37.asm):03110           IFNE JQ_NMIRAM        ;JQ NMI ENHANCEMENTS
FDCC 6E9F9F65         (     mon09v37.asm):03111         MON09_NMIADR    JMP     [NMIADR]        ;NMI Interrupt vector
                      (     mon09v37.asm):03112           ENDC                          ;               JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):03113           IFNE JQ_ILLOP         ;USE JQ ILLOP ENHANCEMENTS
FDD0 6E9F9F67         (     mon09v37.asm):03114         MON09_ILOPADR   JMP     [ILOPADR]       ;ILLOP Interrupt vector
                      (     mon09v37.asm):03115           ENDC                          ;USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03116         ;
                      (     mon09v37.asm):03117          IFLT LOC       ;IF NOT IN RAM
FDD4 FFFFFFFFFFFFFFFF (     mon09v37.asm):03118                 FILL $FF,VECTTBL-*
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFF
                      (     mon09v37.asm):03119         ;*
                      (     mon09v37.asm):03120         ;* MACHINE VECTORS
                      (     mon09v37.asm):03121         ;*
                      (     mon09v37.asm):03122         ;MODS BY JQ
                      (     mon09v37.asm):03123           IFNE JQ_ILLOP         USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03124                 ORG     VECTTBL
FFF0 FA0C             (     mon09v37.asm):03125                 FDB     ILOP            HD6309 ONLY
                      (     mon09v37.asm):03126           ELSE
                      (     mon09v37.asm):03127                 ORG     VECTTBL
                      (     mon09v37.asm):03128           ENDC                          USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03129         ;
FFF2 F9F8             (     mon09v37.asm):03130                 FDB     SWI3
FFF4 F9FC             (     mon09v37.asm):03131                 FDB     SWI2
FFF6 FA04             (     mon09v37.asm):03132                 FDB     FIRQ
FFF8 FA00             (     mon09v37.asm):03133                 FDB     IRQ
FFFA F3A9             (     mon09v37.asm):03134                 FDB     SWIHND
                      (     mon09v37.asm):03135         ;MODS BY JQ
                      (     mon09v37.asm):03136           IFNE JQ_NMIRAM        USE JQ NMI ENHANCEMENTS
FFFC FA08             (     mon09v37.asm):03137                 FDB     NMI                     USE LOCAL NMI HANDLER
                      (     mon09v37.asm):03138           ELSE
                      (     mon09v37.asm):03139                 FDB     NMIHND          USE MON09 NMI HANDLER
                      (     mon09v37.asm):03140           ENDC
                      (     mon09v37.asm):03141         ;
FFFE E47F             (     mon09v37.asm):03142                 FDB     RESET
                      (     mon09v37.asm):03143          ENDC           ;IF NOT IN RAM
