                      (     mon09v37.asm):00001         ;******************************************************************************
                      (     mon09v37.asm):00002         ;*
                      (     mon09v37.asm):00003         ;* MON09: A software debug monitor for the 6809
                      (     mon09v37.asm):00004         ;* TODO: UPDATE FOR HB63C09M - 
                      (     mon09v37.asm):00005         ;*       what follows describes Dave Dunfields portable                 
                      (     mon09v37.asm):00006         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (     mon09v37.asm):00007         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and 48K of RAM
                      (     mon09v37.asm):00008         ;* from $2000-$DFFF. The 8K block from $0000-$1FFF is used for I/O devices
                      (     mon09v37.asm):00009         ;* etc. MON09 uses 160 bytes of memory at the very top of available RAM,
                      (     mon09v37.asm):00010         ;* and the user stack pointer is initialized to point to the beginning of
                      (     mon09v37.asm):00011         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (     mon09v37.asm):00012         ;*
                      (     mon09v37.asm):00013         ;* Console and Host I/O device drivers are included for both 6551 and 6552
                      (     mon09v37.asm):00014         ;* type uarts, which are selected by the set symbol 'utype', and conditionally
                      (     mon09v37.asm):00015         ;* assembled into the code. THIS FILE MUST BE PROCESSED WITH 'MACRO' PRIOR
                      (     mon09v37.asm):00016         ;* TO ASSEMBLING WITH ASM09!!! You can modify the I/O drivers to support a
                      (     mon09v37.asm):00017         ;* different uart device if you wish. The serial I/O drivers are at the very
                      (     mon09v37.asm):00018         ;* end of the monitor source code (Just before the interrupt vectors).
                      (     mon09v37.asm):00019         ;*
                      (     mon09v37.asm):00020         ;* Copyright 1985-2007 Dave Dunfield
                      (     mon09v37.asm):00021         ;* All rights reserved.
                      (     mon09v37.asm):00022         ;*
                      (     mon09v37.asm):00023         ;* Additional modifications for the HB63C09 by Dave Collins, Z80Dad
                      (     mon09v37.asm):00024         ; VERSION 3.7
                      (     mon09v37.asm):00025         ; 2024-0331:    DC      REMOVED OPTION ROM BUILDING FROM CODE FOR TINYBASIC, AND FORTH DUE TO 
                      (     mon09v37.asm):00026         ;                       SIZE CONSTRAINTS (IT IS TRIVIAL TO UNCOMMENT THEM)
                      (     mon09v37.asm):00027         ;               DC      CHANGED ADDRESS RANGES TO SUPPORT THE HB63C09
                      (     mon09v37.asm):00028         ;               DC      FIXED 'WRAP AROUND' BUG FROM ORIGINAL DUNFIELD SOURCE WHICH WOULD CAUSE
                      (     mon09v37.asm):00029         ;                       MEMORY SR TO OUTPUT FOREVER IF YOU TRIED TO DISPLAY AN ADDRESS
                      (     mon09v37.asm):00030         ;                       FROM 0xFFF0 TO THE END OF MEMORY.  THIS SLIGHTLY CHANGES THE BEHAVIOR, 
                      (     mon09v37.asm):00031         ;                       AS NOW, THE START ADDRESS WILL ALIGN WITH THE BEGINNING OF A 16 BYTE
                      (     mon09v37.asm):00032         ;                       BLOCK (STARTING AT A NUMBER WITH THE BOTTOM 4 BITS BEING CLEAR.)
                      (     mon09v37.asm):00033         ;                       SINCE THE SR ALWAYS OUTPUTS 16 BYTES THIS ALIGNS THE LAST INCREMENT OF X 
                      (     mon09v37.asm):00034         ;                       WITH ZERO SO THAT WE CAN CATCH THE REGISTER ROLLING OVER AND THE SR 
                      (     mon09v37.asm):00035         ;                       DOES NOT RUN FOREVER.  ITS ARGUABLE THIS IS THE CORRECT FUNCTIONALITY
                      (     mon09v37.asm):00036         ;                       OF THE DISPLAY MEMORY SR AS IT ALWAYS OUTPUTS 16 BYTES REGARDLESS OF 
                      (     mon09v37.asm):00037         ;                       THE LAST ADDRESS IN THE RANGE.
                      (     mon09v37.asm):00038         ;               DC      FOUND AN ISSUE WITH LOAD SR WITH THE SRECORD FORMAT.  THE SUBROTINE NEEDED 
                      (     mon09v37.asm):00039         ;                       TO IGNORE RECORD TYPE 5 - COUNT. SINCE IT IS A 16 BIT ADDRESS BUS. THE OTHER
                      (     mon09v37.asm):00040         ;                       COUNT RECORD TYPES WONT NEED TO BE TESTED FOR. (FIXED)
                      (     mon09v37.asm):00041         ;               DC      FIXED CRLF HANDLER MOSTLY. OCCASIONALLY IT WILL DUMP A SPURIOUS CR ONTO THE 
                      (     mon09v37.asm):00042         ;                       PROMPT THIS DEPENDS ON HOW THE FILE WAS TERMINATED BY THE COMPLIER. RECORD 
                      (     mon09v37.asm):00043         ;                       TYPE 9 IGNORES ANY START ADDRESS THAT IS PLACED THERE, THIS WAS ALWAYS THE 
                      (     mon09v37.asm):00044         ;                       CASE HOWEVER NOW IT READS THE CHARACTERS IN UNTIL THE END OF THE LINE.
                      (     mon09v37.asm):00045         ;               DC      SWITCHED BASIC ROM TO A MODIFIED DIGICOOLTHINGS ROM, SEE BASIC ROM SOURCE
                      (     mon09v37.asm):00046         ;                       FOR DETAILS.
                      (     mon09v37.asm):00047         ; 
                      (     mon09v37.asm):00048         ;* Additional modifications for the 6809SBC by Johnny Quest.
                      (     mon09v37.asm):00049         ;*
                      (     mon09v37.asm):00050         ;******************************************************************************
                      (     mon09v37.asm):00051         ; VERSION 3.6
                      (     mon09v37.asm):00052         ; 2021-0904:    JQ      ON ILLOP/DIV INTERRUPT, CORRECTED BUG WHERE THE HANDLER
                      (     mon09v37.asm):00053         ;                                        JUMPS TO THE BREAKPOINT DISPLAY TO EXIT BUT THE 'BRKREG'
                      (     mon09v37.asm):00054         ;                                        IS LOCATED WITHIN THE BREAKPOINT ROUTINE, WHICH CAUSES
                      (     mon09v37.asm):00055         ;                                        CONFUSIION AND EVENTUAL HANG.
                      (     mon09v37.asm):00056         ;                               JQ      SEEMS THAT DETECTION OF A 6309 AND SETTING IT TO 'NATIVE'
                      (     mon09v37.asm):00057         ;                                        MODE CAUSES PROBLEMS, SO THE MODE REGISTER IS NOT TOUCHED
                      (     mon09v37.asm):00058         ;                                        AND THE HD6309 IS LEFT IN 'EMULATION MODE'.
                      (     mon09v37.asm):00059         ;                               JQ      CORRECTED BUG IN 'CHGREG' WHERE CHANGING REGISTER 'D' WAS NOT
                      (     mon09v37.asm):00060         ;                                        RECOGNIZED AS A 16-BIT REGISTER.
                      (     mon09v37.asm):00061         ;******************************************************************************
                      (     mon09v37.asm):00062         ; VERSION 3.5
                      (     mon09v37.asm):00063         ; 2021-0824:    JQ      ON ILLOP/DIV INTERRUPT, INFORMS WHICH ONE CAUSED IT.
                      (     mon09v37.asm):00064         ;                               JQ      IF 6309 IS DETECTED, THE MODE REGISTER IS SET TO 'NATIVE'.
                      (     mon09v37.asm):00065         ; 2021-0823:    JQ      ADDED SUPPORT FOR DETECTING IF THE HOST MCU IS AN MC6809
                      (     mon09v37.asm):00066         ;                                        OR AN HD6309 AND EMITS THE PROPER SIGN-ON MESSAGE.
                      (     mon09v37.asm):00067         ;                               JQ      ADDED A BUILD DATE AND TIME TO THE SIGN-ON MESSAGE. THE
                      (     mon09v37.asm):00068         ;                                        LINUX "build.sh" SCRIPT CREATES A SEPARATE ASSEMBLY FILE
                      (     mon09v37.asm):00069         ;                                        THAT IS "INCLUDED" IN THE MAIN ASSEMBLY FILE.
                      (     mon09v37.asm):00070         ;                               JQ      BE AWARE THAT THE DISASSEMBLER DOES NOT YET SUPPORT THE
                      (     mon09v37.asm):00071         ;                                        6309 EXTENDED INSTRUCTIONS.
                      (     mon09v37.asm):00072         ; 2021-0419:    JQ      ADDED SUPPORT FOR MERGING THE BINARY IMAGES OF THE
                      (     mon09v37.asm):00073         ;                                        LANGUAGE SUPPORT MODULES DIRECTLY INTO THE MON09
                      (     mon09v37.asm):00074         ;                                        IMAGE FILE. USE CONDITIONAL ASSEMBLY TO ENABLE/DISABLE.
                      (     mon09v37.asm):00075         ;                                        CONSTRUCTED MASTER BUILD SCRIPT TO ASSEMBLE THE VARIOUS
                      (     mon09v37.asm):00076         ;                                        LANGUAGE MODULES INTO A MASTER FIRMWARE IMAGE FILE. THUS,
                      (     mon09v37.asm):00077         ;                                        INCLUDING THEM INTO THE MON09 IMAGE AS DATA STATEMENTS
                      (     mon09v37.asm):00078         ;                                        IS UNNESSESARY.
                      (     mon09v37.asm):00079         ; 2021-0412:    JQ      CHANGED THE MANNER IN WHICH NMI IS HANDLED SO THAT THE
                      (     mon09v37.asm):00080         ;                                        VECTOR CAN BE SET IN MEMORY JUST AS THE FIRQ, IRQ, SWI2
                      (     mon09v37.asm):00081         ;                                        AND SWI3 HANDLERS DO. IF AN NMI VECTOR IS NOT SPECIFIED,
                      (     mon09v37.asm):00082         ;                                        MON09 DEFAULTS TO THE INTERNAL NMI HANDLER, WHICH IS SHOWN
                      (     mon09v37.asm):00083         ;                                        BY THE 'DV' COMMAND. ADDED ADDITIONAL BYTES TO THE DATA
                      (     mon09v37.asm):00084         ;                                        TABLES AND AN NMI HANDLER. USE CONDITIONAL STATEMENT TO
                      (     mon09v37.asm):00085         ;                                        ENABLE IT.
                      (     mon09v37.asm):00086         ;                               JQ      ADDED HD6309 ILLOP INSTRUCTION HANDLER. IF NO VECTOR
                      (     mon09v37.asm):00087         ;                                        SPECIFIED, DEFAULTS TO THE MON09 ILLOP HANDLER. USE
                      (     mon09v37.asm):00088         ;                                        CONDITIONAL STATEMENT TO ENABLE IT.
                      (     mon09v37.asm):00089         ;                               JQ      ADDED 'JUMP' COMMAND TO ACCESS THE FP BASIC, TINY BASIC
                      (     mon09v37.asm):00090         ;                                        AND FORTH MODULES IN ROM. USE CONDITIONAL STATEMENT TO
                      (     mon09v37.asm):00091         ;                                        ENABLE IT.
                      (     mon09v37.asm):00092         ;                               JQ      ADDED JUMP TABLE OF 'HOOKS' THAT PROVIDES A SUMMARY OF
                      (     mon09v37.asm):00093         ;                                        USER ACCESSIBLE MON09 ROM ENTRY ADDRESSES AND IRQ RE-
                      (     mon09v37.asm):00094         ;                                        VECTORING ADDRESSES IN DATA RAM. IT IS INTENDED TO BE
                      (     mon09v37.asm):00095         ;                                        EASILY IDENTIFIED AND EXTRACTED FROM THE SYMBOL TABLE
                      (     mon09v37.asm):00096         ;                                        TO BE 'INCLUDED' IN THE USER'S PROGRAM FILE. SINCE THE
                      (     mon09v37.asm):00097         ;                                        TABLE IS LOCATED AT
                      (     mon09v37.asm):00098         ;                               JQ      IN 'FILMEM' ROUTINE, ADDED CODE TO LIMIT THE USER
                      (     mon09v37.asm):00099         ;                                        SPECIFIED ENDING ADDRESS SO AS NOT TO OVERWRITE MON09
                      (     mon09v37.asm):00100         ;                                        DATA IN RAM. THIS EFFECTIVELY LIMITS THE 'FM' COMMAND
                      (     mon09v37.asm):00101         ;                                        TO RAM ONLY ON THE 6809SBC.
                      (     mon09v37.asm):00102         ;
                      (     mon09v37.asm):00103         ;******************************************************************************
                      (     mon09v37.asm):00104         ; VERSION 3.4
                      (     mon09v37.asm):00105         ; 2021-0404:    JQ      MODIFIED FOR USE WITH 6809SBC PROJECT USING 6850 ACIA.
                      (     mon09v37.asm):00106         ;                                        ASSEMBLES WITH LWASM V4.18, WHICH SUPPORTS MACROS AND
                      (     mon09v37.asm):00107         ;                                        CONDITIONAL ASSEMBLY STATEMENTS.
                      (     mon09v37.asm):00108         ;
                      (     mon09v37.asm):00109         ;******************************************************************************
                      (     mon09v37.asm):00110         ;MODS BY JQ
     0025             (     mon09v37.asm):00111         VERSION         EQU     37              VERSION TIMES 10
     0000             (     mon09v37.asm):00112         JQ_DETMCU       EQU     0               SET TO '1' TO ENABLE DETECTION OF MCU TYPE
     0000             (     mon09v37.asm):00113         JQ_NMIRAM       EQU     0               SET TO '1' TO ENABLE NMI HANDLER IN RAM
     0001             (     mon09v37.asm):00114         JQ_ILLOP        EQU     1               SET TO '1' TO ENABLE 6309 ILLOP HANDLER
     0001             (     mon09v37.asm):00115         JQ_JMPMOD       EQU     1               SET TO '1' TO ENABLE JUMP TO MODULES
     0000             (     mon09v37.asm):00116         JQ_EMBEDBIN     EQU     0               SET TO '1' TO EMBED MODULE BINARY IMAGES
     0000             (     mon09v37.asm):00117         JQ_EFORTH       EQU     0               SET TO '1' TO USE EFORTH, ELSE Z79FORTH
                      (     mon09v37.asm):00118         ;
                      (     mon09v37.asm):00119         ; TO-DO
     0000             (     mon09v37.asm):00120         JQ_EEPROM       EQU     0               SET TO '1' TO ENABLE EEPROM WRITING
                      (     mon09v37.asm):00121         
                      (     mon09v37.asm):00122         ;
                      (     mon09v37.asm):00123         ;TNYBASSTRT     EQU     $8C00                   START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00124         ;TNYBASEND      EQU     TNYBASSTRT+$1000        END ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00125         
                      (     mon09v37.asm):00126         ;FTHIMGSTRT     EQU     $9C00                   START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00127         ;FTHIMGEND      EQU     FTHIMGSTRT+$2000        END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00128         ; IFNE JQ_EFORTH                                IF USING EFORTH
                      (     mon09v37.asm):00129         ;FORTHCOLD      EQU     $0100                   DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v37.asm):00130         ; ELSE
                      (     mon09v37.asm):00131         ;FORTHCOLD      EQU     FTHIMGSTRT              DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v37.asm):00132         ; ENDC                                          IF USING EFORTH
                      (     mon09v37.asm):00133         
     C000             (     mon09v37.asm):00134         FPBASSTRT       EQU     $C000                   START ADDRESS OF FP BASIC IN ROM
     E600             (     mon09v37.asm):00135         FPBASEND        EQU     FPBASSTRT+$2600         END ADDRESS OF FP BASIC IN ROM
                      (     mon09v37.asm):00136         ;
                      (     mon09v37.asm):00137         ;== HARDWARE CONSTANTS =================================================
     E437             (     mon09v37.asm):00138         CODE            EQU     $E437   MON09 code goes here
     0000             (     mon09v37.asm):00139         RAMSTRT         EQU     $0000   START OF RAM
     9FFF             (     mon09v37.asm):00140         RAMEND          EQU     $9FFF   END OF RAM
                      (     mon09v37.asm):00141         
     C000             (     mon09v37.asm):00142         ROMSTRT         EQU     $C000   START OF ROM
     0000             (     mon09v37.asm):00143         ROMEND          EQU     $10000  END OF ROM
                      (     mon09v37.asm):00144         
                      (     mon09v37.asm):00145          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
     FFF0             (     mon09v37.asm):00146         VECTTBL         EQU     $FFF0
                      (     mon09v37.asm):00147          ELSE
0000                  (     mon09v37.asm):00148         VECTTBL         EQU     $FFF2
                      (     mon09v37.asm):00149          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00150         
     BBC8             (     mon09v37.asm):00151         LOC             EQU     RAMEND-CODE     OFFSET -> RAM OR ROM CODE LOCATION
                      (     mon09v37.asm):00152         
     9FFE             (     mon09v37.asm):00153         STACK   EQU     RAMEND-1        MON09 Stack (Top of RAM)
                      (     mon09v37.asm):00154         
                      (     mon09v37.asm):00155         ;MODS BY JQ
     9F5F             (     mon09v37.asm):00156         RAM             SET     RAMEND-160      MON09 data goes here
                      (     mon09v37.asm):00157          IFNE JQ_NMIRAM                         NO JQ NMI ENHANCEMENTS
0000                  (     mon09v37.asm):00158         RAM             SET     RAM-2           MON09 NMI VECTOR STORAGE
                      (     mon09v37.asm):00159          ENDC                                   NO JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00160          IFNE JQ_ILLOP                          JQ ILLOP ENHANCEMENTS
     9F5D             (     mon09v37.asm):00161         RAM             SET     RAM-2           MON09 ILLOP VECTOR STORAGE
                      (     mon09v37.asm):00162          ENDC                                   NO JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00163          IFNE JQ_EEPROM                         JQ EEPROM WRITE ENHANCEMENTS
0000                  (     mon09v37.asm):00164         RAM             SET     RAM-2           MON09 E2P PAGE-BYTE COUNTER STORAGE
                      (     mon09v37.asm):00165          ENDC                                   JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00166         ;
                      (     mon09v37.asm):00167         ;== 6850 ACIA CONSTANTS ===============================================
     A000             (     mon09v37.asm):00168         SER1    EQU     $A000           Serial Port 1 (Console)
     A000             (     mon09v37.asm):00169         SER2    EQU     $A000           Serial Port 2 (Aux)
                      (     mon09v37.asm):00170         
     0001             (     mon09v37.asm):00171         RDRF    EQU     1               BIT MASK POSITION FOR RDRF FLAG
     0002             (     mon09v37.asm):00172         TDRE    EQU     2               BIT MASK POSITION FOR TDRE FLAG
                      (     mon09v37.asm):00173         
     0003             (     mon09v37.asm):00174         CTRL1   EQU     $03             MASTER RESET
     0015             (     mon09v37.asm):00175         CTRL2   EQU     $15             115.2K BAUD @8N1
                      (     mon09v37.asm):00176         ;
                      (     mon09v37.asm):00177         ;======================================================================
                      (     mon09v37.asm):00178         ;*
                      (     mon09v37.asm):00179                 ORG     RAM             Internal MON09 variables
                      (     mon09v37.asm):00180         ;*
                      (     mon09v37.asm):00181         ;* MON09 INTERNAL MEMORY
                      (     mon09v37.asm):00182         ;*
9F5D                  (     mon09v37.asm):00183         SWIADR  RMB     2               SWI VECTOR ADDRESS
9F5F                  (     mon09v37.asm):00184         SWI2ADR RMB     2               SWI2 VECTOR ADDRESS
9F61                  (     mon09v37.asm):00185         SWI3ADR RMB     2               SWI3 VECTOR ADDRESS
9F63                  (     mon09v37.asm):00186         IRQADR  RMB     2               IRQ VECTOR ADDRESS
9F65                  (     mon09v37.asm):00187         FIRQADR RMB     2               FIRQ VECTOR ADDRESS
                      (     mon09v37.asm):00188         ;MODS BY JQ
                      (     mon09v37.asm):00189          IFNE JQ_NMIRAM                 USE LOCAL NMI HANDLER
9F67                  (     mon09v37.asm):00190         NMIADR  RMB     2               NMI VECTOR ADDRESS
                      (     mon09v37.asm):00191          ENDC
                      (     mon09v37.asm):00192          IFNE JQ_ILLOP                  USE LOCAL ILLOP HANDLER
9F67                  (     mon09v37.asm):00193         ILOPADR RMB     2               6309 ILLOP VECTOR ADDRESS
                      (     mon09v37.asm):00194          ENDC
                      (     mon09v37.asm):00195          IFNE JQ_EEPROM                 JQ EEPROM WRITE ENHANCEMENTS
9F69                  (     mon09v37.asm):00196         E2PCNT  RMB     1               EEPROM PAGE-BYTE COUNTER
                      (     mon09v37.asm):00197          ENDC                           JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00198         ;
9F69                  (     mon09v37.asm):00199         IOCON   RMB     1               I/O CONFIGURATION BYTE
9F6A                  (     mon09v37.asm):00200         UART1   RMB     2               UART 1 ADDRESS
9F6C                  (     mon09v37.asm):00201         UART2   RMB     2               UART 2 ADDRESS
9F6E                  (     mon09v37.asm):00202         SAVCC   RMB     1               SAVED CONDITION CODE REGISTER
9F6F                  (     mon09v37.asm):00203         SAVA    RMB     1               SAVED 6809 A REGISTER
9F70                  (     mon09v37.asm):00204         SAVB    RMB     1               SAVED 6809 B REGISTER
9F71                  (     mon09v37.asm):00205         SAVDP   RMB     1               SAVED DIRECT PAGE REGISTER
9F72                  (     mon09v37.asm):00206         SAVX    RMB     2               SAVED X REGISTER
9F74                  (     mon09v37.asm):00207         SAVY    RMB     2               SAVED Y REGISTER
9F76                  (     mon09v37.asm):00208         SAVU    RMB     2               SAVED U REGISTER
9F78                  (     mon09v37.asm):00209         SAVPC   RMB     2               SAVED PROGRAM COUNTER
9F7A                  (     mon09v37.asm):00210         SAVS    RMB     2               SAVED S REGISTER
9F7C                  (     mon09v37.asm):00211         TEMP    RMB     2               TEMPORARY STORAGE
9F7E                  (     mon09v37.asm):00212         STPFLG  RMB     1               REGISTER DISPLAY WHILE STEPPING FLAG
9F7F                  (     mon09v37.asm):00213         PTRSAV  RMB     2               SINGLE STEP AND DISASSEMBLER CODE POINTER
9F81                  (     mon09v37.asm):00214         INSTYP  RMB     1               DISASSEMBLED INSTRUCTION TYPE
9F82                  (     mon09v37.asm):00215         POSBYT  RMB     1               POSTBYTE STORAGE AREA
9F83                  (     mon09v37.asm):00216         BRKTAB  RMB     24              BREAKPOINT TABLE
9F9B                  (     mon09v37.asm):00217         DSPBUF  RMB     50              DISASSEMBLER DISPLAY BUFFER
9FCD                  (     mon09v37.asm):00218         INSRAM  RMB     7               INSTRUCTION EXECUTION ADDRESS
                      (     mon09v37.asm):00219         
                      (     mon09v37.asm):00220         ;**********************************************************************
                      (     mon09v37.asm):00221          IFNE JQ_EMBEDBIN               ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v37.asm):00222         ;*
                      (     mon09v37.asm):00223                 ; INCLUDE BINARY IMAGES OF ADDITONAL LANGUAGE MODULES
                      (     mon09v37.asm):00224                 ; NOTE: THE MASTER FIRMWARE BUILD SCRIPT HANDLES
                      (     mon09v37.asm):00225                 ;       COMBINING THE VARIOUS LANGUAGE MODULES INTO
                      (     mon09v37.asm):00226                 ;       THE PROPER ADDRESSES IN THE FINAL HEX AND BIN
                      (     mon09v37.asm):00227                 ;       FILES.
                      (     mon09v37.asm):00228         ;*
                      (     mon09v37.asm):00229         ;========> START OF MICRO BASIC PLUS BINARY IMAGE <==========
                      (     mon09v37.asm):00230                         ORG     TNYBASSTRT      START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v37.asm):00231                         JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00232                         FILL $FF,FTHIMGSTRT-*
                      (     mon09v37.asm):00233         
                      (     mon09v37.asm):00234         ;========> START OF FORTH BINARY IMAGE <=====================
                      (     mon09v37.asm):00235                         ORG     FTHIMGSTRT      START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00236         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00237                 INCLUDEBIN      ../../forth/eForth/ef09.bin
                      (     mon09v37.asm):00238                         FILL $FF,FPBASSTRT-*
                      (     mon09v37.asm):00239         
                      (     mon09v37.asm):00240         ;========> START OF FP BASIC BINARY IMAGE <==================
                      (     mon09v37.asm):00241                         ORG     FPBASSTRT       START ADDRESS OF FP BASIC IN ROM
                      (     mon09v37.asm):00242         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v37.asm):00243                 INCLUDEBIN      ../../basic/exbasrom/ExBasROM.bin
                      (     mon09v37.asm):00244                         FILL $FF,CODE-*
                      (     mon09v37.asm):00245         ;
                      (     mon09v37.asm):00246         ;**********************************************************************
                      (     mon09v37.asm):00247          ENDC                           ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v37.asm):00248         ;*
                      (     mon09v37.asm):00249                 ORG     CODE            MONITOR CODE STARTS HERE
                      (     mon09v37.asm):00250         
E437 7EE47F           (     mon09v37.asm):00251                 JMP     RESET           JUMP TO MON09 COLD-START
                      (     mon09v37.asm):00252         
                      (     mon09v37.asm):00253         ;===============================================================================
                      (     mon09v37.asm):00254         ; TRAMPOLINE JUMP TABLE CONTAINING MON09 ROM ENTRY POINTS FOR USER PROGRAMS
                      (     mon09v37.asm):00255         ;===============================================================================
E43A 7EEDA6           (     mon09v37.asm):00256         MON09_GETCHR    JMP     GETCHR                  ;Reads character from selected input device, returns
                      (     mon09v37.asm):00257                                                         ; in ACCA.
E43D 7EED86           (     mon09v37.asm):00258         MON09_GETECH    JMP     GETECH                  ;Reads and echos char. from selected input device,
                      (     mon09v37.asm):00259                                                         ; converts it to capital, and returns in ACCA.
E440 7EED3C           (     mon09v37.asm):00260         MON09_GETNIB    JMP     GETNIB                  ;Gets a single hex nibble from selected input device,
                      (     mon09v37.asm):00261                                                         ; and returns in ACCA. Sets 'Z' flag if successful.
E443 7EED1A           (     mon09v37.asm):00262         MON09_GETBYT    JMP     GETBYT                  ;Gets a single hex byte from selected  input  device,
                      (     mon09v37.asm):00263                                                         ; and returns in ACCA. Sets 'Z' flag is successful.
E446 7EECD3           (     mon09v37.asm):00264         MON09_GETADR    JMP     GETADR                  ;Gets a hex word from selected input device, and
                      (     mon09v37.asm):00265                                                         ; returns in D accumulator. Sets 'Z' if successful.
E449 7EECB6           (     mon09v37.asm):00266         MON09_GETRNG    JMP     GETRNG                  ;Gets an address range from selected input device,
                      (     mon09v37.asm):00267                                                         ; first address is returned in 'X', and second address
                      (     mon09v37.asm):00268                                                         ; is returned in 'D'. Sets 'Z' if successful.
E44C 7EEDD9           (     mon09v37.asm):00269         MON09_CHKCHR    JMP     CHKCHR                  ;Checks for character from terminal, and  returns  in
                      (     mon09v37.asm):00270                                                         ; ACCA if found, otherwise returns $FF. Sets 'Z' flag
                      (     mon09v37.asm):00271                                                         ; If character is found, and is the escape character.
E44F 7EEDBB           (     mon09v37.asm):00272         MON09_PUTCHR    JMP     PUTCHR                  ;Writes character in ACCA to all enabled output devs.
E452 7EED94           (     mon09v37.asm):00273         MON09_SPACE     JMP     SPACE                   ;Writes a space to all enabled output devices.
E455 7EED9A           (     mon09v37.asm):00274         MON09_LFCR      JMP     LFCR                    ;Writes a line-feed, Carriage-return pair to all
                      (     mon09v37.asm):00275                                                         ; enabled output devices.
E458 7EED63           (     mon09v37.asm):00276         MON09_HOUT      JMP     HOUT                    ;Outputs nibble in ACCA to output devices in HEX.
E45B 7EED59           (     mon09v37.asm):00277         MON09_HEXOUT    JMP     HEXOUT                  ;Outputs byte in ACCA to output devices in HEX.
E45E 7EED55           (     mon09v37.asm):00278         MON09_WRDOUT    JMP     WRDOUT                  ;Outputs word in ACCD to output devices in HEX.
E461 7EED79           (     mon09v37.asm):00279         MON09_WRLIN     JMP     WRLIN                   ;Outputs message string pointed to by X to enabled
                      (     mon09v37.asm):00280                                                         ; output devices. String ends with null ($00) or with
                      (     mon09v37.asm):00281                                                         ; Carriage-Return ($0D). If strings ends with Carriage
                      (     mon09v37.asm):00282                                                         ; Return, then LFCR is displayed at end.
E464 7EED6F           (     mon09v37.asm):00283         MON09_WRMSG     JMP     WRMSG                   ;Same as above, except message string in inline with
                      (     mon09v37.asm):00284                                                         ; code, and immediatly follows call to WRMSG.
E467 7EEBBD           (     mon09v37.asm):00285         MON09_DLOAD     JMP     DLOAD                   ;Downloads one record of a motorola hex format file
                      (     mon09v37.asm):00286                                                         ; from the selected input device. Sets 'C' if record
                      (     mon09v37.asm):00287                                                         ; was NOT an end of file record.
E46A 7EEB9A           (     mon09v37.asm):00288         MON09_LOAD      JMP     LOAD                    ;Selects AUX input, and downloads entire motorola hex
                      (     mon09v37.asm):00289                                                         ; format file. Prints '.' for every record received.
E46D 7EF073           (     mon09v37.asm):00290         MON09_DISASS    JMP     DISASS                  ;Disassembles opcode pointed to by Y, and placed  the
                      (     mon09v37.asm):00291                                                         ; disasembler output text in memory pointed to by U.
                      (     mon09v37.asm):00292                                                         ; disassembler output text ends with carriage return.
                      (     mon09v37.asm):00293                                                         ; Y is left pointing to next opcode in memory.
E470 7EEE15           (     mon09v37.asm):00294         MON09_STEP      JMP     STEP                    ;Steps one instruction, from address in saved program
                      (     mon09v37.asm):00295                                                         ; counter. All saved registers are updated.
E473 7EEE04           (     mon09v37.asm):00296         MON09_STEPDI    JMP     STEPDI                  ;Same as above, except  disassembled  instruction  is
                      (     mon09v37.asm):00297                                                         ; Displayed.
E476 7EE85A           (     mon09v37.asm):00298         MON09_DISREG    JMP     DISREG                  ;Displays all of the saved registers.
E479 7EE4B5           (     mon09v37.asm):00299         MON09_MONITOR   JMP     MONITOR                 ;Reenters the monitor.
E47C 7EE47F           (     mon09v37.asm):00300         MON09_RESET     JMP     RESET                   ;Reinitializes the monitor via RESET.
                      (     mon09v37.asm):00301         ;===============================================================================
                      (     mon09v37.asm):00302         ;*
                      (     mon09v37.asm):00303         ;* INITIALIZATIONS.
                      (     mon09v37.asm):00304         ;*
E47F                  (     mon09v37.asm):00305         RESET
E47F 10CE9FFE         (     mon09v37.asm):00306                 LDS     #STACK          SET UP STACK
E483 8E9F5D           (     mon09v37.asm):00307                 LDX     #SWIADR         POINT TO START
E486                  (     mon09v37.asm):00308         CLRRAM                          ;CLEAR MON09 DATA AREA
E486 6F80             (     mon09v37.asm):00309                 CLR     ,X+             CLEAR IT
E488 8C9FCD           (     mon09v37.asm):00310                 CMPX    #INSRAM         AT BUFFER?
E48B 25F9             (     mon09v37.asm):00311                 BLO     CLRRAM          KEEP GOING
                      (     mon09v37.asm):00312         
                      (     mon09v37.asm):00313                 ;INIT ACIA1
E48D 8EA000           (     mon09v37.asm):00314                 LDX     #SER1           GET SERIAL PORT 1
E490 BF9F6A           (     mon09v37.asm):00315                 STX     >UART1          SET IT UP
E493 171897           (     mon09v37.asm):00316                 LBSR    INIT            INITIALIZE IT
                      (     mon09v37.asm):00317         
                      (     mon09v37.asm):00318                 ;INIT ACIA2
E496 8EA000           (     mon09v37.asm):00319                 LDX     #SER2           GET SERIAL PORT 2
E499 BF9F6C           (     mon09v37.asm):00320                 STX     >UART2          SET IT UP
E49C 17188E           (     mon09v37.asm):00321                 LBSR    INIT            INITIALIZE IT
                      (     mon09v37.asm):00322         
                      (     mon09v37.asm):00323                 ;INIT I/O CONFIG FLAG
E49F 8603             (     mon09v37.asm):00324                 LDA     #3              DEFAULT I/O CONFIGURATION
E4A1 B79F69           (     mon09v37.asm):00325                 STA     IOCON           SET IT
                      (     mon09v37.asm):00326         
                      (     mon09v37.asm):00327                 ;INIT SHADOW STACK
E4A4 CC9F5D           (     mon09v37.asm):00328                 LDD     #RAM            DEFAULT STACK AT TOP OF RAM
E4A7 FD9F7A           (     mon09v37.asm):00329                 STD     SAVS            SAVE IT
                      (     mon09v37.asm):00330         
                      (     mon09v37.asm):00331                 ;INIT SHADOW CONDITION REGISTER
E4AA 86D0             (     mon09v37.asm):00332                 LDA     #$D0            SET CC
E4AC B79F6E           (     mon09v37.asm):00333                 STA     SAVCC           SAVE IT
                      (     mon09v37.asm):00334         
                      (     mon09v37.asm):00335         ;MODS BY JQ
                      (     mon09v37.asm):00336          IFNE JQ_NMIRAM                 JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00337                 LDD     #NMIHND         SET DEFAULT NMI HANDLER
                      (     mon09v37.asm):00338                 STD     NMIADR          SAVE IT
                      (     mon09v37.asm):00339          ENDC                           JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00340         ;
                      (     mon09v37.asm):00341          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
E4AF CCF2AC           (     mon09v37.asm):00342                 LDD     #ILOPHND        SET DEFAULT ILLOP HANDLER
E4B2 FD9F67           (     mon09v37.asm):00343                 STD     ILOPADR         SAVE IT
                      (     mon09v37.asm):00344          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00345         ;
                      (     mon09v37.asm):00346         ;* Emit the sign-on message
E4B5                  (     mon09v37.asm):00347         MONITOR
                      (     mon09v37.asm):00348                 ; Emit the first part of the sign-on message
E4B5 1708B7           (     mon09v37.asm):00349                 LBSR    WRMSG           OUTPUT MESSAGE
E4B8 0A0D             (     mon09v37.asm):00350                 FCB     $0A,$0D
E4BA 4D4F4E3039205665 (     mon09v37.asm):00351                 FCC     'MON09 Version '
     7273696F6E20
E4C8 332E37           (     mon09v37.asm):00352                 FCB     VERSION/10+$30,'.',VERSION%10+$30
E4CB 0D0A             (     mon09v37.asm):00353                 FCB     $0D,$0A
                      (     mon09v37.asm):00354         
                      (     mon09v37.asm):00355         ;       INCLUDE A DATE OF BUILD STRING
                      (     mon09v37.asm):00356                 INCLUDE datestring.asm
E4CD 4275696C643A2032 (   datestring.asm):00001                 FCC     'Build: 2024-1125 @19:41:24 CST'
     3032342D31313235
     204031393A34313A
     323420435354
                      (     mon09v37.asm):00357         
E4EB 0D0A             (     mon09v37.asm):00358                 FCB     $0D,$0A
E4ED 284329313938352D (     mon09v37.asm):00359                 FCC     '(C)1985-2007 Dave Dunfield'
     3230303720446176
     652044756E666965
     6C64
E507 0A0D             (     mon09v37.asm):00360                 FCB     $0A,$0D
E509 4D6F646966696361 (     mon09v37.asm):00361                 FCC     'Modifications (C)2021 Johnny Quest'
     74696F6E73202843
     2932303231204A6F
     686E6E7920517565
     7374
E52B 0A0D             (     mon09v37.asm):00362                 FCB     $0A,$0D
E52D 204D6F6469666965 (     mon09v37.asm):00363                 FCC     ' Modified for the HB63C09M By Z80Dad'
     6420666F72207468
     6520484236334330
     394D204279205A38
     30446164
                      (     mon09v37.asm):00364         ;       FCB     $0A,$0D,$FF
E551 FF               (     mon09v37.asm):00365                 FCB     $FF
                      (     mon09v37.asm):00366         ;
                      (     mon09v37.asm):00367         ;------------------------------------------------------------
                      (     mon09v37.asm):00368          IFNE JQ_DETMCU         JQ MCU DETECTION
                      (     mon09v37.asm):00369         ; Added by JQ - Determine MCU and send message string
                      (     mon09v37.asm):00370         ;* Determine whether processor is 6309 or 6809
                      (     mon09v37.asm):00371         ;* Returns Z clear if 6309, set if 6809
                      (     mon09v37.asm):00372                 LDX     #NOT6809        POINT TO 6309 STRING
                      (     mon09v37.asm):00373                 PSHS    D               SAVE D REGISTER
                      (     mon09v37.asm):00374                 FDB     $1043           6309 COMD INSRUCTION (COMA on 6809)
                      (     mon09v37.asm):00375                 CMPB    1,S             NOT EQUAL IF 6309
                      (     mon09v37.asm):00376                 PULS    D               RESTORE D REGISTER
                      (     mon09v37.asm):00377                 BNE     MONITOR1        BRANCH IF 6309 DETECTED
                      (     mon09v37.asm):00378                 LDX     #MOT6809        MODIFY POINTER TO 6809 STRING
                      (     mon09v37.asm):00379         ;
E552                  (     mon09v37.asm):00380         MONITOR1
                      (     mon09v37.asm):00381                 JSR             MON09_WRLIN             EMIT THE STRING
                      (     mon09v37.asm):00382         ;       LDMD    #$01                            SET 6309 NATIVE MODE
                      (     mon09v37.asm):00383                 BRA             MONITOR2                CONTINUE SIGN-ON MESSAGE
                      (     mon09v37.asm):00384         ;
E552                  (     mon09v37.asm):00385         MOT6809
                      (     mon09v37.asm):00386                 FCC             ' MCU:     MC6809'
                      (     mon09v37.asm):00387                 FCB             $0A,$0D,0
E552                  (     mon09v37.asm):00388         NOT6809
                      (     mon09v37.asm):00389                 FCC             ' MCU:     HD6309'
                      (     mon09v37.asm):00390                 FCB             $0A,$0D,0
                      (     mon09v37.asm):00391          ENDC                           JQ MCU DETECTION
                      (     mon09v37.asm):00392         ;------------------------------------------------------------
                      (     mon09v37.asm):00393         ;
E552                  (     mon09v37.asm):00394         MONITOR2
                      (     mon09v37.asm):00395                 ; Emit the rest of the sign-on message
E552 17081A           (     mon09v37.asm):00396                 LBSR    WRMSG                           OUTPUT MESSAGE
                      (     mon09v37.asm):00397         ;       FCC     ' UART(s): 6850 ACIA'
E555 2055415254287329 (     mon09v37.asm):00398                 FCC     ' UART(s): ATMEGA32A 68B50 Wrapper'
     3A2041544D454741
     3332412036384235
     3020577261707065
     72
E576 0A0D             (     mon09v37.asm):00399                 FCB     $0A,$0D
                      (     mon09v37.asm):00400         ;MODS BY JQ
                      (     mon09v37.asm):00401          IFNE JQ_NMIRAM                                 JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00402                 FCC     ' Enabled: NMI Trapping'
                      (     mon09v37.asm):00403                 FCB     $0A,$0D
                      (     mon09v37.asm):00404          ENDC                                           JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00405          IFNE JQ_ILLOP                                  JQ ILLOP ENHANCEMENTS
E578 20456E61626C6564 (     mon09v37.asm):00406                 FCC     ' Enabled: 6309 ILLOP & DIV0 Trapping'
     3A20363330392049
     4C4C4F5020262044
     4956302054726170
     70696E67
E59C 0A0D             (     mon09v37.asm):00407                 FCB     $0A,$0D
                      (     mon09v37.asm):00408          ENDC                                           JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00409          IFNE JQ_EEPROM                                 JQ EEPROM ENHANCEMENTS
                      (     mon09v37.asm):00410                 FCC     ' Enabled: EEPROM Write'
                      (     mon09v37.asm):00411                 FCB     $0A,$0D
                      (     mon09v37.asm):00412          ENDC                                           JQ EEPROM ENHANCEMENTS
                      (     mon09v37.asm):00413         ;
E59E 416C6C2072696768 (     mon09v37.asm):00414                 FCC     'All rights & remedies reserved.'
     747320262072656D
     6564696573207265
     7365727665642E
E5BD 0AFF             (     mon09v37.asm):00415                 FCB     $0A,$FF
                      (     mon09v37.asm):00416         
E5BF                  (     mon09v37.asm):00417         MAIN
E5BF 10CE9FFE         (     mon09v37.asm):00418                 LDS     #STACK                          FIX STACK IN CASE ERROR
E5C3 1707A9           (     mon09v37.asm):00419                 LBSR    WRMSG                           OUTPUT MESSAGE
E5C6 2A2000           (     mon09v37.asm):00420                 FCN             '* '
E5C9 1707BA           (     mon09v37.asm):00421                 LBSR    GETECH                          GET CHARACTER
E5CC 5F               (     mon09v37.asm):00422                 CLRB                                    INDICATE NO SECOND CHAR
                      (     mon09v37.asm):00423         ;* LOOK FOR COMMAND IN TABLE
E5CD                  (     mon09v37.asm):00424         LOOKC
E5CD 8EE605           (     mon09v37.asm):00425                 LDX     #CMDTAB         POINT TO COMMAND TABLE
E5D0 7F9F7C           (     mon09v37.asm):00426                 CLR     TEMP            INDICATE NO PARTIAL MATCH
E5D3                  (     mon09v37.asm):00427         LOOK1
E5D3 10A381           (     mon09v37.asm):00428                 CMPD    ,X++            DOES IT MATCH
E5D6 271E             (     mon09v37.asm):00429                 BEQ     LOOK3           YES IT DOES
E5D8 A11E             (     mon09v37.asm):00430                 CMPA    -2,X            DOES FIRST CHAR MATCH?
E5DA 2603             (     mon09v37.asm):00431                 BNE     LOOK2           NO, DON'T RECORD
E5DC 7A9F7C           (     mon09v37.asm):00432                 DEC     TEMP            SET FLAG
E5DF                  (     mon09v37.asm):00433         LOOK2
E5DF 3002             (     mon09v37.asm):00434                 LEAX    2,X             ADVANCE TO NEXT
E5E1 6D84             (     mon09v37.asm):00435                 TST     ,X              HAVE WE HIT THE END
E5E3 26EE             (     mon09v37.asm):00436                 BNE     LOOK1           NO, KEEP LOOKING
E5E5 5D               (     mon09v37.asm):00437                 TSTB                    ALREADY HAVE TWO CHARS?
E5E6 2615             (     mon09v37.asm):00438                 BNE     ERROR           YES, ERROR
E5E8 F69F7C           (     mon09v37.asm):00439                 LDB     TEMP            ANY PARTIAL MATCHES?
E5EB 2710             (     mon09v37.asm):00440                 BEQ     ERROR           NO, ERROR
E5ED 1F89             (     mon09v37.asm):00441                 TFR     A,B             SAVE CHAR IN 'A'
E5EF 170794           (     mon09v37.asm):00442                 LBSR    GETECH          GET NEXT CHAR
E5F2 1E89             (     mon09v37.asm):00443                 EXG     A,B             SWAP BACK
E5F4 20D7             (     mon09v37.asm):00444                 BRA     LOOKC           AND CONTINUE
                      (     mon09v37.asm):00445         ;* COMMAND WAS FOUND, EXECUTE IT
E5F6                  (     mon09v37.asm):00446         LOOK3
E5F6 17079B           (     mon09v37.asm):00447                 LBSR    SPACE           OUTPUT SPACE
E5F9 AD94             (     mon09v37.asm):00448                 JSR     [,X]            EXECUTE COMMAND
E5FB 20C2             (     mon09v37.asm):00449                 BRA     MAIN            AND RETURN
                      (     mon09v37.asm):00450         ;* ERROR HAS OCCURED
E5FD                  (     mon09v37.asm):00451         ERROR
E5FD 17076F           (     mon09v37.asm):00452                 LBSR    WRMSG           OUTPUT MESSAGE
E600 203F             (     mon09v37.asm):00453                 FCC     ' ?'
E602 FF               (     mon09v37.asm):00454                 FCB     $FF
E603 20BA             (     mon09v37.asm):00455                 BRA     MAIN            TRY AGAIN
                      (     mon09v37.asm):00456         ;* COMMAND LOOKUP TABLE
E605                  (     mon09v37.asm):00457         CMDTAB
E605 444D             (     mon09v37.asm):00458                 FCB     'D','M'         DISPLAY MEMORY
E607 E6D6             (     mon09v37.asm):00459                 FDB     MEMORY
E609 4444             (     mon09v37.asm):00460                 FCB     'D','D'         DISASSEMBLE
E60B E785             (     mon09v37.asm):00461                 FDB     DISASM
E60D 4452             (     mon09v37.asm):00462                 FCB     'D','R'         DISPLAY REGISTERS
E60F E85A             (     mon09v37.asm):00463                 FDB     DISREG
E611 4442             (     mon09v37.asm):00464                 FCB     'D','B'         VIEW BREAKPOINTS
E613 E92B             (     mon09v37.asm):00465                 FDB     DSPBRK
E615 4456             (     mon09v37.asm):00466                 FCB     'D','V'         DISPLAY VECTORS
E617 E7A7             (     mon09v37.asm):00467                 FDB     DISVEC
E619 4455             (     mon09v37.asm):00468                 FCB     'D','U'         DISPLAY UARTS
E61B E7E6             (     mon09v37.asm):00469                 FDB     DISURT
E61D 4352             (     mon09v37.asm):00470                 FCB     'C','R'         CHANGE REGISTER
E61F E8E0             (     mon09v37.asm):00471                 FDB     CHGREG
E621 4356             (     mon09v37.asm):00472                 FCB     'C','V'         CHANGE VECTORS
E623 E7FF             (     mon09v37.asm):00473                 FDB     CHGVEC
E625 4355             (     mon09v37.asm):00474                 FCB     'C','U'         CHANGE UARTS
E627 E839             (     mon09v37.asm):00475                 FDB     CHGURT          DO IT
E629 4500             (     mon09v37.asm):00476                 FCB     'E',0           SUBSTITUTE MEMORY
E62B E742             (     mon09v37.asm):00477                 FDB     SUBMEM
                      (     mon09v37.asm):00478          IFNE JQ_JMPMOD         JQ JUMP MODULE ENHANCEMENTS
E62D 4A42             (     mon09v37.asm):00479                 FCB     'J','B'         JUMP TO FP BASIC MODULE
E62F E672             (     mon09v37.asm):00480                 FDB     JUMPFPBAS
                      (     mon09v37.asm):00481         ;       FCB     'J','T'         JUMP TO TINYBASIC MODULE
                      (     mon09v37.asm):00482         ;       FDB     JUMPTNYBAS
                      (     mon09v37.asm):00483         ;       FCB     'J','F'         JUMP TO FORTH MODULE
                      (     mon09v37.asm):00484         ;       FDB     JUMPFORTH
                      (     mon09v37.asm):00485          ENDC                   JQ JUMP MODULE ENHANCEMENTS
                      (     mon09v37.asm):00486         ;
E631 4C00             (     mon09v37.asm):00487                 FCB     'L',0           DOWNLOAD
E633 EB9A             (     mon09v37.asm):00488                 FDB     LOAD
E635 4200             (     mon09v37.asm):00489                 FCB     'B',0           SET BREAKPOINT
E637 E961             (     mon09v37.asm):00490                 FDB     SETBRK
E639 5300             (     mon09v37.asm):00491                 FCB     'S',0           STEP
E63B E981             (     mon09v37.asm):00492                 FDB     GOSTEP
E63D 4700             (     mon09v37.asm):00493                 FCB     'G',0           GO
E63F E9AB             (     mon09v37.asm):00494                 FDB     GOEXEC
E641 5400             (     mon09v37.asm):00495                 FCB     'T',0           TRANSPARENT MODE
E643 EB76             (     mon09v37.asm):00496                 FDB     TMODE
E645 464D             (     mon09v37.asm):00497                 FCB     'F','M'         FILL MEMORY
E647 E699             (     mon09v37.asm):00498                 FDB     FILMEM
E649 5252             (     mon09v37.asm):00499                 FCB     'R','R'         REPEATING READ
E64B E9EA             (     mon09v37.asm):00500                 FDB     RDLOOP
E64D 5257             (     mon09v37.asm):00501                 FCB     'R','W'         REPEATING WRITE
E64F E9FA             (     mon09v37.asm):00502                 FDB     WRLOOP
E651 4D54             (     mon09v37.asm):00503                 FCB     'M','T'         MEMORY TEST
E653 EA44             (     mon09v37.asm):00504                 FDB     RAMTEST
E655 5700             (     mon09v37.asm):00505                 FCB     'W',0           WRITE MEMORY
E657 E732             (     mon09v37.asm):00506                 FDB     WRIMEM
E659 4D4D             (     mon09v37.asm):00507                 FCB     'M','M'         MOVE MEMORY
E65B E6BC             (     mon09v37.asm):00508                 FDB     MOVMEM
E65D 5852             (     mon09v37.asm):00509                 FCB     'X','R'         REPEATING 16 BIT READ
E65F EA19             (     mon09v37.asm):00510                 FDB     XRLOOP
E661 5857             (     mon09v37.asm):00511                 FCB     'X','W'         REPEATING 16 BIT WRITE
E663 EA29             (     mon09v37.asm):00512                 FDB     XWLOOP
E665 2B00             (     mon09v37.asm):00513                 FCB     '+',0           HEX ADDITION
E667 EB15             (     mon09v37.asm):00514                 FDB     HEXADD
E669 2D00             (     mon09v37.asm):00515                 FCB     '-',0           HEX SUBTRACTION
E66B EB26             (     mon09v37.asm):00516                 FDB     HEXSUB
E66D 3F00             (     mon09v37.asm):00517                 FCB     '?',0           HELP COMMAND
E66F EB48             (     mon09v37.asm):00518                 FDB     HELP
E671 00               (     mon09v37.asm):00519                 FCB     0               MARK END OF TABLE
                      (     mon09v37.asm):00520         
                      (     mon09v37.asm):00521         ;MODS BY JQ, MODIFIED FOR HB63C09
                      (     mon09v37.asm):00522         ;******************************************************************************
                      (     mon09v37.asm):00523         ;* 'J' - JUMP TO MODULE
                      (     mon09v37.asm):00524         ;******************************************************************************
                      (     mon09v37.asm):00525          IFNE JQ_JMPMOD         JQ JUMP TO MODULES
                      (     mon09v37.asm):00526         ;==============================================
E672                  (     mon09v37.asm):00527         JUMPFPBAS
E672 8EE67E           (     mon09v37.asm):00528                 LDX     #FPBASMSG       POINT TO MESSAGE START
E675 170701           (     mon09v37.asm):00529                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00530         
E678 7EC000           (     mon09v37.asm):00531                 JMP     FPBASSTRT       JUMP TO BASIC COLD START
                      (     mon09v37.asm):00532         
E67B 16071C           (     mon09v37.asm):00533                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00534         
E67E                  (     mon09v37.asm):00535         FPBASMSG
E67E 0D0A             (     mon09v37.asm):00536                 FCB     $0D,$0A
E680 426F6F74696E6720 (     mon09v37.asm):00537                 FCC     'Booting MS FP BASIC...'
     4D53204650204241
     5349432E2E2E
E696 0D0A             (     mon09v37.asm):00538                 FCB     $0D,$0A
E698 FF               (     mon09v37.asm):00539                 FCB     $FF                     END OF TABLE
                      (     mon09v37.asm):00540         ;
                      (     mon09v37.asm):00541         ;==============================================
                      (     mon09v37.asm):00542         ;JUMPTNYBAS
                      (     mon09v37.asm):00543         ;       LDX             #TNYBASMSG      POINT TO MESSAGE START
                      (     mon09v37.asm):00544         ;       LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00545         
                      (     mon09v37.asm):00546         ;       JMP             TNYBASSTRT      JUMP TO FORTH COLD START
                      (     mon09v37.asm):00547         
                      (     mon09v37.asm):00548         ;       LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00549         
                      (     mon09v37.asm):00550         ;TNYBASMSG
                      (     mon09v37.asm):00551         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00552         ;       FCC             'Booting TinyBASIC...'
                      (     mon09v37.asm):00553         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00554         ;       FCB             $FF                     END OF TABLE
                      (     mon09v37.asm):00555         
                      (     mon09v37.asm):00556         ;==============================================
                      (     mon09v37.asm):00557         ; Load Forth into RAM.
                      (     mon09v37.asm):00558         ;INTERNAL MOVMEM ROUTINE: IMAGE START IN X, IMAGE END IN D, DESTINATION
                      (     mon09v37.asm):00559         ;  START ADDRESS IN Y.
                      (     mon09v37.asm):00560         ;JUMPFORTH
                      (     mon09v37.asm):00561         ; IFNE JQ_EFORTH                        IF USING EFORTH
                      (     mon09v37.asm):00562         ;       LDX             #FTHIMGSTRT     START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00563         ;       LDY             #FORTHCOLD      DESTINATION ADDRESS IN RAM
                      (     mon09v37.asm):00564         ;       LDD             #FTHIMGEND      END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v37.asm):00565         ;       STD             TEMP            MOVE TO VARIABLE
                      (     mon09v37.asm):00566         
                      (     mon09v37.asm):00567         ;JMPFTH1
                      (     mon09v37.asm):00568         ;       LDA             ,X+                     GET SOURCE BYTE
                      (     mon09v37.asm):00569         ;       STA             ,Y+                     SAVE IN DEST
                      (     mon09v37.asm):00570         ;       CMPX    TEMP            SAVE IT
                      (     mon09v37.asm):00571         ;       BLS             JMPFTH1         KEEP MOVING
                      (     mon09v37.asm):00572          ;ENDC                                  IF USING EFORTH
                      (     mon09v37.asm):00573         
                      (     mon09v37.asm):00574         ;       LDX             #FTHBTMSG       POINT TO MESSAGE START
                      (     mon09v37.asm):00575         ;       LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v37.asm):00576         
                      (     mon09v37.asm):00577         ;       JSR             FORTHCOLD       EXECUTE A CALL TO FORTH COLD START
                      (     mon09v37.asm):00578         
                      (     mon09v37.asm):00579         ;       LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v37.asm):00580         
                      (     mon09v37.asm):00581         ;FTHBTMSG
                      (     mon09v37.asm):00582         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00583         ;       FCC             'Booting FORTH...'
                      (     mon09v37.asm):00584         ;       FCB             $0D,$0A
                      (     mon09v37.asm):00585         ;       FCB             $FF                     END OF TABLE
                      (     mon09v37.asm):00586         
                      (     mon09v37.asm):00587          ENDC                           JQ JUMP TO MODULES
                      (     mon09v37.asm):00588         ;
                      (     mon09v37.asm):00589         ;******************************************************************************
                      (     mon09v37.asm):00590         ;* 'F' - FILL MEMORY
                      (     mon09v37.asm):00591         ;******************************************************************************
E699                  (     mon09v37.asm):00592         FILMEM
E699 17061A           (     mon09v37.asm):00593                 LBSR    GETRNG          GET ADDRESSES
                      (     mon09v37.asm):00594         ;MODS BY JQ
E69C 10839F5C         (     mon09v37.asm):00595                 CMPD    #RAM-1          START OF MON09 DATA?
E6A0 2F03             (     mon09v37.asm):00596                 BLE     FILL1           NO, ADDRESS OKAY
E6A2 CC9F5C           (     mon09v37.asm):00597                 LDD     #RAM-1          STOP AT MON09 DATA-1
                      (     mon09v37.asm):00598         ;
E6A5                  (     mon09v37.asm):00599         FILL1
E6A5 FD9F7C           (     mon09v37.asm):00600                 STD     TEMP            SAVE IT
E6A8 1706E9           (     mon09v37.asm):00601                 LBSR    SPACE           SPACE OVER
E6AB 17066C           (     mon09v37.asm):00602                 LBSR    GETBYT          GET DATA BYTE
E6AE 1026FF4B         (     mon09v37.asm):00603                 LBNE    ERROR           INVALID
E6B2                  (     mon09v37.asm):00604         FILL2
E6B2 A780             (     mon09v37.asm):00605                 STA     ,X+                     WRITE IT
E6B4 BC9F7C           (     mon09v37.asm):00606                 CMPX    TEMP            ARE WE THERE
E6B7 23F9             (     mon09v37.asm):00607                 BLS     FILL2           NO, KEEP GOING
E6B9 1606DE           (     mon09v37.asm):00608                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00609         ;
                      (     mon09v37.asm):00610         ;******************************************************************************
                      (     mon09v37.asm):00611         * 'MM' - MOVE MEMORY
                      (     mon09v37.asm):00612         ;******************************************************************************
E6BC                  (     mon09v37.asm):00613         MOVMEM
                      (     mon09v37.asm):00614          IFNE 0         FOR TESTING
                      (     mon09v37.asm):00615                 JMP     $2000
                      (     mon09v37.asm):00616          ELSE
E6BC 1705F7           (     mon09v37.asm):00617                 LBSR    GETRNG          GET A RANGE
E6BF FD9F7C           (     mon09v37.asm):00618                 STD     TEMP            SAVE LAST VALUE
E6C2 1706CF           (     mon09v37.asm):00619                 LBSR    SPACE           SEPERATOR
E6C5 17060B           (     mon09v37.asm):00620                 LBSR    GETADR          GET DEST ADDRESS
E6C8 1F02             (     mon09v37.asm):00621                 TFR     D,Y             SET IT UP
                      (     mon09v37.asm):00622         
E6CA                  (     mon09v37.asm):00623         MOVM1
E6CA A680             (     mon09v37.asm):00624                 LDA     ,X+             GET SOURCE BYTE
E6CC A7A0             (     mon09v37.asm):00625                 STA     ,Y+             SAVE IN DEST
E6CE BC9F7C           (     mon09v37.asm):00626                 CMPX    TEMP            SAVE IT
E6D1 23F7             (     mon09v37.asm):00627                 BLS     MOVM1           KEEP MOVEING
E6D3 1606C4           (     mon09v37.asm):00628                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00629         
                      (     mon09v37.asm):00630         ;  IFNE JQ_EEPROM               JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00631         ;  ENDC                         JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v37.asm):00632          ENDC           FOR TESTING
                      (     mon09v37.asm):00633         ;
                      (     mon09v37.asm):00634         ;******************************************************************************
                      (     mon09v37.asm):00635         ;* 'DM' - DISPLAY MEMORY
                      (     mon09v37.asm):00636         ;   FIX FOR 'LOOP' BUG - MOVE START ADDRESS TO BEGINING OF 16 BYTE BOUNDRY
                      (     mon09v37.asm):00637         ;   CHECK TO SEE IF WE'VE LOOPED PAST FFFF AT THE END. THIS MAY DISPLAY MORE 
                      (     mon09v37.asm):00638         ;   BYTES THEN REQUESTED, HOWEVER IT WILL STOP AT FFFF - DC 3.31.24
                      (     mon09v37.asm):00639         ;******************************************************************************
E6D6                  (     mon09v37.asm):00640         MEMORY
                      (     mon09v37.asm):00641          IFNE 0         FOR TESTING
                      (     mon09v37.asm):00642                 JMP             $1000
                      (     mon09v37.asm):00643          ELSE
                      (     mon09v37.asm):00644         
E6D6 1705DD           (     mon09v37.asm):00645                 LBSR    GETRNG          ; GET ADDRESS
E6D9 FD9F7C           (     mon09v37.asm):00646                 STD     TEMP            ; SAVE
                      (     mon09v37.asm):00647                                 
E6DC                  (     mon09v37.asm):00648         MEM1
E6DC 1706BB           (     mon09v37.asm):00649                 LBSR    LFCR            ; NEW LINE
E6DF 1706F7           (     mon09v37.asm):00650                 LBSR    CHKCHR          ; CHECK FOR CHAR
E6E2 1027FED9         (     mon09v37.asm):00651                 LBEQ    MAIN            ; ESCAPE, QUIT
E6E6 1F10             (     mon09v37.asm):00652                 TFR     X,D             ; GET ADDRESS
E6E8 1084FFF0         (     mon09v37.asm):00653                 ANDD    #$FFF0          ; CLEAR THE LOWER 4 BITS 
E6EC 1F01             (     mon09v37.asm):00654                 TFR     D,X             ; UPDATE X TO FIX BIT READ OUT 
E6EE 3406             (     mon09v37.asm):00655                 PSHS    D               ; SAVE FOR LATER
E6F0 170662           (     mon09v37.asm):00656                 LBSR    WRDOUT          ; DISPLAY
E6F3 C610             (     mon09v37.asm):00657                 LDB     #16             ; DISPLAY 16 TO A LINE
E6F5                  (     mon09v37.asm):00658         MEM2
E6F5 17069C           (     mon09v37.asm):00659                 LBSR    SPACE           ; OUTPUT A SPACE
E6F8 C503             (     mon09v37.asm):00660                 BITB    #3              ; ON A BOUNDARY?
E6FA 2603             (     mon09v37.asm):00661                 BNE     MEM3            ; NO, SPACE
E6FC 170695           (     mon09v37.asm):00662                 LBSR    SPACE           ; EXTRA SPACE
E6FF                  (     mon09v37.asm):00663         MEM3
E6FF A680             (     mon09v37.asm):00664                 LDA     ,X+             ; GET BYTE
E701 170655           (     mon09v37.asm):00665                 LBSR    HEXOUT          ; DISPLAY
E704 5A               (     mon09v37.asm):00666                 DECB                    ; REDUCE COUNT
E705 26EE             (     mon09v37.asm):00667                 BNE     MEM2            ; CONTINUE
E707 C604             (     mon09v37.asm):00668                 LDB     #4              ; FOUR SPACES
E709                  (     mon09v37.asm):00669         MEM4
E709 170688           (     mon09v37.asm):00670                 LBSR    SPACE           ; DISPLAY A SPACE
E70C 5A               (     mon09v37.asm):00671                 DECB                    ; REDUCE COUNT
E70D 26FA             (     mon09v37.asm):00672                 BNE     MEM4            ; CONTINUE
E70F 3510             (     mon09v37.asm):00673                 PULS    X               ; RESTORE D TO X
E711 C610             (     mon09v37.asm):00674                 LDB     #16             ; COUNT OF 16
E713                  (     mon09v37.asm):00675         MEM5
E713 A680             (     mon09v37.asm):00676                 LDA     ,X+             ; GET CHAR
E715 8120             (     mon09v37.asm):00677                 CMPA    #' '            ; <SPACE
E717 2504             (     mon09v37.asm):00678                 BLO     MEM6            ; CONVERT TO DOT
E719 817F             (     mon09v37.asm):00679                 CMPA    #$7F            ; PRINTABLE?
E71B 2502             (     mon09v37.asm):00680                 BLO     MEM7            ; OK TO DISPLAY
E71D                  (     mon09v37.asm):00681         MEM6
E71D 862E             (     mon09v37.asm):00682                 LDA     #'.'            ; CHANGE TO DOT
E71F                  (     mon09v37.asm):00683         MEM7
E71F 170699           (     mon09v37.asm):00684                 LBSR    PUTCHR          ; OUTPUT
E722 5A               (     mon09v37.asm):00685                 DECB                    ; REDUCE COUNT
E723 26EE             (     mon09v37.asm):00686                 BNE     MEM5            ; DISPLAY THEM ALL
E725 8C0000           (     mon09v37.asm):00687                 CMPX    #0              ; DID WE WRAP AROUND?
E728 2705             (     mon09v37.asm):00688                 BEQ     MEM8            ; YES, WE NEED TO SKIP 
E72A BC9F7C           (     mon09v37.asm):00689                 CMPX    TEMP            ; PAST END?
E72D 23AD             (     mon09v37.asm):00690                 BLS     MEM1            ; NO, KEEP GOING
E72F                  (     mon09v37.asm):00691         MEM8
E72F 160668           (     mon09v37.asm):00692                 LBRA    LFCR            ; NEW LINE
                      (     mon09v37.asm):00693          ENDC                           ; FOR TESTING
                      (     mon09v37.asm):00694         
                      (     mon09v37.asm):00695         
                      (     mon09v37.asm):00696         ;*
                      (     mon09v37.asm):00697         ;* 'W' - WRITE TO MEMORY
                      (     mon09v37.asm):00698         ;*
E732                  (     mon09v37.asm):00699         WRIMEM
E732 17059E           (     mon09v37.asm):00700                 LBSR    GETADR          GET ADDRESS
E735 1F01             (     mon09v37.asm):00701                 TFR     D,X             SET IT UP
E737 17065A           (     mon09v37.asm):00702                 LBSR    SPACE           STEP OVER
E73A 1705DD           (     mon09v37.asm):00703                 LBSR    GETBYT          GET BYTE
E73D A784             (     mon09v37.asm):00704                 STA     ,X              WRITE TO MEMORY
E73F 160658           (     mon09v37.asm):00705                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00706         ;*
                      (     mon09v37.asm):00707         ;* 'E' - EDIT MEMORY
                      (     mon09v37.asm):00708         ;*
E742                  (     mon09v37.asm):00709         SUBMEM
E742 17058E           (     mon09v37.asm):00710                 LBSR    GETADR          GET ADDRESS
E745 1F01             (     mon09v37.asm):00711                 TFR     D,X             COPY
E747                  (     mon09v37.asm):00712         SUBM1
E747 170650           (     mon09v37.asm):00713                 LBSR    LFCR            NEW LINE
E74A 1F10             (     mon09v37.asm):00714                 TFR     X,D             GET ADDRESS
E74C 170606           (     mon09v37.asm):00715                 LBSR    WRDOUT          OUTPUT
E74F C608             (     mon09v37.asm):00716                 LDB     #8              NEW COUNT
E751                  (     mon09v37.asm):00717         SUBM2
E751 170640           (     mon09v37.asm):00718                 LBSR    SPACE           SEPERATOR
E754 A684             (     mon09v37.asm):00719                 LDA     ,X              GET BYTE
E756 170600           (     mon09v37.asm):00720                 LBSR    HEXOUT          DISPLAY
E759 862D             (     mon09v37.asm):00721                 LDA     #'-'            PROMPT
E75B 17065D           (     mon09v37.asm):00722                 LBSR    PUTCHR          OUTPUT
E75E 1705B9           (     mon09v37.asm):00723                 LBSR    GETBYT          GET A BYTE
E761 2609             (     mon09v37.asm):00724                 BNE     SUBM4           INVALID
E763 A784             (     mon09v37.asm):00725                 STA     ,X              RESAVE
E765                  (     mon09v37.asm):00726         SUBM3
E765 3001             (     mon09v37.asm):00727                 LEAX    1,X             ADVANCE
E767 5A               (     mon09v37.asm):00728                 DECB                    REDUCE COUNT
E768 26E7             (     mon09v37.asm):00729                 BNE     SUBM2           MORE, CONTINUE
E76A 20DB             (     mon09v37.asm):00730                 BRA     SUBM1           NEW LINE
E76C                  (     mon09v37.asm):00731         SUBM4
E76C 810D             (     mon09v37.asm):00732                 CMPA    #$0D            CR?
E76E 10270628         (     mon09v37.asm):00733                 LBEQ    LFCR            IF SO, QUIT
E772 8120             (     mon09v37.asm):00734                 CMPA    #' '            SPACE?
E774 2605             (     mon09v37.asm):00735                 BNE     SUBM5           NO
E776 17061B           (     mon09v37.asm):00736                 LBSR    SPACE           FILL FOR TWO DIGITS
E779 20EA             (     mon09v37.asm):00737                 BRA     SUBM3           ADVANCE
E77B                  (     mon09v37.asm):00738         SUBM5
E77B 8108             (     mon09v37.asm):00739                 CMPA    #$08            BACKSPACE?
E77D 1026FE7C         (     mon09v37.asm):00740                 LBNE    ERROR           INVALID
E781 301F             (     mon09v37.asm):00741                 LEAX    -1,X            BACKUP
E783 20C2             (     mon09v37.asm):00742                 BRA     SUBM1           NEW LINE
                      (     mon09v37.asm):00743         ;*
                      (     mon09v37.asm):00744         ;* 'DI' - DISASSEMBLE
                      (     mon09v37.asm):00745         ;*
E785                  (     mon09v37.asm):00746         DISASM
E785 17052E           (     mon09v37.asm):00747                 LBSR    GETRNG          GET ADDRESS
E788 FD9F7C           (     mon09v37.asm):00748                 STD     TEMP            SAVE
E78B 1F12             (     mon09v37.asm):00749                 TFR     X,Y             COPY TO Y
E78D 17060A           (     mon09v37.asm):00750                 LBSR    LFCR            NEW LINE
E790 CE9F9B           (     mon09v37.asm):00751                 LDU     #DSPBUF         POINT TO INPUT BUFFER
E793                  (     mon09v37.asm):00752         DISS1
E793 1708DD           (     mon09v37.asm):00753                 LBSR    DISASS          DISASSEMBLE
E796 1F31             (     mon09v37.asm):00754                 TFR     U,X             COPY
E798 1705DE           (     mon09v37.asm):00755                 LBSR    WRLIN           OUTPUT
E79B 17063B           (     mon09v37.asm):00756                 LBSR    CHKCHR          END?
E79E 2706             (     mon09v37.asm):00757                 BEQ     DISS2           YES, QUIT
E7A0 10BC9F7C         (     mon09v37.asm):00758                 CMPY    TEMP            OVER?
E7A4 25ED             (     mon09v37.asm):00759                 BLO     DISS1           TRY AGAIN
E7A6                  (     mon09v37.asm):00760         DISS2
E7A6 39               (     mon09v37.asm):00761                 RTS
                      (     mon09v37.asm):00762         ;*
                      (     mon09v37.asm):00763         ;* 'DV' - DISPLAY VECTORS
                      (     mon09v37.asm):00764         ;*
E7A7                  (     mon09v37.asm):00765         DISVEC
E7A7 8EE7BD           (     mon09v37.asm):00766                 LDX     #VECTXT         POINT TO VECTOR TEXT
E7AA 108E9F5D         (     mon09v37.asm):00767                 LDY     #SWIADR         POINT TO FIRST VECTOR
E7AE                  (     mon09v37.asm):00768         DISV1
E7AE 1705C8           (     mon09v37.asm):00769                 LBSR    WRLIN           OUTPUT A MESSAGE
E7B1 ECA1             (     mon09v37.asm):00770                 LDD     ,Y++            GET A VECTOR
E7B3 17059F           (     mon09v37.asm):00771                 LBSR    WRDOUT          OUTPUT VECTOR ADDRESS
E7B6 A684             (     mon09v37.asm):00772                 LDA     ,X              MORE TEXT?
E7B8 26F4             (     mon09v37.asm):00773                 BNE     DISV1           AND CONTINUE
E7BA 1605DD           (     mon09v37.asm):00774                 LBRA    LFCR            NEW LINE
E7BD                  (     mon09v37.asm):00775         VECTXT
E7BD 5357493D00       (     mon09v37.asm):00776                 FCN             'SWI='
E7C2 20535749323D00   (     mon09v37.asm):00777                 FCN             ' SWI2='
E7C9 20535749333D00   (     mon09v37.asm):00778                 FCN             ' SWI3='
E7D0 204952513D00     (     mon09v37.asm):00779                 FCN             ' IRQ='
E7D6 20464952513D00   (     mon09v37.asm):00780                 FCN             ' FIRQ='
                      (     mon09v37.asm):00781         ;MODS BY JQ
                      (     mon09v37.asm):00782          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00783                 FCN             ' NMI='
                      (     mon09v37.asm):00784          ENDC
                      (     mon09v37.asm):00785          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E7DD 20494C4C4F503D00 (     mon09v37.asm):00786                 FCN             ' ILLOP='
                      (     mon09v37.asm):00787          ENDC
                      (     mon09v37.asm):00788         ;
E7E5 00               (     mon09v37.asm):00789                 FCB     0               END OF TABLE
                      (     mon09v37.asm):00790         ;*
                      (     mon09v37.asm):00791         ;* 'DU' DISPLAY UARTS
                      (     mon09v37.asm):00792         ;*
E7E6                  (     mon09v37.asm):00793         DISURT
E7E6 8EE7EF           (     mon09v37.asm):00794                 LDX     #URTEXT         POINT TO TEXT
E7E9 108E9F6A         (     mon09v37.asm):00795                 LDY     #UART1          POINT TO UART
E7ED 20BF             (     mon09v37.asm):00796                 BRA     DISV1           DISPLAY IT
E7EF                  (     mon09v37.asm):00797         URTEXT
E7EF 55415254313D00   (     mon09v37.asm):00798                 FCN     'UART1='
E7F6 2055415254323D00 (     mon09v37.asm):00799                 FCN     ' UART2='
E7FE 00               (     mon09v37.asm):00800                 FCB     0
                      (     mon09v37.asm):00801         ;*
                      (     mon09v37.asm):00802         ;* 'CV' - CHANGE VECTOR
                      (     mon09v37.asm):00803         ;*
E7FF                  (     mon09v37.asm):00804         CHGVEC
E7FF 170584           (     mon09v37.asm):00805                 LBSR    GETECH          GET CHAR & ECHO
E802 8153             (     mon09v37.asm):00806                 CMPA    #'S'            SWI?
E804 2604             (     mon09v37.asm):00807                 BNE     CHGV1           NO
E806 8631             (     mon09v37.asm):00808                 LDA     #'1'            SAME AS '1'
E808 2016             (     mon09v37.asm):00809                 BRA     CHGV5           AND CONTINUE
E80A                  (     mon09v37.asm):00810         CHGV1
E80A 8149             (     mon09v37.asm):00811                 CMPA    #'I'            IRQ?
E80C 2604             (     mon09v37.asm):00812                 BNE     CHGV2           NO, ITS OK
E80E 8634             (     mon09v37.asm):00813                 LDA     #'4'            CONVERT
E810 200E             (     mon09v37.asm):00814                 BRA     CHGV5           AND CONTINUE
E812                  (     mon09v37.asm):00815         CHGV2
E812 8146             (     mon09v37.asm):00816                 CMPA    #'F'            FIRQ?
E814 2604             (     mon09v37.asm):00817                 BNE     CHGV3           NO
E816 8635             (     mon09v37.asm):00818                 LDA     #'5'            CONVERT
E818 2006             (     mon09v37.asm):00819                 BRA     CHGV5           AND CONTINUE
E81A                  (     mon09v37.asm):00820         CHGV3
                      (     mon09v37.asm):00821         ;MODS BY JQ
                      (     mon09v37.asm):00822          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00823                 CMPA    #'N'            NMI?
                      (     mon09v37.asm):00824                 BNE     CHGV4           NO
                      (     mon09v37.asm):00825                 LDA     #'6'            CONVERT
                      (     mon09v37.asm):00826                 BRA     CHGV5           AND CONTINUE
                      (     mon09v37.asm):00827          ENDC                           USE JQ NMI ENHANCEMENTS
E81A                  (     mon09v37.asm):00828         CHGV4
                      (     mon09v37.asm):00829          IFNE JQ_ILLOP          USE ILLOP HANDLER
E81A 814C             (     mon09v37.asm):00830                 CMPA    #'L'            6309 ILLOP?
E81C 2602             (     mon09v37.asm):00831                 BNE     CHGV5           NO
E81E 8637             (     mon09v37.asm):00832                 LDA     #'7'            CONVERT
                      (     mon09v37.asm):00833          ENDC                           USE ILLOP HANDLER
                      (     mon09v37.asm):00834         ;
E820                  (     mon09v37.asm):00835         CHGV5
E820 8031             (     mon09v37.asm):00836                 SUBA    #'1'            TEST IT
                      (     mon09v37.asm):00837         ;---------------------
                      (     mon09v37.asm):00838         ;MODS BY JQ
     0004             (     mon09v37.asm):00839         CHKRNG  SET     4                       IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00840          IFNE JQ_NMIRAM         NO JQ NMI ENHANCEMENTS
E822                  (     mon09v37.asm):00841         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00842          ENDC                           NO JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):00843          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
     0005             (     mon09v37.asm):00844         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v37.asm):00845           ENDC                          NO JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):00846         ;---------------------
E822 8105             (     mon09v37.asm):00847                 CMPA    #CHKRNG         CHECK RANGE
                      (     mon09v37.asm):00848         ;
E824 1022FDD5         (     mon09v37.asm):00849                 LBHI    ERROR           INVALID
E828 8E9F5D           (     mon09v37.asm):00850                 LDX     #SWIADR         POINT TO IT
E82B                  (     mon09v37.asm):00851         CHGV6
E82B 48               (     mon09v37.asm):00852                 LSLA                    X2 FOR 2 BYTE ENTRIES
E82C 3086             (     mon09v37.asm):00853                 LEAX    A,X             ADVANCE TO VECTOR
E82E 170563           (     mon09v37.asm):00854                 LBSR    SPACE           SEPERATOR
E831 17049F           (     mon09v37.asm):00855                 LBSR    GETADR          GET NEW VALUE
E834 ED84             (     mon09v37.asm):00856                 STD     ,X              WRITE NEW VECTOR
E836 160561           (     mon09v37.asm):00857                 LBRA    LFCR            NEW LINE & EXIT
                      (     mon09v37.asm):00858         
                      (     mon09v37.asm):00859         ;*
                      (     mon09v37.asm):00860         ;* 'CU' - CHANGE UART ADDRESS
                      (     mon09v37.asm):00861         ;*
E839                  (     mon09v37.asm):00862         CHGURT
E839 17054A           (     mon09v37.asm):00863                 LBSR    GETECH          GET AND ECHO
E83C 8031             (     mon09v37.asm):00864                 SUBA    #'1'            CONVERT
E83E 8101             (     mon09v37.asm):00865                 CMPA    #1              IN RANGE?
E840 1022FDB9         (     mon09v37.asm):00866                 LBHI    ERROR           INVALID
E844 8E9F6A           (     mon09v37.asm):00867                 LDX     #UART1          POINT TO IT
E847 48               (     mon09v37.asm):00868                 LSLA                    X2 FOR 2 BYTE ENTRIES
E848 3086             (     mon09v37.asm):00869                 LEAX    A,X             ADVANCE TO IT
E84A 170547           (     mon09v37.asm):00870                 LBSR    SPACE           SEPERATOR
E84D 170483           (     mon09v37.asm):00871                 LBSR    GETADR          GET ADDRESS
E850 ED84             (     mon09v37.asm):00872                 STD     ,X              SET IT
E852 1F01             (     mon09v37.asm):00873                 TFR     D,X             SET UP POINTER
E854 1714D6           (     mon09v37.asm):00874                 LBSR    INIT            INITIALIZE IT
E857 160540           (     mon09v37.asm):00875                 LBRA    LFCR            NEW LINE
                      (     mon09v37.asm):00876         ;*
                      (     mon09v37.asm):00877         ;* 'DR' - DISPLAY REGISTERS
                      (     mon09v37.asm):00878         ;*
E85A                  (     mon09v37.asm):00879         DISREG
E85A 8EE8A4           (     mon09v37.asm):00880                 LDX     #REGTXT         POINT TO TEXT
E85D 108E9F6E         (     mon09v37.asm):00881                 LDY     #SAVCC          POINT TO VALUE
E861 8D31             (     mon09v37.asm):00882                 BSR     RSUB1           'CC='
E863 170513           (     mon09v37.asm):00883                 LBSR    WRLIN           ' ['
E866 CEE8CE           (     mon09v37.asm):00884                 LDU     #CCBITS         POINT TO BIT TABLE
E869 E63F             (     mon09v37.asm):00885                 LDB     -1,Y            GET BITS BACK
E86B 3420             (     mon09v37.asm):00886                 PSHS    Y               SAVE POINTER
E86D 108E0008         (     mon09v37.asm):00887                 LDY     #8              EIGHT BITS IN BYTE
E871                  (     mon09v37.asm):00888         REGB1
E871 A6C0             (     mon09v37.asm):00889                 LDA     ,U+             GET BIT IDENTIFIER
E873 58               (     mon09v37.asm):00890                 ASLB                    IS IT SET?
E874 2502             (     mon09v37.asm):00891                 BCS     RBITS           YES, DISPLAY IT
E876 862D             (     mon09v37.asm):00892                 LDA     #'-'            NO, DISPLAY DASH
E878                  (     mon09v37.asm):00893         RBITS
E878 170540           (     mon09v37.asm):00894                 LBSR    PUTCHR          OUTPUT A CHARACTER
E87B 313F             (     mon09v37.asm):00895                 LEAY    -1,Y            REDUCE COUNT
E87D 26F2             (     mon09v37.asm):00896                 BNE     REGB1           MORE TO GO
E87F 3520             (     mon09v37.asm):00897                 PULS    Y               RESTORE Y
E881 8D11             (     mon09v37.asm):00898                 BSR     RSUB1           '] A='
E883 8D0F             (     mon09v37.asm):00899                 BSR     RSUB1           ' B='
E885 8D0D             (     mon09v37.asm):00900                 BSR     RSUB1           ' DP='
E887 8D13             (     mon09v37.asm):00901                 BSR     RSUB2           ' X='
E889 8D11             (     mon09v37.asm):00902                 BSR     RSUB2           ' Y='
E88B 8D0F             (     mon09v37.asm):00903                 BSR     RSUB2           ' U='
E88D 8D0D             (     mon09v37.asm):00904                 BSR     RSUB2           ' PC='
E88F 8D0B             (     mon09v37.asm):00905                 BSR     RSUB2           ' S='
E891 160506           (     mon09v37.asm):00906                 LBRA    LFCR            QUIT
                      (     mon09v37.asm):00907         
                      (     mon09v37.asm):00908         ;* DISPLAY 8 BIT REGISTER VALUE
E894                  (     mon09v37.asm):00909         RSUB1
E894 1704E2           (     mon09v37.asm):00910                 LBSR    WRLIN           OUTPUT BYTE VALUE
E897 A6A0             (     mon09v37.asm):00911                 LDA     ,Y+             GET REGISTER VALUE
E899 1604BD           (     mon09v37.asm):00912                 LBRA    HEXOUT          OUTPUT IN HEX
                      (     mon09v37.asm):00913         ;* DISPLAY 16 BIT REGISTER VALUE
E89C                  (     mon09v37.asm):00914         RSUB2
E89C 1704DA           (     mon09v37.asm):00915                 LBSR    WRLIN           OUTPUT WORD VALUE
E89F ECA1             (     mon09v37.asm):00916                 LDD     ,Y++            GET REGISTER VALUE
E8A1 1604B1           (     mon09v37.asm):00917                 LBRA    WRDOUT          OUTPUT IN HEX
                      (     mon09v37.asm):00918         
                      (     mon09v37.asm):00919         ;* TABLE OF TEXT FOR REGISTER DISPLAY
E8A4                  (     mon09v37.asm):00920         REGTXT
E8A4 43433D00         (     mon09v37.asm):00921                 FCN     'CC='
E8A8 205B00           (     mon09v37.asm):00922                 FCN     ' ['
E8AB 5D20413D00       (     mon09v37.asm):00923                 FCN     '] A='
E8B0 20423D00         (     mon09v37.asm):00924                 FCN     ' B='
E8B4 2044503D00       (     mon09v37.asm):00925                 FCN     ' DP='
E8B9 20583D00         (     mon09v37.asm):00926                 FCN     ' X='
E8BD 20593D00         (     mon09v37.asm):00927                 FCN     ' Y='
E8C1 20553D00         (     mon09v37.asm):00928                 FCN     ' U='
E8C5 2050433D00       (     mon09v37.asm):00929                 FCN     ' PC='
E8CA 20533D00         (     mon09v37.asm):00930                 FCN     ' S='
                      (     mon09v37.asm):00931         ;* TABLE OF CONDITION CODE BIT MEANINGS
E8CE                  (     mon09v37.asm):00932         CCBITS
E8CE 454648494E5A5643 (     mon09v37.asm):00933                 FCC     'EFHINZVC'
                      (     mon09v37.asm):00934         ;*
                      (     mon09v37.asm):00935         ;* 'CR' - CHANGE REGISTER
                      (     mon09v37.asm):00936         ;*
                      (     mon09v37.asm):00937         ;* TABLE OF REGISTER NAMES
E8D6                  (     mon09v37.asm):00938         CHGTAB
E8D6 4341424458595550 (     mon09v37.asm):00939                 FCN     'CABDXYUPS'
     5300
                      (     mon09v37.asm):00940         ;
E8E0                  (     mon09v37.asm):00941         CHGREG
E8E0 1704A3           (     mon09v37.asm):00942                 LBSR    GETECH          GET OPERAND
E8E3 8120             (     mon09v37.asm):00943                 CMPA    #' '            A+B?
E8E5 2727             (     mon09v37.asm):00944                 BEQ     CHG4            YES
E8E7 8EE8D6           (     mon09v37.asm):00945                 LDX     #CHGTAB         POINT TO TABLE
E8EA 5F               (     mon09v37.asm):00946                 CLRB                    ZERO INDICATOR
E8EB                  (     mon09v37.asm):00947         CHG1
E8EB A184             (     mon09v37.asm):00948                 CMPA    ,X              IS THIS IT?
E8ED 2708             (     mon09v37.asm):00949                 BEQ     CHG2            YES
E8EF 5C               (     mon09v37.asm):00950                 INCB                    ADVANCE COUNT
E8F0 6D80             (     mon09v37.asm):00951                 TST     ,X+             END OF TABLE
E8F2 26F7             (     mon09v37.asm):00952                 BNE     CHG1            NO, KEEP TRYING
E8F4 16FD06           (     mon09v37.asm):00953                 LBRA    ERROR           INDICATE ERROR
E8F7                  (     mon09v37.asm):00954         CHG2
E8F7 17049A           (     mon09v37.asm):00955                 LBSR    SPACE           OUTPUT SPACE
E8FA 8E9F6E           (     mon09v37.asm):00956                 LDX     #SAVCC          POINT TO START OF REGISTERS
                      (     mon09v37.asm):00957         
                      (     mon09v37.asm):00958         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v37.asm):00959         ;       CMPB    #4              16 BIT?
E8FD C103             (     mon09v37.asm):00960                 CMPB    #3              16 BIT?
                      (     mon09v37.asm):00961         ;-----------
E8FF 241B             (     mon09v37.asm):00962                 BHS     R16             YES
E901 3085             (     mon09v37.asm):00963                 LEAX    B,X             OFFSET TO ADDRESS
E903 170414           (     mon09v37.asm):00964                 LBSR    GETBYT          GET NEW VALUE
E906 1026FCF3         (     mon09v37.asm):00965                 LBNE    ERROR           INVALID
E90A A784             (     mon09v37.asm):00966                 STA     ,X              SAVE IN REGISTER
E90C 201A             (     mon09v37.asm):00967                 BRA     CHG3            AND QUIT
E90E                  (     mon09v37.asm):00968         CHG4
E90E 17045E           (     mon09v37.asm):00969                 LBSR    WRMSG           OUTPUT MESSAGE
E911 5B41425D2000     (     mon09v37.asm):00970                 FCN     '[AB] '
                      (     mon09v37.asm):00971         ;MODS BY JQ - UNNEEDED SPACE
                      (     mon09v37.asm):00972         ;       LBSR    SPACE           OUTPUT SPACE
                      (     mon09v37.asm):00973         ;-----------
E917 8E9F6F           (     mon09v37.asm):00974                 LDX     #SAVA           POINT TO 'D'
E91A 2007             (     mon09v37.asm):00975                 BRA     R17             MAKE LIKE 16 BIT REG
E91C                  (     mon09v37.asm):00976         R16
                      (     mon09v37.asm):00977         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v37.asm):00978         ;       LEAX    4,X             OFFSET TO 16 BIT REGISTERS
E91C 3003             (     mon09v37.asm):00979                 LEAX    3,X             OFFSET TO 16 BIT REGISTERS
                      (     mon09v37.asm):00980         ;-----------
E91E C004             (     mon09v37.asm):00981                 SUBB    #4              CONVERT TO ZERO ORIGIN
E920 58               (     mon09v37.asm):00982                 LSLB                    DOUBLE FOR WORD VALUES
E921 3085             (     mon09v37.asm):00983                 LEAX    B,X             MOVE TO CORRECT OFFSET
E923                  (     mon09v37.asm):00984         R17
E923 1703AD           (     mon09v37.asm):00985                 LBSR    GETADR          GET WORD VALUE
E926 ED84             (     mon09v37.asm):00986                 STD     ,X              SET REGISTER VALUE
E928                  (     mon09v37.asm):00987         CHG3
E928 16046F           (     mon09v37.asm):00988                 LBRA    LFCR            QUIT
                      (     mon09v37.asm):00989         ;*
                      (     mon09v37.asm):00990         ;* 'DB' - DISPLAY BREAKPOINTS
                      (     mon09v37.asm):00991         ;*
E92B                  (     mon09v37.asm):00992         DSPBRK
E92B 8630             (     mon09v37.asm):00993                 LDA     #'0'            START WITH BRKPT ZERO
E92D 8E9F83           (     mon09v37.asm):00994                 LDX     #BRKTAB         POINT TO TABLE
E930                  (     mon09v37.asm):00995         DSPB1
E930 3402             (     mon09v37.asm):00996                 PSHS    A               SAVE NUMBER
E932 8642             (     mon09v37.asm):00997                 LDA     #'B'            PRECEDE WITH 'B'
E934 170484           (     mon09v37.asm):00998                 LBSR    PUTCHR          OUTPUT
E937 A6E4             (     mon09v37.asm):00999                 LDA     ,S              GET NUMBER BACK
E939 17047F           (     mon09v37.asm):01000                 LBSR    PUTCHR          OUTPUT
E93C 863D             (     mon09v37.asm):01001                 LDA     #'='            AND FOLLOW WITH '='
E93E 17047A           (     mon09v37.asm):01002                 LBSR    PUTCHR          OUTPUT
E941 EC81             (     mon09v37.asm):01003                 LDD     ,X++            GET VALUE
E943 260A             (     mon09v37.asm):01004                 BNE     DSPB2           NON-ZERO, DISPLAY
E945 170427           (     mon09v37.asm):01005                 LBSR    WRMSG           OUTPUT MESSAGE INSTEAD
E948 2A2A2A2A00       (     mon09v37.asm):01006                 FCN     '****'
E94D 2003             (     mon09v37.asm):01007                 BRA     DSPB3           CONTINUE
E94F                  (     mon09v37.asm):01008         DSPB2
E94F 170403           (     mon09v37.asm):01009                 LBSR    WRDOUT          OUTPUT VALUE
E952                  (     mon09v37.asm):01010         DSPB3
E952 17043F           (     mon09v37.asm):01011                 LBSR    SPACE           SEPERATE WITH SPACE
E955 3001             (     mon09v37.asm):01012                 LEAX    1,X             SKIP OPCODE SAVE
E957 3502             (     mon09v37.asm):01013                 PULS    A               RESTORE NUMBER
E959 4C               (     mon09v37.asm):01014                 INCA                    ADVANCE
E95A 8138             (     mon09v37.asm):01015                 CMPA    #'8'            BEYOND END?
E95C 25D2             (     mon09v37.asm):01016                 BLO     DSPB1           NO, CONTINUE
E95E 160439           (     mon09v37.asm):01017                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v37.asm):01018         ;*
                      (     mon09v37.asm):01019         ;* 'B' - SET BREAKPOINT
                      (     mon09v37.asm):01020         ;*
E961                  (     mon09v37.asm):01021         SETBRK
E961 170422           (     mon09v37.asm):01022                 LBSR    GETECH          GET CHARACTER
E964 8030             (     mon09v37.asm):01023                 SUBA    #'0'            CONVERT TO NUMBER
E966 8108             (     mon09v37.asm):01024                 CMPA    #8              IN RANGE?
E968 1024FC91         (     mon09v37.asm):01025                 LBHS    ERROR           NO, QUIT
E96C 3402             (     mon09v37.asm):01026                 PSHS    A               SAVE NUMBER
E96E 48               (     mon09v37.asm):01027                 LSLA                    DOUBLE FOR 16 BIT VALUES
E96F ABE0             (     mon09v37.asm):01028                 ADDA    ,S+             TRIPLE FOR OPCODE BYTE
E971 8E9F83           (     mon09v37.asm):01029                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
E974 3086             (     mon09v37.asm):01030                 LEAX    A,X             ADVANCE TO BREAKPOINT
E976 17041B           (     mon09v37.asm):01031                 LBSR    SPACE           SEPERATE WITH SPACE
E979 170357           (     mon09v37.asm):01032                 LBSR    GETADR          GET VALUE
E97C ED84             (     mon09v37.asm):01033                 STD     ,X              SAVE IN TABLE
E97E 160419           (     mon09v37.asm):01034                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v37.asm):01035         ;*
                      (     mon09v37.asm):01036         ;* 'S' - SINGLE STEP
                      (     mon09v37.asm):01037         ;*
E981                  (     mon09v37.asm):01038         GOSTEP
E981 17031A           (     mon09v37.asm):01039                 LBSR    GETPC           GET ADDRESS
E984 170413           (     mon09v37.asm):01040                 LBSR    LFCR            OUTPUT MESSAGE
E987                  (     mon09v37.asm):01041         GOSTP1
E987 17047A           (     mon09v37.asm):01042                 LBSR    STEPDI          STEP AND DISPLAY INSTRUCTION
E98A 7D9F7E           (     mon09v37.asm):01043                 TST     STPFLG          DISPLAY REGISTERS?
E98D 2B03             (     mon09v37.asm):01044                 BMI     NODSR           NO, DON'T DISPLAY
E98F                  (     mon09v37.asm):01045         STPREG
E98F 17FEC8           (     mon09v37.asm):01046                 LBSR    DISREG          DISPLAY REGISTERS
E992                  (     mon09v37.asm):01047         NODSR
E992 170411           (     mon09v37.asm):01048                 LBSR    GETCHR          GET KEY FROM TERMINAL
E995 813F             (     mon09v37.asm):01049                 CMPA    #'?'            DISPLAY REGS?
E997 27F6             (     mon09v37.asm):01050                 BEQ     STPREG          IF SO, DISPLAY
E999 8120             (     mon09v37.asm):01051                 CMPA    #' '            STEP TO NEXT?
E99B 27EA             (     mon09v37.asm):01052                 BEQ     GOSTP1          IF SO, STEP
E99D 811B             (     mon09v37.asm):01053                 CMPA    #$1B            EXIT STEPPING?
E99F 2709             (     mon09v37.asm):01054                 BEQ     GOSTP2          IF SO, QUIT
E9A1 810D             (     mon09v37.asm):01055                 CMPA    #$0D            TOGGLE REGISTER DISPLAY?
E9A3 26ED             (     mon09v37.asm):01056                 BNE     NODSR           IF NOT, IGNORE
E9A5 739F7E           (     mon09v37.asm):01057                 COM     STPFLG          TOGGLE DISPLAY FLAG
E9A8 20E8             (     mon09v37.asm):01058                 BRA     NODSR           GET NEXT KEY
E9AA                  (     mon09v37.asm):01059         GOSTP2
E9AA 39               (     mon09v37.asm):01060                 RTS
                      (     mon09v37.asm):01061         ;*
                      (     mon09v37.asm):01062         ;* 'G' - GO (EXECUTE)
                      (     mon09v37.asm):01063         ;*
E9AB                  (     mon09v37.asm):01064         GOEXEC
E9AB 1702F0           (     mon09v37.asm):01065                 LBSR    GETPC           GET ADDRESS
E9AE 1703E9           (     mon09v37.asm):01066                 LBSR    LFCR            NEW LINE
                      (     mon09v37.asm):01067         
                      (     mon09v37.asm):01068         ;*      STEP ONE INST. BEFORE INSERTING BREAKPOINTS, SO THAT BREAKPOINTS
                      (     mon09v37.asm):01069         ;*      CAN BE USED WITHIN LOOPS ETC.
                      (     mon09v37.asm):01070         
E9B1 170461           (     mon09v37.asm):01071                 LBSR    STEP            STEP ONE INSTRUCTION
                      (     mon09v37.asm):01072         
                      (     mon09v37.asm):01073         ;*      INSERT BREAKPOINTS
E9B4 8E9F83           (     mon09v37.asm):01074                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
E9B7 C608             (     mon09v37.asm):01075                 LDB     #8              EIGHT BREAKPOINTS
E9B9                  (     mon09v37.asm):01076         GOEX3
E9B9 10AE81           (     mon09v37.asm):01077                 LDY     ,X++            GET BREAKPOINT ADDRESS
E9BC 2708             (     mon09v37.asm):01078                 BEQ     GOEX4           NO BREAKPOINT, QUIT
E9BE A6A4             (     mon09v37.asm):01079                 LDA     ,Y              GET OPCODE
E9C0 A784             (     mon09v37.asm):01080                 STA     ,X              SAVE IN TABLE
E9C2 863F             (     mon09v37.asm):01081                 LDA     #$3F            GET 'SWI' BREAKPOINT OPCODE
E9C4 A7A4             (     mon09v37.asm):01082                 STA     ,Y              SAVE IN CODE SPACE
E9C6                  (     mon09v37.asm):01083         GOEX4
E9C6 3001             (     mon09v37.asm):01084                 LEAX    1,X             ADVANCE TO NEXT IN TABLE
E9C8 5A               (     mon09v37.asm):01085                 DECB                    REDUCE COUNT OF BRKPTS
E9C9 26EE             (     mon09v37.asm):01086                 BNE     GOEX3           DO ALL EIGHT
E9CB 10FE9F7A         (     mon09v37.asm):01087                 LDS     SAVS            RESTORE STACK POINTER
E9CF B69F6E           (     mon09v37.asm):01088                 LDA     SAVCC           GET SAVED CC
E9D2 F69F71           (     mon09v37.asm):01089                 LDB     SAVDP           GET SAVED DPR
E9D5 3406             (     mon09v37.asm):01090                 PSHS    A,B             SAVE ON STACK FOR LAST RESTORE
E9D7 FC9F6F           (     mon09v37.asm):01091                 LDD     SAVA            RESTORE A, B REGISTERS
E9DA BE9F72           (     mon09v37.asm):01092                 LDX     SAVX            RESTORE X REGISTER
E9DD 10BE9F74         (     mon09v37.asm):01093                 LDY     SAVY            RESTORE Y REGISTER
E9E1 FE9F76           (     mon09v37.asm):01094                 LDU     SAVU            RESTORE U REGISTER
E9E4 3509             (     mon09v37.asm):01095                 PULS    CC,DP           RESTORE CC + DP
E9E6 6E9F9F78         (     mon09v37.asm):01096                 JMP     [SAVPC]         EXECUTE USER PGM
                      (     mon09v37.asm):01097         ;*
                      (     mon09v37.asm):01098         ;* 'RR' - REPEATING READ
                      (     mon09v37.asm):01099         ;*
E9EA                  (     mon09v37.asm):01100         RDLOOP
E9EA 1702E6           (     mon09v37.asm):01101                 LBSR    GETADR          GET ADDRESS
E9ED 1F01             (     mon09v37.asm):01102                 TFR     D,X             SET UP 'X'
E9EF 1703A8           (     mon09v37.asm):01103                 LBSR    LFCR            NEW LINE
E9F2                  (     mon09v37.asm):01104         RDLP1
E9F2 A684             (     mon09v37.asm):01105                 LDA     ,X              READ LOCATION
E9F4 1703E2           (     mon09v37.asm):01106                 LBSR    CHKCHR          ABORT?
E9F7 26F9             (     mon09v37.asm):01107                 BNE     RDLP1           NO, ITS OK
E9F9 39               (     mon09v37.asm):01108                 RTS
                      (     mon09v37.asm):01109         ;*
                      (     mon09v37.asm):01110         ;* 'RW' - REPEATING WRITE
                      (     mon09v37.asm):01111         ;*
E9FA                  (     mon09v37.asm):01112         WRLOOP
E9FA 1702D6           (     mon09v37.asm):01113                 LBSR    GETADR          GET ADDRESS
E9FD 1F01             (     mon09v37.asm):01114                 TFR     D,X             SET UP 'X'
E9FF 170392           (     mon09v37.asm):01115                 LBSR    SPACE           SPACE OVER
EA02 170315           (     mon09v37.asm):01116                 LBSR    GETBYT          GET DATA
EA05 1026FBF4         (     mon09v37.asm):01117                 LBNE    ERROR           INVALID
EA09 3402             (     mon09v37.asm):01118                 PSHS    A               SAVE ACCA
EA0B 17038C           (     mon09v37.asm):01119                 LBSR    LFCR            NEW LINE
EA0E                  (     mon09v37.asm):01120         WRLP1
EA0E A6E4             (     mon09v37.asm):01121                 LDA     ,S              GET CHAR
EA10 A784             (     mon09v37.asm):01122                 STA     ,X              WRITE IT OUT
EA12 1703C4           (     mon09v37.asm):01123                 LBSR    CHKCHR          ABORT COMMAND?
EA15 26F7             (     mon09v37.asm):01124                 BNE     WRLP1           CONTINUE
EA17 3582             (     mon09v37.asm):01125                 PULS    A,PC            GO HOME
                      (     mon09v37.asm):01126         ;*
                      (     mon09v37.asm):01127         ;* 'XR' - REPEATING 16 BIT READ
                      (     mon09v37.asm):01128         ;*
EA19                  (     mon09v37.asm):01129         XRLOOP
EA19 1702B7           (     mon09v37.asm):01130                 LBSR    GETADR          GET ADDRESS
EA1C 1F01             (     mon09v37.asm):01131                 TFR     D,X             SET UP 'X'
EA1E 170379           (     mon09v37.asm):01132                 LBSR    LFCR            NEW LINE
EA21                  (     mon09v37.asm):01133         XRLP1
EA21 EC84             (     mon09v37.asm):01134                 LDD     ,X              READ LOCATION
EA23 1703B3           (     mon09v37.asm):01135                 LBSR    CHKCHR          ABORT?
EA26 26F9             (     mon09v37.asm):01136                 BNE     XRLP1           NO, ITS OK
EA28 39               (     mon09v37.asm):01137                 RTS
                      (     mon09v37.asm):01138         ;*
                      (     mon09v37.asm):01139         ;* 'XW' - REPEATING 16 BITWRITE
                      (     mon09v37.asm):01140         ;*
EA29                  (     mon09v37.asm):01141         XWLOOP
EA29 1702A7           (     mon09v37.asm):01142                 LBSR    GETADR          GET ADDRESS
EA2C 1F01             (     mon09v37.asm):01143                 TFR     D,X             SET UP 'X'
EA2E 170363           (     mon09v37.asm):01144                 LBSR    SPACE           SPACE OVER
EA31 17029F           (     mon09v37.asm):01145                 LBSR    GETADR          GET DATA
EA34 3406             (     mon09v37.asm):01146                 PSHS    A,B             SAVE ACCA
EA36 170361           (     mon09v37.asm):01147                 LBSR    LFCR            NEW LINE
EA39                  (     mon09v37.asm):01148         XWLP1
EA39 ECE4             (     mon09v37.asm):01149                 LDD     ,S              GET CHAR
EA3B ED84             (     mon09v37.asm):01150                 STD     ,X              WRITE IT OUT
EA3D 170399           (     mon09v37.asm):01151                 LBSR    CHKCHR          ABORT COMMAND?
EA40 26F7             (     mon09v37.asm):01152                 BNE     XWLP1           CONTINUE
EA42 3586             (     mon09v37.asm):01153                 PULS    A,B,PC          GO HOME
                      (     mon09v37.asm):01154         ;*
                      (     mon09v37.asm):01155         ;* 'MT' - MEMORY TEST
                      (     mon09v37.asm):01156         ;*
EA44 17026F           (     mon09v37.asm):01157         RAMTEST LBSR    GETRNG          GET ADDRESS RANGE
EA47 FD9F7C           (     mon09v37.asm):01158                 STD     TEMP            SAVE ENDING ADDRESS
EA4A CCFFFF           (     mon09v37.asm):01159                 LDD     #-1             BEGIN WITH NEGATIVE 1
EA4D FD9F9B           (     mon09v37.asm):01160                 STD     DSPBUF          SAVE PASS COUNT
EA50 170347           (     mon09v37.asm):01161                 LBSR    LFCR            NEW LINE
EA53 1F12             (     mon09v37.asm):01162                 TFR     X,Y             COPY STARTING ADDRESS
EA55 6F80             (     mon09v37.asm):01163         RAM0    CLR     ,X+             ZAP ONE BYTE
EA57 BC9F7C           (     mon09v37.asm):01164                 CMPX    TEMP            ARE WE OVER?
EA5A 23F9             (     mon09v37.asm):01165                 BLS     RAM0            NO, CLEAR EM ALL
EA5C 1F21             (     mon09v37.asm):01166         RAM1    TFR     Y,X             RESET STARTING ADDRESS
EA5E 860D             (     mon09v37.asm):01167                 LDA     #$0D            GET CR
EA60 170358           (     mon09v37.asm):01168                 LBSR    PUTCHR          BACK TO START OF LINE
EA63 170309           (     mon09v37.asm):01169                 LBSR    WRMSG           OUTPUT MESSAGE
EA66 506173733A2000   (     mon09v37.asm):01170                 FCN     'Pass: '
EA6D FC9F9B           (     mon09v37.asm):01171                 LDD     DSPBUF          GET COUNTER
EA70 C30001           (     mon09v37.asm):01172                 ADDD    #1              ADVANCE PASS COUNT
EA73 FD9F9B           (     mon09v37.asm):01173                 STD     DSPBUF          RESAVE
EA76 1702DC           (     mon09v37.asm):01174                 LBSR    WRDOUT          OUTPUT
EA79 170318           (     mon09v37.asm):01175                 LBSR    SPACE           SPACE OVER
EA7C 17035A           (     mon09v37.asm):01176         RAM2    LBSR    CHKCHR          CHARACTER READY?
EA7F 271C             (     mon09v37.asm):01177                 BEQ     RAM5            ESCAPE, QUIT & RESTART MONITOR
EA81 F69F9C           (     mon09v37.asm):01178                 LDB     DSPBUF+1        GET EXPECTED VALUE
EA84 E184             (     mon09v37.asm):01179                 CMPB    ,X              DID IT KEEP ITS VALUE
EA86 264E             (     mon09v37.asm):01180                 BNE     RAM7            NO, ERROR
EA88 8601             (     mon09v37.asm):01181                 LDA     #%00000001      FIRST DATA VALUE
EA8A A784             (     mon09v37.asm):01182         RAM3    STA     ,X              RESAVE IT
EA8C A184             (     mon09v37.asm):01183                 CMPA    ,X              SAME ?
EA8E 2613             (     mon09v37.asm):01184                 BNE     RAM6            FAILED
EA90 48               (     mon09v37.asm):01185                 LSLA                    SHIFT THE BIT
EA91 26F7             (     mon09v37.asm):01186                 BNE     RAM3            CONTINUE TILL ALL DONE
EA93 5C               (     mon09v37.asm):01187         RAM4    INCB                    ADVANCE TO NEXT VALUE
EA94 E780             (     mon09v37.asm):01188                 STB     ,X+             SAVE REGISTER
EA96 BC9F7C           (     mon09v37.asm):01189                 CMPX    TEMP            ARE WE IN RANGE?
EA99 23E1             (     mon09v37.asm):01190                 BLS     RAM2            YES, ITS OK
EA9B 20BF             (     mon09v37.asm):01191                 BRA     RAM1            AND RESTART
EA9D 1702FA           (     mon09v37.asm):01192         RAM5    LBSR    LFCR            NEW LINE
EAA0 16FB1C           (     mon09v37.asm):01193                 LBRA    MAIN            AND RESTART MONITOR
                      (     mon09v37.asm):01194         ;* VERIFY OF LOCATION FAILED
EAA3 3402             (     mon09v37.asm):01195         RAM6    PSHS    A               SAVE VALUE WRITTEN
EAA5 1702C7           (     mon09v37.asm):01196                 LBSR    WRMSG           OUTPUT MESSAGE
EAA8 416464723A2000   (     mon09v37.asm):01197                 FCN             'Addr: '
EAAF 1F10             (     mon09v37.asm):01198                 TFR     X,D             GET ADDRESS
EAB1 1702A1           (     mon09v37.asm):01199                 LBSR    WRDOUT          OUTPUT
EAB4 1702B8           (     mon09v37.asm):01200                 LBSR    WRMSG           OUTPUT MESSAGE
EAB7 2C2057726F74653A (     mon09v37.asm):01201                 FCN             ', Wrote: '
     2000
EAC1 3502             (     mon09v37.asm):01202                 PULS    A               RESTORE VALUE
EAC3 170293           (     mon09v37.asm):01203                 LBSR    HEXOUT          OUTPUT
EAC6 1702A6           (     mon09v37.asm):01204                 LBSR    WRMSG           OUTPUT MESSAGE
EAC9 2C20526561643A20 (     mon09v37.asm):01205                 FCN             ', Read: '
     00
EAD2 A684             (     mon09v37.asm):01206                 LDA     ,X              GET VALUE READ
EAD4 2033             (     mon09v37.asm):01207                 BRA     RAM8            CONTINUE
                      (     mon09v37.asm):01208         ;* DATA WAS CORRUPTED BY OTHER WRITES
EAD6 170296           (     mon09v37.asm):01209         RAM7    LBSR    WRMSG           OUTPUT MESSAGE
EAD9 416464723A2000   (     mon09v37.asm):01210                 FCN             'Addr: '
EAE0 1F10             (     mon09v37.asm):01211                 TFR     X,D             GET ADDR
EAE2 170270           (     mon09v37.asm):01212                 LBSR    WRDOUT          OUTPUT
EAE5 170287           (     mon09v37.asm):01213                 LBSR    WRMSG           OUTPUT MESSAGE
EAE8 2C20457870656374 (     mon09v37.asm):01214                 FCN             ', Expected: '
     65643A2000
EAF5 B69F9C           (     mon09v37.asm):01215                 LDA     DSPBUF+1        GET VALUE
EAF8 17025E           (     mon09v37.asm):01216                 LBSR    HEXOUT          OUTPUT
EAFB 170271           (     mon09v37.asm):01217                 LBSR    WRMSG           OUTPUT MESSAGE
EAFE 2C20526561643A20 (     mon09v37.asm):01218                 FCN             ', Read: '
     00
EB07 A684             (     mon09v37.asm):01219                 LDA     ,X              GET VALUE BACK
EB09 17024D           (     mon09v37.asm):01220         RAM8    LBSR    HEXOUT          OUTPUT VALUE
EB0C 17028B           (     mon09v37.asm):01221                 LBSR    LFCR            NEW LINE
EB0F F69F9C           (     mon09v37.asm):01222                 LDB     DSPBUF+1        GET CORRECT NEXT VALUE
EB12 16FF7E           (     mon09v37.asm):01223                 LBRA    RAM4
                      (     mon09v37.asm):01224         ;*
                      (     mon09v37.asm):01225         ;* '+' - HEXIDECIMAL ADDITION
                      (     mon09v37.asm):01226         ;*
EB15                  (     mon09v37.asm):01227         HEXADD
EB15 1701BB           (     mon09v37.asm):01228                 LBSR    GETADR          GET FIRST VALUE
EB18 3406             (     mon09v37.asm):01229                 PSHS    A,B             SAVE IT
EB1A 862B             (     mon09v37.asm):01230                 LDA     #'+'            PLUS SIGN
EB1C 17029C           (     mon09v37.asm):01231                 LBSR    PUTCHR          DISPLAY
EB1F 1701B1           (     mon09v37.asm):01232                 LBSR    GETADR          GET SECOND VALUE
EB22 E3E4             (     mon09v37.asm):01233                 ADDD    ,S              PERFORM ADDITION
EB24 2013             (     mon09v37.asm):01234                 BRA     HEXSHO          DISPLAY IT
                      (     mon09v37.asm):01235         ;*
                      (     mon09v37.asm):01236         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (     mon09v37.asm):01237         ;*
EB26                  (     mon09v37.asm):01238         HEXSUB
EB26 1701AA           (     mon09v37.asm):01239                 LBSR    GETADR          GET FIRST
EB29 3406             (     mon09v37.asm):01240                 PSHS    A,B             SAVE IT
EB2B 862D             (     mon09v37.asm):01241                 LDA     #'-'            MINUS SIGN
EB2D 17028B           (     mon09v37.asm):01242                 LBSR    PUTCHR          DISPLAY
EB30 1701A0           (     mon09v37.asm):01243                 LBSR    GETADR          GET SECOND ADDRESS
EB33 3406             (     mon09v37.asm):01244                 PSHS    A,B             SAVE IT
EB35 EC62             (     mon09v37.asm):01245                 LDD     2,S             GET FIRST VALUE
EB37 A3E1             (     mon09v37.asm):01246                 SUBD    ,S++            PERFORM SUBTRACTION
EB39                  (     mon09v37.asm):01247         HEXSHO
EB39 EDE4             (     mon09v37.asm):01248                 STD     ,S              SAVE RESULT
EB3B 863D             (     mon09v37.asm):01249                 LDA     #'='            EQUALS SIGN
EB3D 17027B           (     mon09v37.asm):01250                 LBSR    PUTCHR          DISPLAY
EB40 3506             (     mon09v37.asm):01251                 PULS    A,B             RESTORE RESULT
EB42 170210           (     mon09v37.asm):01252                 LBSR    WRDOUT          OUTPUT
EB45 160252           (     mon09v37.asm):01253                 LBRA    LFCR            NEW LINE & RETURN
                      (     mon09v37.asm):01254         ;*
                      (     mon09v37.asm):01255         ;* '?' - HELP COMMAND
                      (     mon09v37.asm):01256         ;*
EB48                  (     mon09v37.asm):01257         HELP
EB48 8EF9A5           (     mon09v37.asm):01258                 LDX     #HTEXT          POINT TO HELP TEXT
EB4B                  (     mon09v37.asm):01259         HLP1
EB4B C619             (     mon09v37.asm):01260                 LDB     #25             COLUMN COUNTER
EB4D                  (     mon09v37.asm):01261         HLP2
EB4D A680             (     mon09v37.asm):01262                 LDA     ,X+             GET CHAR FROM TEXT
EB4F 2718             (     mon09v37.asm):01263                 BEQ     HLP4            EXIT THIS LINE
EB51 817C             (     mon09v37.asm):01264                 CMPA    #'|'            SEPERATOR?
EB53 2706             (     mon09v37.asm):01265                 BEQ     HLP3            YES, EXIT
EB55 170263           (     mon09v37.asm):01266                 LBSR    PUTCHR          OUTPUT
EB58 5A               (     mon09v37.asm):01267                 DECB                    BACKUP
EB59 20F2             (     mon09v37.asm):01268                 BRA     HLP2            NEXT
EB5B                  (     mon09v37.asm):01269         HLP3
EB5B 170236           (     mon09v37.asm):01270                 LBSR    SPACE           OUTPUT SPACE
EB5E 5A               (     mon09v37.asm):01271                 DECB                    REDUCE COUNT
EB5F 26FA             (     mon09v37.asm):01272                 BNE     HLP3            KEEP GOING
EB61 17020B           (     mon09v37.asm):01273                 LBSR    WRMSG           OUTPUT MESSAGE
EB64 2D2000           (     mon09v37.asm):01274                 FCN     '- '            SEPERATOR
EB67 20E4             (     mon09v37.asm):01275                 BRA     HLP2            AND CONTINUE
EB69                  (     mon09v37.asm):01276         HLP4
EB69 17022E           (     mon09v37.asm):01277                 LBSR    LFCR            NEW LINE
EB6C 17026A           (     mon09v37.asm):01278                 LBSR    CHKCHR          TEST FOR CHARACTER ENTERED
EB6F 2704             (     mon09v37.asm):01279                 BEQ     HLP5            IF SO, EXIT
EB71 A684             (     mon09v37.asm):01280                 LDA     ,X              IS THIS THE END?
EB73 2AD6             (     mon09v37.asm):01281                 BPL     HLP1            NO, KEEP GOING
EB75                  (     mon09v37.asm):01282         HLP5
EB75 39               (     mon09v37.asm):01283                 RTS
                      (     mon09v37.asm):01284         
                      (     mon09v37.asm):01285         ;******************************************************************************
                      (     mon09v37.asm):01286         ;* 'T' - TRANSPARENT MODE
                      (     mon09v37.asm):01287         ;******************************************************************************
     EB76             (     mon09v37.asm):01288         TMODE   EQU     *               TERMINAL ROUTINE
EB76                  (     mon09v37.asm):01289         TM1
EB76 BE9F6A           (     mon09v37.asm):01290                 LDX     >UART1          POINT TO MAIN UART
EB79                  (     mon09v37.asm):01291         TM2
EB79 1711BA           (     mon09v37.asm):01292                 LBSR    READ            TEST FOR CHAR FROM TERMINAL
EB7C 260C             (     mon09v37.asm):01293                 BNE     TM3             NONE, IGNORE
EB7E 811B             (     mon09v37.asm):01294                 CMPA    #$1B            ESCAPE?
EB80 10270216         (     mon09v37.asm):01295                 LBEQ    LFCR            NEW LINE, AND RETURN
EB84 BE9F6C           (     mon09v37.asm):01296                 LDX     >UART2          POINT TO UART 2
EB87 1711BA           (     mon09v37.asm):01297                 LBSR    WRITE           OUTPUT TO AUX PORT
EB8A                  (     mon09v37.asm):01298         TM3
EB8A BE9F6C           (     mon09v37.asm):01299                 LDX     >UART2          POINT TO UART 2
EB8D 1711A6           (     mon09v37.asm):01300                 LBSR    READ            TEST FOR CHAR FROM AUX
EB90 26E4             (     mon09v37.asm):01301                 BNE     TM1             NONE, IGNORE
EB92 BE9F6A           (     mon09v37.asm):01302                 LDX     >UART1          POINT TO UART 1
EB95 1711AC           (     mon09v37.asm):01303                 LBSR    WRITE           OUTPUT TO TERMINAL
EB98 20DF             (     mon09v37.asm):01304                 BRA     TM2             GET NEXT CHAR
                      (     mon09v37.asm):01305         
                      (     mon09v37.asm):01306         ;******************************************************************************
                      (     mon09v37.asm):01307         ;* 'L' - LOAD
                      (     mon09v37.asm):01308         ;* FIXED LEAD OUT BEING ECHOED (MOSTLY)  4/4/23 DC
                      (     mon09v37.asm):01309         ;******************************************************************************
EB9A                  (     mon09v37.asm):01310         LOAD
EB9A B69F69           (     mon09v37.asm):01311                 LDA     IOCON                   ; GET I/O CONFIG
EB9D 3402             (     mon09v37.asm):01312                 PSHS    A                       ; SAVE
EB9F 1701F8           (     mon09v37.asm):01313                 LBSR    LFCR                    ; NEW LINE
EBA2                  (     mon09v37.asm):01314         DLO1
EBA2 7F9F69           (     mon09v37.asm):01315                 CLR     IOCON                   : INDICATE NO OUTPUT, READ UART
EBA5 8D16             (     mon09v37.asm):01316                 BSR     DLOAD                   ; DOWNLOAD RECORD
EBA7 240C             (     mon09v37.asm):01317                 BCC     DLO2                    ; END
EBA9 A6E4             (     mon09v37.asm):01318                 LDA     ,S                      ; GET OLD I/O CONFIG
EBAB B79F69           (     mon09v37.asm):01319                 STA     IOCON                   ; RESET
EBAE 862E             (     mon09v37.asm):01320                 LDA     #'.'                    ; GET DOT
EBB0 170208           (     mon09v37.asm):01321                 LBSR    PUTCHR                  ; OUTPUT
EBB3 20ED             (     mon09v37.asm):01322                 BRA     DLO1                    ; CONTINUE
EBB5                  (     mon09v37.asm):01323         DLO2
EBB5 3502             (     mon09v37.asm):01324                 PULS    A                       ; RESTORE A
EBB7 B79F69           (     mon09v37.asm):01325                 STA     IOCON                   ; SAVE
EBBA 1601DD           (     mon09v37.asm):01326                 LBRA    LFCR                    ; New line & return
                      (     mon09v37.asm):01327         ;
                      (     mon09v37.asm):01328         ;* Download a record in either MOTOROLA or INTEL hex format
EBBD                  (     mon09v37.asm):01329         DLOAD
EBBD 1701E6           (     mon09v37.asm):01330                 LBSR    GETCHR                  ; Get a character
EBC0 813A             (     mon09v37.asm):01331                 CMPA    #':'                    ; Start of INTEL record?
EBC2 10270081         (     mon09v37.asm):01332                 LBEQ    DLINT                   ; Yes, download INTEL
EBC6 8153             (     mon09v37.asm):01333                 CMPA    #'S'                    ; Start of MOTOROLA record?
EBC8 26F3             (     mon09v37.asm):01334                 BNE     DLOAD                   ; No, keep looking
                      (     mon09v37.asm):01335         ;
                      (     mon09v37.asm):01336         ;* Download a record in MOTOROLA hex format
EBCA                  (     mon09v37.asm):01337         DLMOT
EBCA 1701D9           (     mon09v37.asm):01338                 LBSR    GETCHR                  ; GET NEXT CHAR
EBCD 8130             (     mon09v37.asm):01339                 CMPA    #'0'                    ; HEADER RECORD?
EBCF 27EC             (     mon09v37.asm):01340                 BEQ     DLOAD                   ; SKIP IT
EBD1 8135             (     mon09v37.asm):01341                 CMPA    #'5'                    ; COUNT RECORD?
EBD3 27E8             (     mon09v37.asm):01342                 BEQ     DLOAD                   ; SKIP IT       
EBD5 8139             (     mon09v37.asm):01343                 CMPA    #'9'                    ; END OF FILE?
EBD7 275E             (     mon09v37.asm):01344                 BEQ     DLMEOF                  ; END OF FILE
EBD9 8131             (     mon09v37.asm):01345                 CMPA    #'1'                    ; DATA RECORD?
EBDB 2642             (     mon09v37.asm):01346                 BNE     LODERR                  ; LOAD ERROR
EBDD 17013A           (     mon09v37.asm):01347                 LBSR    GETBYT                  ; GET LENGTH
EBE0 263D             (     mon09v37.asm):01348                 BNE     LODERR                  ; Report error
EBE2 B79F7C           (     mon09v37.asm):01349                 STA     TEMP                    ; START CHECKSUM
EBE5 8003             (     mon09v37.asm):01350                 SUBA    #3                      ; CONVERT
EBE7 B79F7D           (     mon09v37.asm):01351                 STA     TEMP+1                  ; Set length
EBEA 17012D           (     mon09v37.asm):01352                 LBSR    GETBYT                  ; Get first byte of address
EBED 2630             (     mon09v37.asm):01353                 BNE     LODERR                  ; Report error
EBEF 1F89             (     mon09v37.asm):01354                 TFR     A,B                     ; Save for later
EBF1 BB9F7C           (     mon09v37.asm):01355                 ADDA    TEMP                    ; Include in checksum
EBF4 B79F7C           (     mon09v37.asm):01356                 STA     TEMP                    ; Resave
EBF7 170120           (     mon09v37.asm):01357                 LBSR    GETBYT                  ; Get next byte of address
EBFA 2623             (     mon09v37.asm):01358                 BNE     LODERR                  ; Report error
EBFC 1E89             (     mon09v37.asm):01359                 EXG     A,B                     ; Swap
EBFE 1F01             (     mon09v37.asm):01360                 TFR     D,X                     ; Set pointer
EC00 FB9F7C           (     mon09v37.asm):01361                 ADDB    TEMP                    ; Include in checksum
EC03 F79F7C           (     mon09v37.asm):01362                 STB     TEMP                    ; Resave checksum
EC06                  (     mon09v37.asm):01363         DLMOT1
EC06 170111           (     mon09v37.asm):01364                 LBSR    GETBYT                  ; Get a data byte
EC09 A780             (     mon09v37.asm):01365                 STA     ,X+                     ; Save in RAM
EC0B BB9F7C           (     mon09v37.asm):01366                 ADDA    TEMP                    ; Include checksum
EC0E B79F7C           (     mon09v37.asm):01367                 STA     TEMP                    ; Resave
EC11 7A9F7D           (     mon09v37.asm):01368                 DEC     TEMP+1                  ; Reduce length
EC14 26F0             (     mon09v37.asm):01369                 BNE     DLMOT1                  ; Do them all
EC16 170101           (     mon09v37.asm):01370                 LBSR    GETBYT                  ; Get a byte
EC19 BB9F7C           (     mon09v37.asm):01371                 ADDA    TEMP                    ; Add computed checksum
EC1C 4C               (     mon09v37.asm):01372                 INCA                            ; Test for success
EC1D 2725             (     mon09v37.asm):01373                 BEQ     DLRTS                   ; Download OK
                      (     mon09v37.asm):01374         ;
                      (     mon09v37.asm):01375         ;* Error occured on loading
EC1F                  (     mon09v37.asm):01376         LODERR
EC1F 8603             (     mon09v37.asm):01377                 LDA     #3                      ; GET DEFAULT I/O
EC21 B79F69           (     mon09v37.asm):01378                 STA     IOCON                   ; SET I/O
EC24 170148           (     mon09v37.asm):01379                 LBSR    WRMSG                   ; OUTPUT
EC27 203F4C6F61642065 (     mon09v37.asm):01380                 FCC     ' ?Load error'          
     72726F72
EC33 FF               (     mon09v37.asm):01381                 FCB     $FF
EC34 16F988           (     mon09v37.asm):01382                 LBRA    MAIN                    ; BACK FOR COMMAND
                      (     mon09v37.asm):01383         
                      (     mon09v37.asm):01384         ;* Read out the end of the file (simply reads until buffer is empty)
EC37                  (     mon09v37.asm):01385         DLMEOF
EC37 17016C           (     mon09v37.asm):01386                 LBSR    GETCHR                  ; load a character
EC3A 810A             (     mon09v37.asm):01387                 CMPA    #$0A                    ; LF?
EC3C 2708             (     mon09v37.asm):01388                 BEQ     DLEOF                   ; WE ARE DONE
EC3E 810D             (     mon09v37.asm):01389                 CMPA    #$0D                    ; CR? (JUST INCASE?)
EC40 2704             (     mon09v37.asm):01390                 BEQ     DLEOF                   ; WE ARE DONE
EC42 20F3             (     mon09v37.asm):01391                 BRA     DLMEOF                  ; WE ARE NOT DONE
                      (     mon09v37.asm):01392         
                      (     mon09v37.asm):01393         ;
                      (     mon09v37.asm):01394         ;* Return indicating another record
EC44                  (     mon09v37.asm):01395         DLRTS
EC44 1A01             (     mon09v37.asm):01396                 ORCC    #$01                    ; SET 'C' FLAG
EC46                  (     mon09v37.asm):01397         DLEOF
EC46 39               (     mon09v37.asm):01398                 RTS                             ; RETURN TO CALLER
                      (     mon09v37.asm):01399         
                      (     mon09v37.asm):01400         ;
                      (     mon09v37.asm):01401         ;* Download record in INTEL format
EC47                  (     mon09v37.asm):01402         DLINT
EC47 1700D0           (     mon09v37.asm):01403                 LBSR    GETBYT                  ; Get count
EC4A 26D3             (     mon09v37.asm):01404                 BNE     LODERR                  ; Report error
EC4C B79F7C           (     mon09v37.asm):01405                 STA     TEMP                    ; Start checksum
EC4F B79F7D           (     mon09v37.asm):01406                 STA     TEMP+1                  ; Record length
EC52 8100             (     mon09v37.asm):01407                 CMPA    #0                      ; Test & clear C
EC54 27E1             (     mon09v37.asm):01408                 BEQ     DLMEOF                  ; End of file
                      (     mon09v37.asm):01409         ;* Get address
EC56 1700C1           (     mon09v37.asm):01410                 LBSR    GETBYT                  ; Get first byte of address
EC59 26C4             (     mon09v37.asm):01411                 BNE     LODERR                  ; Report error
EC5B 1F89             (     mon09v37.asm):01412                 TFR     A,B                     ; Save for later
EC5D BB9F7C           (     mon09v37.asm):01413                 ADDA    TEMP                    ; Include in checksum
EC60 B79F7C           (     mon09v37.asm):01414                 STA     TEMP                    ; Resave
EC63 1700B4           (     mon09v37.asm):01415                 LBSR    GETBYT                  ; Get next byte of address
EC66 26B7             (     mon09v37.asm):01416                 BNE     LODERR                  ; Report error
EC68 1E89             (     mon09v37.asm):01417                 EXG     A,B                     ; Swap
EC6A 1F01             (     mon09v37.asm):01418                 TFR     D,X                     ; Set pointer
EC6C FB9F7C           (     mon09v37.asm):01419                 ADDB    TEMP                    ; Include in checksum
EC6F F79F7C           (     mon09v37.asm):01420                 STB     TEMP                    ; Resave checksum
                      (     mon09v37.asm):01421         ;* Get record type
EC72 1700A5           (     mon09v37.asm):01422                 LBSR    GETBYT                  ; Get type value
EC75 26A8             (     mon09v37.asm):01423                 BNE     LODERR                  ; Report error
EC77 BB9F7C           (     mon09v37.asm):01424                 ADDA    TEMP                    ; Include checksum
EC7A B79F7C           (     mon09v37.asm):01425                 STA     TEMP                    ; Resave checksum
                      (     mon09v37.asm):01426         ;* Get data bytes
EC7D                  (     mon09v37.asm):01427         DLINT1
EC7D 17009A           (     mon09v37.asm):01428                 LBSR    GETBYT                  ; Get data byte
EC80 269D             (     mon09v37.asm):01429                 BNE     LODERR                  ; Report error
EC82 A780             (     mon09v37.asm):01430                 STA     ,X+                     ; Write to memory
EC84 BB9F7C           (     mon09v37.asm):01431                 ADDA    TEMP                    ; Include checksum
EC87 B79F7C           (     mon09v37.asm):01432                 STA     TEMP                    ; Resave checksum
EC8A 7A9F7D           (     mon09v37.asm):01433                 DEC     TEMP+1                  ; Reduce length
EC8D 26EE             (     mon09v37.asm):01434                 BNE     DLINT1                  ; Do them all
                      (     mon09v37.asm):01435         ;* Get checksum
EC8F BDED1A           (     mon09v37.asm):01436                 JSR     GETBYT                  ; Read a byte
EC92 1026FF89         (     mon09v37.asm):01437                 LBNE    LODERR                  ; Report error
EC96 BB9F7C           (     mon09v37.asm):01438                 ADDA    TEMP                    ; Include checksum
EC99 27A9             (     mon09v37.asm):01439                 BEQ     DLRTS                   ; Report success
EC9B 16FF81           (     mon09v37.asm):01440                 LBRA    LODERR                  ; Report failure
                      (     mon09v37.asm):01441         
                      (     mon09v37.asm):01442         ;*
                      (     mon09v37.asm):01443         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (     mon09v37.asm):01444         ;*
EC9E                  (     mon09v37.asm):01445         GETPC
EC9E 8D3A             (     mon09v37.asm):01446                 BSR     GETAD1          Get address
ECA0 2710             (     mon09v37.asm):01447                 BEQ     GETPC1          Normal data
ECA2 8120             (     mon09v37.asm):01448                 CMPA    #' '            Space?
ECA4 2631             (     mon09v37.asm):01449                 BNE     GETERR          Report error
ECA6 1700C6           (     mon09v37.asm):01450                 LBSR    WRMSG           Output message
ECA9 2D3E00           (     mon09v37.asm):01451                 FCN     '->'            Display address
ECAC FC9F78           (     mon09v37.asm):01452                 LDD     SAVPC           Get PC value
ECAF 1600A3           (     mon09v37.asm):01453                 LBRA    WRDOUT          Display
ECB2                  (     mon09v37.asm):01454         GETPC1
ECB2 FD9F78           (     mon09v37.asm):01455                 STD     SAVPC           Set new PC
ECB5 39               (     mon09v37.asm):01456                 RTS
                      (     mon09v37.asm):01457         ;*
                      (     mon09v37.asm):01458         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (     mon09v37.asm):01459         ;*
ECB6                  (     mon09v37.asm):01460         GETRNG
ECB6 8D1B             (     mon09v37.asm):01461                 BSR     GETADR          Get first address
ECB8 1F01             (     mon09v37.asm):01462                 TFR     D,X             Save in X
ECBA 862C             (     mon09v37.asm):01463                 LDA     #','            Separator
ECBC 1700FC           (     mon09v37.asm):01464                 LBSR    PUTCHR          Display
ECBF 8D19             (     mon09v37.asm):01465                 BSR     GETAD1          Get second address
ECC1 2783             (     mon09v37.asm):01466                 BEQ     DLEOF           Normal data
ECC3 8120             (     mon09v37.asm):01467                 CMPA    #' '            Space?
ECC5 2610             (     mon09v37.asm):01468                 BNE     GETERR          No, report error
ECC7 1700A5           (     mon09v37.asm):01469                 LBSR    WRMSG           Output message
ECCA 4646464600       (     mon09v37.asm):01470                 FCN     'FFFF'
ECCF CCFFFF           (     mon09v37.asm):01471                 LDD     #$FFFF          Assume top of RAM
ECD2 39               (     mon09v37.asm):01472                 RTS
                      (     mon09v37.asm):01473         ;*
                      (     mon09v37.asm):01474         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (     mon09v37.asm):01475         ;*
ECD3                  (     mon09v37.asm):01476         GETADR
ECD3 8D05             (     mon09v37.asm):01477                 BSR     GETAD1          Get word value
ECD5 270F             (     mon09v37.asm):01478                 BEQ     GETAD2          Its OK
ECD7                  (     mon09v37.asm):01479         GETERR
ECD7 16F923           (     mon09v37.asm):01480                 LBRA    ERROR           Report error
                      (     mon09v37.asm):01481         ;* Get word value without error checking
ECDA                  (     mon09v37.asm):01482         GETAD1
ECDA 8D3E             (     mon09v37.asm):01483                 BSR     GETBYT          Get HIGH byte
ECDC 2609             (     mon09v37.asm):01484                 BNE     GETAD3          Test for special register
ECDE 1F89             (     mon09v37.asm):01485                 TFR     A,B             Copy for later
ECE0 8D38             (     mon09v37.asm):01486                 BSR     GETBYT          Get LOW byte
ECE2 26F3             (     mon09v37.asm):01487                 BNE     GETERR          Report error
ECE4 1E89             (     mon09v37.asm):01488                 EXG     A,B             Correct order
ECE6                  (     mon09v37.asm):01489         GETAD2
ECE6 39               (     mon09v37.asm):01490                 RTS
                      (     mon09v37.asm):01491         ;* Handle special register names
ECE7                  (     mon09v37.asm):01492         GETAD3
ECE7 3410             (     mon09v37.asm):01493                 PSHS    X               Save X
ECE9 BE9F72           (     mon09v37.asm):01494                 LDX     SAVX            Assume X
ECEC 8158             (     mon09v37.asm):01495                 CMPA    #'X'            Is it X?
ECEE 271C             (     mon09v37.asm):01496                 BEQ     GETAD4          Yes
ECF0 BE9F74           (     mon09v37.asm):01497                 LDX     SAVY            Assume Y
ECF3 8159             (     mon09v37.asm):01498                 CMPA    #'Y'            Is it Y?
ECF5 2715             (     mon09v37.asm):01499                 BEQ     GETAD4          Yes
ECF7 BE9F76           (     mon09v37.asm):01500                 LDX     SAVU            Assume U
ECFA 8155             (     mon09v37.asm):01501                 CMPA    #'U'            Is it U?
ECFC 270E             (     mon09v37.asm):01502                 BEQ     GETAD4          Yes
ECFE BE9F72           (     mon09v37.asm):01503                 LDX     SAVX            Assume S
ED01 8153             (     mon09v37.asm):01504                 CMPA    #'S'            Is it S?
ED03 2707             (     mon09v37.asm):01505                 BEQ     GETAD4          Yes
ED05 BE9F78           (     mon09v37.asm):01506                 LDX     SAVPC           Assume PC?
ED08 8150             (     mon09v37.asm):01507                 CMPA    #'P'            Is it PC?
ED0A 260C             (     mon09v37.asm):01508                 BNE     GETAD5          No, error
ED0C                  (     mon09v37.asm):01509         GETAD4
ED0C 863D             (     mon09v37.asm):01510                 LDA     #'='            Separator
ED0E 1700AA           (     mon09v37.asm):01511                 LBSR    PUTCHR          Echo it
ED11 1F10             (     mon09v37.asm):01512                 TFR     X,D             D = value
ED13 8D40             (     mon09v37.asm):01513                 BSR     WRDOUT          Display it
ED15 4F               (     mon09v37.asm):01514                 CLRA                    Set 'Z'
ED16 1F10             (     mon09v37.asm):01515                 TFR     X,D             Get value back
ED18                  (     mon09v37.asm):01516         GETAD5
ED18 3590             (     mon09v37.asm):01517                 PULS    X,PC            Restore & return
                      (     mon09v37.asm):01518         
                      (     mon09v37.asm):01519         ;*
                      (     mon09v37.asm):01520         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (     mon09v37.asm):01521         ;*
ED1A                  (     mon09v37.asm):01522         GETBYT
ED1A 8D20             (     mon09v37.asm):01523                 BSR     GETNIB          Get FIRST nibble
ED1C 2611             (     mon09v37.asm):01524                 BNE     GETB3           Invalid, test for quote
ED1E 48               (     mon09v37.asm):01525                 LSLA                    Rotate
ED1F 48               (     mon09v37.asm):01526                 LSLA                    into
ED20 48               (     mon09v37.asm):01527                 LSLA                    high
ED21 48               (     mon09v37.asm):01528                 LSLA                    nibble
ED22 3402             (     mon09v37.asm):01529                 PSHS    A               Save for later
ED24 8D16             (     mon09v37.asm):01530                 BSR     GETNIB          Get SECOND nibble
ED26 2604             (     mon09v37.asm):01531                 BNE     GETB2           Report error
ED28 AAE4             (     mon09v37.asm):01532                 ORA     ,S              Include high
ED2A                  (     mon09v37.asm):01533         GETB4
ED2A 1A04             (     mon09v37.asm):01534                 ORCC    #$04            Indicate success (SET 'Z')
ED2C                  (     mon09v37.asm):01535         GETB2
ED2C 3261             (     mon09v37.asm):01536                 LEAS    1,S             Skip saved value
ED2E                  (     mon09v37.asm):01537         GETB1
ED2E 39               (     mon09v37.asm):01538                 RTS
ED2F                  (     mon09v37.asm):01539         GETB3
ED2F 8127             (     mon09v37.asm):01540                 CMPA    #$27            Single quote?
ED31 26FB             (     mon09v37.asm):01541                 BNE     GETB1           No, abort
ED33 170070           (     mon09v37.asm):01542                 LBSR    GETCHR          Get ASCII character
ED36 170082           (     mon09v37.asm):01543                 LBSR    PUTCHR          Echo on terminal
ED39 1A04             (     mon09v37.asm):01544                 ORCC    #$04            Indicate success (SET 'Z')
ED3B 39               (     mon09v37.asm):01545                 RTS
                      (     mon09v37.asm):01546         
                      (     mon09v37.asm):01547         
                      (     mon09v37.asm):01548         ;*
                      (     mon09v37.asm):01549         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (     mon09v37.asm):01550         ;*
ED3C                  (     mon09v37.asm):01551         GETNIB
ED3C 170047           (     mon09v37.asm):01552                 LBSR    GETECH          Get character
ED3F 8030             (     mon09v37.asm):01553                 SUBA    #'0'            Convert numbers
ED41 8109             (     mon09v37.asm):01554                 CMPA    #9              Numeric?
ED43 230A             (     mon09v37.asm):01555                 BLS     GETN1           Yes, OK
ED45 8007             (     mon09v37.asm):01556                 SUBA    #7              Convert alphas
ED47 810A             (     mon09v37.asm):01557                 CMPA    #$A             Under?
ED49 2507             (     mon09v37.asm):01558                 BLO     GETN2           Yer, error
ED4B 810F             (     mon09v37.asm):01559                 CMPA    #$F             Over?
ED4D 2203             (     mon09v37.asm):01560                 BHI     GETN2           Yes, error
ED4F                  (     mon09v37.asm):01561         GETN1
ED4F 1A04             (     mon09v37.asm):01562                 ORCC    #$04            SET 'Z' FLAG, INDICATE OK
ED51 39               (     mon09v37.asm):01563                 RTS
ED52                  (     mon09v37.asm):01564         GETN2
ED52 8B37             (     mon09v37.asm):01565                 ADDA    #$37            Normalize character + clear Z
ED54 39               (     mon09v37.asm):01566                 RTS
                      (     mon09v37.asm):01567         ;*
                      (     mon09v37.asm):01568         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (     mon09v37.asm):01569         ;*
ED55                  (     mon09v37.asm):01570         WRDOUT
ED55 8D02             (     mon09v37.asm):01571                 BSR     HEXOUT          Output first byte
ED57 1F98             (     mon09v37.asm):01572                 TFR     B,A             Get second byte
                      (     mon09v37.asm):01573         ;*
                      (     mon09v37.asm):01574         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (     mon09v37.asm):01575         ;*
ED59                  (     mon09v37.asm):01576         HEXOUT
ED59 3402             (     mon09v37.asm):01577                 PSHS    A               Save low nibble
ED5B 44               (     mon09v37.asm):01578                 LSRA                    Rotate
ED5C 44               (     mon09v37.asm):01579                 LSRA                    upper nibble
ED5D 44               (     mon09v37.asm):01580                 LSRA                    into
ED5E 44               (     mon09v37.asm):01581                 LSRA                    lower nibble
ED5F 8D02             (     mon09v37.asm):01582                 BSR     HOUT            Output high nibble
ED61 3502             (     mon09v37.asm):01583                 PULS    A               Restore low nibble
                      (     mon09v37.asm):01584         ;*
                      (     mon09v37.asm):01585         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (     mon09v37.asm):01586         ;*
ED63                  (     mon09v37.asm):01587         HOUT
ED63 840F             (     mon09v37.asm):01588                 ANDA    #$0F            Remove upper half
ED65 8B30             (     mon09v37.asm):01589                 ADDA    #'0'            Convert to printable
ED67 8139             (     mon09v37.asm):01590                 CMPA    #'9'            In range?
ED69 2302             (     mon09v37.asm):01591                 BLS     HOUT1           Yes, display
ED6B 8B07             (     mon09v37.asm):01592                 ADDA    #7              Convert to alpha
ED6D                  (     mon09v37.asm):01593         HOUT1
ED6D 204C             (     mon09v37.asm):01594                 BRA     PUTCHR          Output character
                      (     mon09v37.asm):01595         
                      (     mon09v37.asm):01596         ;******************************************************************************
                      (     mon09v37.asm):01597         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (     mon09v37.asm):01598         ;******************************************************************************
ED6F 3410             (     mon09v37.asm):01599         WRMSG   PSHS    X               SAVE X
ED71 AE62             (     mon09v37.asm):01600                 LDX     2,S             GET OLD PC
ED73 8D04             (     mon09v37.asm):01601                 BSR     WRLIN           OUTPUT LINE
ED75 AF62             (     mon09v37.asm):01602                 STX     2,S             UPDATE OLD PC
ED77 3590             (     mon09v37.asm):01603                 PULS    X,PC            RESTORE X, RETURN
                      (     mon09v37.asm):01604         
                      (     mon09v37.asm):01605         ;******************************************************************************
                      (     mon09v37.asm):01606         ;* DISPLAY MESSAGE(X)
                      (     mon09v37.asm):01607         ;******************************************************************************
ED79                  (     mon09v37.asm):01608         WRLIN
ED79 A680             (     mon09v37.asm):01609                 LDA     ,X+             GET CHAR FROM MESSAGE
ED7B 2708             (     mon09v37.asm):01610                 BEQ     WRLND           END, QUIT
ED7D 81FF             (     mon09v37.asm):01611                 CMPA    #$FF            NEWLINE END, LFCR & EXIT
ED7F 2719             (     mon09v37.asm):01612                 BEQ     LFCR            IF SO, NEW LINE, RETURN
ED81 8D38             (     mon09v37.asm):01613                 BSR     PUTCHR          OUTPUT TO TERM
ED83 20F4             (     mon09v37.asm):01614                 BRA     WRLIN           KEEP GOING
ED85                  (     mon09v37.asm):01615         WRLND
ED85 39               (     mon09v37.asm):01616                 RTS
                      (     mon09v37.asm):01617         
                      (     mon09v37.asm):01618         ;******************************************************************************
                      (     mon09v37.asm):01619         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (     mon09v37.asm):01620         ;******************************************************************************
ED86                  (     mon09v37.asm):01621         GETECH
ED86 8D1E             (     mon09v37.asm):01622                 BSR     GETCHR          GET CHARACTER
ED88 8120             (     mon09v37.asm):01623                 CMPA    #' '            SPACE?
ED8A 23F9             (     mon09v37.asm):01624                 BLS     WRLND           IF < DON'T DISPLAY
ED8C 8161             (     mon09v37.asm):01625                 CMPA    #$61            LOWER CASE?
ED8E 252B             (     mon09v37.asm):01626                 BLO     PUTCHR          OK
ED90 845F             (     mon09v37.asm):01627                 ANDA    #$5F            CONVERT TO UPPER
ED92 2027             (     mon09v37.asm):01628                 BRA     PUTCHR          ECHO
                      (     mon09v37.asm):01629         
                      (     mon09v37.asm):01630         ;******************************************************************************
                      (     mon09v37.asm):01631         ;* DISPLAY A SPACE ON THE TERMINAL
                      (     mon09v37.asm):01632         ;******************************************************************************
ED94                  (     mon09v37.asm):01633         SPACE
ED94 3402             (     mon09v37.asm):01634                 PSHS    A               SAVE A
ED96 8620             (     mon09v37.asm):01635                 LDA     #' '            GET SPACE
ED98 2008             (     mon09v37.asm):01636                 BRA     LFC1            DISLAY AND GO HOME
                      (     mon09v37.asm):01637         
                      (     mon09v37.asm):01638         ;******************************************************************************
                      (     mon09v37.asm):01639         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (     mon09v37.asm):01640         ;******************************************************************************
ED9A                  (     mon09v37.asm):01641         LFCR
ED9A 3402             (     mon09v37.asm):01642                 PSHS    A                       SAVE
ED9C 860A             (     mon09v37.asm):01643                 LDA     #$0A                    GET LF
ED9E 8D1B             (     mon09v37.asm):01644                 BSR     PUTCHR                  OUTPUT
EDA0 860D             (     mon09v37.asm):01645                 LDA     #$0D                    GET CR
EDA2                  (     mon09v37.asm):01646         LFC1
EDA2 8D17             (     mon09v37.asm):01647                 BSR     PUTCHR                  OUTPUT
EDA4 3582             (     mon09v37.asm):01648                 PULS    A,PC                    RESTORE AND GO HOME
                      (     mon09v37.asm):01649         
                      (     mon09v37.asm):01650         ;******************************************************************************
                      (     mon09v37.asm):01651         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (     mon09v37.asm):01652         ;******************************************************************************
EDA6                  (     mon09v37.asm):01653         GETCHR
EDA6 3410             (     mon09v37.asm):01654                 PSHS    X                       SAVE 'X'
EDA8 BE9F6A           (     mon09v37.asm):01655                 LDX     >UART1                  POINT TO CONSOLE
EDAB B69F69           (     mon09v37.asm):01656                 LDA     IOCON                   GET I/O CONFIG
EDAE 44               (     mon09v37.asm):01657                 LSRA                            SHIFT TO CARRY
EDAF 2503             (     mon09v37.asm):01658                 BCS     GETC1                   READ FROM UART
EDB1 BE9F6C           (     mon09v37.asm):01659                 LDX     >UART2                  POINT TO AUX UART
EDB4                  (     mon09v37.asm):01660         GETC1
EDB4 170F7F           (     mon09v37.asm):01661                 LBSR    READ                    READ TERMINAL
EDB7 26FB             (     mon09v37.asm):01662                 BNE     GETC1                   KEEP TRYING
EDB9 3590             (     mon09v37.asm):01663                 PULS    X,PC
                      (     mon09v37.asm):01664         
                      (     mon09v37.asm):01665         ;******************************************************************************
                      (     mon09v37.asm):01666         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (     mon09v37.asm):01667         ;******************************************************************************
EDBB                  (     mon09v37.asm):01668         PUTCHR
EDBB 3416             (     mon09v37.asm):01669                 PSHS    A,B,X                   SAVE REGS
EDBD F69F69           (     mon09v37.asm):01670                 LDB     IOCON                   GET I/O CONFIG
EDC0 C502             (     mon09v37.asm):01671                 BITB    #2                      WRITE TO TERM?
EDC2 2706             (     mon09v37.asm):01672                 BEQ     PUT1                    NO, TRY UART
EDC4 BE9F6A           (     mon09v37.asm):01673                 LDX     >UART1                  POINT TO UART1
EDC7 170F7A           (     mon09v37.asm):01674                 LBSR    WRITE                   OUTPUT TO TERMINAL
EDCA                  (     mon09v37.asm):01675         PUT1
EDCA F69F69           (     mon09v37.asm):01676                 LDB     IOCON                   INCASE CORRUPTED
EDCD C504             (     mon09v37.asm):01677                 BITB    #4                      WRITE TO UART?
EDCF 2706             (     mon09v37.asm):01678                 BEQ     PUT2                    NO, SKIP IT
EDD1 BE9F6C           (     mon09v37.asm):01679                 LDX     >UART2                  POINT TO UART2
EDD4 170F6D           (     mon09v37.asm):01680                 LBSR    WRITE                   OUTPUT TO UART
EDD7                  (     mon09v37.asm):01681         PUT2
EDD7 3596             (     mon09v37.asm):01682                 PULS    A,B,X,PC                RESTORE AND GO HOME
                      (     mon09v37.asm):01683         
                      (     mon09v37.asm):01684         ;******************************************************************************
                      (     mon09v37.asm):01685         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (     mon09v37.asm):01686         ;* SCREEN OUTPUT FLOW CONTROL.
                      (     mon09v37.asm):01687         ;******************************************************************************
EDD9                  (     mon09v37.asm):01688         CHKCHR
EDD9 3410             (     mon09v37.asm):01689                 PSHS    X                       SAVE PTR
EDDB BE9F6A           (     mon09v37.asm):01690                 LDX     >UART1                  POINT TO CONSOLE UART
EDDE F69F69           (     mon09v37.asm):01691                 LDB     IOCON                   GET I/O CONFIG
EDE1 2B07             (     mon09v37.asm):01692                 BMI     CHKC1                   ALREADY HELD
EDE3 170F50           (     mon09v37.asm):01693                 LBSR    READ                    READ TERMINAL
EDE6 8120             (     mon09v37.asm):01694                 CMPA    #' '                    SPACE?
EDE8 2616             (     mon09v37.asm):01695                 BNE     CHKC3                   NO, IGNORE IT
EDEA                  (     mon09v37.asm):01696         CHKC1
EDEA CA80             (     mon09v37.asm):01697                 ORB     #%10000000              SET HELD BIT
EDEC 170F47           (     mon09v37.asm):01698                 LBSR    READ                    GET KEY FROM CONSOLE
EDEF 8120             (     mon09v37.asm):01699                 CMPA    #' '                    SPACE?
EDF1 270A             (     mon09v37.asm):01700                 BEQ     CHKC2                   YES, ALLOW
EDF3 C47F             (     mon09v37.asm):01701                 ANDB    #%01111111              DISABLE HELD BIT
EDF5 810D             (     mon09v37.asm):01702                 CMPA    #$0D                    CARRIAGE RETURN?
EDF7 2704             (     mon09v37.asm):01703                 BEQ     CHKC2                   ALLOW
EDF9 811B             (     mon09v37.asm):01704                 CMPA    #$1B                    ESCAPE?
EDFB 26ED             (     mon09v37.asm):01705                 BNE     CHKC1                   NO, IGNORE
EDFD                  (     mon09v37.asm):01706         CHKC2
EDFD F79F69           (     mon09v37.asm):01707                 STB     IOCON                   RESAVE I/O CONFIG BYTE
EE00                  (     mon09v37.asm):01708         CHKC3
EE00 811B             (     mon09v37.asm):01709                 CMPA    #$1B                    TEST FOR ESCAPE CHARACTER
EE02 3590             (     mon09v37.asm):01710                 PULS    X,PC
                      (     mon09v37.asm):01711         
                      (     mon09v37.asm):01712         ;******************************************************************************
                      (     mon09v37.asm):01713         ;* STEP ONE INSTRUCTION
                      (     mon09v37.asm):01714         ;******************************************************************************
EE04                  (     mon09v37.asm):01715         STEPDI
EE04 10BE9F78         (     mon09v37.asm):01716                 LDY     SAVPC                   GET PC
EE08 CE9F9B           (     mon09v37.asm):01717                 LDU     #DSPBUF                 GET INPUT BUFFER
EE0B 170265           (     mon09v37.asm):01718                 LBSR    DISASS                  DISPLAY
EE0E 1F31             (     mon09v37.asm):01719                 TFR     U,X                     POINT TO IT
EE10 17FF66           (     mon09v37.asm):01720                 LBSR    WRLIN                   DISPLAY
EE13 200A             (     mon09v37.asm):01721                 BRA     STEPCE                  AND PERFORM STEP
                      (     mon09v37.asm):01722         
                      (     mon09v37.asm):01723         ;******************************************************************************
                      (     mon09v37.asm):01724         ;* STEP WITHOUT DISPLAYING INSTRUCTION
                      (     mon09v37.asm):01725         ;******************************************************************************
EE15 10BE9F78         (     mon09v37.asm):01726         STEP    LDY     SAVPC           GET PROGRAM COUNTER
EE19 CE9F9B           (     mon09v37.asm):01727                 LDU     #DSPBUF         POINT TO FREE RAM FOR DISASEMBLY OUTPUT
EE1C 170254           (     mon09v37.asm):01728                 LBSR    DISASS          PERFORM DISASSEMBLY
EE1F 10BF9F78         (     mon09v37.asm):01729         STEPCE  STY     SAVPC           SAVE NEW PC
EE23 FE9F7F           (     mon09v37.asm):01730                 LDU     PTRSAV          GET POINTER BACK
EE26 ECC0             (     mon09v37.asm):01731                 LDD     ,U+             GET OPCODE
                      (     mon09v37.asm):01732         ;* TEST FOR LONG CONDITIONAL BRANCHES
EE28 8110             (     mon09v37.asm):01733         LCBRAN  CMPA    #$10            PREFIX?
EE2A 2612             (     mon09v37.asm):01734                 BNE     LOBRAN          NO, GOT FOR IT
EE2C E6C4             (     mon09v37.asm):01735                 LDB     ,U              GET OPCODE
EE2E C122             (     mon09v37.asm):01736                 CMPB    #$22            IN RANGE?
EE30 250C             (     mon09v37.asm):01737                 BLO     LOBRAN          NO
EE32 C12F             (     mon09v37.asm):01738                 CMPB    #$2F            IN RANGE?
EE34 2208             (     mon09v37.asm):01739                 BHI     LOBRAN          NO
EE36 A6C0             (     mon09v37.asm):01740                 LDA     ,U+             GET OPCOIDE BYTE
EE38 170216           (     mon09v37.asm):01741                 LBSR    TSTCON          TEST CONDITIONAL
EE3B 2705             (     mon09v37.asm):01742                 BEQ     LBRAN1          YES, DO IT
EE3D 39               (     mon09v37.asm):01743                 RTS
                      (     mon09v37.asm):01744         ;* TEST FOR LONG BRANCHES
EE3E 8116             (     mon09v37.asm):01745         LOBRAN  CMPA    #$16            IS IT LBRA?
EE40 2606             (     mon09v37.asm):01746                 BNE     LBRANS          NO, TRY LBSR
EE42 ECC1             (     mon09v37.asm):01747         LBRAN1  LDD     ,U++            GET OFFSET
EE44 30CB             (     mon09v37.asm):01748                 LEAX    D,U             PERFORM BRANCH
EE46 2034             (     mon09v37.asm):01749                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v37.asm):01750         ;* TEST FOR LONG BRANCH TO SUB
EE48 8117             (     mon09v37.asm):01751         LBRANS  CMPA    #$17            'LBSR'?
EE4A 2606             (     mon09v37.asm):01752                 BNE     SCOBRA          NO, TRY SHORT CONDITIONALS
EE4C ECC1             (     mon09v37.asm):01753                 LDD     ,U++            GET OFFSET
EE4E 30CB             (     mon09v37.asm):01754                 LEAX    D,U             SET UP ADDRESS
EE50 2020             (     mon09v37.asm):01755                 BRA     SAVSTK
                      (     mon09v37.asm):01756         ;* TEST FOR SHORT CONDITIONAL BRANCHES
EE52 8122             (     mon09v37.asm):01757         SCOBRA  CMPA    #$22            < 'BHI'?
EE54 250A             (     mon09v37.asm):01758                 BLO     SHBRAN          NO, TRY SHORT BRANCHES
EE56 812F             (     mon09v37.asm):01759                 CMPA    #$2F            > 'BLE'?
EE58 2206             (     mon09v37.asm):01760                 BHI     SHBRAN          NO, TRY SHORT BRANCHES
EE5A 1701F4           (     mon09v37.asm):01761                 LBSR    TSTCON          SEE OF CONDITIONAL IS OK
EE5D 2705             (     mon09v37.asm):01762                 BEQ     SBRAN1          YES, DO IT
EE5F 39               (     mon09v37.asm):01763                 RTS
                      (     mon09v37.asm):01764         ;* TEST FOR SHORT BRANCHES
EE60 8120             (     mon09v37.asm):01765         SHBRAN  CMPA    #$20            SHORT BRANCH?
EE62 2606             (     mon09v37.asm):01766                 BNE     SBRANS          NO, TRY SHORT BRANCH TO SUB
EE64 E6C0             (     mon09v37.asm):01767         SBRAN1  LDB     ,U+             GET OFFSET
EE66 30C5             (     mon09v37.asm):01768                 LEAX    B,U             EMULATE JUMP
EE68 2012             (     mon09v37.asm):01769                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v37.asm):01770         ;* TEST FOR SHORT BRANCH TO SUBROUTINE
EE6A 818D             (     mon09v37.asm):01771         SBRANS  CMPA    #$8D            'BSR'?
EE6C 2612             (     mon09v37.asm):01772                 BNE     TSTTFR          NO, TRY TRANSFER
EE6E E6C0             (     mon09v37.asm):01773                 LDB     ,U+             GET OFFSET
EE70 30C5             (     mon09v37.asm):01774                 LEAX    B,U             PERFORM BRANCH
EE72 10BE9F7A         (     mon09v37.asm):01775         SAVSTK  LDY     SAVS            GET STACK POINTER
EE76 EFA3             (     mon09v37.asm):01776                 STU     ,--Y            PUSH ADDRESS
EE78 10BF9F7A         (     mon09v37.asm):01777                 STY     SAVS            RESAVE
EE7C BF9F78           (     mon09v37.asm):01778         SAVNPC  STX     SAVPC           SAVE IT
EE7F 39               (     mon09v37.asm):01779                 RTS
                      (     mon09v37.asm):01780         ;* TEST FOR TRANSFER
EE80 811F             (     mon09v37.asm):01781         TSTTFR  CMPA    #$1F            TRANSFER?
EE82 2620             (     mon09v37.asm):01782                 BNE     TSTEXG          NO, TRY EXCHANGE
EE84 8D01             (     mon09v37.asm):01783                 BSR     LOKREG          LOOKUP REGISTER
EE86 39               (     mon09v37.asm):01784                 RTS
                      (     mon09v37.asm):01785         ;* LOOKUP REGISTER, AND SIMULATE IF PC XFER OR EXCHANGE
EE87 A6C4             (     mon09v37.asm):01786         LOKREG  LDA     ,U              GET POSTBYTE
EE89 840F             (     mon09v37.asm):01787                 ANDA    #$0F            REMOVE HIGH REGISTER
EE8B 8105             (     mon09v37.asm):01788                 CMPA    #5              IS IT PC?
EE8D 2610             (     mon09v37.asm):01789                 BNE     LOK1            NO, IT'S OK TO EXECUTE
EE8F A6C4             (     mon09v37.asm):01790                 LDA     ,U              GET REG POSTBYTE BACK
EE91 44               (     mon09v37.asm):01791                 LSRA                    SHIFT
EE92 44               (     mon09v37.asm):01792                 LSRA                    HIGH REGISTER
EE93 44               (     mon09v37.asm):01793                 LSRA                    TO LOW (LEAVE X 2)
EE94 8EF965           (     mon09v37.asm):01794         LOK2    LDX     #TFREGT         POINT TO TABLE
EE97 840F             (     mon09v37.asm):01795                 ANDA    #$0F            INSURE WE GET VALID REG
EE99 AE86             (     mon09v37.asm):01796                 LDX     A,X             GET ADDRESS OF VARIABLE
EE9B EC84             (     mon09v37.asm):01797                 LDD     ,X              GET REGISTER VALUE
EE9D 202E             (     mon09v37.asm):01798                 BRA     STDPC           SAVE IT
EE9F 3262             (     mon09v37.asm):01799         LOK1    LEAS    2,S             SKIP LAST CALL
EEA1 160151           (     mon09v37.asm):01800                 LBRA    NOREXE          EXECUTE NORMAL INSTRUCTION
                      (     mon09v37.asm):01801         ;* TEST FOR EXCHANGE
EEA4 811E             (     mon09v37.asm):01802         TSTEXG  CMPA    #$1E            IS IT EXCHANGE
EEA6 2619             (     mon09v37.asm):01803                 BNE     TSTRTS          NO, TRY RTS
EEA8 10BE9F78         (     mon09v37.asm):01804                 LDY     SAVPC           GET OLD PC VALUE
EEAC A6C4             (     mon09v37.asm):01805                 LDA     ,U              GET REGISTER
EEAE 84F0             (     mon09v37.asm):01806                 ANDA    #$F0            USE HIGH ONLY
EEB0 8150             (     mon09v37.asm):01807                 CMPA    #$50            IS PC FIRST?
EEB2 2607             (     mon09v37.asm):01808                 BNE     TSTE1           NO, SKIP
EEB4 A6C4             (     mon09v37.asm):01809                 LDA     ,U              GET REG BACK
EEB6 48               (     mon09v37.asm):01810                 LSLA                    DOUBLE
EEB7 8DDB             (     mon09v37.asm):01811                 BSR     LOK2            GET ADDRESS OF REG TO SWAP WITH
EEB9 2002             (     mon09v37.asm):01812                 BRA     TSTE2           PERFORM MOVE TO PC
EEBB 8DCA             (     mon09v37.asm):01813         TSTE1   BSR     LOKREG          GET REGISTER SEE IF PC IS LOW REGISTER
EEBD 10AF84           (     mon09v37.asm):01814         TSTE2   STY     ,X              SAVE PC IN REGISTER
EEC0 39               (     mon09v37.asm):01815                 RTS
                      (     mon09v37.asm):01816         ;* TEST FOR 'RTS' INSTRUCTIONS
EEC1 8139             (     mon09v37.asm):01817         TSTRTS  CMPA    #$39            IS IT 'RTS'
EEC3 260C             (     mon09v37.asm):01818                 BNE     TPULS           NO, TRY PULS
EEC5 FE9F7A           (     mon09v37.asm):01819                 LDU     SAVS            POINT TO STACK
EEC8 3706             (     mon09v37.asm):01820                 PULU    A,B             GET DATA
EECA FF9F7A           (     mon09v37.asm):01821                 STU     SAVS            RESAVE SP
EECD FD9F78           (     mon09v37.asm):01822         STDPC   STD     SAVPC
EED0 39               (     mon09v37.asm):01823                 RTS
                      (     mon09v37.asm):01824         ;* TEST FOR 'PULS' INSTRUCTION
EED1 8135             (     mon09v37.asm):01825         TPULS   CMPA    #$35            PULLING FROM S?
EED3 260D             (     mon09v37.asm):01826                 BNE     TPULU           NO, TRY PULU
EED5 BE9F7A           (     mon09v37.asm):01827                 LDX     SAVS            GET SAVED 'S' REG
EED8 108EF971         (     mon09v37.asm):01828                 LDY     #PULSTAB        POINT TO TABLE
EEDC 8D15             (     mon09v37.asm):01829                 BSR     DOPUL           PERFORM PULL
EEDE BF9F7A           (     mon09v37.asm):01830                 STX     SAVS            RESAVE NEW 'S' REGISTER
EEE1 39               (     mon09v37.asm):01831                 RTS
                      (     mon09v37.asm):01832         ;* TEST FOR A 'PULU' INSTRUCTION
EEE2 8137             (     mon09v37.asm):01833         TPULU   CMPA    #$37            IS IT 'PULU'?
EEE4 262E             (     mon09v37.asm):01834                 BNE     JSREXT          NO, TRY JSR EXTENDED
EEE6 BE9F76           (     mon09v37.asm):01835                 LDX     SAVU            GET SAVED 'U'
EEE9 108EF981         (     mon09v37.asm):01836                 LDY     #PULUTAB        POINT TO TABLE
EEED 8D04             (     mon09v37.asm):01837                 BSR     DOPUL           PERFORM PULL
EEEF BF9F76           (     mon09v37.asm):01838                 STX     SAVU            RESAVE 'S'
EEF2 39               (     mon09v37.asm):01839                 RTS
                      (     mon09v37.asm):01840         ;* PERFORM PUL OPERATIONS
EEF3 A6C4             (     mon09v37.asm):01841         DOPUL   LDA     ,U              GET POSTBYTE
EEF5 C604             (     mon09v37.asm):01842                 LDB     #4              TEST FOR FIRST FOUR BITS (8 BIT REG)
EEF7 5A               (     mon09v37.asm):01843         DOPUL1  DECB                    DECREMENT COUNT
EEF8 44               (     mon09v37.asm):01844                 LSRA                    SHIFT
EEF9 2413             (     mon09v37.asm):01845                 BCC     DOPUL2          NOTHING, GO AGAIN
EEFB 3406             (     mon09v37.asm):01846                 PSHS    A,B             SAVE REGS
EEFD 5D               (     mon09v37.asm):01847                 TSTB                    ARE WE INTO 16 BITS?
EEFE 2B06             (     mon09v37.asm):01848                 BMI     PUL16           YES, PERFORM 16 BITS
EF00 A680             (     mon09v37.asm):01849                 LDA     ,X+             PULL A BYTE
EF02 A7B1             (     mon09v37.asm):01850                 STA     [,Y++]          SAVE IN REGISTER
EF04 2004             (     mon09v37.asm):01851                 BRA     DOPUL3          GO AGAIN
EF06 EC81             (     mon09v37.asm):01852         PUL16   LDD     ,X++            GET 16 BIT VALUE
EF08 EDB1             (     mon09v37.asm):01853                 STD     [,Y++]          SAVE IN REGISTER
EF0A 3506             (     mon09v37.asm):01854         DOPUL3  PULS    A,B             RESTORE
EF0C 20E9             (     mon09v37.asm):01855                 BRA     DOPUL1          CONTINUE
EF0E 3122             (     mon09v37.asm):01856         DOPUL2  LEAY    2,Y             ADVANCE
EF10 4D               (     mon09v37.asm):01857                 TSTA                    ARE WE CONE
EF11 26E4             (     mon09v37.asm):01858                 BNE     DOPUL1          CONTINUE
EF13 39               (     mon09v37.asm):01859                 RTS
                      (     mon09v37.asm):01860         ;* TEST FOR 'JSR' EXTENDED
EF14 81BD             (     mon09v37.asm):01861         JSREXT  CMPA    #$BD            IS IT EXTENDED JSR
EF16 2604             (     mon09v37.asm):01862                 BNE     JMPEXT          NO, TRY JUMP EXTENDED
EF18 8D06             (     mon09v37.asm):01863                 BSR     DJMPEX          FAKE JUMP
EF1A 2021             (     mon09v37.asm):01864                 BRA     PSHPC           SAVE PC
                      (     mon09v37.asm):01865         ;* TEST FOR 'JMP' EXTENDED
EF1C 817E             (     mon09v37.asm):01866         JMPEXT  CMPA    #$7E            IS IT JMP EXTENDED?
EF1E 2604             (     mon09v37.asm):01867                 BNE     JSRDIR          NO, TRY JMP DIRECT
EF20 ECC1             (     mon09v37.asm):01868         DJMPEX  LDD     ,U++            GET ADDRESS
EF22 20A9             (     mon09v37.asm):01869                 BRA     STDPC           SAVE IT
                      (     mon09v37.asm):01870         ;* TEST FOR 'JSR' DIRECT
EF24 819D             (     mon09v37.asm):01871         JSRDIR  CMPA    #$9D            'JSR' DIRECT PAGE?
EF26 2604             (     mon09v37.asm):01872                 BNE     JMPDIR          NO, TRY JUMP
EF28 8D06             (     mon09v37.asm):01873                 BSR     DJMPDI          DO IT
EF2A 2011             (     mon09v37.asm):01874                 BRA     PSHPC           SAVE PC
                      (     mon09v37.asm):01875         ;* TEST FOR 'JMP' DIRECT PAGE
EF2C 810E             (     mon09v37.asm):01876         JMPDIR  CMPA    #$0E            IS IT JUMP DIRECT PAGE?
EF2E 2607             (     mon09v37.asm):01877                 BNE     JSRIND          NO, TRY JUMP INDEXED
EF30 E6C0             (     mon09v37.asm):01878         DJMPDI  LDB     ,U+             GET LOW ADDRESS
EF32 B69F71           (     mon09v37.asm):01879                 LDA     SAVDP           GET DIRECT PAGE
EF35 2096             (     mon09v37.asm):01880                 BRA     STDPC           SAVE IT
                      (     mon09v37.asm):01881         ;* TEST FOR 'JSR' INDEXED
EF37 81AD             (     mon09v37.asm):01882         JSRIND  CMPA    #$AD            IS IT 'JSR' INDEXED?
EF39 260B             (     mon09v37.asm):01883                 BNE     JMPIND          NO, TRY NEXT
EF3B 8D0F             (     mon09v37.asm):01884                 BSR     DJMPIN          DO IT
EF3D BE9F7A           (     mon09v37.asm):01885         PSHPC   LDX     SAVS            GET ADDRESS
EF40 EF83             (     mon09v37.asm):01886                 STU     ,--X            SAVE
EF42 BF9F7A           (     mon09v37.asm):01887                 STX     SAVS            RESAVE
EF45 39               (     mon09v37.asm):01888                 RTS
                      (     mon09v37.asm):01889         ;* TEST FOR 'JMP' INDEXED
EF46 816E             (     mon09v37.asm):01890         JMPIND  CMPA    #$6E            IS IT JUMP INDEXED?
EF48 102600A9         (     mon09v37.asm):01891                 LBNE    NOREXE          NO, NON-TRANSFER INSTRUCTION
                      (     mon09v37.asm):01892         ;* FIRST POINT Y AT REGISTER INVOLVED
EF4C A6C0             (     mon09v37.asm):01893         DJMPIN  LDA     ,U+             GET POSTBYTE
EF4E 3402             (     mon09v37.asm):01894                 PSHS    A               SAVE IT
EF50 8460             (     mon09v37.asm):01895                 ANDA    #%01100000      SAVE ONLY REGISTER
EF52 44               (     mon09v37.asm):01896                 LSRA                    CONVERT
EF53 44               (     mon09v37.asm):01897                 LSRA                    REGISTER
EF54 44               (     mon09v37.asm):01898                 LSRA                    INTO INDEX VALUE
EF55 44               (     mon09v37.asm):01899                 LSRA                    SHIFT IT OVER
EF56 8EF967           (     mon09v37.asm):01900                 LDX     #INDTAB         POINT TO TABLE
EF59 10AE86           (     mon09v37.asm):01901                 LDY     A,X             GET REGISTER ADDRESS
EF5C 10BF9F7C         (     mon09v37.asm):01902                 STY     TEMP            SAVE FOR INC/DEC
EF60 10AEA4           (     mon09v37.asm):01903                 LDY     ,Y              GET REGISTER CONTENTS
EF63 A6E4             (     mon09v37.asm):01904                 LDA     ,S              GET POSTBYTE BACK
EF65 2B0C             (     mon09v37.asm):01905                 BMI     NOT5BO          NOT A FIVE BIT OFFSET
                      (     mon09v37.asm):01906         ;* FIVE BIT REGISTER OFFSET
EF67 841F             (     mon09v37.asm):01907                 ANDA    #%00011111      SAVE ONLY OFFSET
EF69 8110             (     mon09v37.asm):01908                 CMPA    #%00010000      NEGATIVE?
EF6B 2502             (     mon09v37.asm):01909                 BLO     SINOK           NO, IT'S OK
EF6D 8AE0             (     mon09v37.asm):01910                 ORA     #%11100000      CONVERT TO NEGATIVE
EF6F 30A6             (     mon09v37.asm):01911         SINOK   LEAX    A,Y             GET ADDRESS
EF71 205E             (     mon09v37.asm):01912                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01913         ;* TEST FOR NO OFFSET
EF73 848F             (     mon09v37.asm):01914         NOT5BO  ANDA    #%10001111      REMOVE REGISTER & INDIRECT BIT
EF75 8184             (     mon09v37.asm):01915                 CMPA    #$84            NO OFFSET?
EF77 2604             (     mon09v37.asm):01916                 BNE     TOFF8           NO, TRY OFFSET OF 8
EF79 1F21             (     mon09v37.asm):01917                 TFR     Y,X             COPY
EF7B 2054             (     mon09v37.asm):01918                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01919         ;* TEST FOR EIGHT BIT OFFSET
EF7D 8188             (     mon09v37.asm):01920         TOFF8   CMPA    #$88            8 BIT OFSET?
EF7F 2604             (     mon09v37.asm):01921                 BNE     TOFF16          NO, TRY 16 BIT OFFSET
EF81 E6C0             (     mon09v37.asm):01922                 LDB     ,U+             GET OFFSET
EF83 201A             (     mon09v37.asm):01923                 BRA     BSAVOF          GO FOR IT
                      (     mon09v37.asm):01924         ;* TEST FOR 16 BIT OFFSET
EF85 8189             (     mon09v37.asm):01925         TOFF16  CMPA    #$89            16 BIT OFFSET?
EF87 2606             (     mon09v37.asm):01926                 BNE     TOFFA           TRY A ACCUMULATOR OFFSET
EF89 ECC0             (     mon09v37.asm):01927                 LDD     ,U+             GET OFFSET
EF8B 30AB             (     mon09v37.asm):01928                 LEAX    D,Y             DO IT
EF8D 2042             (     mon09v37.asm):01929                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01930         ;* TEST FOR ACCA OFFSET
EF8F 8186             (     mon09v37.asm):01931         TOFFA   CMPA    #$86            OFFSET BY ACCA
EF91 2605             (     mon09v37.asm):01932                 BNE     TOFFB           NO, TRY B
EF93 F69F6F           (     mon09v37.asm):01933                 LDB     SAVA            GET ACCA
EF96 2007             (     mon09v37.asm):01934                 BRA     BSAVOF          SAVE IT
                      (     mon09v37.asm):01935         ;* TEST FOR ACCB OFFSET
EF98 8185             (     mon09v37.asm):01936         TOFFB   CMPA    #$85            B OFFSET
EF9A 2607             (     mon09v37.asm):01937                 BNE     TOFFD           NO, TRY D OFFSET
EF9C F69F70           (     mon09v37.asm):01938                 LDB     SAVB            GET B
EF9F 30A5             (     mon09v37.asm):01939         BSAVOF  LEAX    B,Y             DO OFFSET
EFA1 202E             (     mon09v37.asm):01940                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01941         ;* TEST FOR ACCD OFFSET
EFA3 818B             (     mon09v37.asm):01942         TOFFD   CMPA    #$8B            IS IT D OFFSET?
EFA5 2607             (     mon09v37.asm):01943                 BNE     TAINC1          NO, TRY AUTO INC
EFA7 FC9F6F           (     mon09v37.asm):01944                 LDD     SAVA            GET D ACCUMULATOR
EFAA 30AB             (     mon09v37.asm):01945                 LEAX    D,Y             DO IT
EFAC 2023             (     mon09v37.asm):01946                 BRA     XSAVPC          SAVE IT
                      (     mon09v37.asm):01947         ;* TEST FOR AUTO INCREMENT
EFAE 8180             (     mon09v37.asm):01948         TAINC1  CMPA    #$80            AUTO INC BY 1?
EFB0 2604             (     mon09v37.asm):01949                 BNE     TAINC2          NO, TRY AUTO INC BY 2
EFB2 30A0             (     mon09v37.asm):01950                 LEAX    ,Y+             GET ADDRESS
EFB4 2016             (     mon09v37.asm):01951                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01952         ;* TEST FOR DOUBLE AUTO INCREMENT
EFB6 8181             (     mon09v37.asm):01953         TAINC2  CMPA    #$81            AUTO INC BY 1?
EFB8 2604             (     mon09v37.asm):01954                 BNE     TADEC1          NO, TRY AUTO DEC
EFBA 30A1             (     mon09v37.asm):01955                 LEAX    ,Y++            GET ADDRESS
EFBC 200E             (     mon09v37.asm):01956                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01957         ;* TEST FOR AUTO DECREMENT
EFBE 8182             (     mon09v37.asm):01958         TADEC1  CMPA    #$82            AUTO DEC?
EFC0 2604             (     mon09v37.asm):01959                 BNE     TADEC2          NO, TRY AUTO DEC BY TWO
EFC2 30A2             (     mon09v37.asm):01960                 LEAX    ,-Y             GET ADDRESS
EFC4 2006             (     mon09v37.asm):01961                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v37.asm):01962         ;* TEST FOR DOUBLE AUTO DECREMENT
EFC6 8183             (     mon09v37.asm):01963         TADEC2  CMPA    #$83            DOUBLE AUTO DEC.
EFC8 2609             (     mon09v37.asm):01964                 BNE     TPCO8           NO, TRY PC OFFSET
EFCA 30A3             (     mon09v37.asm):01965                 LEAX    ,--Y            GET OFFSET
EFCC 10AF9F9F7C       (     mon09v37.asm):01966         RSVREG  STY     [TEMP]          RESAVE REGISTER CONTENTS
EFD1 2016             (     mon09v37.asm):01967         XSAVPC  BRA     SAVXPC          SAVE NEW PC
                      (     mon09v37.asm):01968         ;* TEST FOR EIGHT BIT OFFSET FROM PCR
EFD3 818C             (     mon09v37.asm):01969         TPCO8   CMPA    #$8C            8 BIT PC RELATIVE?
EFD5 2606             (     mon09v37.asm):01970                 BNE     TPCO16          NO, TRY 16 BIT PC RELATIVE
EFD7 E6C0             (     mon09v37.asm):01971                 LDB     ,U+             GET BYTE
EFD9 30C5             (     mon09v37.asm):01972                 LEAX    B,U             OFFSET IT
EFDB 200C             (     mon09v37.asm):01973                 BRA     SAVXPC          RESAVE PC
                      (     mon09v37.asm):01974         ;* TEST FOR 16 BIT OFFSET FROM PCR
EFDD 818D             (     mon09v37.asm):01975         TPCO16  CMPA    #$8D            16 BIT OFFSET
EFDF 2606             (     mon09v37.asm):01976                 BNE     TEIND           NO, TRY EXTENDED INDIRECT
EFE1 ECC1             (     mon09v37.asm):01977                 LDD     ,U++            GET VALUE
EFE3 30CB             (     mon09v37.asm):01978                 LEAX    D,U             POINT TO NEW LOCATION
EFE5 2002             (     mon09v37.asm):01979                 BRA     SAVXPC          RESAVE
                      (     mon09v37.asm):01980         ;* EXTENDED ADDRESSING VIA INDEXED POSTBYTE
EFE7 AEC1             (     mon09v37.asm):01981         TEIND   LDX     ,U++            GET ADDRESS
                      (     mon09v37.asm):01982         ;* SET SAVED PC TO CALCULATED ADDRESS (IN 'X').
                      (     mon09v37.asm):01983         ;* CHECK FOR & PERFORM INDIRECTION IF REQUIRED
EFE9 3502             (     mon09v37.asm):01984         SAVXPC  PULS    A               RESTORE POSTBYTE
EFEB 8510             (     mon09v37.asm):01985                 BITA    #%00010000      INDIRECT ADDRESSING?
EFED 2702             (     mon09v37.asm):01986                 BEQ     NINXIN          NOT INDIRECT
EFEF AE84             (     mon09v37.asm):01987                 LDX     ,X              PERFORM A LEVEL OF INDIRECTION
EFF1 BF9F78           (     mon09v37.asm):01988         NINXIN  STX     SAVPC           SAVE IT
EFF4 39               (     mon09v37.asm):01989                 RTS
                      (     mon09v37.asm):01990         ;* NORMAL EXECUTABLE INSTRUCTION, COPY IT INTO OUR RAM, THEN EXECUTE IT
EFF5 335F             (     mon09v37.asm):01991         NOREXE  LEAU    -1,U            BACKUP TO INSTRUCTION
EFF7 8E9FCD           (     mon09v37.asm):01992                 LDX     #INSRAM         POINT TO RAM FOR INSTRUCTION
                      (     mon09v37.asm):01993         ;* COPY INSTRUCTION INTO RAM
EFFA 11B39F78         (     mon09v37.asm):01994         NORE1   CMPU    SAVPC           ARE WE THERE
EFFE 2406             (     mon09v37.asm):01995                 BHS     NORE2           END OF INSTRUCTION
F000 A6C0             (     mon09v37.asm):01996                 LDA     ,U+             GET DATA
F002 A780             (     mon09v37.asm):01997                 STA     ,X+             SAVE IN RAM
F004 20F4             (     mon09v37.asm):01998                 BRA     NORE1           CONTINUE
                      (     mon09v37.asm):01999         ;* INSERT A JUMP AFTER IT
F006 867E             (     mon09v37.asm):02000         NORE2   LDA     #$7E            GET 'JMP' EXTENDED INSTRUCTION
F008 A780             (     mon09v37.asm):02001                 STA     ,X+             SAVE IT
F00A CCF031           (     mon09v37.asm):02002                 LDD     #NORE3          POINT AT ADDRESS TO JUMP TO
F00D ED84             (     mon09v37.asm):02003                 STD     ,X              SAVE IT
F00F 10FF9F7C         (     mon09v37.asm):02004                 STS     TEMP            SAVE SP
F013 10FE9F7A         (     mon09v37.asm):02005                 LDS     SAVS            RESTORE STACK POINTER
F017 B69F6E           (     mon09v37.asm):02006                 LDA     SAVCC           GET CC
F01A F69F71           (     mon09v37.asm):02007                 LDB     SAVDP           GET DP
F01D 3406             (     mon09v37.asm):02008                 PSHS    A,B             SAVE CC AND DP
F01F FC9F6F           (     mon09v37.asm):02009                 LDD     SAVA            RESTORE A, B
F022 BE9F72           (     mon09v37.asm):02010                 LDX     SAVX            RESTORE X
F025 10BE9F74         (     mon09v37.asm):02011                 LDY     SAVY            RESTORE Y
F029 FE9F76           (     mon09v37.asm):02012                 LDU     SAVU            RESTORE U
F02C 3509             (     mon09v37.asm):02013                 PULS    CC,DP           RESTORE CC AND DP
F02E 7E9FCD           (     mon09v37.asm):02014                 JMP     INSRAM          EXECUTE INSTRUCTION
                      (     mon09v37.asm):02015         ;* INSTRUCTION SHOULD RETURN TO HERE
F031 3409             (     mon09v37.asm):02016         NORE3   PSHS    CC,DP           SAVE REGS
F033 FD9F6F           (     mon09v37.asm):02017                 STD     SAVA            SAVE REGS
F036 BF9F72           (     mon09v37.asm):02018                 STX     SAVX            SAVE X
F039 10BF9F74         (     mon09v37.asm):02019                 STY     SAVY            SAVE Y
F03D FF9F76           (     mon09v37.asm):02020                 STU     SAVU            SAVE U
F040 3506             (     mon09v37.asm):02021                 PULS    A,B             GET REGS BACK
F042 B79F6E           (     mon09v37.asm):02022                 STA     SAVCC           SAVE CC
F045 F79F71           (     mon09v37.asm):02023                 STB     SAVDP           SAVE DP
F048 10FF9F7A         (     mon09v37.asm):02024                 STS     SAVS            SAVE STACK POINTER
F04C 10FE9F7C         (     mon09v37.asm):02025                 LDS     TEMP            RESTORE OUR STACK
F050 39               (     mon09v37.asm):02026                 RTS
                      (     mon09v37.asm):02027         ;*
                      (     mon09v37.asm):02028         ;* SUBROUTINE TO EVALUATE CONDITIONAL BRANCH OPCODES, AND DETERMINE
                      (     mon09v37.asm):02029         ;* IF THEY ARE TO BE EXECUTED
                      (     mon09v37.asm):02030         ;*
F051 C603             (     mon09v37.asm):02031         TSTCON  LDB     #3              TEST FOR THREE CONDITIONALS
F053 812F             (     mon09v37.asm):02032                 CMPA    #$2F            IS IT 'BLE'?
F055 2602             (     mon09v37.asm):02033                 BNE     TSTC0           NO, ITS NORMAL
F057 C606             (     mon09v37.asm):02034                 LDB     #6              HANDLE WRETCHED 'BLE' CASE
F059 8022             (     mon09v37.asm):02035         TSTC0   SUBA    #$22            CONVERT OPCODE TO SIMPLE INDEX
F05B 48               (     mon09v37.asm):02036                 LSLA                    ROTATE..
F05C 48               (     mon09v37.asm):02037                 LSLA                    TWICE FOR FOUR BYTE ENTRIES
F05D 8EF92A           (     mon09v37.asm):02038                 LDX     #CONTAB         POINT TO TABLE
F060 3086             (     mon09v37.asm):02039                 LEAX    A,X             ADVANCE TO TABLE ENTRY
F062 B69F6E           (     mon09v37.asm):02040                 LDA     SAVCC           GET CONDITION CODES
F065 A480             (     mon09v37.asm):02041                 ANDA    ,X+             MASK OUT NON-APPLICABLE ONES
F067 A180             (     mon09v37.asm):02042         TSTC1   CMPA    ,X+             DOES IT MATCH?
F069 2706             (     mon09v37.asm):02043                 BEQ     TSTC2           IT'S OK
F06B 5A               (     mon09v37.asm):02044                 DECB                    REDUCE COUNT
F06C 26F9             (     mon09v37.asm):02045                 BNE     TSTC1           CONTINUE
F06E 86FF             (     mon09v37.asm):02046                 LDA     #255            INDICATE CONDITIONAL NOT MET
F070 39               (     mon09v37.asm):02047                 RTS
F071 4F               (     mon09v37.asm):02048         TSTC2   CLRA                    INDICATE CONDITIONAL MET
F072 39               (     mon09v37.asm):02049                 RTS
                      (     mon09v37.asm):02050         ;*
                      (     mon09v37.asm):02051         ;* DISASSEMBLE OPCODE POINTED TO BY Y. PLACE IN OUTPUT BUFFER POINTED TO BY U
                      (     mon09v37.asm):02052         ;*
F073 10BF9F7F         (     mon09v37.asm):02053         DISASS  STY     PTRSAV          SAVE INSTRUCTION POINTER
F077 3440             (     mon09v37.asm):02054                 PSHS    U               SAVE INST POINTER
F079 CC201A           (     mon09v37.asm):02055                 LDD     #$2000+26       GET SPACE+NUMBER OF BYTES TO CLEAR
F07C A7C0             (     mon09v37.asm):02056         DISA1   STA     ,U+             SET A SPACE
F07E 5A               (     mon09v37.asm):02057                 DECB                    REDUCE COUNT
F07F 26FB             (     mon09v37.asm):02058                 BNE     DISA1           CONTINUE
F081 8EF3EC           (     mon09v37.asm):02059                 LDX     #OPTAB1         POINT TO GENERAL OPCODE TABLE
F084 A6A4             (     mon09v37.asm):02060                 LDA     ,Y              GET DATA BYTE
F086 8110             (     mon09v37.asm):02061                 CMPA    #$10            PREFIX BYTE?
F088 2709             (     mon09v37.asm):02062                 BEQ     SETOP2          NEW TABLE
F08A 8111             (     mon09v37.asm):02063                 CMPA    #$11            OTHER PREFIX BYTE
F08C 260A             (     mon09v37.asm):02064                 BNE     OPFIND          NO, IT'S OK
F08E 8EF6FB           (     mon09v37.asm):02065                 LDX     #OPTAB3         POINT TO THIRD TABLE
F091 2003             (     mon09v37.asm):02066                 BRA     OPFNXT          OK
F093 8EF686           (     mon09v37.asm):02067         SETOP2  LDX     #OPTAB2         POINT TO SECOND OPERAND TABLE
F096 3121             (     mon09v37.asm):02068         OPFNXT  LEAY    1,Y             SKIP PREFIX BYTE
                      (     mon09v37.asm):02069         ;* LOOK FOR OPCODE IN TABLE
F098 A680             (     mon09v37.asm):02070         OPFIND  LDA     ,X+             GET BYTE FROM TABLE
F09A A1A4             (     mon09v37.asm):02071                 CMPA    ,Y              IS THIS IT?
F09C 270C             (     mon09v37.asm):02072                 BEQ     FNDOPC          FOUND IT
F09E 81CF             (     mon09v37.asm):02073                 CMPA    #$CF            END OF TABLE?
F0A0 2704             (     mon09v37.asm):02074                 BEQ     BADOPC          IF SO, FAKE AN OPCODE
F0A2 3002             (     mon09v37.asm):02075                 LEAX    2,X             ADVANCE
F0A4 20F2             (     mon09v37.asm):02076                 BRA     OPFIND          KEEP LOOKING
F0A6 10BE9F7F         (     mon09v37.asm):02077         BADOPC  LDY     PTRSAV          INSURE WE ARE AT BEGINNING
                      (     mon09v37.asm):02078         ;* LOCATED OPCODE, GENERATE STRING
F0AA 3121             (     mon09v37.asm):02079         FNDOPC  LEAY    1,Y             SKIP TO POSTBYTE
F0AC A680             (     mon09v37.asm):02080                 LDA     ,X+             GET DATA
F0AE B79F81           (     mon09v37.asm):02081                 STA     INSTYP          SAVE FOR LATER
F0B1 E684             (     mon09v37.asm):02082                 LDB     ,X              GET INSTRUCTION NUMBER
F0B3 8604             (     mon09v37.asm):02083                 LDA     #4              FOUR BYTES/ENTRY
F0B5 3D               (     mon09v37.asm):02084                 MUL                     CALCULATE ENTRY OFFSET
F0B6 8EF716           (     mon09v37.asm):02085                 LDX     #ITABLE         POINT TO INSTRUCTION TABLE
F0B9 308B             (     mon09v37.asm):02086                 LEAX    D,X             ADVANCE TO IT
F0BB C604             (     mon09v37.asm):02087                 LDB     #4              SIZE OF INSTRIUCTION FIELD
F0BD A680             (     mon09v37.asm):02088         FNDO1   LDA     ,X+             GET CHAR
F0BF A7C0             (     mon09v37.asm):02089                 STA     ,U+             SAVE IN OUTPUT
F0C1 5A               (     mon09v37.asm):02090                 DECB                    MOVE FOUR CHARACTERS
F0C2 26F9             (     mon09v37.asm):02091                 BNE     FNDO1           CONTINUE
F0C4 B69F81           (     mon09v37.asm):02092         FNDO2   LDA     INSTYP          GET TYPE BITS BACK
F0C7 840F             (     mon09v37.asm):02093                 ANDA    #$0F            REMOVE CRAP
F0C9 10270173         (     mon09v37.asm):02094                 LBEQ    ENDIS           NO OPERANDS
                      (     mon09v37.asm):02095         ;* INSERT SPACES FOR OPERAND
F0CD C620             (     mon09v37.asm):02096                 LDB     #' '            GET A SPACE
F0CF E7C0             (     mon09v37.asm):02097                 STB     ,U+             SAVE IN OUTPUT
F0D1 E7C0             (     mon09v37.asm):02098                 STB     ,U+             SAVE IN OUTPUT
F0D3 4A               (     mon09v37.asm):02099                 DECA                    IS 8 BIT IT IMMEDIATE?
F0D4 2606             (     mon09v37.asm):02100                 BNE     IMM16           NO, TRY 16 BIT IMMEDIATE
                      (     mon09v37.asm):02101         ;* EIGHT BIT IMMEDIATE ADDRESSING OPERAND
F0D6 8623             (     mon09v37.asm):02102         IMM8    LDA     #'#'            INDICATE IMMEDIATE
F0D8 A7C0             (     mon09v37.asm):02103                 STA     ,U+             SAVE IT
F0DA 2010             (     mon09v37.asm):02104                 BRA     OP8             QUIT
                      (     mon09v37.asm):02105         ;* SIXTEEN BIT IMMEDIATE ADDRESSING
F0DC 4A               (     mon09v37.asm):02106         IMM16   DECA                    IS THIS IT?
F0DD 2606             (     mon09v37.asm):02107                 BNE     DIRECT          NO, TRY DIRECT
F0DF 8623             (     mon09v37.asm):02108                 LDA     #'#'            INDICATE IMMEDIATE
F0E1 A7C0             (     mon09v37.asm):02109                 STA     ,U+             SAVE IT
F0E3 2011             (     mon09v37.asm):02110                 BRA     OP16            16 BIT OPERAND
                      (     mon09v37.asm):02111         ;* DIRECT PAGE ADDRESSING
F0E5 4A               (     mon09v37.asm):02112         DIRECT  DECA                    IS THIS IT?
F0E6 260B             (     mon09v37.asm):02113                 BNE     EXTEND          NO, TRY EXTENDED
F0E8 863C             (     mon09v37.asm):02114                 LDA     #'<'            INDICATE DIRECT
F0EA A7C0             (     mon09v37.asm):02115                 STA     ,U+             SAVE IT
F0EC A6A0             (     mon09v37.asm):02116         OP8     LDA     ,Y+             GET OPERAND BYTE
F0EE 170192           (     mon09v37.asm):02117                 LBSR    WRHEXB          OUTPUT
F0F1 2008             (     mon09v37.asm):02118                 BRA     ENDIS1          END GO HOME
                      (     mon09v37.asm):02119         ;* EXTENDED ADDRESSING
F0F3 4A               (     mon09v37.asm):02120         EXTEND  DECA                    IS THIS IT?
F0F4 2608             (     mon09v37.asm):02121                 BNE     INDEX           NO, TRY INDEXED
F0F6 ECA1             (     mon09v37.asm):02122         OP16    LDD     ,Y++            GET OPCODES
F0F8 170190           (     mon09v37.asm):02123                 LBSR    WRHEXW          OUTPUT WORD
F0FB 160142           (     mon09v37.asm):02124         ENDIS1  LBRA    ENDIS           GO HOME
                      (     mon09v37.asm):02125         ;* INDEXED ADDRESSING MODES
F0FE 4A               (     mon09v37.asm):02126         INDEX   DECA                    IS IT INDEXED?
F0FF 102600CB         (     mon09v37.asm):02127                 LBNE    PSHPUL          NO, TRY PUSH OR PUL
F103 A6A0             (     mon09v37.asm):02128                 LDA     ,Y+             GET POST BYTE
F105 B79F82           (     mon09v37.asm):02129                 STA     POSBYT          SAVE FOR LATER
                      (     mon09v37.asm):02130         ;* TEST FOR FIVE BIT OFFSET
F108 2B04             (     mon09v37.asm):02131                 BMI     NO5BO           NOT A FIVE BIT OFFSET
F10A 841F             (     mon09v37.asm):02132                 ANDA    #$1F            CONVERT TO POSTBYTE
F10C 2014             (     mon09v37.asm):02133                 BRA     EVLX1           INSERT REGISTER AND CONTINUE
                      (     mon09v37.asm):02134         ;* TEST FOR INDIRECT MODE
F10E 8510             (     mon09v37.asm):02135         NO5BO   BITA    #$10            TEST FOR INDIRECT
F110 2704             (     mon09v37.asm):02136                 BEQ     NOIND           NOT INDIRECT
F112 C65B             (     mon09v37.asm):02137                 LDB     #'['            GET OPENING
F114 E7C0             (     mon09v37.asm):02138                 STB     ,U+             SAVE IN OUTPUT
                      (     mon09v37.asm):02139         ;* TEST FOR NO OFFSET
F116 848F             (     mon09v37.asm):02140         NOIND   ANDA    #$8F            REMOVE REGS AND INDIRECT BIT
F118 8184             (     mon09v37.asm):02141                 CMPA    #$84            NO OFFSET?
F11A 272E             (     mon09v37.asm):02142                 BEQ     INSR1           INSERT REGISTER AND EXIT
                      (     mon09v37.asm):02143         ;* TEST FOR EIGHT BIT OFFSET
F11C 8188             (     mon09v37.asm):02144                 CMPA    #$88            EIGHT BIT OFFSET
F11E 2607             (     mon09v37.asm):02145                 BNE     EVL1            NO, TRY NEXT
F120 A6A0             (     mon09v37.asm):02146                 LDA     ,Y+             GET BYTE OFFSET
F122 17015E           (     mon09v37.asm):02147         EVLX1   LBSR    WRHEXB          OUTPUT
F125 2023             (     mon09v37.asm):02148                 BRA     INSR1           CONTINUE
                      (     mon09v37.asm):02149         ;* TEST FOR 16 BIT OFFSET
F127 8189             (     mon09v37.asm):02150         EVL1    CMPA    #$89            16 BIT OFSET?
F129 2607             (     mon09v37.asm):02151                 BNE     EVL2            NO, TRY NEXT
F12B ECA1             (     mon09v37.asm):02152                 LDD     ,Y++            GET OPERAND
F12D 17015B           (     mon09v37.asm):02153                 LBSR    WRHEXW          OUTPUT
F130 2018             (     mon09v37.asm):02154                 BRA     INSR1           INSERT REGISTER
                      (     mon09v37.asm):02155         ;* TEST FOR A ACCUMULATOR OFFSET
F132 8186             (     mon09v37.asm):02156         EVL2    CMPA    #$86            IS IT 'A' OFFSET?
F134 2604             (     mon09v37.asm):02157                 BNE     EVL3            NO, TRY NEXT
F136 8641             (     mon09v37.asm):02158                 LDA     #'A'            GET ACCA
F138 200E             (     mon09v37.asm):02159                 BRA     SAIREG          GO HOME
                      (     mon09v37.asm):02160         ;* TEST FOR B ACCUMULATOR OFFSET
F13A 8185             (     mon09v37.asm):02161         EVL3    CMPA    #$85            IS IT 'B' OFFSET?
F13C 2604             (     mon09v37.asm):02162                 BNE     EVL4            NO, TRY NEXT
F13E 8642             (     mon09v37.asm):02163                 LDA     #'B'            GET B
F140 2006             (     mon09v37.asm):02164                 BRA     SAIREG          GO HOME
                      (     mon09v37.asm):02165         ;* TEST FRO 'D' ACCUMULATOR OFFSET
F142 818B             (     mon09v37.asm):02166         EVL4    CMPA    #$8B            D OFFSET?
F144 2606             (     mon09v37.asm):02167                 BNE     EVL5            NO, TRY NEXT
F146 8644             (     mon09v37.asm):02168                 LDA     #'D'            GET D REGISTER
F148 A7C0             (     mon09v37.asm):02169         SAIREG  STA     ,U+             SAVE IT
F14A 202C             (     mon09v37.asm):02170         INSR1   BRA     INSREG
                      (     mon09v37.asm):02171         ;* TEST FOR EXTENDED INDIRECT
F14C 818F             (     mon09v37.asm):02172         EVL5    CMPA    #$8F            EXTENDED INDIRECT?
F14E 2607             (     mon09v37.asm):02173                 BNE     EVL6            NO, TRY NEXT
F150 ECA1             (     mon09v37.asm):02174                 LDD     ,Y++            GET OFFSET
F152 170136           (     mon09v37.asm):02175                 LBSR    WRHEXW          OUTPUT
F155 2054             (     mon09v37.asm):02176                 BRA     EVLFIN          AND CONTINUE
                      (     mon09v37.asm):02177         ;* TEST FOR PC OFFSET, 8 BIT
F157 818C             (     mon09v37.asm):02178         EVL6    CMPA    #$8C            EIGHT BIT PC OFFSET?
F159 2607             (     mon09v37.asm):02179                 BNE     EVL7            NO, TRY NEXT
F15B A6A0             (     mon09v37.asm):02180                 LDA     ,Y+             GET OFFSET
F15D 170123           (     mon09v37.asm):02181                 LBSR    WRHEXB          OUTPUT
F160 2009             (     mon09v37.asm):02182                 BRA     WRPCRG          OUTPUT PC REGISTER
                      (     mon09v37.asm):02183         ;* TEST FOR PC OFFSET, 16 BIT
F162 818D             (     mon09v37.asm):02184         EVL7    CMPA    #$8D            PC OFFSET?
F164 2612             (     mon09v37.asm):02185                 BNE     INSREG          NO, INSERT REGISTER
F166 ECA1             (     mon09v37.asm):02186                 LDD     ,Y++            GET OFFSET
F168 170120           (     mon09v37.asm):02187                 LBSR    WRHEXW          OUTPUT
F16B 8EF3B7           (     mon09v37.asm):02188         WRPCRG  LDX     #PCRG           POINT TO STRING
F16E A680             (     mon09v37.asm):02189         WRPR1   LDA     ,X+             GET CHAR
F170 A7C0             (     mon09v37.asm):02190                 STA     ,U+             SAVE
F172 8152             (     mon09v37.asm):02191                 CMPA    #'R'            END?
F174 26F8             (     mon09v37.asm):02192                 BNE     WRPR1           NO, CONTINUE
F176 2033             (     mon09v37.asm):02193                 BRA     EVLFIN          END IT NOW
                      (     mon09v37.asm):02194         ;* INSERT REGISTER BITS
F178 862C             (     mon09v37.asm):02195         INSREG  LDA     #','            GET COMMA
F17A A7C0             (     mon09v37.asm):02196                 STA     ,U+             SAVE IT
F17C B69F82           (     mon09v37.asm):02197                 LDA     POSBYT          GET POSTBYTE
F17F C62D             (     mon09v37.asm):02198                 LDB     #'-'            GET MINUS
F181 848F             (     mon09v37.asm):02199                 ANDA    #$8F            REMOVE CRAP
F183 8182             (     mon09v37.asm):02200                 CMPA    #$82            DECREMENT BY ONE?
F185 2706             (     mon09v37.asm):02201                 BEQ     DEC1            DECREMENT BY ONE
F187 8183             (     mon09v37.asm):02202                 CMPA    #$83            DECREMENT BY TWO?
F189 2604             (     mon09v37.asm):02203                 BNE     NODEC           NO, DON'T DEC
F18B E7C0             (     mon09v37.asm):02204                 STB     ,U+             SAVE
F18D E7C0             (     mon09v37.asm):02205         DEC1    STB     ,U+             AGAIN
F18F B69F82           (     mon09v37.asm):02206         NODEC   LDA     POSBYT          GET POSTBYTE
F192 44               (     mon09v37.asm):02207                 LSRA                    SHIFT
F193 44               (     mon09v37.asm):02208                 LSRA                    REGISTER
F194 44               (     mon09v37.asm):02209                 LSRA                    BITS
F195 44               (     mon09v37.asm):02210                 LSRA                    INTO
F196 44               (     mon09v37.asm):02211                 LSRA                    BOTTOM
F197 C658             (     mon09v37.asm):02212                 LDB     #'X'            GET 'X'
F199 8403             (     mon09v37.asm):02213                 ANDA    #$03            REMOVE CRAP
F19B 270C             (     mon09v37.asm):02214                 BEQ     EVLEND          ITS 'X'
F19D C659             (     mon09v37.asm):02215                 LDB     #'Y'            GET 'Y'
F19F 4A               (     mon09v37.asm):02216                 DECA                    TEST FOR 'Y'
F1A0 2707             (     mon09v37.asm):02217                 BEQ     EVLEND          YES
F1A2 C655             (     mon09v37.asm):02218                 LDB     #'U'            GET 'U'
F1A4 4A               (     mon09v37.asm):02219                 DECA                    TEST
F1A5 2702             (     mon09v37.asm):02220                 BEQ     EVLEND          ITS 'U'
F1A7 C653             (     mon09v37.asm):02221                 LDB     #'S'            MUST BE 'S'
F1A9 E7C0             (     mon09v37.asm):02222         EVLEND  STB     ,U+             SAVE IN OUTPUT
F1AB B69F82           (     mon09v37.asm):02223         EVLFIN  LDA     POSBYT          GET POSTBYTE
F1AE C62B             (     mon09v37.asm):02224                 LDB     #'+'            GET PLUS
F1B0 848F             (     mon09v37.asm):02225                 ANDA    #$8F            GET TYPE
F1B2 8180             (     mon09v37.asm):02226                 CMPA    #$80            IS IT INC BY ONE
F1B4 2706             (     mon09v37.asm):02227                 BEQ     INC1            IF SO, WE HAVE IT
F1B6 8181             (     mon09v37.asm):02228                 CMPA    #$81            INC BY TWO?
F1B8 2604             (     mon09v37.asm):02229                 BNE     NOINC           NO INCREMENT
F1BA E7C0             (     mon09v37.asm):02230                 STB     ,U+             SAVE ONE
F1BC E7C0             (     mon09v37.asm):02231         INC1    STB     ,U+             SAVE TWO
F1BE B69F82           (     mon09v37.asm):02232         NOINC   LDA     POSBYT          GET POSTBYTE
F1C1 2A08             (     mon09v37.asm):02233                 BPL     NOIND1          FIVE BIT OFFSET
F1C3 8510             (     mon09v37.asm):02234                 BITA    #$10            INDIRECT?
F1C5 2704             (     mon09v37.asm):02235                 BEQ     NOIND1          NO INDIRECT
F1C7 865D             (     mon09v37.asm):02236                 LDA     #']'            CLOSING BRACE
F1C9 A7C0             (     mon09v37.asm):02237                 STA     ,U+             SAVE IT
F1CB 160072           (     mon09v37.asm):02238         NOIND1  LBRA    ENDIS           END IT
                      (     mon09v37.asm):02239         ;* PULS OR PULL OPCODES
F1CE 4A               (     mon09v37.asm):02240         PSHPUL  DECA                    IS IT PUSH OR PULL?
F1CF 2635             (     mon09v37.asm):02241                 BNE     TFREXG          NO, TRY TRANSFER OR EXCHANGE
F1D1 A6A0             (     mon09v37.asm):02242                 LDA     ,Y+             GET POSTBYTE
F1D3 8EF3DB           (     mon09v37.asm):02243                 LDX     #PSHTAB         GET 'CC'
F1D6 44               (     mon09v37.asm):02244         PSH1    LSRA                    SHIFT OUT BITS
F1D7 2425             (     mon09v37.asm):02245                 BCC     PSHNXT          SKIP THIS ONE
F1D9 3406             (     mon09v37.asm):02246                 PSHS    A,B             SAVE REGS
F1DB EC81             (     mon09v37.asm):02247                 LDD     ,X++            GET DATA
F1DD 8155             (     mon09v37.asm):02248                 CMPA    #'U'            SAVEING U REGISTER
F1DF 2607             (     mon09v37.asm):02249                 BNE     PSH4            NO, IT'S OK
F1E1 7D9F81           (     mon09v37.asm):02250                 TST     INSTYP          SPECIAL CASE
F1E4 2A02             (     mon09v37.asm):02251                 BPL     PSH4            OK
F1E6 8653             (     mon09v37.asm):02252                 LDA     #'S'            CONVERT
F1E8 A7C0             (     mon09v37.asm):02253         PSH4    STA     ,U+             SAVE IT
F1EA 5D               (     mon09v37.asm):02254                 TSTB                    MORE?
F1EB 2702             (     mon09v37.asm):02255                 BEQ     PSH2            NO, SKIP IT
F1ED E7C0             (     mon09v37.asm):02256                 STB     ,U+             SAVE
F1EF 3506             (     mon09v37.asm):02257         PSH2    PULS    A,B             RESTORE REGS
F1F1 4D               (     mon09v37.asm):02258                 TSTA                    MORE BITS?
F1F2 270F             (     mon09v37.asm):02259                 BEQ     PSH3            NO, QUIT
F1F4 3402             (     mon09v37.asm):02260                 PSHS    A               RESAVE
F1F6 862C             (     mon09v37.asm):02261                 LDA     #','            GET COMMA
F1F8 A7C0             (     mon09v37.asm):02262                 STA     ,U+             SAVE
F1FA 3502             (     mon09v37.asm):02263                 PULS    A               GET IT BACK
F1FC 20D8             (     mon09v37.asm):02264                 BRA     PSH1            CONTINUE
F1FE 3002             (     mon09v37.asm):02265         PSHNXT  LEAX    2,X             ADVANCE
F200 4D               (     mon09v37.asm):02266                 TSTA                    ARE WE OK
F201 26D3             (     mon09v37.asm):02267                 BNE     PSH1            KEEP TRYING
F203 16003A           (     mon09v37.asm):02268         PSH3    LBRA    ENDIS           DONE
                      (     mon09v37.asm):02269         ;* TRANSFER AND EXCHANGE POSTBYTE OPCODES
F206 4A               (     mon09v37.asm):02270         TFREXG  DECA                    TRANSFER OR EXCHANGE?
F207 2623             (     mon09v37.asm):02271                 BNE     SBRAN           TRY SHORT BRANCH
F209 A6A4             (     mon09v37.asm):02272                 LDA     ,Y              GET POSTBYTE
F20B 44               (     mon09v37.asm):02273                 LSRA                    SHIFT
F20C 44               (     mon09v37.asm):02274                 LSRA                    INTO
F20D 44               (     mon09v37.asm):02275                 LSRA                    LOW
F20E 44               (     mon09v37.asm):02276                 LSRA                    NIBBLE
F20F 8D0B             (     mon09v37.asm):02277                 BSR     TFRREG          GET REGISTER
F211 862C             (     mon09v37.asm):02278                 LDA     #','            SEPERATOR
F213 A7C0             (     mon09v37.asm):02279                 STA     ,U+             SAVE
F215 A6A0             (     mon09v37.asm):02280                 LDA     ,Y+             GET POSTBYTE AGAIN
F217 8D03             (     mon09v37.asm):02281                 BSR     TFRREG          PLACE IT
F219 160024           (     mon09v37.asm):02282                 LBRA    ENDIS           GO HOME
                      (     mon09v37.asm):02283         ;* CALCULATE TRANSFER REGISTER
F21C 840F             (     mon09v37.asm):02284         TFRREG  ANDA    #$0F            REMOVE HIGH CRAP
F21E 48               (     mon09v37.asm):02285                 LSLA                    MULTIPLY BY TWO
F21F 8EF3BB           (     mon09v37.asm):02286                 LDX     #REGTAB         POINT TO TABLE
F222 EC86             (     mon09v37.asm):02287                 LDD     A,X             GET REGISTER VALUE
F224 A7C0             (     mon09v37.asm):02288                 STA     ,U+             SAVE IT
F226 5D               (     mon09v37.asm):02289                 TSTB                    SECOND BYTE?
F227 2702             (     mon09v37.asm):02290                 BEQ     TFRET           NO, SKIP IT
F229 E7C0             (     mon09v37.asm):02291                 STB     ,U+             SAVE IT
F22B 39               (     mon09v37.asm):02292         TFRET   RTS
                      (     mon09v37.asm):02293         ;* SHORT BRANCH
F22C 4A               (     mon09v37.asm):02294         SBRAN   DECA                    SHORT BRANCH
F22D 2608             (     mon09v37.asm):02295                 BNE     LBRAN           NO, TRY LONG BRANCH
F22F E6A0             (     mon09v37.asm):02296                 LDB     ,Y+             GET OPERATOR
F231 30A5             (     mon09v37.asm):02297                 LEAX    B,Y             GET NEW ADDRESS
F233 1F10             (     mon09v37.asm):02298                 TFR     X,D             COPY
F235 2006             (     mon09v37.asm):02299                 BRA     SAVADR          FINISH
                      (     mon09v37.asm):02300         ;* LONG BRANCH
F237                  (     mon09v37.asm):02301         LBRAN
F237 ECA1             (     mon09v37.asm):02302                 LDD     ,Y++            GET OPERAND
F239 3420             (     mon09v37.asm):02303                 PSHS    Y               SAVE Y
F23B E3E1             (     mon09v37.asm):02304                 ADDD    ,S++            ADD OFFSET TO REG
F23D                  (     mon09v37.asm):02305         SAVADR
F23D 17004B           (     mon09v37.asm):02306                 LBSR    WRHEXW          OUTPUT WORD.
F240                  (     mon09v37.asm):02307         ENDIS
F240 86FF             (     mon09v37.asm):02308                 LDA     #$FF            LINE TERMINATOR
F242 A7C4             (     mon09v37.asm):02309                 STA     ,U              SAVE IT
                      (     mon09v37.asm):02310         ;* INSERT ADDRESS/BYTE DATA
F244 EEE4             (     mon09v37.asm):02311                 LDU     ,S              RESTORE U REGISTER
F246 3420             (     mon09v37.asm):02312                 PSHS    Y               SAVE POINTER TO END
F248 BE9F7F           (     mon09v37.asm):02313                 LDX     PTRSAV          POINT TO STARTING ADDRESS
F24B 1F10             (     mon09v37.asm):02314                 TFR     X,D             COPY
F24D 170045           (     mon09v37.asm):02315                 LBSR    WRHEX           OUTPUT
F250 1F98             (     mon09v37.asm):02316                 TFR     B,A             COPY
F252 170040           (     mon09v37.asm):02317                 LBSR    WRHEX           OUTPUT
F255 5F               (     mon09v37.asm):02318                 CLRB                    START WITH ZERO
F256                  (     mon09v37.asm):02319         END1
F256 ACE4             (     mon09v37.asm):02320                 CMPX    ,S              ARE WE AT END?
F258 240A             (     mon09v37.asm):02321                 BHS     END2            IF SO, QUIT
F25A 5C               (     mon09v37.asm):02322                 INCB                    ADVANCE
F25B 3341             (     mon09v37.asm):02323                 LEAU    1,U             ADVANCE
F25D A680             (     mon09v37.asm):02324                 LDA     ,X+             GET BYTE
F25F 170033           (     mon09v37.asm):02325                 LBSR    WRHEX           OUTPUT
F262 20F2             (     mon09v37.asm):02326                 BRA     END1            CONTINUE
F264                  (     mon09v37.asm):02327         END2
F264 3262             (     mon09v37.asm):02328                 LEAS    2,S             RESTORE STACK
F266 EEE4             (     mon09v37.asm):02329                 LDU     ,S              RESTORE U REGISTER
F268 33C814           (     mon09v37.asm):02330                 LEAU    20,U            ADVANCE TO TEXT FIELD
F26B BE9F7F           (     mon09v37.asm):02331                 LDX     PTRSAV          GET POINTER BACK
F26E                  (     mon09v37.asm):02332         END3
F26E 5A               (     mon09v37.asm):02333                 DECB                    REDUCE COUNT
F26F 2B10             (     mon09v37.asm):02334                 BMI     END4            CONTINUE
F271 A680             (     mon09v37.asm):02335                 LDA     ,X+             GO IT AGAIN
F273 8120             (     mon09v37.asm):02336                 CMPA    #' '            < SPACE?
F275 2504             (     mon09v37.asm):02337                 BLO     END5            YES
F277 817F             (     mon09v37.asm):02338                 CMPA    #$7F            > 7F?
F279 2502             (     mon09v37.asm):02339                 BLO     END6            OK
F27B                  (     mon09v37.asm):02340         END5
F27B 862E             (     mon09v37.asm):02341                 LDA     #'.'            CONVERT TO DOT
F27D                  (     mon09v37.asm):02342         END6
F27D A7C0             (     mon09v37.asm):02343                 STA     ,U+             SAVE
F27F 20ED             (     mon09v37.asm):02344                 BRA     END3
F281                  (     mon09v37.asm):02345         END4
F281 35C0             (     mon09v37.asm):02346                 PULS    U,PC            GO HOME
                      (     mon09v37.asm):02347         
                      (     mon09v37.asm):02348         ;*
                      (     mon09v37.asm):02349         ;* SUBROUTINES
                      (     mon09v37.asm):02350         ;*
F283                  (     mon09v37.asm):02351         WRHEXB
F283 3402             (     mon09v37.asm):02352                 PSHS    A               SAVE IT
F285 8624             (     mon09v37.asm):02353                 LDA     #'$'            INDICATE HEX
F287 A7C0             (     mon09v37.asm):02354                 STA     ,U+             SAVE
F289 2008             (     mon09v37.asm):02355                 BRA     WRHEX1          CONTINUE
F28B                  (     mon09v37.asm):02356         WRHEXW
F28B 3404             (     mon09v37.asm):02357                 PSHS    B               SAVE B
F28D C624             (     mon09v37.asm):02358                 LDB     #'$'            INDICATE HEX
F28F E7C0             (     mon09v37.asm):02359                 STB     ,U+             SAVE IT
F291 8D02             (     mon09v37.asm):02360                 BSR     WRHEX           OUTPUT
F293                  (     mon09v37.asm):02361         WRHEX1
F293 3502             (     mon09v37.asm):02362                 PULS    A               RESTORE
F295                  (     mon09v37.asm):02363         WRHEX
F295 3402             (     mon09v37.asm):02364                 PSHS    A               SAVE IT
F297 44               (     mon09v37.asm):02365                 LSRA                    SHIFT
F298 44               (     mon09v37.asm):02366                 LSRA                    HIGH BYTE
F299 44               (     mon09v37.asm):02367                 LSRA                    INTO
F29A 44               (     mon09v37.asm):02368                 LSRA                    LOW FOR OUTPUT
F29B 8D02             (     mon09v37.asm):02369                 BSR     WRHEXN          OUTPUT NIBBLE
F29D 3502             (     mon09v37.asm):02370                 PULS    A               RETORE
F29F                  (     mon09v37.asm):02371         WRHEXN
F29F 840F             (     mon09v37.asm):02372                 ANDA    #$0F            REMOVE CRAP
F2A1 8B30             (     mon09v37.asm):02373                 ADDA    #$30            CONVERT
F2A3 8139             (     mon09v37.asm):02374                 CMPA    #$39            OK?
F2A5 2302             (     mon09v37.asm):02375                 BLS     WRNOK           OK
F2A7 8B07             (     mon09v37.asm):02376                 ADDA    #7              CONVERT
F2A9                  (     mon09v37.asm):02377         WRNOK
F2A9 A7C0             (     mon09v37.asm):02378                 STA             ,U+             SAVE IT
F2AB 39               (     mon09v37.asm):02379                 RTS
                      (     mon09v37.asm):02380         
                      (     mon09v37.asm):02381         ;MODS BY JQ
                      (     mon09v37.asm):02382         ;*
                      (     mon09v37.asm):02383         ;* 6309 ILLOP/DIV0 HANDLER
                      (     mon09v37.asm):02384         ;*
                      (     mon09v37.asm):02385          IFNE JQ_ILLOP  USE JQ ILLOP ENHANCEMENTS
     0080             (     mon09v37.asm):02386         MD_DIV0         EQU     $80                     MD.7 = DIV0 FLAG
     0040             (     mon09v37.asm):02387         MD_ILOP         EQU     $40                     MD.6 = ILLOP FLAG
                      (     mon09v37.asm):02388         
F2AC                  (     mon09v37.asm):02389         ILOPHND
F2AC 8E9F6E           (     mon09v37.asm):02390                 LDX             #SAVCC                  POINT TO START OF SAVED REGS
F2AF C60C             (     mon09v37.asm):02391                 LDB             #12                             MOVE 12 BYTES
F2B1                  (     mon09v37.asm):02392         ILOPH1
F2B1 A6E0             (     mon09v37.asm):02393                 LDA             ,S+                             GET BYTE
F2B3 A780             (     mon09v37.asm):02394                 STA             ,X+                             SAVE
F2B5 5A               (     mon09v37.asm):02395                 DECB                                    DECREMENT COUNT
F2B6 26F9             (     mon09v37.asm):02396                 BNE             ILOPH1                  DO THEM ALL
F2B8 10FF9F7A         (     mon09v37.asm):02397                 STS             SAVS                    SAVE STACK POINTER
                      (     mon09v37.asm):02398         
                      (     mon09v37.asm):02399         ;       DETERMINE TRAP SOURCE
F2BC 8EF303           (     mon09v37.asm):02400                 LDX             #MSG_DIV0               DIV0 MESSAGE POINTER
F2BF 113C80           (     mon09v37.asm):02401                 BITMD   #MD_DIV0                Trap entry - see if Division by 0 TRAP
F2C2 260B             (     mon09v37.asm):02402                 BNE             ILOPH3                  DIV0 TRAP
                      (     mon09v37.asm):02403         
F2C4                  (     mon09v37.asm):02404         ILOPH2
F2C4 8EF2EE           (     mon09v37.asm):02405                 LDX             #MSG_ILLOP              ILLOP MESSAGE POINTER
F2C7 113C40           (     mon09v37.asm):02406                 BITMD   #MD_ILOP                Trap entry - see if ILLOP TRAP
F2CA 2603             (     mon09v37.asm):02407                 BNE             ILOPH3                  illegal instruction TRAP
F2CC 8EF2D8           (     mon09v37.asm):02408                 LDX             #MSG_TRAPERR    UNKNOWN TRAP SOURCE
                      (     mon09v37.asm):02409         
F2CF                  (     mon09v37.asm):02410         ILOPH3
F2CF BDE461           (     mon09v37.asm):02411                 JSR             MON09_WRLIN             EMIT THE STRING
F2D2 17F585           (     mon09v37.asm):02412                 LBSR    DISREG                  DISPLAY REGISTERS
F2D5 16F2E7           (     mon09v37.asm):02413                 LBRA    MAIN                    AND DO PROMPT
                      (     mon09v37.asm):02414         
F2D8                  (     mon09v37.asm):02415         MSG_TRAPERR
F2D8 2A2A2A20554B4E4F (     mon09v37.asm):02416                 FCC     '*** UKNOWN Trap ***'
     574E205472617020
     2A2A2A
F2EB 0D0A00           (     mon09v37.asm):02417                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02418         
F2EE                  (     mon09v37.asm):02419         MSG_ILLOP
F2EE 2A2A2A20494C4C4F (     mon09v37.asm):02420                 FCC     '*** ILLOP Trap ***'
     502054726170202A
     2A2A
F300 0D0A00           (     mon09v37.asm):02421                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02422         
F303                  (     mon09v37.asm):02423         MSG_DIV0
F303 2A2A2A2044495630 (     mon09v37.asm):02424                 FCC     '*** DIV0 Trap ***'
     2054726170202A2A
     2A
F314 0D0A00           (     mon09v37.asm):02425                 FCB     $0D,$0A,0               NEW LINE
                      (     mon09v37.asm):02426          ENDC           USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):02427         ;
                      (     mon09v37.asm):02428         ;*
                      (     mon09v37.asm):02429         ;* NMI HANDLER
                      (     mon09v37.asm):02430         ;*
F317                  (     mon09v37.asm):02431         NMIHND
F317 8E9F6E           (     mon09v37.asm):02432                 LDX     #SAVCC          POINT TO START OF SAVED REGS
F31A C60C             (     mon09v37.asm):02433                 LDB     #12             MOVE 12 BYTES
F31C                  (     mon09v37.asm):02434         NMIH1
F31C A6E0             (     mon09v37.asm):02435                 LDA     ,S+             GET BYTE
F31E A780             (     mon09v37.asm):02436                 STA     ,X+             SAVE
F320 5A               (     mon09v37.asm):02437                 DECB                    DECREMENT COUNT
F321 26F9             (     mon09v37.asm):02438                 BNE     NMIH1           DO THEM ALL
F323 10FF9F7A         (     mon09v37.asm):02439                 STS     SAVS            SAVE STACK POINTER
F327 17FA45           (     mon09v37.asm):02440                 LBSR    WRMSG           DISPLAY MESSAGE
F32A 2A2A2A204E4D4920 (     mon09v37.asm):02441                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F33F FF               (     mon09v37.asm):02442                 FCB     $FF             NEW LINE
F340 205C             (     mon09v37.asm):02443                 BRA     BRKREG          DISPLAY REGISTERS
                      (     mon09v37.asm):02444         
                      (     mon09v37.asm):02445         ;*
                      (     mon09v37.asm):02446         ;* SWI HANDLER
                      (     mon09v37.asm):02447         ;*
F342                  (     mon09v37.asm):02448         SWIHND
F342 108E9F83         (     mon09v37.asm):02449                 LDY     #BRKTAB         POINT TO BREAKPOINT TABLE
F346 AE6A             (     mon09v37.asm):02450                 LDX     10,S            GET STORED PC
F348 301F             (     mon09v37.asm):02451                 LEAX    -1,X            BACKUP TO BREAKPOINT ADDRESS
F34A C608             (     mon09v37.asm):02452                 LDB     #8              CHECK EIGHT BREAKPOINTS
F34C                  (     mon09v37.asm):02453         SWIHN1
F34C ACA4             (     mon09v37.asm):02454                 CMPX    ,Y              IS THIS IT?
F34E 2710             (     mon09v37.asm):02455                 BEQ     SWIHN2          YES
F350 3123             (     mon09v37.asm):02456                 LEAY    3,Y             SKIP OPCODE
F352 5A               (     mon09v37.asm):02457                 DECB                    REDUCE COUNT
F353 26F7             (     mon09v37.asm):02458                 BNE     SWIHN1          CONTINUE
F355 E662             (     mon09v37.asm):02459                 LDB     2,S                     RESTORE B.
F357 AE64             (     mon09v37.asm):02460                 LDX     4,S                     RESTORE X.
F359 10AE66           (     mon09v37.asm):02461                 LDY     6,S                     RESTORE Y.
F35C 6E9F9F5D         (     mon09v37.asm):02462                 JMP     [SWIADR]        NOT A BREAKPOINT, EXECUTE SWI HANDLER
F360                  (     mon09v37.asm):02463         SWIHN2
F360 F79F81           (     mon09v37.asm):02464                 STB     INSTYP          SAVE BREAKPOINT NUMBER
F363 8E9F6E           (     mon09v37.asm):02465                 LDX     #SAVCC          POINT TO START OF SAVED REGS
F366 C60A             (     mon09v37.asm):02466                 LDB     #10                     MOVE 10
F368                  (     mon09v37.asm):02467         SWIHN25
F368 A6E0             (     mon09v37.asm):02468                 LDA     ,S+                     GET BYTE
F36A A780             (     mon09v37.asm):02469                 STA     ,X+                     SAVE
F36C 5A               (     mon09v37.asm):02470                 DECB                            DECREMENT COUNT
F36D 26F9             (     mon09v37.asm):02471                 BNE     SWIHN25         DO THEM ALL
F36F 3510             (     mon09v37.asm):02472                 PULS    X                       GET PC
F371 301F             (     mon09v37.asm):02473                 LEAX    -1,X            SET BACK TO REAL PC
F373 BF9F78           (     mon09v37.asm):02474                 STX     SAVPC           SAVED PC
F376 10FF9F7A         (     mon09v37.asm):02475                 STS     SAVS            SAVE STACK POINTER
F37A 17F9F2           (     mon09v37.asm):02476                 LBSR    WRMSG           DISPLAY MESSAGE
F37D 2A2A2A2042726561 (     mon09v37.asm):02477                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
F38E 8638             (     mon09v37.asm):02478                 LDA     #$38            GET NUMBER, PLUS ASCII CONVERT
F390 B09F81           (     mon09v37.asm):02479                 SUBA    INSTYP          CONVERT TO PROPER DIGIT
F393 17FA25           (     mon09v37.asm):02480                 LBSR    PUTCHR          DISPLAY
F396 17F9D6           (     mon09v37.asm):02481                 LBSR    WRMSG           OUTPUT MESSAGE
F399 202A2A2A         (     mon09v37.asm):02482                 FCC     ' ***'          TRAILING MESSAGE
F39D FF               (     mon09v37.asm):02483                 FCB     $FF                     NEW LINE
F39E                  (     mon09v37.asm):02484         BRKREG
F39E 17F4B9           (     mon09v37.asm):02485                 LBSR    DISREG          DISPLAY
F3A1                  (     mon09v37.asm):02486         BRKRES
F3A1 8E9F83           (     mon09v37.asm):02487                 LDX     #BRKTAB         POINT TO BREAKPOINT TABLE
F3A4 C608             (     mon09v37.asm):02488                 LDB     #8                      DO IT EIGHT TIMES
F3A6                  (     mon09v37.asm):02489         SWIHN3
F3A6 10AE81           (     mon09v37.asm):02490                 LDY     ,X++            GET REG
F3A9 2704             (     mon09v37.asm):02491                 BEQ     SWIHN4          NO BRK, NEXT
F3AB A684             (     mon09v37.asm):02492                 LDA     ,X              GET OPCODE
F3AD A7A4             (     mon09v37.asm):02493                 STA     ,Y              REPLACE IN RAM
F3AF                  (     mon09v37.asm):02494         SWIHN4
F3AF 3001             (     mon09v37.asm):02495                 LEAX    1,X             SKIP OPCODE
F3B1 5A               (     mon09v37.asm):02496                 DECB                    REDUCE COUNT
F3B2 26F2             (     mon09v37.asm):02497                 BNE     SWIHN3          GO AGAIN
F3B4 16F208           (     mon09v37.asm):02498                 LBRA    MAIN            DO PROMPT
                      (     mon09v37.asm):02499         
                      (     mon09v37.asm):02500         ;*
                      (     mon09v37.asm):02501         ;* CONSTANTS
F3B7                  (     mon09v37.asm):02502         PCRG
F3B7 2C504352         (     mon09v37.asm):02503                 FCC     ',PCR'
                      (     mon09v37.asm):02504         
                      (     mon09v37.asm):02505         ;*
                      (     mon09v37.asm):02506         ;* TRANSFER/EXCHANGE REGISTER TABLE
                      (     mon09v37.asm):02507         ;*
F3BB                  (     mon09v37.asm):02508         REGTAB
F3BB 4400             (     mon09v37.asm):02509                 FCN     'D'             0
F3BD 5800             (     mon09v37.asm):02510                 FCN     'X'             1
F3BF 5900             (     mon09v37.asm):02511                 FCN     'Y'             2
F3C1 5500             (     mon09v37.asm):02512                 FCN     'U'             3
F3C3 5300             (     mon09v37.asm):02513                 FCN     'S'             4
F3C5 5043             (     mon09v37.asm):02514                 FCC     'PC'            5
F3C7 3F00             (     mon09v37.asm):02515                 FCN     '?'             6
F3C9 3F00             (     mon09v37.asm):02516                 FCN     '?'             7
F3CB 4100             (     mon09v37.asm):02517                 FCN     'A'             8
F3CD 4200             (     mon09v37.asm):02518                 FCN     'B'             9
F3CF 4343             (     mon09v37.asm):02519                 FCC     'CC'            A
F3D1 4450             (     mon09v37.asm):02520                 FCC     'DP'            B
F3D3 3F00             (     mon09v37.asm):02521                 FCN     '?'             C
F3D5 3F00             (     mon09v37.asm):02522                 FCN     '?'             D
F3D7 3F00             (     mon09v37.asm):02523                 FCN     '?'             E
F3D9 3F00             (     mon09v37.asm):02524                 FCN     '?'             F
                      (     mon09v37.asm):02525         
                      (     mon09v37.asm):02526         ;*
                      (     mon09v37.asm):02527         ;* PUSH/PULL REGISTER TABLE
                      (     mon09v37.asm):02528         ;*
F3DB                  (     mon09v37.asm):02529         PSHTAB
F3DB 4343             (     mon09v37.asm):02530                 FCC     'CC'
F3DD 4100             (     mon09v37.asm):02531                 FCN     'A'
F3DF 4200             (     mon09v37.asm):02532                 FCN     'B'
F3E1 4450             (     mon09v37.asm):02533                 FCC     'DP'
F3E3 5800             (     mon09v37.asm):02534                 FCN     'X'
F3E5 5900             (     mon09v37.asm):02535                 FCN     'Y'
F3E7 5500             (     mon09v37.asm):02536                 FCN     'U'
F3E9 504300           (     mon09v37.asm):02537                 FCN     'PC'
                      (     mon09v37.asm):02538         
                      (     mon09v37.asm):02539         ;*
                      (     mon09v37.asm):02540         ;* OPCODE TABLE, OPCODE BYTE, TYPE BYTE, TEXT BYTE
                      (     mon09v37.asm):02541         ;*
F3EC                  (     mon09v37.asm):02542         OPTAB1
F3EC 860101           (     mon09v37.asm):02543                 FCB     $86,1,1         'LDA' INSTRUCTIONS
F3EF 960301           (     mon09v37.asm):02544                 FCB     $96,3,1
F3F2 A60501           (     mon09v37.asm):02545                 FCB     $A6,5,1
F3F5 B60401           (     mon09v37.asm):02546                 FCB     $B6,4,1
F3F8 C60102           (     mon09v37.asm):02547                 FCB     $C6,1,2         'LDB' INSTRUCTIONS
F3FB D60302           (     mon09v37.asm):02548                 FCB     $D6,3,2
F3FE E60502           (     mon09v37.asm):02549                 FCB     $E6,5,2
F401 F60402           (     mon09v37.asm):02550                 FCB     $F6,4,2
F404 CC0203           (     mon09v37.asm):02551                 FCB     $CC,2,3         'LDD' INSTRUCTIONS
F407 DC0303           (     mon09v37.asm):02552                 FCB     $DC,3,3
F40A EC0503           (     mon09v37.asm):02553                 FCB     $EC,5,3
F40D FC0403           (     mon09v37.asm):02554                 FCB     $FC,4,3
F410 CE0204           (     mon09v37.asm):02555                 FCB     $CE,2,4         'LDU' INSTRUCTIONS
F413 DE0304           (     mon09v37.asm):02556                 FCB     $DE,3,4
F416 EE0504           (     mon09v37.asm):02557                 FCB     $EE,5,4
F419 FE0404           (     mon09v37.asm):02558                 FCB     $FE,4,4
F41C 8E0205           (     mon09v37.asm):02559                 FCB     $8E,2,5         'LDX' INSTRUCTIONS
F41F 9E0305           (     mon09v37.asm):02560                 FCB     $9E,3,5
F422 AE0505           (     mon09v37.asm):02561                 FCB     $AE,5,5
F425 BE0405           (     mon09v37.asm):02562                 FCB     $BE,4,5
F428 970306           (     mon09v37.asm):02563                 FCB     $97,3,6         'STA' INSTRUCTINOS
F42B A70506           (     mon09v37.asm):02564                 FCB     $A7,5,6
F42E B70406           (     mon09v37.asm):02565                 FCB     $B7,4,6
F431 D70307           (     mon09v37.asm):02566                 FCB     $D7,3,7         'STB' INSTRUCTIONS
F434 E70507           (     mon09v37.asm):02567                 FCB     $E7,5,7
F437 F70407           (     mon09v37.asm):02568                 FCB     $F7,4,7
F43A DD0308           (     mon09v37.asm):02569                 FCB     $DD,3,8         'STD' INSTRUCTIONS
F43D ED0508           (     mon09v37.asm):02570                 FCB     $ED,5,8
F440 FD0408           (     mon09v37.asm):02571                 FCB     $FD,4,8
F443 DF0309           (     mon09v37.asm):02572                 FCB     $DF,3,9         'STU' INSTRUCTIONS
F446 EF0509           (     mon09v37.asm):02573                 FCB     $EF,5,9
F449 FF0409           (     mon09v37.asm):02574                 FCB     $FF,4,9
F44C 9F030A           (     mon09v37.asm):02575                 FCB     $9F,3,10        'STX' INSTRUCTIONS
F44F AF050A           (     mon09v37.asm):02576                 FCB     $AF,5,10
F452 BF040A           (     mon09v37.asm):02577                 FCB     $BF,4,10
F455 3A000B           (     mon09v37.asm):02578                 FCB     $3A,0,11        'ABX'
F458 89010C           (     mon09v37.asm):02579                 FCB     $89,1,12        'ADCA'
F45B 99030C           (     mon09v37.asm):02580                 FCB     $99,3,12
F45E A9050C           (     mon09v37.asm):02581                 FCB     $A9,5,12
F461 B9040C           (     mon09v37.asm):02582                 FCB     $B9,4,12
F464 C9010D           (     mon09v37.asm):02583                 FCB     $C9,1,13        'ADCB'
F467 D9030D           (     mon09v37.asm):02584                 FCB     $D9,3,13
F46A E9050D           (     mon09v37.asm):02585                 FCB     $E9,5,13
F46D F9040D           (     mon09v37.asm):02586                 FCB     $F9,4,13
F470 8B010E           (     mon09v37.asm):02587                 FCB     $8B,1,14        'ADDA'
F473 9B030E           (     mon09v37.asm):02588                 FCB     $9B,3,14
F476 AB050E           (     mon09v37.asm):02589                 FCB     $AB,5,14
F479 BB040E           (     mon09v37.asm):02590                 FCB     $BB,4,14
F47C CB010F           (     mon09v37.asm):02591                 FCB     $CB,1,15        'ADDB'
F47F DB030F           (     mon09v37.asm):02592                 FCB     $DB,3,15
F482 EB050F           (     mon09v37.asm):02593                 FCB     $EB,5,15
F485 FB040F           (     mon09v37.asm):02594                 FCB     $FB,4,15
F488 C30210           (     mon09v37.asm):02595                 FCB     $C3,2,16        'ADDD'
F48B D30310           (     mon09v37.asm):02596                 FCB     $D3,3,16
F48E E30510           (     mon09v37.asm):02597                 FCB     $E3,5,16
F491 F30410           (     mon09v37.asm):02598                 FCB     $F3,4,16
F494 480011           (     mon09v37.asm):02599                 FCB     $48,0,17        'ASLA'
F497 580012           (     mon09v37.asm):02600                 FCB     $58,0,18        'ASLB'
F49A 080313           (     mon09v37.asm):02601                 FCB     $08,3,19        'ASL'
F49D 680513           (     mon09v37.asm):02602                 FCB     $68,5,19
F4A0 780413           (     mon09v37.asm):02603                 FCB     $78,4,19
F4A3 470014           (     mon09v37.asm):02604                 FCB     $47,0,20        'ASRA'
F4A6 570015           (     mon09v37.asm):02605                 FCB     $57,0,21        'ASRB'
F4A9 070316           (     mon09v37.asm):02606                 FCB     $07,3,22        'ASR'
F4AC 670516           (     mon09v37.asm):02607                 FCB     $67,5,22
F4AF 770416           (     mon09v37.asm):02608                 FCB     $77,4,22
F4B2 850117           (     mon09v37.asm):02609                 FCB     $85,1,23        'BITA'
F4B5 950317           (     mon09v37.asm):02610                 FCB     $95,3,23
F4B8 A50517           (     mon09v37.asm):02611                 FCB     $A5,5,23
F4BB B50417           (     mon09v37.asm):02612                 FCB     $B5,4,23
F4BE C50118           (     mon09v37.asm):02613                 FCB     $C5,1,24        'BITB'
F4C1 D50318           (     mon09v37.asm):02614                 FCB     $D5,3,24
F4C4 E50518           (     mon09v37.asm):02615                 FCB     $E5,5,24
F4C7 F50418           (     mon09v37.asm):02616                 FCB     $F5,4,24
F4CA 4F0019           (     mon09v37.asm):02617                 FCB     $4F,0,25        'CLRA'
F4CD 5F001A           (     mon09v37.asm):02618                 FCB     $5F,0,26        'CLRB'
F4D0 0F031B           (     mon09v37.asm):02619                 FCB     $0F,3,27        'CLR'
F4D3 6F051B           (     mon09v37.asm):02620                 FCB     $6F,5,27
F4D6 7F041B           (     mon09v37.asm):02621                 FCB     $7F,4,27
F4D9 81011C           (     mon09v37.asm):02622                 FCB     $81,1,28        'CMPA'
F4DC 91031C           (     mon09v37.asm):02623                 FCB     $91,3,28
F4DF A1051C           (     mon09v37.asm):02624                 FCB     $A1,5,28
F4E2 B1041C           (     mon09v37.asm):02625                 FCB     $B1,4,28
F4E5 C1011D           (     mon09v37.asm):02626                 FCB     $C1,1,29        'CMPB'
F4E8 D1031D           (     mon09v37.asm):02627                 FCB     $D1,3,29
F4EB E1051D           (     mon09v37.asm):02628                 FCB     $E1,5,29
F4EE F1041D           (     mon09v37.asm):02629                 FCB     $F1,4,29
F4F1 8C021E           (     mon09v37.asm):02630                 FCB     $8C,2,30        'CMPX'
F4F4 9C031E           (     mon09v37.asm):02631                 FCB     $9C,3,30
F4F7 AC051E           (     mon09v37.asm):02632                 FCB     $AC,5,30
F4FA BC041E           (     mon09v37.asm):02633                 FCB     $BC,4,30
F4FD 43001F           (     mon09v37.asm):02634                 FCB     $43,0,31        'COMA'
F500 530020           (     mon09v37.asm):02635                 FCB     $53,0,32        'COMB'
F503 030321           (     mon09v37.asm):02636                 FCB     $03,3,33        'COM'
F506 630521           (     mon09v37.asm):02637                 FCB     $63,5,33
F509 730421           (     mon09v37.asm):02638                 FCB     $73,4,33
F50C 3C0122           (     mon09v37.asm):02639                 FCB     $3C,1,34        'CWAI'
F50F 190023           (     mon09v37.asm):02640                 FCB     $19,0,35        'DAA'
F512 4A0024           (     mon09v37.asm):02641                 FCB     $4A,0,36        'DECA'
F515 5A0025           (     mon09v37.asm):02642                 FCB     $5A,0,37        'DECB'
F518 0A0326           (     mon09v37.asm):02643                 FCB     $0A,3,38        'DEC'
F51B 6A0526           (     mon09v37.asm):02644                 FCB     $6A,5,38
F51E 7A0426           (     mon09v37.asm):02645                 FCB     $7A,4,38
F521 880127           (     mon09v37.asm):02646                 FCB     $88,1,39        'EORA'
F524 980327           (     mon09v37.asm):02647                 FCB     $98,3,39
F527 A80527           (     mon09v37.asm):02648                 FCB     $A8,5,39
F52A B80427           (     mon09v37.asm):02649                 FCB     $B8,4,39
F52D C80128           (     mon09v37.asm):02650                 FCB     $C8,1,40        'EORB'
F530 D80328           (     mon09v37.asm):02651                 FCB     $D8,3,40
F533 E80528           (     mon09v37.asm):02652                 FCB     $E8,5,40
F536 F80428           (     mon09v37.asm):02653                 FCB     $F8,4,40
F539 1E0729           (     mon09v37.asm):02654                 FCB     $1E,7,41        'EXG'
F53C 1F072A           (     mon09v37.asm):02655                 FCB     $1F,7,42        'TFR'
F53F 34062B           (     mon09v37.asm):02656                 FCB     $34,6,43        'PSHS'
F542 36862C           (     mon09v37.asm):02657                 FCB     $36,$86,44      'PSHU'
F545 35062D           (     mon09v37.asm):02658                 FCB     $35,6,45        'PULS'
F548 37862E           (     mon09v37.asm):02659                 FCB     $37,$86,46      'PULU'
F54B 4C002F           (     mon09v37.asm):02660                 FCB     $4C,0,47        'INCA'
F54E 5C0030           (     mon09v37.asm):02661                 FCB     $5C,0,48        'INCB'
F551 0C0331           (     mon09v37.asm):02662                 FCB     $0C,3,49        'INC'
F554 6C0531           (     mon09v37.asm):02663                 FCB     $6C,5,49
F557 7C0431           (     mon09v37.asm):02664                 FCB     $7C,4,49
F55A 0E0332           (     mon09v37.asm):02665                 FCB     $0E,3,50        'JMP'
F55D 6E0532           (     mon09v37.asm):02666                 FCB     $6E,5,50
F560 7E0432           (     mon09v37.asm):02667                 FCB     $7E,4,50
F563 9D0333           (     mon09v37.asm):02668                 FCB     $9D,3,51        'JSR'
F566 AD0533           (     mon09v37.asm):02669                 FCB     $AD,5,51
F569 BD0433           (     mon09v37.asm):02670                 FCB     $BD,4,51
F56C 320534           (     mon09v37.asm):02671                 FCB     $32,5,52        'LEAS'
F56F 330535           (     mon09v37.asm):02672                 FCB     $33,5,53        'LEAU'
F572 300536           (     mon09v37.asm):02673                 FCB     $30,5,54        'LEAX'
F575 310537           (     mon09v37.asm):02674                 FCB     $31,5,55        'LEAY'
F578 440038           (     mon09v37.asm):02675                 FCB     $44,0,56        'LSRA'
F57B 540039           (     mon09v37.asm):02676                 FCB     $54,0,57        'LSRB'
F57E 04033A           (     mon09v37.asm):02677                 FCB     $04,3,58        'LSR'
F581 64053A           (     mon09v37.asm):02678                 FCB     $64,5,58
F584 74043A           (     mon09v37.asm):02679                 FCB     $74,4,58
F587 3D003B           (     mon09v37.asm):02680                 FCB     $3D,0,59        'MUL'
F58A 40003C           (     mon09v37.asm):02681                 FCB     $40,0,60        'NEGA'
F58D 50003D           (     mon09v37.asm):02682                 FCB     $50,0,61        'NEGB'
F590 00033E           (     mon09v37.asm):02683                 FCB     $00,3,62        'NEG'
F593 60053E           (     mon09v37.asm):02684                 FCB     $60,5,62
F596 70043E           (     mon09v37.asm):02685                 FCB     $70,4,62
F599 12003F           (     mon09v37.asm):02686                 FCB     $12,0,63        'NOP'
F59C 8A0140           (     mon09v37.asm):02687                 FCB     $8A,1,64        'ORA'
F59F 9A0340           (     mon09v37.asm):02688                 FCB     $9A,3,64
F5A2 AA0540           (     mon09v37.asm):02689                 FCB     $AA,5,64
F5A5 BA0440           (     mon09v37.asm):02690                 FCB     $BA,4,64
F5A8 CA0141           (     mon09v37.asm):02691                 FCB     $CA,1,65        'ORB'
F5AB DA0341           (     mon09v37.asm):02692                 FCB     $DA,3,65
F5AE EA0541           (     mon09v37.asm):02693                 FCB     $EA,5,65
F5B1 FA0441           (     mon09v37.asm):02694                 FCB     $FA,4,65
F5B4 1A0142           (     mon09v37.asm):02695                 FCB     $1A,1,66        'ORCC'
F5B7 840143           (     mon09v37.asm):02696                 FCB     $84,1,67        'ANDA'
F5BA 940343           (     mon09v37.asm):02697                 FCB     $94,3,67
F5BD A40543           (     mon09v37.asm):02698                 FCB     $A4,5,67
F5C0 B40443           (     mon09v37.asm):02699                 FCB     $B4,4,67
F5C3 C40144           (     mon09v37.asm):02700                 FCB     $C4,1,68        'ANDB'
F5C6 D40344           (     mon09v37.asm):02701                 FCB     $D4,3,68
F5C9 E40544           (     mon09v37.asm):02702                 FCB     $E4,5,68
F5CC F40444           (     mon09v37.asm):02703                 FCB     $F4,4,68
F5CF 1C0145           (     mon09v37.asm):02704                 FCB     $1C,1,69        'ANDCC'
F5D2 490046           (     mon09v37.asm):02705                 FCB     $49,0,70        'ROLA'
F5D5 590047           (     mon09v37.asm):02706                 FCB     $59,0,71        'ROLB'
F5D8 090348           (     mon09v37.asm):02707                 FCB     $09,3,72        'ROL'
F5DB 690548           (     mon09v37.asm):02708                 FCB     $69,5,72
F5DE 790448           (     mon09v37.asm):02709                 FCB     $79,4,72
F5E1 460049           (     mon09v37.asm):02710                 FCB     $46,0,73        'RORA'
F5E4 56004A           (     mon09v37.asm):02711                 FCB     $56,0,74        'RORB'
F5E7 06034B           (     mon09v37.asm):02712                 FCB     $06,3,75        'ROR'
F5EA 66054B           (     mon09v37.asm):02713                 FCB     $66,5,75
F5ED 76044B           (     mon09v37.asm):02714                 FCB     $76,4,75
F5F0 3B004C           (     mon09v37.asm):02715                 FCB     $3B,0,76        'RTI'
F5F3 39004D           (     mon09v37.asm):02716                 FCB     $39,0,77        'RTS'
F5F6 82014E           (     mon09v37.asm):02717                 FCB     $82,1,78        'SBCA'
F5F9 92034E           (     mon09v37.asm):02718                 FCB     $92,3,78
F5FC A2054E           (     mon09v37.asm):02719                 FCB     $A2,5,78
F5FF B2044E           (     mon09v37.asm):02720                 FCB     $B2,4,78
F602 C2014F           (     mon09v37.asm):02721                 FCB     $C2,1,79        'SBCB'
F605 D2034F           (     mon09v37.asm):02722                 FCB     $D2,3,79
F608 E2054F           (     mon09v37.asm):02723                 FCB     $E2,5,79
F60B F2044F           (     mon09v37.asm):02724                 FCB     $F2,4,79
F60E 1D0050           (     mon09v37.asm):02725                 FCB     $1D,0,80
F611 800151           (     mon09v37.asm):02726                 FCB     $80,1,81        'SUBA'
F614 900351           (     mon09v37.asm):02727                 FCB     $90,3,81
F617 A00551           (     mon09v37.asm):02728                 FCB     $A0,5,81
F61A B00451           (     mon09v37.asm):02729                 FCB     $B0,4,81
F61D C00152           (     mon09v37.asm):02730                 FCB     $C0,1,82        'SUBB'
F620 D00352           (     mon09v37.asm):02731                 FCB     $D0,3,82
F623 E00552           (     mon09v37.asm):02732                 FCB     $E0,5,82
F626 F00452           (     mon09v37.asm):02733                 FCB     $F0,4,82
F629 830253           (     mon09v37.asm):02734                 FCB     $83,2,83        'SUBD'
F62C 930353           (     mon09v37.asm):02735                 FCB     $93,3,83
F62F A30553           (     mon09v37.asm):02736                 FCB     $A3,5,83
F632 B30453           (     mon09v37.asm):02737                 FCB     $B3,4,83
F635 3F0054           (     mon09v37.asm):02738                 FCB     $3F,0,84        'SWI'
F638 130055           (     mon09v37.asm):02739                 FCB     $13,0,85        'SYNC'
F63B 4D0056           (     mon09v37.asm):02740                 FCB     $4D,0,86        'TSTA'
F63E 5D0057           (     mon09v37.asm):02741                 FCB     $5D,0,87        'TSTB'
F641 0D0358           (     mon09v37.asm):02742                 FCB     $0D,3,88        'TST'
F644 6D0558           (     mon09v37.asm):02743                 FCB     $6D,5,88
F647 7D0458           (     mon09v37.asm):02744                 FCB     $7D,4,88
F64A 160963           (     mon09v37.asm):02745                 FCB     $16,9,99        'LBRA'
F64D 170964           (     mon09v37.asm):02746                 FCB     $17,9,100       'LBSR'
F650 200865           (     mon09v37.asm):02747                 FCB     $20,8,101       'BRA'
F653 210866           (     mon09v37.asm):02748                 FCB     $21,8,102       'BRN'
F656 220867           (     mon09v37.asm):02749                 FCB     $22,8,103       'BHI'
F659 230868           (     mon09v37.asm):02750                 FCB     $23,8,104       'BLS'
F65C 240869           (     mon09v37.asm):02751                 FCB     $24,8,105       'BCC'
F65F 25086A           (     mon09v37.asm):02752                 FCB     $25,8,106       'BCS'
F662 26086B           (     mon09v37.asm):02753                 FCB     $26,8,107       'BNE'
F665 27086C           (     mon09v37.asm):02754                 FCB     $27,8,108       'BEQ'
F668 28086D           (     mon09v37.asm):02755                 FCB     $28,8,109       'BVC'
F66B 29086E           (     mon09v37.asm):02756                 FCB     $29,8,110       'BVS'
F66E 2A086F           (     mon09v37.asm):02757                 FCB     $2A,8,111       'BPL'
F671 2B0870           (     mon09v37.asm):02758                 FCB     $2B,8,112       'BMI'
F674 2C0871           (     mon09v37.asm):02759                 FCB     $2C,8,113       'BGE'
F677 2D0872           (     mon09v37.asm):02760                 FCB     $2D,8,114       'BLT'
F67A 2E0873           (     mon09v37.asm):02761                 FCB     $2E,8,115       'BGT'
F67D 2F0874           (     mon09v37.asm):02762                 FCB     $2F,8,116       'BLE'
F680 8D0884           (     mon09v37.asm):02763                 FCB     $8D,8,132       'BSR'
F683 CF0000           (     mon09v37.asm):02764                 FCB     $CF,0,0         'FCB', UNKNOWN OPCODE
                      (     mon09v37.asm):02765         
                      (     mon09v37.asm):02766         ;*
                      (     mon09v37.asm):02767         ;* OPERAND TABLE NUMBER TWO, $10 PREFIX INSTRUCTIONS
                      (     mon09v37.asm):02768         ;*
F686                  (     mon09v37.asm):02769         OPTAB2
F686 830259           (     mon09v37.asm):02770                 FCB     $83,2,89        'CMPD'
F689 8C025A           (     mon09v37.asm):02771                 FCB     $8C,2,90        'CMPY'
F68C 8E025C           (     mon09v37.asm):02772                 FCB     $8E,2,92        'LDY'
F68F 930359           (     mon09v37.asm):02773                 FCB     $93,3,89
F692 9C035A           (     mon09v37.asm):02774                 FCB     $9C,3,90
F695 9E035C           (     mon09v37.asm):02775                 FCB     $9E,3,92
F698 9F035E           (     mon09v37.asm):02776                 FCB     $9F,3,94        'STY'
F69B A30559           (     mon09v37.asm):02777                 FCB     $A3,5,89
F69E AC055A           (     mon09v37.asm):02778                 FCB     $AC,5,90
F6A1 AE055C           (     mon09v37.asm):02779                 FCB     $AE,5,92
F6A4 AF055E           (     mon09v37.asm):02780                 FCB     $AF,5,94
F6A7 B30459           (     mon09v37.asm):02781                 FCB     $B3,4,89
F6AA BC045A           (     mon09v37.asm):02782                 FCB     $BC,4,90
F6AD BE045C           (     mon09v37.asm):02783                 FCB     $BE,4,92
F6B0 BF045E           (     mon09v37.asm):02784                 FCB     $BF,4,94
F6B3 CE025B           (     mon09v37.asm):02785                 FCB     $CE,2,91        'LDS'
F6B6 DE035B           (     mon09v37.asm):02786                 FCB     $DE,3,91
F6B9 DF035D           (     mon09v37.asm):02787                 FCB     $DF,3,93        'STS'
F6BC EE055B           (     mon09v37.asm):02788                 FCB     $EE,5,91
F6BF EF055D           (     mon09v37.asm):02789                 FCB     $EF,5,93
F6C2 FE045B           (     mon09v37.asm):02790                 FCB     $FE,4,91
F6C5 FF045D           (     mon09v37.asm):02791                 FCB     $FF,4,93
F6C8 3F005F           (     mon09v37.asm):02792                 FCB     $3F,0,95        'SWI2'
F6CB 210975           (     mon09v37.asm):02793                 FCB     $21,9,117       'LBRN'
F6CE 220976           (     mon09v37.asm):02794                 FCB     $22,9,118       'LBHI'
F6D1 230977           (     mon09v37.asm):02795                 FCB     $23,9,119       'LBLS'
F6D4 240978           (     mon09v37.asm):02796                 FCB     $24,9,120       'LBCC'
F6D7 250979           (     mon09v37.asm):02797                 FCB     $25,9,121       'LBCS'
F6DA 26097A           (     mon09v37.asm):02798                 FCB     $26,9,122       'LBNE'
F6DD 27097B           (     mon09v37.asm):02799                 FCB     $27,9,123       'LBEQ'
F6E0 28097C           (     mon09v37.asm):02800                 FCB     $28,9,124       'LBVC'
F6E3 29097D           (     mon09v37.asm):02801                 FCB     $29,9,125       'LBVS'
F6E6 2A097E           (     mon09v37.asm):02802                 FCB     $2A,9,126       'LBPL'
F6E9 2B097F           (     mon09v37.asm):02803                 FCB     $2B,9,127       'LBMI'
F6EC 2C0980           (     mon09v37.asm):02804                 FCB     $2C,9,128       'LBGE'
F6EF 2D0981           (     mon09v37.asm):02805                 FCB     $2D,9,129       'LBLT'
F6F2 2E0982           (     mon09v37.asm):02806                 FCB     $2E,9,130       'LBGT'
F6F5 2F0983           (     mon09v37.asm):02807                 FCB     $2F,9,131       'LBLE'
F6F8 CF0100           (     mon09v37.asm):02808                 FCB     $CF,1,0
                      (     mon09v37.asm):02809         
                      (     mon09v37.asm):02810         ;*
                      (     mon09v37.asm):02811         ;* OPERAND TABLE #3, $11 PREFIXES
                      (     mon09v37.asm):02812         ;*
F6FB                  (     mon09v37.asm):02813         OPTAB3
F6FB 8C0260           (     mon09v37.asm):02814                 FCB     $8C,2,96        'CMPS'
F6FE 9C0360           (     mon09v37.asm):02815                 FCB     $9C,3,96
F701 AC0560           (     mon09v37.asm):02816                 FCB     $AC,5,96
F704 BC0460           (     mon09v37.asm):02817                 FCB     $BC,4,96
F707 830261           (     mon09v37.asm):02818                 FCB     $83,2,97        'CMPU'
F70A 930361           (     mon09v37.asm):02819                 FCB     $93,3,97
F70D A30561           (     mon09v37.asm):02820                 FCB     $A3,5,97
F710 B30461           (     mon09v37.asm):02821                 FCB     $B3,4,97
F713 3F0062           (     mon09v37.asm):02822                 FCB     $3F,0,98        'SWI3'
                      (     mon09v37.asm):02823         
                      (     mon09v37.asm):02824         ;*
                      (     mon09v37.asm):02825         ;* INSTRUCTION TEXT TABLE
                      (     mon09v37.asm):02826         ;*
F716                  (     mon09v37.asm):02827         ITABLE
F716 46434220         (     mon09v37.asm):02828                 FCC     'FCB '          0
F71A 4C444120         (     mon09v37.asm):02829                 FCC     'LDA '          1
F71E 4C444220         (     mon09v37.asm):02830                 FCC     'LDB '          2
F722 4C444420         (     mon09v37.asm):02831                 FCC     'LDD '          3
F726 4C445520         (     mon09v37.asm):02832                 FCC     'LDU '          4
F72A 4C445820         (     mon09v37.asm):02833                 FCC     'LDX '          5
F72E 53544120         (     mon09v37.asm):02834                 FCC     'STA '          6
F732 53544220         (     mon09v37.asm):02835                 FCC     'STB '          7
F736 53544420         (     mon09v37.asm):02836                 FCC     'STD '          8
F73A 53545520         (     mon09v37.asm):02837                 FCC     'STU '          9
F73E 53545820         (     mon09v37.asm):02838                 FCC     'STX '          10
F742 41425820         (     mon09v37.asm):02839                 FCC     'ABX '          11
F746 41444341         (     mon09v37.asm):02840                 FCC     'ADCA'          12
F74A 41444342         (     mon09v37.asm):02841                 FCC     'ADCB'          13
F74E 41444441         (     mon09v37.asm):02842                 FCC     'ADDA'          14
F752 41444442         (     mon09v37.asm):02843                 FCC     'ADDB'          15
F756 41444444         (     mon09v37.asm):02844                 FCC     'ADDD'          16
F75A 41534C41         (     mon09v37.asm):02845                 FCC     'ASLA'          17
F75E 41534C42         (     mon09v37.asm):02846                 FCC     'ASLB'          18
F762 41534C20         (     mon09v37.asm):02847                 FCC     'ASL '          19
F766 41535241         (     mon09v37.asm):02848                 FCC     'ASRA'          20
F76A 41535242         (     mon09v37.asm):02849                 FCC     'ASRB'          21
F76E 41535220         (     mon09v37.asm):02850                 FCC     'ASR '          22
F772 42495441         (     mon09v37.asm):02851                 FCC     'BITA'          23
F776 42495442         (     mon09v37.asm):02852                 FCC     'BITB'          24
F77A 434C5241         (     mon09v37.asm):02853                 FCC     'CLRA'          25
F77E 434C5242         (     mon09v37.asm):02854                 FCC     'CLRB'          26
F782 434C5220         (     mon09v37.asm):02855                 FCC     'CLR '          27
F786 434D5041         (     mon09v37.asm):02856                 FCC     'CMPA'          28
F78A 434D5042         (     mon09v37.asm):02857                 FCC     'CMPB'          29
F78E 434D5058         (     mon09v37.asm):02858                 FCC     'CMPX'          30
F792 434F4D41         (     mon09v37.asm):02859                 FCC     'COMA'          31
F796 434F4D42         (     mon09v37.asm):02860                 FCC     'COMB'          32
F79A 434F4D20         (     mon09v37.asm):02861                 FCC     'COM '          33
F79E 43574149         (     mon09v37.asm):02862                 FCC     'CWAI'          34
F7A2 44414120         (     mon09v37.asm):02863                 FCC     'DAA '          35
F7A6 44454341         (     mon09v37.asm):02864                 FCC     'DECA'          36
F7AA 44454342         (     mon09v37.asm):02865                 FCC     'DECB'          37
F7AE 44454320         (     mon09v37.asm):02866                 FCC     'DEC '          38
F7B2 454F5241         (     mon09v37.asm):02867                 FCC     'EORA'          39
F7B6 454F5242         (     mon09v37.asm):02868                 FCC     'EORB'          40
F7BA 45584720         (     mon09v37.asm):02869                 FCC     'EXG '          41
F7BE 54465220         (     mon09v37.asm):02870                 FCC     'TFR '          42
F7C2 50534853         (     mon09v37.asm):02871                 FCC     'PSHS'          43
F7C6 50534855         (     mon09v37.asm):02872                 FCC     'PSHU'          44
F7CA 50554C53         (     mon09v37.asm):02873                 FCC     'PULS'          45
F7CE 50554C55         (     mon09v37.asm):02874                 FCC     'PULU'          46
F7D2 494E4341         (     mon09v37.asm):02875                 FCC     'INCA'          47
F7D6 494E4342         (     mon09v37.asm):02876                 FCC     'INCB'          48
F7DA 494E4320         (     mon09v37.asm):02877                 FCC     'INC '          49
F7DE 4A4D5020         (     mon09v37.asm):02878                 FCC     'JMP '          50
F7E2 4A535220         (     mon09v37.asm):02879                 FCC     'JSR '          51
F7E6 4C454153         (     mon09v37.asm):02880                 FCC     'LEAS'          52
F7EA 4C454155         (     mon09v37.asm):02881                 FCC     'LEAU'          53
F7EE 4C454158         (     mon09v37.asm):02882                 FCC     'LEAX'          54
F7F2 4C454159         (     mon09v37.asm):02883                 FCC     'LEAY'          55
F7F6 4C535241         (     mon09v37.asm):02884                 FCC     'LSRA'          56
F7FA 4C535242         (     mon09v37.asm):02885                 FCC     'LSRB'          57
F7FE 4C535220         (     mon09v37.asm):02886                 FCC     'LSR '          58
F802 4D554C20         (     mon09v37.asm):02887                 FCC     'MUL '          59
F806 4E454741         (     mon09v37.asm):02888                 FCC     'NEGA'          60
F80A 4E454742         (     mon09v37.asm):02889                 FCC     'NEGB'          61
F80E 4E454720         (     mon09v37.asm):02890                 FCC     'NEG '          62
F812 4E4F5020         (     mon09v37.asm):02891                 FCC     'NOP '          63
F816 4F524120         (     mon09v37.asm):02892                 FCC     'ORA '          64
F81A 4F524220         (     mon09v37.asm):02893                 FCC     'ORB '          65
F81E 4F524343         (     mon09v37.asm):02894                 FCC     'ORCC'          66
F822 414E4441         (     mon09v37.asm):02895                 FCC     'ANDA'          67
F826 414E4442         (     mon09v37.asm):02896                 FCC     'ANDB'          68
F82A 414E4443         (     mon09v37.asm):02897                 FCC     'ANDC'          69
F82E 524F4C41         (     mon09v37.asm):02898                 FCC     'ROLA'          70
F832 524F4C42         (     mon09v37.asm):02899                 FCC     'ROLB'          71
F836 524F4C20         (     mon09v37.asm):02900                 FCC     'ROL '          72
F83A 524F5241         (     mon09v37.asm):02901                 FCC     'RORA'          73
F83E 524F5242         (     mon09v37.asm):02902                 FCC     'RORB'          74
F842 524F5220         (     mon09v37.asm):02903                 FCC     'ROR '          75
F846 52544920         (     mon09v37.asm):02904                 FCC     'RTI '          76
F84A 52545320         (     mon09v37.asm):02905                 FCC     'RTS '          77
F84E 53424341         (     mon09v37.asm):02906                 FCC     'SBCA'          78
F852 53424342         (     mon09v37.asm):02907                 FCC     'SBCB'          79
F856 53455820         (     mon09v37.asm):02908                 FCC     'SEX '          80
F85A 53554241         (     mon09v37.asm):02909                 FCC     'SUBA'          81
F85E 53554242         (     mon09v37.asm):02910                 FCC     'SUBB'          82
F862 53554244         (     mon09v37.asm):02911                 FCC     'SUBD'          83
F866 53574920         (     mon09v37.asm):02912                 FCC     'SWI '          84
F86A 53594E43         (     mon09v37.asm):02913                 FCC     'SYNC'          85
F86E 54535441         (     mon09v37.asm):02914                 FCC     'TSTA'          86
F872 54535442         (     mon09v37.asm):02915                 FCC     'TSTB'          87
F876 54535420         (     mon09v37.asm):02916                 FCC     'TST '          88
F87A 434D5044         (     mon09v37.asm):02917                 FCC     'CMPD'          89
F87E 434D5059         (     mon09v37.asm):02918                 FCC     'CMPY'          90
F882 4C445320         (     mon09v37.asm):02919                 FCC     'LDS '          91
F886 4C445920         (     mon09v37.asm):02920                 FCC     'LDY '          92
F88A 53545320         (     mon09v37.asm):02921                 FCC     'STS '          93
F88E 53545920         (     mon09v37.asm):02922                 FCC     'STY '          94
F892 53574932         (     mon09v37.asm):02923                 FCC     'SWI2'          95
F896 434D5053         (     mon09v37.asm):02924                 FCC     'CMPS'          96
F89A 434D5055         (     mon09v37.asm):02925                 FCC     'CMPU'          97
F89E 53574933         (     mon09v37.asm):02926                 FCC     'SWI3'          98
F8A2 4C425241         (     mon09v37.asm):02927                 FCC     'LBRA'          99
F8A6 4C425352         (     mon09v37.asm):02928                 FCC     'LBSR'          100
F8AA 42524120         (     mon09v37.asm):02929                 FCC     'BRA '          101
F8AE 42524E20         (     mon09v37.asm):02930                 FCC     'BRN '          102
F8B2 42484920         (     mon09v37.asm):02931                 FCC     'BHI '          103
F8B6 424C5320         (     mon09v37.asm):02932                 FCC     'BLS '          104
F8BA 42434320         (     mon09v37.asm):02933                 FCC     'BCC '          105
F8BE 42435320         (     mon09v37.asm):02934                 FCC     'BCS '          106
F8C2 424E4520         (     mon09v37.asm):02935                 FCC     'BNE '          107
F8C6 42455120         (     mon09v37.asm):02936                 FCC     'BEQ '          108
F8CA 42564320         (     mon09v37.asm):02937                 FCC     'BVC '          109
F8CE 42565320         (     mon09v37.asm):02938                 FCC     'BVS '          110
F8D2 42504C20         (     mon09v37.asm):02939                 FCC     'BPL '          111
F8D6 424D4920         (     mon09v37.asm):02940                 FCC     'BMI '          112
F8DA 42474520         (     mon09v37.asm):02941                 FCC     'BGE '          113
F8DE 424C5420         (     mon09v37.asm):02942                 FCC     'BLT '          114
F8E2 42475420         (     mon09v37.asm):02943                 FCC     'BGT '          115
F8E6 424C4520         (     mon09v37.asm):02944                 FCC     'BLE '          116
F8EA 4C42524E         (     mon09v37.asm):02945                 FCC     'LBRN'          117
F8EE 4C424849         (     mon09v37.asm):02946                 FCC     'LBHI'          118
F8F2 4C424C53         (     mon09v37.asm):02947                 FCC     'LBLS'          119
F8F6 4C424343         (     mon09v37.asm):02948                 FCC     'LBCC'          120
F8FA 4C424353         (     mon09v37.asm):02949                 FCC     'LBCS'          121
F8FE 4C424E45         (     mon09v37.asm):02950                 FCC     'LBNE'          122
F902 4C424551         (     mon09v37.asm):02951                 FCC     'LBEQ'          123
F906 4C425643         (     mon09v37.asm):02952                 FCC     'LBVC'          124
F90A 4C425653         (     mon09v37.asm):02953                 FCC     'LBVS'          125
F90E 4C42504C         (     mon09v37.asm):02954                 FCC     'LBPL'          126
F912 4C424D49         (     mon09v37.asm):02955                 FCC     'LBMI'          127
F916 4C424745         (     mon09v37.asm):02956                 FCC     'LBGE'          128
F91A 4C424C54         (     mon09v37.asm):02957                 FCC     'LBLT'          129
F91E 4C424754         (     mon09v37.asm):02958                 FCC     'LBGT'          130
F922 4C424C45         (     mon09v37.asm):02959                 FCC     'LBLE'          131
F926 42535220         (     mon09v37.asm):02960                 FCC     'BSR '          132
                      (     mon09v37.asm):02961         
                      (     mon09v37.asm):02962         ;*
                      (     mon09v37.asm):02963         ;* CONDITIONAL TABLE, FIRST BYTE IS MASK, NEXT THREE BYTES ARE POSSIBLE
                      (     mon09v37.asm):02964         ;* BIT SETTINGS
                      (     mon09v37.asm):02965         ;*
F92A                  (     mon09v37.asm):02966         CONTAB
F92A 05000000         (     mon09v37.asm):02967                 FCB     $05,$00,$00,$00 'BHI', NO C OR Z
F92E 05010405         (     mon09v37.asm):02968                 FCB     $05,$01,$04,$05 'BLS', EITHER C OR Z
F932 01000000         (     mon09v37.asm):02969                 FCB     $01,$00,$00,$00 'BCC', NO C
F936 01010101         (     mon09v37.asm):02970                 FCB     $01,$01,$01,$01 'BCS', C SET
F93A 04000000         (     mon09v37.asm):02971                 FCB     $04,$00,$00,$00 'BNE', NO Z
F93E 04040404         (     mon09v37.asm):02972                 FCB     $04,$04,$04,$04 'BEQ', Z SET
F942 02000000         (     mon09v37.asm):02973                 FCB     $02,$00,$00,$00 'BVC', V CLEAR
F946 02020202         (     mon09v37.asm):02974                 FCB     $02,$02,$02,$02 'BVS', V SET
F94A 08000000         (     mon09v37.asm):02975                 FCB     $08,$00,$00,$00 'BPL', N CLEAR
F94E 08080808         (     mon09v37.asm):02976                 FCB     $08,$08,$08,$08 'BMI', N SET
F952 0A000A0A         (     mon09v37.asm):02977                 FCB     $0A,$00,$0A,$0A 'BGE', N=V
F956 0A080202         (     mon09v37.asm):02978                 FCB     $0A,$08,$02,$02 'BLT', N -= V
F95A 0E0A0000         (     mon09v37.asm):02979                 FCB     $0E,$0A,$00,$00 'BGT', N=V, Z=0
F95E 0E080204         (     mon09v37.asm):02980                 FCB     $0E,$08,$02,$04 'BLE', V-=N OR Z=1
F962 0C060E           (     mon09v37.asm):02981                 FCB     $0C,$06,$0E
                      (     mon09v37.asm):02982         
                      (     mon09v37.asm):02983         ;* TRANSFER AND EXCHANGE REGISTER TABLE
F965 9F6F             (     mon09v37.asm):02984         TFREGT  FDB     SAVA
F967 9F72             (     mon09v37.asm):02985         INDTAB  FDB     SAVX
F969 9F74             (     mon09v37.asm):02986                 FDB     SAVY
F96B 9F76             (     mon09v37.asm):02987                 FDB     SAVU
F96D 9F7A             (     mon09v37.asm):02988                 FDB     SAVS
F96F 9F78             (     mon09v37.asm):02989                 FDB     SAVPC
                      (     mon09v37.asm):02990         
                      (     mon09v37.asm):02991         ;* PULL TABLE FOR PULS
F971 9F6E             (     mon09v37.asm):02992         PULSTAB FDB     SAVCC
F973 9F6F             (     mon09v37.asm):02993                 FDB     SAVA
F975 9F70             (     mon09v37.asm):02994                 FDB     SAVB
F977 9F71             (     mon09v37.asm):02995                 FDB     SAVDP
F979 9F72             (     mon09v37.asm):02996                 FDB     SAVX
F97B 9F74             (     mon09v37.asm):02997                 FDB     SAVY
F97D 9F76             (     mon09v37.asm):02998                 FDB     SAVU
F97F 9F78             (     mon09v37.asm):02999                 FDB     SAVPC
                      (     mon09v37.asm):03000         
                      (     mon09v37.asm):03001         ;* PULL TABLE FOR PULU
F981 9F6E             (     mon09v37.asm):03002         PULUTAB FDB     SAVCC
F983 9F6F             (     mon09v37.asm):03003                 FDB     SAVA
F985 9F70             (     mon09v37.asm):03004                 FDB     SAVB
F987 9F71             (     mon09v37.asm):03005                 FDB     SAVDP
F989 9F72             (     mon09v37.asm):03006                 FDB     SAVX
F98B 9F74             (     mon09v37.asm):03007                 FDB     SAVY
F98D 9F7A             (     mon09v37.asm):03008                 FDB     SAVS
F98F 9F78             (     mon09v37.asm):03009                 FDB     SAVPC
                      (     mon09v37.asm):03010         
                      (     mon09v37.asm):03011         ;* VECTOR HANDLERS
F991 6E9F9F61         (     mon09v37.asm):03012         SWI3    JMP     [SWI3ADR]
F995 6E9F9F5F         (     mon09v37.asm):03013         SWI2    JMP     [SWI2ADR]
F999 6E9F9F63         (     mon09v37.asm):03014         IRQ     JMP     [IRQADR]
F99D 6E9F9F65         (     mon09v37.asm):03015         FIRQ    JMP     [FIRQADR]
                      (     mon09v37.asm):03016         ;MODS BY JQ
                      (     mon09v37.asm):03017          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
F9A1                  (     mon09v37.asm):03018         NMI     JMP     [NMIADR]
                      (     mon09v37.asm):03019          ENDC
                      (     mon09v37.asm):03020          IFNE JQ_ILLOP          USE JQ ILLOP ENHANCEMENTS
F9A1 6E9F9F67         (     mon09v37.asm):03021         ILOP    JMP     [ILOPADR]
                      (     mon09v37.asm):03022          ENDC
                      (     mon09v37.asm):03023         ;
                      (     mon09v37.asm):03024         ;* HELP TEXT
F9A5 00               (     mon09v37.asm):03025         HTEXT   FCB     0               NEW LINE TO START
F9A6 4220302D37203C61 (     mon09v37.asm):03026                 FCN             'B 0-7 <addr>|Set breakpoint (0000=remove)'
     6464723E7C536574
     20627265616B706F
     696E742028303030
     303D72656D6F7665
     2900
F9D0 4352203C7265673E (     mon09v37.asm):03027                 FCN             'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F9F0 4355203C75617274 (     mon09v37.asm):03028                 FCN             'CU <uart> <addr>|Change UART address'
     3E203C616464723E
     7C4368616E676520
     5541525420616464
     7265737300
                      (     mon09v37.asm):03029         
                      (     mon09v37.asm):03030          IFNE JQ_ILLOP  JQ ILLOP ENHANCEMENTS
FA15 4356203C7665633E (     mon09v37.asm):03031                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-7)'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7220
     287665633D312D37
     2900
                      (     mon09v37.asm):03032          ELSE
                      (     mon09v37.asm):03033                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-6)'
                      (     mon09v37.asm):03034          ENDC                   JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03035         
FA47 44427C446973706C (     mon09v37.asm):03036                 FCN             'DB|Display breakpoints'
     617920627265616B
     706F696E747300
FA5E 4444203C61646472 (     mon09v37.asm):03037                 FCN             'DD <addr>,<addr>|Display dissasembled memory'
     3E2C3C616464723E
     7C446973706C6179
     2064697373617365
     6D626C6564206D65
     6D6F727900
FA8B 444D203C61646472 (     mon09v37.asm):03038                 FCN             'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
FABE 44527C446973706C (     mon09v37.asm):03039                 FCN             'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
FADD 44557C446973706C (     mon09v37.asm):03040                 FCN             'DU|Display UART addresses'
     6179205541525420
     6164647265737365
     7300
FAF7 44567C446973706C (     mon09v37.asm):03041                 FCN             'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
FB14 45203C616464723E (     mon09v37.asm):03042                 FCN             'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
FB29 464D203C61646472 (     mon09v37.asm):03043                 FCN             'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
FB4D 47205B3C61646472 (     mon09v37.asm):03044                 FCN             'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
                      (     mon09v37.asm):03045         ;MODS BY JQ
                      (     mon09v37.asm):03046          IFNE JQ_JMPMOD         JQ JUMP ENHANCEMENTS
                      (     mon09v37.asm):03047         ;       FCN             'J <B><T><F>|Jump to <B>ASIC, <T>inyBASIC or <F>ORTH'
                      (     mon09v37.asm):03048         ;       FCN             'J <B><F>|Jump to <B>ASIC or <F>ORTH'
FB6D 4A203C423E7C4A75 (     mon09v37.asm):03049                 FCN             'J <B>|Jump to Extended <B>asic'
     6D7020746F204578
     74656E646564203C
     423E6173696300
                      (     mon09v37.asm):03050          ENDC                           JQ JUMP ENHANCEMENTS
                      (     mon09v37.asm):03051         ;
FB8C 4C7C4C6F61642069 (     mon09v37.asm):03052                 FCN             'L|Load iHEX or S19 image from UART2'
     484558206F722053
     313920696D616765
     2066726F6D205541
     52543200
FBB0 4D4D203C61646472 (     mon09v37.asm):03053                 FCN             'MM <addr>,<addr> <addr>|Move memory (Source,End Destination)'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F72792028536F75
     7263652C456E6420
     44657374696E6174
     696F6E2900
FBED 4D54203C61646472 (     mon09v37.asm):03054                 FCN             'MT <addr>,<addr>|Memory test'
     3E2C3C616464723E
     7C4D656D6F727920
     7465737400
FC0A 5252203C61646472 (     mon09v37.asm):03055                 FCN             'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
FC2A 5257203C61646472 (     mon09v37.asm):03056                 FCN             'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
FC52 53205B3C61646472 (     mon09v37.asm):03057                 FCN             'S [<addr>]|Single step execution'
     3E5D7C53696E676C
     6520737465702065
     7865637574696F6E
     00
                      (     mon09v37.asm):03058         ;       FCN             'T|Terminal passthrough to UART2'
FC73 57203C616464723E (     mon09v37.asm):03059                 FCN             'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
FC93 5852203C61646472 (     mon09v37.asm):03060                 FCN             'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
FCB3 5857203C61646472 (     mon09v37.asm):03061                 FCN             'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
FCDB 2B203C76616C7565 (     mon09v37.asm):03062                 FCN             '+ <value>+<value>|Hexadecimal addition'
     3E2B3C76616C7565
     3E7C486578616465
     63696D616C206164
     646974696F6E00
FD02 2D203C76616C7565 (     mon09v37.asm):03063                 FCN             '- <value>-<value>|Hexadecimal subtraction'
     3E2D3C76616C7565
     3E7C486578616465
     63696D616C207375
     627472616374696F
     6E00
FD2C FF               (     mon09v37.asm):03064                 FCB     -1              END OF TABLE
                      (     mon09v37.asm):03065         ;*
                      (     mon09v37.asm):03066         ;
                      (     mon09v37.asm):03067         ;===============================================================================
                      (     mon09v37.asm):03068         ;*
                      (     mon09v37.asm):03069         ;* MACHINE DEPENDANT I/O ROUTINES FOR 68(3)B50 UARTS
                      (     mon09v37.asm):03070         ;*      X REGISTER HOLDS PORT ADDRESS.
                      (     mon09v37.asm):03071         ;===============================================================================
                      (     mon09v37.asm):03072         ;* INITIALIZE UART(X)
FD2D                  (     mon09v37.asm):03073         INIT
FD2D 8603             (     mon09v37.asm):03074                 LDA     #CTRL1          MASTER RESET
FD2F A784             (     mon09v37.asm):03075                 STA     ,X              WRITE COMMAND REG
FD31 8615             (     mon09v37.asm):03076                 LDA     #CTRL2          ENABLE 115200, 8NO1
FD33 A784             (     mon09v37.asm):03077                 STA     ,X              WRITE COMMAND REG
FD35 39               (     mon09v37.asm):03078                 RTS
                      (     mon09v37.asm):03079         ;
                      (     mon09v37.asm):03080         ;===============================================================================
                      (     mon09v37.asm):03081         ;* READ UART(X)
FD36                  (     mon09v37.asm):03082         READ
FD36 A684             (     mon09v37.asm):03083                 LDA     ,X              GET STATUS
FD38 8501             (     mon09v37.asm):03084                 BITA    #RDRF           RECEIVER READY?
FD3A 2705             (     mon09v37.asm):03085                 BEQ     NOCHR           NO CHARACTER
FD3C A601             (     mon09v37.asm):03086                 LDA     1,X             READ CHARACTER
FD3E 1A04             (     mon09v37.asm):03087                 ORCC    #%00000100      SET 'Z'
FD40 39               (     mon09v37.asm):03088                 RTS
FD41                  (     mon09v37.asm):03089         NOCHR
FD41 86FF             (     mon09v37.asm):03090                 LDA     #$FF            NO CHAR
FD43 39               (     mon09v37.asm):03091                 RTS
                      (     mon09v37.asm):03092         ;
                      (     mon09v37.asm):03093         ;===============================================================================
                      (     mon09v37.asm):03094         ;* WRITE UART(X)
FD44                  (     mon09v37.asm):03095         WRITE
FD44 E684             (     mon09v37.asm):03096                 LDB     ,X              GET STATUS
FD46 C502             (     mon09v37.asm):03097                 BITB    #TDRE           XMITTER READY?
FD48 27FA             (     mon09v37.asm):03098                 BEQ     WRITE           NO, TRY AGAIN
FD4A A701             (     mon09v37.asm):03099                 STA     1,X             OUTPUT
FD4C 39               (     mon09v37.asm):03100                 RTS
                      (     mon09v37.asm):03101         ;
                      (     mon09v37.asm):03102         ;===============================================================================
                      (     mon09v37.asm):03103         ; LOOKUP TABLE CONTAINING MON09 RAM INTERRUPT RE-VECTORING ADDRESSES
                      (     mon09v37.asm):03104         ;===============================================================================
FD4D 6E9F9F5D         (     mon09v37.asm):03105         MON09_SWIADR    JMP     [SWIADR]        ;SWI Interrupt vector
FD51 6E9F9F5F         (     mon09v37.asm):03106         MON09_SWI2ADR   JMP     [SWI2ADR]       ;SWI2 Interrupt vector
FD55 6E9F9F61         (     mon09v37.asm):03107         MON09_SWI3ADR   JMP     [SWI3ADR]       ;SWI3 Interrupt vector
FD59 6E9F9F65         (     mon09v37.asm):03108         MON09_FIRQADR   JMP     [FIRQADR]       ;FIRQ Interrupt vector
FD5D 6E9F9F63         (     mon09v37.asm):03109         MON09_IRQADR    JMP     [IRQADR]        ;IRQ Interrupt vector
                      (     mon09v37.asm):03110         
                      (     mon09v37.asm):03111           IFNE JQ_NMIRAM        ;JQ NMI ENHANCEMENTS
FD61                  (     mon09v37.asm):03112         MON09_NMIADR    JMP     [NMIADR]        ;NMI Interrupt vector
                      (     mon09v37.asm):03113           ENDC                          ;               JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):03114           IFNE JQ_ILLOP         ;USE JQ ILLOP ENHANCEMENTS
FD61 6E9F9F67         (     mon09v37.asm):03115         MON09_ILOPADR   JMP     [ILOPADR]       ;ILLOP Interrupt vector
                      (     mon09v37.asm):03116           ENDC                          ;USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03117         ;
                      (     mon09v37.asm):03118          IFLT LOC       ;IF NOT IN RAM
FD65 FFFFFFFFFFFFFFFF (     mon09v37.asm):03119                 FILL $FF,VECTTBL-*
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFF
                      (     mon09v37.asm):03120         ;*
                      (     mon09v37.asm):03121         ;* MACHINE VECTORS
                      (     mon09v37.asm):03122         ;*
                      (     mon09v37.asm):03123         ;MODS BY JQ
                      (     mon09v37.asm):03124           IFNE JQ_ILLOP         USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03125                 ORG     VECTTBL
FFF0 F9A1             (     mon09v37.asm):03126                 FDB     ILOP            HD6309 ONLY
                      (     mon09v37.asm):03127           ELSE
                      (     mon09v37.asm):03128                 ORG     VECTTBL
                      (     mon09v37.asm):03129           ENDC                          USE JQ ILLOP ENHANCEMENTS
                      (     mon09v37.asm):03130         ;
FFF2 F991             (     mon09v37.asm):03131                 FDB     SWI3
FFF4 F995             (     mon09v37.asm):03132                 FDB     SWI2
FFF6 F99D             (     mon09v37.asm):03133                 FDB     FIRQ
FFF8 F999             (     mon09v37.asm):03134                 FDB     IRQ
FFFA F342             (     mon09v37.asm):03135                 FDB     SWIHND
                      (     mon09v37.asm):03136         ;MODS BY JQ
                      (     mon09v37.asm):03137           IFNE JQ_NMIRAM        USE JQ NMI ENHANCEMENTS
                      (     mon09v37.asm):03138                 FDB     NMI                     USE LOCAL NMI HANDLER
                      (     mon09v37.asm):03139           ELSE
FFFC F317             (     mon09v37.asm):03140                 FDB     NMIHND          USE MON09 NMI HANDLER
                      (     mon09v37.asm):03141           ENDC
                      (     mon09v37.asm):03142         ;
FFFE E47F             (     mon09v37.asm):03143                 FDB     RESET
                      (     mon09v37.asm):03144          ENDC           ;IF NOT IN RAM
