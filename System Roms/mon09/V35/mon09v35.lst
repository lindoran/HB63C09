                      (     mon09v35.asm):00001         ;******************************************************************************
                      (     mon09v35.asm):00002         ;*
                      (     mon09v35.asm):00003         ;* MON09: A software debug monitor for the 6809
                      (     mon09v35.asm):00004         ;*
                      (     mon09v35.asm):00005         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (     mon09v35.asm):00006         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and 48K of RAM
                      (     mon09v35.asm):00007         ;* from $2000-$DFFF. The 8K block from $0000-$1FFF is used for I/O devices
                      (     mon09v35.asm):00008         ;* etc. MON09 uses 160 bytes of memory at the very top of available RAM,
                      (     mon09v35.asm):00009         ;* and the user stack pointer is initialized to point to the beginning of
                      (     mon09v35.asm):00010         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (     mon09v35.asm):00011         ;*
                      (     mon09v35.asm):00012         ;* Console and Host I/O device drivers are included for both 6551 and 6552
                      (     mon09v35.asm):00013         ;* type uarts, which are selected by the set symbol 'utype', and conditionally
                      (     mon09v35.asm):00014         ;* assembled into the code. THIS FILE MUST BE PROCESSED WITH 'MACRO' PRIOR
                      (     mon09v35.asm):00015         ;* TO ASSEMBLING WITH ASM09!!! You can modify the I/O drivers to support a
                      (     mon09v35.asm):00016         ;* different uart device if you wish. The serial I/O drivers are at the very
                      (     mon09v35.asm):00017         ;* end of the monitor source code (Just before the interrupt vectors).
                      (     mon09v35.asm):00018         ;*
                      (     mon09v35.asm):00019         ;* Copyright 1985-2007 Dave Dunfield
                      (     mon09v35.asm):00020         ;* All rights reserved.
                      (     mon09v35.asm):00021         ;*
                      (     mon09v35.asm):00022         ;* Additional modifications for the 6809SBC by Johnny Quest.
                      (     mon09v35.asm):00023         ;*
                      (     mon09v35.asm):00024         ;******************************************************************************
                      (     mon09v35.asm):00025         ; VERSION 3.5
                      (     mon09v35.asm):00026         ; 2021-0824:    JQ      ON ILLOP/DIV INTERRUPT, INFORMS WHICH ONE CAUSED IT.
                      (     mon09v35.asm):00027         ;                               JQ      IF 6309 IS DETECTED, THE MODE REGISTER IS SET TO 'NATIVE'.
                      (     mon09v35.asm):00028         ; 2021-0823:    JQ      ADDED SUPPORT FOR DETECTING IF THE HOST MCU IS AN MC6809
                      (     mon09v35.asm):00029         ;                                        OR AN HD6309 AND EMITS THE PROPER SIGN-ON MESSAGE.
                      (     mon09v35.asm):00030         ;                               JQ      ADDED A BUILD DATE AND TIME TO THE SIGN-ON MESSAGE. THE
                      (     mon09v35.asm):00031         ;                                        LINUX "build.sh" SCRIPT CREATES A SEPARATE ASSEMBLY FILE
                      (     mon09v35.asm):00032         ;                                        THAT IS "INCLUDED" IN THE MAIN ASSEMBLY FILE.
                      (     mon09v35.asm):00033         ;                               JQ      BE AWARE THAT THE DISASSEMBLER DOES NOT YET SUPPORT THE
                      (     mon09v35.asm):00034         ;                                        6309 EXTENDED INSTRUCTIONS.
                      (     mon09v35.asm):00035         ; 2021-0419:    JQ      ADDED SUPPORT FOR MERGING THE BINARY IMAGES OF THE
                      (     mon09v35.asm):00036         ;                                        LANGUAGE SUPPORT MODULES DIRECTLY INTO THE MON09
                      (     mon09v35.asm):00037         ;                                        IMAGE FILE. USE CONDITIONAL ASSEMBLY TO ENABLE/DISABLE.
                      (     mon09v35.asm):00038         ;                                        CONSTRUCTED MASTER BUILD SCRIPT TO ASSEMBLE THE VARIOUS
                      (     mon09v35.asm):00039         ;                                        LANGUAGE MODULES INTO A MASTER FIRMWARE IMAGE FILE. THUS,
                      (     mon09v35.asm):00040         ;                                        INCLUDING THEM INTO THE MON09 IMAGE AS DATA STATEMENTS
                      (     mon09v35.asm):00041         ;                                        IS UNNESSESARY.
                      (     mon09v35.asm):00042         ; 2021-0412:    JQ      CHANGED THE MANNER IN WHICH NMI IS HANDLED SO THAT THE
                      (     mon09v35.asm):00043         ;                                        VECTOR CAN BE SET IN MEMORY JUST AS THE FIRQ, IRQ, SWI2
                      (     mon09v35.asm):00044         ;                                        AND SWI3 HANDLERS DO. IF AN NMI VECTOR IS NOT SPECIFIED,
                      (     mon09v35.asm):00045         ;                                        MON09 DEFAULTS TO THE INTERNAL NMI HANDLER, WHICH IS SHOWN
                      (     mon09v35.asm):00046         ;                                        BY THE 'DV' COMMAND. ADDED ADDITIONAL BYTES TO THE DATA
                      (     mon09v35.asm):00047         ;                                        TABLES AND AN NMI HANDLER. USE CONDITIONAL STATEMENT TO
                      (     mon09v35.asm):00048         ;                                        ENABLE IT.
                      (     mon09v35.asm):00049         ;                               JQ      ADDED HD6309 ILLOP INSTRUCTION HANDLER. IF NO VECTOR
                      (     mon09v35.asm):00050         ;                                        SPECIFIED, DEFAULTS TO THE MON09 ILLOP HANDLER. USE
                      (     mon09v35.asm):00051         ;                                        CONDITIONAL STATEMENT TO ENABLE IT.
                      (     mon09v35.asm):00052         ;                               JQ      ADDED 'JUMP' COMMAND TO ACCESS THE FP BASIC, TINY BASIC
                      (     mon09v35.asm):00053         ;                                        AND FORTH MODULES IN ROM. USE CONDITIONAL STATEMENT TO
                      (     mon09v35.asm):00054         ;                                        ENABLE IT.
                      (     mon09v35.asm):00055         ;                               JQ      ADDED JUMP TABLE OF 'HOOKS' THAT PROVIDES A SUMMARY OF
                      (     mon09v35.asm):00056         ;                                        USER ACCESSIBLE MON09 ROM ENTRY ADDRESSES AND IRQ RE-
                      (     mon09v35.asm):00057         ;                                        VECTORING ADDRESSES IN DATA RAM. IT IS INTENDED TO BE
                      (     mon09v35.asm):00058         ;                                        EASILY IDENTIFIED AND EXTRACTED FROM THE SYMBOL TABLE
                      (     mon09v35.asm):00059         ;                                        TO BE 'INCLUDED' IN THE USER'S PROGRAM FILE. SINCE THE
                      (     mon09v35.asm):00060         ;                                        TABLE IS LOCATED AT
                      (     mon09v35.asm):00061         ;                               JQ      IN 'FILMEM' ROUTINE, ADDED CODE TO LIMIT THE USER
                      (     mon09v35.asm):00062         ;                                        SPECIFIED ENDING ADDRESS SO AS NOT TO OVERWRITE MON09
                      (     mon09v35.asm):00063         ;                                        DATA IN RAM. THIS EFFECTIVELY LIMITS THE 'FM' COMMAND
                      (     mon09v35.asm):00064         ;                                        TO RAM ONLY ON THE 6809SBC.
                      (     mon09v35.asm):00065         ;
                      (     mon09v35.asm):00066         ;******************************************************************************
                      (     mon09v35.asm):00067         ; VERSION 3.4
                      (     mon09v35.asm):00068         ; 2021-0404:    JQ      MODIFIED FOR USE WITH 6809SBC PROJECT USING 6850 ACIA.
                      (     mon09v35.asm):00069         ;                                        ASSEMBLES WITH LWASM V4.18, WHICH SUPPORTS MACROS AND
                      (     mon09v35.asm):00070         ;                                        CONDITIONAL ASSEMBLY STATEMENTS.
                      (     mon09v35.asm):00071         ;
                      (     mon09v35.asm):00072         ;******************************************************************************
                      (     mon09v35.asm):00073         ;MODS BY JQ
     0023             (     mon09v35.asm):00074         VERSION         EQU     35              VERSION TIMES 10
     0001             (     mon09v35.asm):00075         JQ_DETMCU       EQU     1               SET TO '1' TO ENABLE DETECTION OF MCU TYPE
     0001             (     mon09v35.asm):00076         JQ_NMIRAM       EQU     1               SET TO '1' TO ENABLE NMI HANDLER IN RAM
     0001             (     mon09v35.asm):00077         JQ_ILLOP        EQU     1               SET TO '1' TO ENABLE 6309 ILLOP HANDLER
     0000             (     mon09v35.asm):00078         JQ_LDFIX        EQU     0               SET TO '1' TO ENABLE PROPER EOF HANDLING DURING LOAD
     0001             (     mon09v35.asm):00079         JQ_JMPMOD       EQU     1               SET TO '1' TO ENABLE JUMP TO MODULES
     0000             (     mon09v35.asm):00080         JQ_EEPROM       EQU     0               SET TO '1' TO ENABLE EEPROM WRITING
     0000             (     mon09v35.asm):00081         JQ_EMBEDBIN     EQU     0               SET TO '1' TO EMBED MODULE BINARY IMAGES
     0000             (     mon09v35.asm):00082         JQ_EFORTH       EQU     0               SET TO '1' TO USE EFORTH, ELSE Z79FORTH
                      (     mon09v35.asm):00083         ;
     8C00             (     mon09v35.asm):00084         TNYBASSTRT      EQU     $8C00                           START ADDRESS OF TINY BASIC IN ROM
     9C00             (     mon09v35.asm):00085         TNYBASEND       EQU     TNYBASSTRT+$1000        END ADDRESS OF TINY BASIC IN ROM
                      (     mon09v35.asm):00086         
     9C00             (     mon09v35.asm):00087         FTHIMGSTRT      EQU     $9C00                           START ADDRESS OF FORTH IMAGE IN ROM
     BC00             (     mon09v35.asm):00088         FTHIMGEND       EQU     FTHIMGSTRT+$2000        END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v35.asm):00089          IFNE JQ_EFORTH                 IF USING EFORTH
0000                  (     mon09v35.asm):00090         FORTHCOLD       EQU     $0100                           DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v35.asm):00091          ELSE
     9C00             (     mon09v35.asm):00092         FORTHCOLD       EQU     FTHIMGSTRT                      DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v35.asm):00093          ENDC                                   IF USING EFORTH
                      (     mon09v35.asm):00094         
     BE00             (     mon09v35.asm):00095         FPBASSTRT       EQU     $BE00                           START ADDRESS OF FP BASIC IN ROM
     E400             (     mon09v35.asm):00096         FPBASEND        EQU     FPBASSTRT+$2600         END ADDRESS OF FP BASIC IN ROM
                      (     mon09v35.asm):00097         ;
                      (     mon09v35.asm):00098         ;== HARDWARE CONSTANTS =================================================
     E400             (     mon09v35.asm):00099         CODE            EQU     $E400   MON09 code goes here
     0000             (     mon09v35.asm):00100         RAMSTRT         EQU     $0000   START OF RAM
     8000             (     mon09v35.asm):00101         RAMEND          EQU     $8000   END OF RAM
                      (     mon09v35.asm):00102         
     8800             (     mon09v35.asm):00103         ROMSTRT         EQU     $8800   START OF ROM
     0000             (     mon09v35.asm):00104         ROMEND          EQU     $10000  END OF ROM
                      (     mon09v35.asm):00105         
                      (     mon09v35.asm):00106          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
     FFF0             (     mon09v35.asm):00107         VECTTBL         EQU     $FFF0
                      (     mon09v35.asm):00108          ELSE
0000                  (     mon09v35.asm):00109         VECTTBL         EQU     $FFF2
                      (     mon09v35.asm):00110          ENDC                                   JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):00111         
     9C00             (     mon09v35.asm):00112         LOC             EQU     RAMEND-CODE     OFFSET -> RAM OR ROM CODE LOCATION
                      (     mon09v35.asm):00113         
     7FFF             (     mon09v35.asm):00114         STACK   EQU     RAMEND-1        MON09 Stack (Top of RAM)
                      (     mon09v35.asm):00115         
                      (     mon09v35.asm):00116         ;MODS BY JQ
     7F60             (     mon09v35.asm):00117         RAM             SET     RAMEND-160      MON09 data goes here
                      (     mon09v35.asm):00118          IFNE JQ_NMIRAM NO JQ NMI ENHANCEMENTS
     7F5E             (     mon09v35.asm):00119         RAM             SET     RAM-2   MON09 NMI VECTOR STORAGE
                      (     mon09v35.asm):00120          ENDC                   NO JQ NMI ENHANCEMENTS
                      (     mon09v35.asm):00121          IFNE JQ_ILLOP  JQ ILLOP ENHANCEMENTS
     7F5C             (     mon09v35.asm):00122         RAM             SET     RAM-2   MON09 ILLOP VECTOR STORAGE
                      (     mon09v35.asm):00123          ENDC                   NO JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):00124          IFNE JQ_EEPROM JQ EEPROM WRITE ENHANCEMENTS
0000                  (     mon09v35.asm):00125         RAM             SET     RAM-2   MON09 E2P PAGE-BYTE COUNTER STORAGE
                      (     mon09v35.asm):00126          ENDC                   JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v35.asm):00127         ;
                      (     mon09v35.asm):00128         ;== 6850 ACIA CONSTANTS ===============================================
     8000             (     mon09v35.asm):00129         SER1    EQU     $8000           Serial Port 1 (Console)
     8000             (     mon09v35.asm):00130         SER2    EQU     $8000           Serial Port 2 (Aux)
                      (     mon09v35.asm):00131         
     0001             (     mon09v35.asm):00132         RDRF    EQU     1                       BIT MASK POSITION FOR RDRF FLAG
     0002             (     mon09v35.asm):00133         TDRE    EQU     2                       BIT MASK POSITION FOR TDRE FLAG
                      (     mon09v35.asm):00134         
     0003             (     mon09v35.asm):00135         CTRL1   EQU     $03                     MASTER RESET
     0015             (     mon09v35.asm):00136         CTRL2   EQU     $15                     115.2K BAUD @8N1
                      (     mon09v35.asm):00137         ;
                      (     mon09v35.asm):00138         ;======================================================================
                      (     mon09v35.asm):00139         ;*
                      (     mon09v35.asm):00140                 ORG     RAM                             Internal MON09 variables
                      (     mon09v35.asm):00141         ;*
                      (     mon09v35.asm):00142         ;* MON09 INTERNAL MEMORY
                      (     mon09v35.asm):00143         ;*
7F5C                  (     mon09v35.asm):00144         SWIADR  RMB     2               SWI VECTOR ADDRESS
7F5E                  (     mon09v35.asm):00145         SWI2ADR RMB     2               SWI2 VECTOR ADDRESS
7F60                  (     mon09v35.asm):00146         SWI3ADR RMB     2               SWI3 VECTOR ADDRESS
7F62                  (     mon09v35.asm):00147         IRQADR  RMB     2               IRQ VECTOR ADDRESS
7F64                  (     mon09v35.asm):00148         FIRQADR RMB     2               FIRQ VECTOR ADDRESS
                      (     mon09v35.asm):00149         ;MODS BY JQ
                      (     mon09v35.asm):00150          IFNE JQ_NMIRAM USE LOCAL NMI HANDLER
7F66                  (     mon09v35.asm):00151         NMIADR  RMB     2               NMI VECTOR ADDRESS
                      (     mon09v35.asm):00152          ENDC
                      (     mon09v35.asm):00153          IFNE JQ_ILLOP          USE LOCAL ILLOP HANDLER
7F68                  (     mon09v35.asm):00154         ILOPADR RMB     2               6309 ILLOP VECTOR ADDRESS
                      (     mon09v35.asm):00155          ENDC
                      (     mon09v35.asm):00156          IFNE JQ_EEPROM         JQ EEPROM WRITE ENHANCEMENTS
7F6A                  (     mon09v35.asm):00157         E2PCNT  RMB     1               EEPROM PAGE-BYTE COUNTER
                      (     mon09v35.asm):00158          ENDC                           JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v35.asm):00159         ;
7F6A                  (     mon09v35.asm):00160         IOCON   RMB     1               I/O CONFIGURATION BYTE
7F6B                  (     mon09v35.asm):00161         UART1   RMB     2               UART 1 ADDRESS
7F6D                  (     mon09v35.asm):00162         UART2   RMB     2               UART 2 ADDRESS
7F6F                  (     mon09v35.asm):00163         SAVCC   RMB     1               SAVED CONDITION CODE REGISTER
7F70                  (     mon09v35.asm):00164         SAVA    RMB     1               SAVED 6809 A REGISTER
7F71                  (     mon09v35.asm):00165         SAVB    RMB     1               SAVED 6809 B REGISTER
7F72                  (     mon09v35.asm):00166         SAVDP   RMB     1               SAVED DIRECT PAGE REGISTER
7F73                  (     mon09v35.asm):00167         SAVX    RMB     2               SAVED X REGISTER
7F75                  (     mon09v35.asm):00168         SAVY    RMB     2               SAVED Y REGISTER
7F77                  (     mon09v35.asm):00169         SAVU    RMB     2               SAVED U REGISTER
7F79                  (     mon09v35.asm):00170         SAVPC   RMB     2               SAVED PROGRAM COUNTER
7F7B                  (     mon09v35.asm):00171         SAVS    RMB     2               SAVED S REGISTER
7F7D                  (     mon09v35.asm):00172         TEMP    RMB     2               TEMPORARY STORAGE
7F7F                  (     mon09v35.asm):00173         STPFLG  RMB     1               REGISTER DISPLAY WHILE STEPPING FLAG
7F80                  (     mon09v35.asm):00174         PTRSAV  RMB     2               SINGLE STEP AND DISASSEMBLER CODE POINTER
7F82                  (     mon09v35.asm):00175         INSTYP  RMB     1               DISASSEMBLED INSTRUCTION TYPE
7F83                  (     mon09v35.asm):00176         POSBYT  RMB     1               POSTBYTE STORAGE AREA
7F84                  (     mon09v35.asm):00177         BRKTAB  RMB     24              BREAKPOINT TABLE
7F9C                  (     mon09v35.asm):00178         DSPBUF  RMB     50              DISASSEMBLER DISPLAY BUFFER
7FCE                  (     mon09v35.asm):00179         INSRAM  RMB     7               INSTRUCTION EXECUTION ADDRESS
                      (     mon09v35.asm):00180         
                      (     mon09v35.asm):00181         ;**********************************************************************
                      (     mon09v35.asm):00182          IFNE JQ_EMBEDBIN               ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v35.asm):00183         ;*
                      (     mon09v35.asm):00184                 ; INCLUDE BINARY IMAGES OF ADDITONAL LANGUAGE MODULES
                      (     mon09v35.asm):00185                 ; NOTE: THE MASTER FIRMWARE BUILD SCRIPT HANDLES
                      (     mon09v35.asm):00186                 ;       COMBINING THE VARIOUS LANGUAGE MODULES INTO
                      (     mon09v35.asm):00187                 ;       THE PROPER ADDRESSES IN THE FINAL HEX AND BIN
                      (     mon09v35.asm):00188                 ;       FILES.
                      (     mon09v35.asm):00189         ;*
                      (     mon09v35.asm):00190         ;========> START OF MICRO BASIC PLUS BINARY IMAGE <==========
                      (     mon09v35.asm):00191                         ORG     TNYBASSTRT      START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v35.asm):00192                         JMP     MONITOR         COLD START MON09
                      (     mon09v35.asm):00193                         FILL $FF,FTHIMGSTRT-*
                      (     mon09v35.asm):00194         
                      (     mon09v35.asm):00195         ;========> START OF FORTH BINARY IMAGE <=====================
                      (     mon09v35.asm):00196                         ORG     FTHIMGSTRT      START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v35.asm):00197         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v35.asm):00198                 INCLUDEBIN      ../../forth/eForth/ef09.bin
                      (     mon09v35.asm):00199                         FILL $FF,FPBASSTRT-*
                      (     mon09v35.asm):00200         
                      (     mon09v35.asm):00201         ;========> START OF FP BASIC BINARY IMAGE <==================
                      (     mon09v35.asm):00202                         ORG     FPBASSTRT       START ADDRESS OF FP BASIC IN ROM
                      (     mon09v35.asm):00203         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v35.asm):00204                 INCLUDEBIN      ../../basic/exbasrom/ExBasROM.bin
                      (     mon09v35.asm):00205                         FILL $FF,CODE-*
                      (     mon09v35.asm):00206         ;
                      (     mon09v35.asm):00207         ;**********************************************************************
                      (     mon09v35.asm):00208          ENDC                           ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v35.asm):00209         ;*
                      (     mon09v35.asm):00210                 ORG     CODE            MONITOR CODE STARTS HERE
                      (     mon09v35.asm):00211         
E400 7EE448           (     mon09v35.asm):00212                 JMP     RESET           JUMP TO MON09 COLD-START
                      (     mon09v35.asm):00213         
                      (     mon09v35.asm):00214         ;===============================================================================
                      (     mon09v35.asm):00215         ; TRAMPOLINE JUMP TABLE CONTAINING MON09 ROM ENTRY POINTS FOR USER PROGRAMS
                      (     mon09v35.asm):00216         ;===============================================================================
E403 7EEDF3           (     mon09v35.asm):00217         MON09_GETCHR    JMP     GETCHR  ;Reads character from selected input device, returns
                      (     mon09v35.asm):00218                                                                 ; in ACCA.
E406 7EEDD3           (     mon09v35.asm):00219         MON09_GETECH    JMP     GETECH  ;Reads and echos char. from selected input device,
                      (     mon09v35.asm):00220                                                                 ; converts it to capital, and returns in ACCA.
E409 7EED89           (     mon09v35.asm):00221         MON09_GETNIB    JMP     GETNIB  ;Gets a single hex nibble from selected input device,
                      (     mon09v35.asm):00222                                                                 ; and returns in ACCA. Sets 'Z' flag if successful.
E40C 7EED67           (     mon09v35.asm):00223         MON09_GETBYT    JMP     GETBYT  ;Gets a single hex byte from selected  input  device,
                      (     mon09v35.asm):00224                                                                 ; and returns in ACCA. Sets 'Z' flag is successful.
E40F 7EED20           (     mon09v35.asm):00225         MON09_GETADR    JMP     GETADR  ;Gets a hex word from selected input device, and
                      (     mon09v35.asm):00226                                                                 ; returns in D accumulator. Sets 'Z' if successful.
E412 7EED03           (     mon09v35.asm):00227         MON09_GETRNG    JMP     GETRNG  ;Gets an address range from selected input device,
                      (     mon09v35.asm):00228                                                                 ; first address is returned in 'X', and second address
                      (     mon09v35.asm):00229                                                                 ; is returned in 'D'. Sets 'Z' if successful.
E415 7EEE26           (     mon09v35.asm):00230         MON09_CHKCHR    JMP     CHKCHR  ;Checks for character from terminal, and  returns  in
                      (     mon09v35.asm):00231                                                                 ; ACCA if found, otherwise returns $FF. Sets 'Z' flag
                      (     mon09v35.asm):00232                                                                 ; If character is found, and is the escape character.
E418 7EEE08           (     mon09v35.asm):00233         MON09_PUTCHR    JMP     PUTCHR  ;Writes character in ACCA to all enabled output devs.
E41B 7EEDE1           (     mon09v35.asm):00234         MON09_SPACE             JMP     SPACE   ;Writes a space to all enabled output devices.
E41E 7EEDE7           (     mon09v35.asm):00235         MON09_LFCR              JMP     LFCR    ;Writes a line-feed, Carriage-return pair to all
                      (     mon09v35.asm):00236                                                                 ; enabled output devices.
E421 7EEDB0           (     mon09v35.asm):00237         MON09_HOUT              JMP     HOUT    ;Outputs nibble in ACCA to output devices in HEX.
E424 7EEDA6           (     mon09v35.asm):00238         MON09_HEXOUT    JMP     HEXOUT  ;Outputs byte in ACCA to output devices in HEX.
E427 7EEDA2           (     mon09v35.asm):00239         MON09_WRDOUT    JMP     WRDOUT  ;Outputs word in ACCD to output devices in HEX.
E42A 7EEDC6           (     mon09v35.asm):00240         MON09_WRLIN             JMP     WRLIN   ;Outputs message string pointed to by X to enabled
                      (     mon09v35.asm):00241                                                                 ; output devices. String ends with null ($00) or with
                      (     mon09v35.asm):00242                                                                 ; Carriage-Return ($0D). If strings ends with Carriage
                      (     mon09v35.asm):00243                                                                 ; Return, then LFCR is displayed at end.
E42D 7EEDBC           (     mon09v35.asm):00244         MON09_WRMSG             JMP     WRMSG   ;Same as above, except message string in inline with
                      (     mon09v35.asm):00245                                                                 ; code, and immediatly follows call to WRMSG.
E430 7EEC20           (     mon09v35.asm):00246         MON09_DLOAD             JMP     DLOAD   ;Downloads one record of a motorola hex format file
                      (     mon09v35.asm):00247                                                                 ; from the selected input device. Sets 'C' if record
                      (     mon09v35.asm):00248                                                                 ; was NOT an end of file record.
E433 7EEBFD           (     mon09v35.asm):00249         MON09_LOAD              JMP     LOAD    ;Selects AUX input, and downloads entire motorola hex
                      (     mon09v35.asm):00250                                                                 ; format file. Prints '.' for every record received.
E436 7EF0C0           (     mon09v35.asm):00251         MON09_DISASS    JMP     DISASS  ;Disassembles opcode pointed to by Y, and placed  the
                      (     mon09v35.asm):00252                                                                 ; disasembler output text in memory pointed to by U.
                      (     mon09v35.asm):00253                                                                 ; disassembler output text ends with carriage return.
                      (     mon09v35.asm):00254                                                                 ; Y is left pointing to next opcode in memory.
E439 7EEE62           (     mon09v35.asm):00255         MON09_STEP              JMP     STEP    ;Steps one instruction, from address in saved program
                      (     mon09v35.asm):00256                                                                 ; counter. All saved registers are updated.
E43C 7EEE51           (     mon09v35.asm):00257         MON09_STEPDI    JMP     STEPDI  ;Same as above, except  disassembled  instruction  is
                      (     mon09v35.asm):00258                                                                 ; Displayed.
E43F 7EE8BD           (     mon09v35.asm):00259         MON09_DISREG    JMP     DISREG  ;Displays all of the saved registers.
E442 7EE484           (     mon09v35.asm):00260         MON09_MONITOR   JMP     MONITOR ;Reenters the monitor.
E445 7EE448           (     mon09v35.asm):00261         MON09_RESET             JMP     RESET   ;Reinitializes the monitor via RESET.
                      (     mon09v35.asm):00262         ;===============================================================================
                      (     mon09v35.asm):00263         ;*
                      (     mon09v35.asm):00264         ;* INITIALIZATIONS.
                      (     mon09v35.asm):00265         ;*
E448                  (     mon09v35.asm):00266         RESET
E448 10CE7FFF         (     mon09v35.asm):00267                 LDS             #STACK          SET UP STACK
E44C 8E7F5C           (     mon09v35.asm):00268                 LDX             #SWIADR         POINT TO START
E44F                  (     mon09v35.asm):00269         CLRRAM          ;CLEAR MON09 DATA AREA
E44F 6F80             (     mon09v35.asm):00270                 CLR             ,X+                     CLEAR IT
E451 8C7FCE           (     mon09v35.asm):00271                 CMPX    #INSRAM         AT BUFFER?
E454 25F9             (     mon09v35.asm):00272                 BLO             CLRRAM          KEEP GOING
                      (     mon09v35.asm):00273         
                      (     mon09v35.asm):00274                 ;INIT ACIA1
E456 8E8000           (     mon09v35.asm):00275                 LDX             #SER1           GET SERIAL PORT 1
E459 BF7F6B           (     mon09v35.asm):00276                 STX             >UART1          SET IT UP
E45C 171921           (     mon09v35.asm):00277                 LBSR    INIT            INITIALIZE IT
                      (     mon09v35.asm):00278                 ;INIT ACIA2
E45F 8E8000           (     mon09v35.asm):00279                 LDX             #SER2           GET SERIAL PORT 2
E462 BF7F6D           (     mon09v35.asm):00280                 STX             >UART2          SET IT UP
E465 171918           (     mon09v35.asm):00281                 LBSR    INIT            INITIALIZE IT
                      (     mon09v35.asm):00282         
E468 8603             (     mon09v35.asm):00283                 LDA             #3                      DEFAULT I/O CONFIGURATION
E46A B77F6A           (     mon09v35.asm):00284                 STA             IOCON           SET IT
                      (     mon09v35.asm):00285         
E46D CC7F5C           (     mon09v35.asm):00286                 LDD             #RAM            DEFAULT STACK AT TOP OF RAM
E470 FD7F7B           (     mon09v35.asm):00287                 STD             SAVS            SAVE IT
                      (     mon09v35.asm):00288         
E473 86D0             (     mon09v35.asm):00289                 LDA             #$D0            SET CC
E475 B77F6F           (     mon09v35.asm):00290                 STA             SAVCC           SAVE IT
                      (     mon09v35.asm):00291         
                      (     mon09v35.asm):00292         ;MODS BY JQ
                      (     mon09v35.asm):00293          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
E478 CCF361           (     mon09v35.asm):00294                 LDD             #NMIHND                 SET DEFAULT NMI HANDLER
E47B FD7F66           (     mon09v35.asm):00295                 STD             NMIADR                  SAVE IT
                      (     mon09v35.asm):00296          ENDC                           JQ NMI ENHANCEMENTS
                      (     mon09v35.asm):00297         ;
                      (     mon09v35.asm):00298          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E47E CCF2F9           (     mon09v35.asm):00299                 LDD             #ILOPHND                SET DEFAULT ILLOP HANDLER
E481 FD7F68           (     mon09v35.asm):00300                 STD             ILOPADR                 SAVE IT
                      (     mon09v35.asm):00301          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):00302         ;
                      (     mon09v35.asm):00303         ;* Emit the sign-on message
E484                  (     mon09v35.asm):00304         MONITOR
                      (     mon09v35.asm):00305                 ; Emit the first part of the sign-on message
E484 170935           (     mon09v35.asm):00306                 LBSR    WRMSG           OUTPUT MESSAGE
E487 0A0D             (     mon09v35.asm):00307                 FCB             $0A,$0D
E489 4D4F4E3039205665 (     mon09v35.asm):00308                 FCC             'MON09 Version '
     7273696F6E20
E497 332E35           (     mon09v35.asm):00309                 FCB             VERSION/10+$30,'.',VERSION%10+$30
E49A 0D0A             (     mon09v35.asm):00310                 FCB             $0D,$0A
                      (     mon09v35.asm):00311         
                      (     mon09v35.asm):00312         ;       INCLUDE A DATE OF BUILD STRING
                      (     mon09v35.asm):00313                 INCLUDE datestring.asm
E49C 4275696C643A2032 (   datestring.asm):00001                 FCC     'Build: 2024-0323 @21:27:18 CDT'
     3032342D30333233
     204032313A32373A
     313820434454
                      (     mon09v35.asm):00314         
E4BA 0D0A             (     mon09v35.asm):00315                 FCB             $0D,$0A
E4BC 284329313938352D (     mon09v35.asm):00316                 FCC             '(C)1985-2007 Dave Dunfield'
     3230303720446176
     652044756E666965
     6C64
E4D6 0A0D             (     mon09v35.asm):00317                 FCB             $0A,$0D
E4D8 2843293230323120 (     mon09v35.asm):00318                 FCC             '(C)2021 Johnny Quest'
     4A6F686E6E792051
     75657374
E4EC 0A0D             (     mon09v35.asm):00319                 FCB             $0A,$0D
E4EE 204D6F6469666965 (     mon09v35.asm):00320                 FCC             ' Modified and Enhanced for 6809SBC by JQ'
     6420616E6420456E
     68616E6365642066
     6F72203638303953
     4243206279204A51
                      (     mon09v35.asm):00321         ;       FCB             $0A,$0D,$FF
E516 FF               (     mon09v35.asm):00322                 FCB             $FF
                      (     mon09v35.asm):00323         ;
                      (     mon09v35.asm):00324         ;------------------------------------------------------------
                      (     mon09v35.asm):00325          IFNE JQ_DETMCU         JQ MCU DETECTION
                      (     mon09v35.asm):00326         ; Added by JQ - Determine MCU and send message string
                      (     mon09v35.asm):00327         ;* Determine whether processor is 6309 or 6809
                      (     mon09v35.asm):00328         ;* Returns Z clear if 6309, set if 6809
E517 8EE542           (     mon09v35.asm):00329                 LDX             #NOT6809                POINT TO 6309 STRING
E51A 3406             (     mon09v35.asm):00330                 PSHS    D                               SAVE D REGISTER
E51C 1043             (     mon09v35.asm):00331                 FDB             $1043                   6309 COMD INSRUCTION (COMA on 6809)
E51E E161             (     mon09v35.asm):00332                 CMPB    1,S                             NOT EQUAL IF 6309
E520 3506             (     mon09v35.asm):00333                 PULS    D                               RESTORE D REGISTER
E522 2603             (     mon09v35.asm):00334                 BNE             MONITOR1                BRANCH IF 6309 DETECTED
E524 8EE52F           (     mon09v35.asm):00335                 LDX             #MOT6809                MODIFY POINTER TO 6809 STRING
                      (     mon09v35.asm):00336         ;
E527                  (     mon09v35.asm):00337         MONITOR1
E527 BDE42A           (     mon09v35.asm):00338                 JSR             MON09_WRLIN             EMIT THE STRING
                      (     mon09v35.asm):00339                 ;FCB            $11,$3D,$01     OP CODES FOR 'LDMD #$01'
E52A 113D01           (     mon09v35.asm):00340                 LDMD    #$01                    SET 6309 NATIVE MODE
E52D 202F             (     mon09v35.asm):00341                 BRA             MONITOR2                CONTINUE SIGN-ON MESSAGE
                      (     mon09v35.asm):00342         ;
E52F                  (     mon09v35.asm):00343         MOT6809
E52F 204D43553A202020 (     mon09v35.asm):00344                 FCC             ' MCU:     MC6809'
     20204D4336383039
E53F 0A0D00           (     mon09v35.asm):00345                 FCB             $0A,$0D,0
E542                  (     mon09v35.asm):00346         NOT6809
E542 204D43553A202020 (     mon09v35.asm):00347                 FCC             ' MCU:     HD6309 - Native'
     2020484436333039
     202D204E61746976
     65
E55B 0A0D00           (     mon09v35.asm):00348                 FCB             $0A,$0D,0
                      (     mon09v35.asm):00349          ENDC                           JQ MCU DETECTION
                      (     mon09v35.asm):00350         ;------------------------------------------------------------
                      (     mon09v35.asm):00351         ;
E55E                  (     mon09v35.asm):00352         MONITOR2
                      (     mon09v35.asm):00353                 ; Emit the rest of the sign-on message
E55E 17085B           (     mon09v35.asm):00354                 LBSR    WRMSG           OUTPUT MESSAGE
E561 2055415254287329 (     mon09v35.asm):00355                 FCC             ' UART(s): 6850 ACIA'
     3A20363835302041
     434941
E574 0A0D             (     mon09v35.asm):00356                 FCB             $0A,$0D
                      (     mon09v35.asm):00357         ;MODS BY JQ
                      (     mon09v35.asm):00358          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
E576 20456E61626C6564 (     mon09v35.asm):00359                 FCC             ' Enabled: NMI Trapping'
     3A204E4D49205472
     617070696E67
E58C 0A0D             (     mon09v35.asm):00360                 FCB             $0A,$0D
                      (     mon09v35.asm):00361          ENDC                           JQ NMI ENHANCEMENTS
                      (     mon09v35.asm):00362          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E58E 20456E61626C6564 (     mon09v35.asm):00363                 FCC             ' Enabled: 6309 ILLOP & DIV0 Trapping'
     3A20363330392049
     4C4C4F5020262044
     4956302054726170
     70696E67
E5B2 0A0D             (     mon09v35.asm):00364                 FCB             $0A,$0D
                      (     mon09v35.asm):00365          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):00366          IFNE JQ_EEPROM         JQ EEPROM ENHANCEMENTS
                      (     mon09v35.asm):00367                 FCC             ' Enabled: EEPROM Write'
                      (     mon09v35.asm):00368                 FCB             $0A,$0D
                      (     mon09v35.asm):00369          ENDC                           JQ EEPROM ENHANCEMENTS
                      (     mon09v35.asm):00370         ;
E5B4 416C6C2072696768 (     mon09v35.asm):00371                 FCC             'All rights & remedies reserved.'
     747320262072656D
     6564696573207265
     7365727665642E
E5D3 0AFF             (     mon09v35.asm):00372                 FCB             $0A,$FF
                      (     mon09v35.asm):00373         
E5D5                  (     mon09v35.asm):00374         MAIN
E5D5 10CE7FFF         (     mon09v35.asm):00375                 LDS             #STACK          FIX STACK IN CASE ERROR
E5D9 1707E0           (     mon09v35.asm):00376                 LBSR    WRMSG           OUTPUT MESSAGE
E5DC 2A2000           (     mon09v35.asm):00377                 FCN             '* '
E5DF 1707F1           (     mon09v35.asm):00378                 LBSR    GETECH          GET CHARACTER
E5E2 5F               (     mon09v35.asm):00379                 CLRB                            INDICATE NO SECOND CHAR
                      (     mon09v35.asm):00380         ;* LOOK FOR COMMAND IN TABLE
E5E3                  (     mon09v35.asm):00381         LOOKC
E5E3 8EE61B           (     mon09v35.asm):00382                 LDX             #CMDTAB         POINT TO COMMAND TABLE
E5E6 7F7F7D           (     mon09v35.asm):00383                 CLR             TEMP            INDICATE NO PARTIAL MATCH
E5E9                  (     mon09v35.asm):00384         LOOK1
E5E9 10A381           (     mon09v35.asm):00385                 CMPD    ,X++            DOES IT MATCH
E5EC 271E             (     mon09v35.asm):00386                 BEQ             LOOK3           YES IT DOES
E5EE A11E             (     mon09v35.asm):00387                 CMPA    -2,X            DOES FIRST CHAR MATCH?
E5F0 2603             (     mon09v35.asm):00388                 BNE             LOOK2           NO, DON'T RECORD
E5F2 7A7F7D           (     mon09v35.asm):00389                 DEC             TEMP            SET FLAG
E5F5                  (     mon09v35.asm):00390         LOOK2
E5F5 3002             (     mon09v35.asm):00391                 LEAX    2,X                     ADVANCE TO NEXT
E5F7 6D84             (     mon09v35.asm):00392                 TST             ,X                      HAVE WE HIT THE END
E5F9 26EE             (     mon09v35.asm):00393                 BNE             LOOK1           NO, KEEP LOOKING
E5FB 5D               (     mon09v35.asm):00394                 TSTB                            ALREADY HAVE TWO CHARS?
E5FC 2615             (     mon09v35.asm):00395                 BNE             ERROR           YES, ERROR
E5FE F67F7D           (     mon09v35.asm):00396                 LDB             TEMP            ANY PARTIAL MATCHES?
E601 2710             (     mon09v35.asm):00397                 BEQ             ERROR           NO, ERROR
E603 1F89             (     mon09v35.asm):00398                 TFR             A,B                     SAVE CHAR IN 'A'
E605 1707CB           (     mon09v35.asm):00399                 LBSR    GETECH          GET NEXT CHAR
E608 1E89             (     mon09v35.asm):00400                 EXG             A,B                     SWAP BACK
E60A 20D7             (     mon09v35.asm):00401                 BRA             LOOKC           AND CONTINUE
                      (     mon09v35.asm):00402         ;* COMMAND WAS FOUND, EXECUTE IT
E60C                  (     mon09v35.asm):00403         LOOK3
E60C 1707D2           (     mon09v35.asm):00404                 LBSR    SPACE           OUTPUT SPACE
E60F AD94             (     mon09v35.asm):00405                 JSR             [,X]            EXECUTE COMMAND
E611 20C2             (     mon09v35.asm):00406                 BRA             MAIN            AND RETURN
                      (     mon09v35.asm):00407         ;* ERROR HAS OCCURED
E613                  (     mon09v35.asm):00408         ERROR
E613 1707A6           (     mon09v35.asm):00409                 LBSR    WRMSG           OUTPUT MESSAGE
E616 203F             (     mon09v35.asm):00410                 FCC             ' ?'
E618 FF               (     mon09v35.asm):00411                 FCB             $FF
E619 20BA             (     mon09v35.asm):00412                 BRA             MAIN            TRY AGAIN
                      (     mon09v35.asm):00413         ;* COMMAND LOOKUP TABLE
E61B                  (     mon09v35.asm):00414         CMDTAB
E61B 444D             (     mon09v35.asm):00415                 FCB             'D','M'         DISPLAY MEMORY
E61D E736             (     mon09v35.asm):00416                 FDB             MEMORY
E61F 4444             (     mon09v35.asm):00417                 FCB             'D','D'         DISASSEMBLE
E621 E7DA             (     mon09v35.asm):00418                 FDB             DISASM
E623 4452             (     mon09v35.asm):00419                 FCB             'D','R'         DISPLAY REGISTERS
E625 E8BD             (     mon09v35.asm):00420                 FDB             DISREG
E627 4442             (     mon09v35.asm):00421                 FCB             'D','B'         VIEW BREAKPOINTS
E629 E98E             (     mon09v35.asm):00422                 FDB             DSPBRK
E62B 4456             (     mon09v35.asm):00423                 FCB             'D','V'         DISPLAY VECTORS
E62D E7FC             (     mon09v35.asm):00424                 FDB             DISVEC
E62F 4455             (     mon09v35.asm):00425                 FCB             'D','U'         DISPLAY UARTS
E631 E841             (     mon09v35.asm):00426                 FDB             DISURT
E633 4352             (     mon09v35.asm):00427                 FCB             'C','R'         CHANGE REGISTER
E635 E939             (     mon09v35.asm):00428                 FDB             CHGREG
E637 4356             (     mon09v35.asm):00429                 FCB             'C','V'         CHANGE VECTORS
E639 E85A             (     mon09v35.asm):00430                 FDB             CHGVEC
E63B 4355             (     mon09v35.asm):00431                 FCB             'C','U'         CHANGE UARTS
E63D E89C             (     mon09v35.asm):00432                 FDB             CHGURT          DO IT
E63F 4500             (     mon09v35.asm):00433                 FCB             'E',0           SUBSTITUTE MEMORY
E641 E797             (     mon09v35.asm):00434                 FDB             SUBMEM
                      (     mon09v35.asm):00435          IFNE JQ_JMPMOD         JQ JUMP MODULE ENHANCEMENTS
E643 4A42             (     mon09v35.asm):00436                 FCB             'J','B'         JUMP TO FP BASIC MODULE
E645 E68C             (     mon09v35.asm):00437                 FDB             JUMPFPBAS
                      (     mon09v35.asm):00438         ;       FCB             'J','T'         JUMP TO TINYBASIC MODULE
                      (     mon09v35.asm):00439         ;       FDB             JUMPTNYBAS
E647 4A46             (     mon09v35.asm):00440                 FCB             'J','F'         JUMP TO FORTH MODULE
E649 E6D8             (     mon09v35.asm):00441                 FDB             JUMPFORTH
                      (     mon09v35.asm):00442          ENDC                           JQ JUMP MODULE ENHANCEMENTS
                      (     mon09v35.asm):00443         ;
E64B 4C00             (     mon09v35.asm):00444                 FCB             'L',0           DOWNLOAD
E64D EBFD             (     mon09v35.asm):00445                 FDB             LOAD
E64F 4200             (     mon09v35.asm):00446                 FCB             'B',0           SET BREAKPOINT
E651 E9C4             (     mon09v35.asm):00447                 FDB             SETBRK
E653 5300             (     mon09v35.asm):00448                 FCB             'S',0           STEP
E655 E9E4             (     mon09v35.asm):00449                 FDB             GOSTEP
E657 4700             (     mon09v35.asm):00450                 FCB             'G',0           GO
E659 EA0E             (     mon09v35.asm):00451                 FDB             GOEXEC
E65B 5400             (     mon09v35.asm):00452                 FCB             'T',0           TRANSPARENT MODE
E65D EBD9             (     mon09v35.asm):00453                 FDB             TMODE
E65F 464D             (     mon09v35.asm):00454                 FCB             'F','M'         FILL MEMORY
E661 E6F9             (     mon09v35.asm):00455                 FDB             FILMEM
E663 5252             (     mon09v35.asm):00456                 FCB             'R','R'         REPEATING READ
E665 EA4D             (     mon09v35.asm):00457                 FDB             RDLOOP
E667 5257             (     mon09v35.asm):00458                 FCB             'R','W'         REPEATING WRITE
E669 EA5D             (     mon09v35.asm):00459                 FDB             WRLOOP
E66B 4D54             (     mon09v35.asm):00460                 FCB             'M','T'         MEMORY TEST
E66D EAA7             (     mon09v35.asm):00461                 FDB             RAMTEST
E66F 5700             (     mon09v35.asm):00462                 FCB             'W',0           WRITE MEMORY
E671 E787             (     mon09v35.asm):00463                 FDB             WRIMEM
E673 4D4D             (     mon09v35.asm):00464                 FCB             'M','M'         MOVE MEMORY
E675 E71C             (     mon09v35.asm):00465                 FDB             MOVMEM
E677 5852             (     mon09v35.asm):00466                 FCB             'X','R'         REPEATING 16 BIT READ
E679 EA7C             (     mon09v35.asm):00467                 FDB             XRLOOP
E67B 5857             (     mon09v35.asm):00468                 FCB             'X','W'         REPEATING 16 BIT WRITE
E67D EA8C             (     mon09v35.asm):00469                 FDB             XWLOOP
E67F 2B00             (     mon09v35.asm):00470                 FCB             '+',0           HEX ADDITION
E681 EB78             (     mon09v35.asm):00471                 FDB             HEXADD
E683 2D00             (     mon09v35.asm):00472                 FCB             '-',0           HEX SUBTRACTION
E685 EB89             (     mon09v35.asm):00473                 FDB             HEXSUB
E687 3F00             (     mon09v35.asm):00474                 FCB             '?',0           HELP COMMAND
E689 EBAB             (     mon09v35.asm):00475                 FDB             HELP
E68B 00               (     mon09v35.asm):00476                 FCB             0               MARK END OF TABLE
                      (     mon09v35.asm):00477         
                      (     mon09v35.asm):00478         ;MODS BY JQ
                      (     mon09v35.asm):00479         ;******************************************************************************
                      (     mon09v35.asm):00480         ;* 'J' - JUMP TO MODULE
                      (     mon09v35.asm):00481         ;******************************************************************************
                      (     mon09v35.asm):00482          IFNE JQ_JMPMOD         JQ JUMP TO MODULES
                      (     mon09v35.asm):00483         ;==============================================
E68C                  (     mon09v35.asm):00484         JUMPFPBAS
E68C 8EE698           (     mon09v35.asm):00485                 LDX             #FPBASMSG       POINT TO MESSAGE START
E68F 170734           (     mon09v35.asm):00486                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v35.asm):00487         
E692 7EBE00           (     mon09v35.asm):00488                 JMP             FPBASSTRT       JUMP TO FORTH COLD START
                      (     mon09v35.asm):00489         
E695 16074F           (     mon09v35.asm):00490                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v35.asm):00491         
E698                  (     mon09v35.asm):00492         FPBASMSG
E698 0D0A             (     mon09v35.asm):00493                 FCB             $0D,$0A
E69A 426F6F74696E6720 (     mon09v35.asm):00494                 FCC             'Booting MS FP BASIC...'
     4D53204650204241
     5349432E2E2E
E6B0 0D0A             (     mon09v35.asm):00495                 FCB             $0D,$0A
E6B2 FF               (     mon09v35.asm):00496                 FCB             $FF                     END OF TABLE
                      (     mon09v35.asm):00497         ;
                      (     mon09v35.asm):00498         ;==============================================
E6B3                  (     mon09v35.asm):00499         JUMPTNYBAS
E6B3 8EE6BF           (     mon09v35.asm):00500                 LDX             #TNYBASMSG      POINT TO MESSAGE START
E6B6 17070D           (     mon09v35.asm):00501                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v35.asm):00502         
E6B9 7E8C00           (     mon09v35.asm):00503                 JMP             TNYBASSTRT      JUMP TO FORTH COLD START
                      (     mon09v35.asm):00504         
E6BC 160728           (     mon09v35.asm):00505                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v35.asm):00506         
E6BF                  (     mon09v35.asm):00507         TNYBASMSG
E6BF 0D0A             (     mon09v35.asm):00508                 FCB             $0D,$0A
E6C1 426F6F74696E6720 (     mon09v35.asm):00509                 FCC             'Booting TinyBASIC...'
     54696E7942415349
     432E2E2E
E6D5 0D0A             (     mon09v35.asm):00510                 FCB             $0D,$0A
E6D7 FF               (     mon09v35.asm):00511                 FCB             $FF                     END OF TABLE
                      (     mon09v35.asm):00512         
                      (     mon09v35.asm):00513         ;==============================================
                      (     mon09v35.asm):00514         ; Load Forth into RAM.
                      (     mon09v35.asm):00515         ;INTERNAL MOVMEM ROUTINE: IMAGE START IN X, IMAGE END IN D, DESTINATION
                      (     mon09v35.asm):00516         ;  START ADDRESS IN Y.
E6D8                  (     mon09v35.asm):00517         JUMPFORTH
                      (     mon09v35.asm):00518          IFNE JQ_EFORTH                 IF USING EFORTH
                      (     mon09v35.asm):00519                 LDX             #FTHIMGSTRT     START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v35.asm):00520                 LDY             #FORTHCOLD      DESTINATION ADDRESS IN RAM
                      (     mon09v35.asm):00521                 LDD             #FTHIMGEND      END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v35.asm):00522                 STD             TEMP            MOVE TO VARIABLE
                      (     mon09v35.asm):00523         
E6D8                  (     mon09v35.asm):00524         JMPFTH1
                      (     mon09v35.asm):00525                 LDA             ,X+                     GET SOURCE BYTE
                      (     mon09v35.asm):00526                 STA             ,Y+                     SAVE IN DEST
                      (     mon09v35.asm):00527                 CMPX    TEMP            SAVE IT
                      (     mon09v35.asm):00528                 BLS             JMPFTH1         KEEP MOVING
                      (     mon09v35.asm):00529          ENDC                                   IF USING EFORTH
                      (     mon09v35.asm):00530         
E6D8 8EE6E4           (     mon09v35.asm):00531                 LDX             #FTHBTMSG       POINT TO MESSAGE START
E6DB 1706E8           (     mon09v35.asm):00532                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v35.asm):00533         
E6DE BD9C00           (     mon09v35.asm):00534                 JSR             FORTHCOLD       EXECUTE A CALL TO FORTH COLD START
                      (     mon09v35.asm):00535         
E6E1 160703           (     mon09v35.asm):00536                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v35.asm):00537         
E6E4                  (     mon09v35.asm):00538         FTHBTMSG
E6E4 0D0A             (     mon09v35.asm):00539                 FCB             $0D,$0A
E6E6 426F6F74696E6720 (     mon09v35.asm):00540                 FCC             'Booting FORTH...'
     464F5254482E2E2E
E6F6 0D0A             (     mon09v35.asm):00541                 FCB             $0D,$0A
E6F8 FF               (     mon09v35.asm):00542                 FCB             $FF                     END OF TABLE
                      (     mon09v35.asm):00543         
                      (     mon09v35.asm):00544          ENDC                           JQ JUMP TO MODULES
                      (     mon09v35.asm):00545         ;
                      (     mon09v35.asm):00546         ;******************************************************************************
                      (     mon09v35.asm):00547         ;* 'F' - FILL MEMORY
                      (     mon09v35.asm):00548         ;******************************************************************************
E6F9                  (     mon09v35.asm):00549         FILMEM
E6F9 170607           (     mon09v35.asm):00550                 LBSR    GETRNG          GET ADDRESSES
                      (     mon09v35.asm):00551         ;MODS BY JQ
E6FC 10837F5B         (     mon09v35.asm):00552                 CMPD    #RAM-1          START OF MON09 DATA?
E700 2F03             (     mon09v35.asm):00553                 BLE             FILL1           NO, ADDRESS OKAY
E702 CC7F5B           (     mon09v35.asm):00554                 LDD             #RAM-1          STOP AT MON09 DATA-1
                      (     mon09v35.asm):00555         ;
E705                  (     mon09v35.asm):00556         FILL1
E705 FD7F7D           (     mon09v35.asm):00557                 STD             TEMP            SAVE IT
E708 1706D6           (     mon09v35.asm):00558                 LBSR    SPACE           SPACE OVER
E70B 170659           (     mon09v35.asm):00559                 LBSR    GETBYT          GET DATA BYTE
E70E 1026FF01         (     mon09v35.asm):00560                 LBNE    ERROR           INVALID
E712                  (     mon09v35.asm):00561         FILL2
E712 A780             (     mon09v35.asm):00562                 STA             ,X+                     WRITE IT
E714 BC7F7D           (     mon09v35.asm):00563                 CMPX    TEMP            ARE WE THERE
E717 23F9             (     mon09v35.asm):00564                 BLS             FILL2           NO, KEEP GOING
E719 1606CB           (     mon09v35.asm):00565                 LBRA    LFCR            NEW LINE
                      (     mon09v35.asm):00566         ;
                      (     mon09v35.asm):00567         ;******************************************************************************
                      (     mon09v35.asm):00568         * 'MM' - MOVE MEMORY
                      (     mon09v35.asm):00569         ;******************************************************************************
E71C                  (     mon09v35.asm):00570         MOVMEM
                      (     mon09v35.asm):00571          IFNE 0         FOR TESTING
                      (     mon09v35.asm):00572                 JMP             $2000
                      (     mon09v35.asm):00573          ELSE
E71C 1705E4           (     mon09v35.asm):00574                 LBSR    GETRNG          GET A RANGE
E71F FD7F7D           (     mon09v35.asm):00575                 STD             TEMP            SAVE LAST VALUE
E722 1706BC           (     mon09v35.asm):00576                 LBSR    SPACE           SEPERATOR
E725 1705F8           (     mon09v35.asm):00577                 LBSR    GETADR          GET DEST ADDRESS
E728 1F02             (     mon09v35.asm):00578                 TFR             D,Y                     SET IT UP
                      (     mon09v35.asm):00579         
E72A                  (     mon09v35.asm):00580         MOVM1
E72A A680             (     mon09v35.asm):00581                 LDA             ,X+                     GET SOURCE BYTE
E72C A7A0             (     mon09v35.asm):00582                 STA             ,Y+                     SAVE IN DEST
E72E BC7F7D           (     mon09v35.asm):00583                 CMPX    TEMP            SAVE IT
E731 23F7             (     mon09v35.asm):00584                 BLS             MOVM1           KEEP MOVEING
E733 1606B1           (     mon09v35.asm):00585                 LBRA    LFCR            NEW LINE
                      (     mon09v35.asm):00586         
                      (     mon09v35.asm):00587         ;  IFNE JQ_EEPROM               JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v35.asm):00588         ;  ENDC                         JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v35.asm):00589          ENDC           FOR TESTING
                      (     mon09v35.asm):00590         ;
                      (     mon09v35.asm):00591         ;******************************************************************************
                      (     mon09v35.asm):00592         ;* 'DM' - DISPLAY MEMORY
                      (     mon09v35.asm):00593         ;******************************************************************************
E736                  (     mon09v35.asm):00594         MEMORY
                      (     mon09v35.asm):00595          IFNE 0         FOR TESTING
                      (     mon09v35.asm):00596                 JMP             $1000
                      (     mon09v35.asm):00597          ELSE
                      (     mon09v35.asm):00598         
E736 1705CA           (     mon09v35.asm):00599                 LBSR    GETRNG          GET ADDRESS
E739 FD7F7D           (     mon09v35.asm):00600                 STD             TEMP            SAVE
E73C                  (     mon09v35.asm):00601         MEM1
E73C 1706A8           (     mon09v35.asm):00602                 LBSR    LFCR            NEW LINE
E73F 1706E4           (     mon09v35.asm):00603                 LBSR    CHKCHR          CHECK FOR CHAR
E742 1027FE8F         (     mon09v35.asm):00604                 LBEQ    MAIN            ESCAPE, QUIT
E746 1F10             (     mon09v35.asm):00605                 TFR             X,D                     GET ADDRESS
E748 3406             (     mon09v35.asm):00606                 PSHS    D                       SAVE FOR LATER
E74A 170655           (     mon09v35.asm):00607                 LBSR    WRDOUT          DISPLAY
E74D C610             (     mon09v35.asm):00608                 LDB             #16                     DISPLAY 16 TO A LINE
E74F                  (     mon09v35.asm):00609         MEM2
E74F 17068F           (     mon09v35.asm):00610                 LBSR    SPACE           OUTPUT A SPACE
E752 C503             (     mon09v35.asm):00611                 BITB    #3                      ON A BOUNDARY?
E754 2603             (     mon09v35.asm):00612                 BNE             MEM3            NO, SPACE
E756 170688           (     mon09v35.asm):00613                 LBSR    SPACE           EXTRA SPACE
E759                  (     mon09v35.asm):00614         MEM3
E759 A680             (     mon09v35.asm):00615                 LDA             ,X+                     GET BYTE
E75B 170648           (     mon09v35.asm):00616                 LBSR    HEXOUT          DISPLAY
E75E 5A               (     mon09v35.asm):00617                 DECB                            REDUCE COUNT
E75F 26EE             (     mon09v35.asm):00618                 BNE             MEM2            CONTINUE
E761 C604             (     mon09v35.asm):00619                 LDB             #4                      FOUR SPACE
E763                  (     mon09v35.asm):00620         MEM4
E763 17067B           (     mon09v35.asm):00621                 LBSR    SPACE           DISPLAY A SPACE
E766 5A               (     mon09v35.asm):00622                 DECB                            REDUCE COUNT
E767 26FA             (     mon09v35.asm):00623                 BNE             MEM4            CONTINUE
E769 3510             (     mon09v35.asm):00624                 PULS    X                       RESTORE D TO X
E76B C610             (     mon09v35.asm):00625                 LDB             #16                     COUNT OF 16
E76D                  (     mon09v35.asm):00626         MEM5
E76D A680             (     mon09v35.asm):00627                 LDA             ,X+                     GET CHAR
E76F 8120             (     mon09v35.asm):00628                 CMPA    #' '            <SPACE
E771 2504             (     mon09v35.asm):00629                 BLO             MEM6            CONVERT TO DOT
E773 817F             (     mon09v35.asm):00630                 CMPA    #$7F            PRINTABLE?
E775 2502             (     mon09v35.asm):00631                 BLO             MEM7            OK TO DISPLAY
E777                  (     mon09v35.asm):00632         MEM6
E777 862E             (     mon09v35.asm):00633                 LDA             #'.'            CHANGE TO DOT
E779                  (     mon09v35.asm):00634         MEM7
E779 17068C           (     mon09v35.asm):00635                 LBSR    PUTCHR          OUTPUT
E77C 5A               (     mon09v35.asm):00636                 DECB                            REDUCE COUNT
E77D 26EE             (     mon09v35.asm):00637                 BNE             MEM5            DISPLAY THEM ALL
E77F BC7F7D           (     mon09v35.asm):00638                 CMPX    TEMP            PAST END?
E782 23B8             (     mon09v35.asm):00639                 BLS             MEM1            NO, KEEP GOING
E784 160660           (     mon09v35.asm):00640                 LBRA    LFCR            NEW LINE
                      (     mon09v35.asm):00641          ENDC           FOR TESTING
                      (     mon09v35.asm):00642         
                      (     mon09v35.asm):00643         
                      (     mon09v35.asm):00644         ;*
                      (     mon09v35.asm):00645         ;* 'W' - WRITE TO MEMORY
                      (     mon09v35.asm):00646         ;*
E787                  (     mon09v35.asm):00647         WRIMEM
E787 170596           (     mon09v35.asm):00648                 LBSR    GETADR          GET ADDRESS
E78A 1F01             (     mon09v35.asm):00649                 TFR             D,X                     SET IT UP
E78C 170652           (     mon09v35.asm):00650                 LBSR    SPACE           STEP OVER
E78F 1705D5           (     mon09v35.asm):00651                 LBSR    GETBYT          GET BYTE
E792 A784             (     mon09v35.asm):00652                 STA             ,X                      WRITE TO MEMORY
E794 160650           (     mon09v35.asm):00653                 LBRA    LFCR            NEW LINE
                      (     mon09v35.asm):00654         ;*
                      (     mon09v35.asm):00655         ;* 'E' - EDIT MEMORY
                      (     mon09v35.asm):00656         ;*
E797                  (     mon09v35.asm):00657         SUBMEM
E797 170586           (     mon09v35.asm):00658                 LBSR    GETADR          GET ADDRESS
E79A 1F01             (     mon09v35.asm):00659                 TFR             D,X                     COPY
E79C                  (     mon09v35.asm):00660         SUBM1
E79C 170648           (     mon09v35.asm):00661                 LBSR    LFCR            NEW LINE
E79F 1F10             (     mon09v35.asm):00662                 TFR             X,D                     GET ADDRESS
E7A1 1705FE           (     mon09v35.asm):00663                 LBSR    WRDOUT          OUTPUT
E7A4 C608             (     mon09v35.asm):00664                 LDB             #8                      NEW COUNT
E7A6                  (     mon09v35.asm):00665         SUBM2
E7A6 170638           (     mon09v35.asm):00666                 LBSR    SPACE           SEPERATOR
E7A9 A684             (     mon09v35.asm):00667                 LDA             ,X                      GET BYTE
E7AB 1705F8           (     mon09v35.asm):00668                 LBSR    HEXOUT          DISPLAY
E7AE 862D             (     mon09v35.asm):00669                 LDA             #'-'            PROMPT
E7B0 170655           (     mon09v35.asm):00670                 LBSR    PUTCHR          OUTPUT
E7B3 1705B1           (     mon09v35.asm):00671                 LBSR    GETBYT          GET A BYTE
E7B6 2609             (     mon09v35.asm):00672                 BNE             SUBM4           INVALID
E7B8 A784             (     mon09v35.asm):00673                 STA             ,X                      RESAVE
E7BA                  (     mon09v35.asm):00674         SUBM3
E7BA 3001             (     mon09v35.asm):00675                 LEAX    1,X                     ADVANCE
E7BC 5A               (     mon09v35.asm):00676                 DECB                            REDUCE COUNT
E7BD 26E7             (     mon09v35.asm):00677                 BNE             SUBM2           MORE, CONTINUE
E7BF 20DB             (     mon09v35.asm):00678                 BRA             SUBM1           NEW LINE
E7C1                  (     mon09v35.asm):00679         SUBM4
E7C1 810D             (     mon09v35.asm):00680                 CMPA    #$0D            CR?
E7C3 10270620         (     mon09v35.asm):00681                 LBEQ    LFCR            IF SO, QUIT
E7C7 8120             (     mon09v35.asm):00682                 CMPA    #' '            SPACE?
E7C9 2605             (     mon09v35.asm):00683                 BNE             SUBM5           NO
E7CB 170613           (     mon09v35.asm):00684                 LBSR    SPACE           FILL FOR TWO DIGITS
E7CE 20EA             (     mon09v35.asm):00685                 BRA             SUBM3           ADVANCE
E7D0                  (     mon09v35.asm):00686         SUBM5
E7D0 8108             (     mon09v35.asm):00687                 CMPA    #$08            BACKSPACE?
E7D2 1026FE3D         (     mon09v35.asm):00688                 LBNE    ERROR           INVALID
E7D6 301F             (     mon09v35.asm):00689                 LEAX    -1,X            BACKUP
E7D8 20C2             (     mon09v35.asm):00690                 BRA             SUBM1           NEW LINE
                      (     mon09v35.asm):00691         ;*
                      (     mon09v35.asm):00692         ;* 'DI' - DISASSEMBLE
                      (     mon09v35.asm):00693         ;*
E7DA                  (     mon09v35.asm):00694         DISASM
E7DA 170526           (     mon09v35.asm):00695                 LBSR    GETRNG          GET ADDRESS
E7DD FD7F7D           (     mon09v35.asm):00696                 STD             TEMP            SAVE
E7E0 1F12             (     mon09v35.asm):00697                 TFR             X,Y                     COPY TO Y
E7E2 170602           (     mon09v35.asm):00698                 LBSR    LFCR            NEW LINE
E7E5 CE7F9C           (     mon09v35.asm):00699                 LDU             #DSPBUF         POINT TO INPUT BUFFER
E7E8                  (     mon09v35.asm):00700         DISS1
E7E8 1708D5           (     mon09v35.asm):00701                 LBSR    DISASS          DISASSEMBLE
E7EB 1F31             (     mon09v35.asm):00702                 TFR             U,X                     COPY
E7ED 1705D6           (     mon09v35.asm):00703                 LBSR    WRLIN           OUTPUT
E7F0 170633           (     mon09v35.asm):00704                 LBSR    CHKCHR          END?
E7F3 2706             (     mon09v35.asm):00705                 BEQ             DISS2           YES, QUIT
E7F5 10BC7F7D         (     mon09v35.asm):00706                 CMPY    TEMP            OVER?
E7F9 25ED             (     mon09v35.asm):00707                 BLO             DISS1           TRY AGAIN
E7FB                  (     mon09v35.asm):00708         DISS2
E7FB 39               (     mon09v35.asm):00709                 RTS
                      (     mon09v35.asm):00710         ;*
                      (     mon09v35.asm):00711         ;* 'DV' - DISPLAY VECTORS
                      (     mon09v35.asm):00712         ;*
E7FC                  (     mon09v35.asm):00713         DISVEC
E7FC 8EE812           (     mon09v35.asm):00714                 LDX             #VECTXT         POINT TO VECTOR TEXT
E7FF 108E7F5C         (     mon09v35.asm):00715                 LDY             #SWIADR         POINT TO FIRST VECTOR
E803                  (     mon09v35.asm):00716         DISV1
E803 1705C0           (     mon09v35.asm):00717                 LBSR    WRLIN           OUTPUT A MESSAGE
E806 ECA1             (     mon09v35.asm):00718                 LDD             ,Y++            GET A VECTOR
E808 170597           (     mon09v35.asm):00719                 LBSR    WRDOUT          OUTPUT VECTOR ADDRESS
E80B A684             (     mon09v35.asm):00720                 LDA             ,X                      MORE TEXT?
E80D 26F4             (     mon09v35.asm):00721                 BNE             DISV1           AND CONTINUE
E80F 1605D5           (     mon09v35.asm):00722                 LBRA    LFCR            NEW LINE
E812                  (     mon09v35.asm):00723         VECTXT
E812 5357493D00       (     mon09v35.asm):00724                 FCN             'SWI='
E817 20535749323D00   (     mon09v35.asm):00725                 FCN             ' SWI2='
E81E 20535749333D00   (     mon09v35.asm):00726                 FCN             ' SWI3='
E825 204952513D00     (     mon09v35.asm):00727                 FCN             ' IRQ='
E82B 20464952513D00   (     mon09v35.asm):00728                 FCN             ' FIRQ='
                      (     mon09v35.asm):00729         ;MODS BY JQ
                      (     mon09v35.asm):00730          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
E832 204E4D493D00     (     mon09v35.asm):00731                 FCN             ' NMI='
                      (     mon09v35.asm):00732          ENDC
                      (     mon09v35.asm):00733          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E838 20494C4C4F503D00 (     mon09v35.asm):00734                 FCN             ' ILLOP='
                      (     mon09v35.asm):00735          ENDC
                      (     mon09v35.asm):00736         ;
E840 00               (     mon09v35.asm):00737                 FCB     0               END OF TABLE
                      (     mon09v35.asm):00738         ;*
                      (     mon09v35.asm):00739         ;* 'DU' DISPLAY UARTS
                      (     mon09v35.asm):00740         ;*
E841                  (     mon09v35.asm):00741         DISURT
E841 8EE84A           (     mon09v35.asm):00742                 LDX             #URTEXT         POINT TO TEXT
E844 108E7F6B         (     mon09v35.asm):00743                 LDY             #UART1          POINT TO UART
E848 20B9             (     mon09v35.asm):00744                 BRA             DISV1           DISPLAY IT
E84A                  (     mon09v35.asm):00745         URTEXT
E84A 55415254313D00   (     mon09v35.asm):00746                 FCN             'UART1='
E851 2055415254323D00 (     mon09v35.asm):00747                 FCN             ' UART2='
E859 00               (     mon09v35.asm):00748                 FCB             0
                      (     mon09v35.asm):00749         ;*
                      (     mon09v35.asm):00750         ;* 'CV' - CHANGE VECTOR
                      (     mon09v35.asm):00751         ;*
E85A                  (     mon09v35.asm):00752         CHGVEC
E85A 170576           (     mon09v35.asm):00753                 LBSR    GETECH          GET CHAR & ECHO
E85D 8153             (     mon09v35.asm):00754                 CMPA    #'S'            SWI?
E85F 2604             (     mon09v35.asm):00755                 BNE             CHGV1           NO
E861 8631             (     mon09v35.asm):00756                 LDA             #'1'            SAME AS '1'
E863 201E             (     mon09v35.asm):00757                 BRA             CHGV5           AND CONTINUE
E865                  (     mon09v35.asm):00758         CHGV1
E865 8149             (     mon09v35.asm):00759                 CMPA    #'I'            IRQ?
E867 2604             (     mon09v35.asm):00760                 BNE             CHGV2           NO, ITS OK
E869 8634             (     mon09v35.asm):00761                 LDA             #'4'            CONVERT
E86B 2016             (     mon09v35.asm):00762                 BRA             CHGV5           AND CONTINUE
E86D                  (     mon09v35.asm):00763         CHGV2
E86D 8146             (     mon09v35.asm):00764                 CMPA    #'F'            FIRQ?
E86F 2604             (     mon09v35.asm):00765                 BNE             CHGV3           NO
E871 8635             (     mon09v35.asm):00766                 LDA             #'5'            CONVERT
E873 200E             (     mon09v35.asm):00767                 BRA             CHGV5           AND CONTINUE
E875                  (     mon09v35.asm):00768         CHGV3
                      (     mon09v35.asm):00769         ;MODS BY JQ
                      (     mon09v35.asm):00770          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
E875 814E             (     mon09v35.asm):00771                 CMPA    #'N'            NMI?
E877 2604             (     mon09v35.asm):00772                 BNE             CHGV4           NO
E879 8636             (     mon09v35.asm):00773                 LDA             #'6'            CONVERT
E87B 2006             (     mon09v35.asm):00774                 BRA             CHGV5           AND CONTINUE
                      (     mon09v35.asm):00775          ENDC                           USE JQ NMI ENHANCEMENTS
E87D                  (     mon09v35.asm):00776         CHGV4
                      (     mon09v35.asm):00777          IFNE JQ_ILLOP          USE ILLOP HANDLER
E87D 814C             (     mon09v35.asm):00778                 CMPA    #'L'            6309 ILLOP?
E87F 2602             (     mon09v35.asm):00779                 BNE             CHGV5           NO
E881 8637             (     mon09v35.asm):00780                 LDA             #'7'            CONVERT
                      (     mon09v35.asm):00781          ENDC                           USE ILLOP HANDLER
                      (     mon09v35.asm):00782         ;
E883                  (     mon09v35.asm):00783         CHGV5
E883 8031             (     mon09v35.asm):00784                 SUBA    #'1'            TEST IT
                      (     mon09v35.asm):00785         ;---------------------
                      (     mon09v35.asm):00786         ;MODS BY JQ
     0004             (     mon09v35.asm):00787         CHKRNG  SET     4                       IRQ HANDLER MAX NUMBER
                      (     mon09v35.asm):00788          IFNE JQ_NMIRAM         NO JQ NMI ENHANCEMENTS
     0005             (     mon09v35.asm):00789         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v35.asm):00790          ENDC                           NO JQ NMI ENHANCEMENTS
                      (     mon09v35.asm):00791          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
     0006             (     mon09v35.asm):00792         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v35.asm):00793           ENDC                          NO JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):00794         ;---------------------
E885 8106             (     mon09v35.asm):00795                 CMPA    #CHKRNG         CHECK RANGE
                      (     mon09v35.asm):00796         ;
E887 1022FD88         (     mon09v35.asm):00797                 LBHI    ERROR           INVALID
E88B 8E7F5C           (     mon09v35.asm):00798                 LDX             #SWIADR         POINT TO IT
E88E                  (     mon09v35.asm):00799         CHGV6
E88E 48               (     mon09v35.asm):00800                 LSLA                            X2 FOR 2 BYTE ENTRIES
E88F 3086             (     mon09v35.asm):00801                 LEAX    A,X                     ADVANCE TO VECTOR
E891 17054D           (     mon09v35.asm):00802                 LBSR    SPACE           SEPERATOR
E894 170489           (     mon09v35.asm):00803                 LBSR    GETADR          GET NEW VALUE
E897 ED84             (     mon09v35.asm):00804                 STD             ,X                      WRITE NEW VECTOR
E899 16054B           (     mon09v35.asm):00805                 LBRA    LFCR            NEW LINE & EXIT
                      (     mon09v35.asm):00806         
                      (     mon09v35.asm):00807         ;*
                      (     mon09v35.asm):00808         ;* 'CU' - CHANGE UART ADDRESS
                      (     mon09v35.asm):00809         ;*
E89C                  (     mon09v35.asm):00810         CHGURT
E89C 170534           (     mon09v35.asm):00811                 LBSR    GETECH          GET AND ECHO
E89F 8031             (     mon09v35.asm):00812                 SUBA    #'1'            CONVERT
E8A1 8101             (     mon09v35.asm):00813                 CMPA    #1              IN RANGE?
E8A3 1022FD6C         (     mon09v35.asm):00814                 LBHI    ERROR           INVALID
E8A7 8E7F6B           (     mon09v35.asm):00815                 LDX             #UART1          POINT TO IT
E8AA 48               (     mon09v35.asm):00816                 LSLA                    X2 FOR 2 BYTE ENTRIES
E8AB 3086             (     mon09v35.asm):00817                 LEAX    A,X             ADVANCE TO IT
E8AD 170531           (     mon09v35.asm):00818                 LBSR    SPACE           SEPERATOR
E8B0 17046D           (     mon09v35.asm):00819                 LBSR    GETADR          GET ADDRESS
E8B3 ED84             (     mon09v35.asm):00820                 STD             ,X              SET IT
E8B5 1F01             (     mon09v35.asm):00821                 TFR             D,X             SET UP POINTER
E8B7 1714C6           (     mon09v35.asm):00822                 LBSR    INIT            INITIALIZE IT
E8BA 16052A           (     mon09v35.asm):00823                 LBRA    LFCR            NEW LINE
                      (     mon09v35.asm):00824         ;*
                      (     mon09v35.asm):00825         ;* 'DR' - DISPLAY REGISTERS
                      (     mon09v35.asm):00826         ;*
E8BD                  (     mon09v35.asm):00827         DISREG
E8BD 8EE907           (     mon09v35.asm):00828                 LDX             #REGTXT         POINT TO TEXT
E8C0 108E7F6F         (     mon09v35.asm):00829                 LDY             #SAVCC          POINT TO VALUE
E8C4 8D31             (     mon09v35.asm):00830                 BSR             RSUB1           'CC='
E8C6 1704FD           (     mon09v35.asm):00831                 LBSR    WRLIN           ' ['
E8C9 CEE931           (     mon09v35.asm):00832                 LDU             #CCBITS         POINT TO BIT TABLE
E8CC E63F             (     mon09v35.asm):00833                 LDB             -1,Y            GET BITS BACK
E8CE 3420             (     mon09v35.asm):00834                 PSHS    Y                       SAVE POINTER
E8D0 108E0008         (     mon09v35.asm):00835                 LDY             #8                      EIGHT BITS IN BYTE
E8D4                  (     mon09v35.asm):00836         REGB1
E8D4 A6C0             (     mon09v35.asm):00837                 LDA             ,U+                     GET BIT IDENTIFIER
E8D6 58               (     mon09v35.asm):00838                 ASLB                            IS IT SET?
E8D7 2502             (     mon09v35.asm):00839                 BCS             RBITS           YES, DISPLAY IT
E8D9 862D             (     mon09v35.asm):00840                 LDA             #'-'            NO, DISPLAY DASH
E8DB                  (     mon09v35.asm):00841         RBITS
E8DB 17052A           (     mon09v35.asm):00842                 LBSR    PUTCHR          OUTPUT A CHARACTER
E8DE 313F             (     mon09v35.asm):00843                 LEAY    -1,Y            REDUCE COUNT
E8E0 26F2             (     mon09v35.asm):00844                 BNE             REGB1           MORE TO GO
E8E2 3520             (     mon09v35.asm):00845                 PULS    Y                       RESTORE Y
E8E4 8D11             (     mon09v35.asm):00846                 BSR             RSUB1           '] A='
E8E6 8D0F             (     mon09v35.asm):00847                 BSR             RSUB1           ' B='
E8E8 8D0D             (     mon09v35.asm):00848                 BSR             RSUB1           ' DP='
E8EA 8D13             (     mon09v35.asm):00849                 BSR             RSUB2           ' X='
E8EC 8D11             (     mon09v35.asm):00850                 BSR             RSUB2           ' Y='
E8EE 8D0F             (     mon09v35.asm):00851                 BSR             RSUB2           ' U='
E8F0 8D0D             (     mon09v35.asm):00852                 BSR             RSUB2           ' PC='
E8F2 8D0B             (     mon09v35.asm):00853                 BSR             RSUB2           ' S='
E8F4 1604F0           (     mon09v35.asm):00854                 LBRA    LFCR            QUIT
                      (     mon09v35.asm):00855         ;* DISPLAY 8 BIT REGISTER VALUE
E8F7                  (     mon09v35.asm):00856         RSUB1
E8F7 1704CC           (     mon09v35.asm):00857                 LBSR    WRLIN           OUTPUT BYTE VALUE
E8FA A6A0             (     mon09v35.asm):00858                 LDA             ,Y+                     GET REGISTER VALUE
E8FC 1604A7           (     mon09v35.asm):00859                 LBRA    HEXOUT          OUTPUT IN HEX
                      (     mon09v35.asm):00860         ;* DISPLAY 16 BIT REGISTER VALUE
E8FF                  (     mon09v35.asm):00861         RSUB2
E8FF 1704C4           (     mon09v35.asm):00862                 LBSR    WRLIN           OUTPUT WORD VALUE
E902 ECA1             (     mon09v35.asm):00863                 LDD             ,Y++            GET REGISTER VALUE
E904 16049B           (     mon09v35.asm):00864                 LBRA    WRDOUT          OUTPUT IN HEX
                      (     mon09v35.asm):00865         ;* TABLE OF TEXT FOR REGISTER DISPLAY
E907                  (     mon09v35.asm):00866         REGTXT
E907 43433D00         (     mon09v35.asm):00867                 FCN             'CC='
E90B 205B00           (     mon09v35.asm):00868                 FCN             ' ['
E90E 5D20413D00       (     mon09v35.asm):00869                 FCN             '] A='
E913 20423D00         (     mon09v35.asm):00870                 FCN             ' B='
E917 2044503D00       (     mon09v35.asm):00871                 FCN             ' DP='
E91C 20583D00         (     mon09v35.asm):00872                 FCN             ' X='
E920 20593D00         (     mon09v35.asm):00873                 FCN             ' Y='
E924 20553D00         (     mon09v35.asm):00874                 FCN             ' U='
E928 2050433D00       (     mon09v35.asm):00875                 FCN             ' PC='
E92D 20533D00         (     mon09v35.asm):00876                 FCN             ' S='
                      (     mon09v35.asm):00877         ;* TABLE OF CONDITION CODE BIT MEANINGS
E931                  (     mon09v35.asm):00878         CCBITS
E931 454648494E5A5643 (     mon09v35.asm):00879                 FCC     'EFHINZVC'
                      (     mon09v35.asm):00880         ;*
                      (     mon09v35.asm):00881         ;* 'CR' - CHANGE REGISTER
                      (     mon09v35.asm):00882         ;*
E939                  (     mon09v35.asm):00883         CHGREG
E939 170497           (     mon09v35.asm):00884                 LBSR    GETECH          GET OPERAND
E93C 8120             (     mon09v35.asm):00885                 CMPA    #' '            A+B?
E93E 2727             (     mon09v35.asm):00886                 BEQ             CHG4            YES
E940 8EE984           (     mon09v35.asm):00887                 LDX             #CHGTAB         POINT TO TABLE
E943 5F               (     mon09v35.asm):00888                 CLRB                            ZERO INDICATOR
E944                  (     mon09v35.asm):00889         CHG1
E944 A184             (     mon09v35.asm):00890                 CMPA    ,X                      IS THIS IT?
E946 2708             (     mon09v35.asm):00891                 BEQ             CHG2            YES
E948 5C               (     mon09v35.asm):00892                 INCB                            ADVANCE COUNT
E949 6D80             (     mon09v35.asm):00893                 TST             ,X+                     END OF TABLE
E94B 26F7             (     mon09v35.asm):00894                 BNE             CHG1            NO, KEEP TRYING
E94D 16FCC3           (     mon09v35.asm):00895                 LBRA    ERROR           INDICATE ERROR
E950                  (     mon09v35.asm):00896         CHG2
E950 17048E           (     mon09v35.asm):00897                 LBSR    SPACE           OUTPUT SPACE
E953 8E7F6F           (     mon09v35.asm):00898                 LDX             #SAVCC          POINT TO START OF REGISTERS
E956 C104             (     mon09v35.asm):00899                 CMPB    #4                      16 BIT?
E958 241B             (     mon09v35.asm):00900                 BHS             R16                     YES
E95A 3085             (     mon09v35.asm):00901                 LEAX    B,X                     OFFSET TO ADDRESS
E95C 170408           (     mon09v35.asm):00902                 LBSR    GETBYT          GET NEW VALUE
E95F 1026FCB0         (     mon09v35.asm):00903                 LBNE    ERROR           INVALID
E963 A784             (     mon09v35.asm):00904                 STA             ,X                      SAVE IN REGISTER
E965 201A             (     mon09v35.asm):00905                 BRA             CHG3            AND QUIT
E967                  (     mon09v35.asm):00906         CHG4
E967 170452           (     mon09v35.asm):00907                 LBSR    WRMSG           OUTPUT MESSAGE
E96A 5B41425D2000     (     mon09v35.asm):00908                 FCN             '[AB] '
E970 8E7F70           (     mon09v35.asm):00909                 LDX             #SAVA           POINT TO 'D'
E973 2007             (     mon09v35.asm):00910                 BRA             R17                     MAKE LIKE 16 BIT REG
E975                  (     mon09v35.asm):00911         R16
E975 3004             (     mon09v35.asm):00912                 LEAX    4,X                     OFFSET TO 16 BIT REGISTERS
E977 C004             (     mon09v35.asm):00913                 SUBB    #4                      CONVERT TO ZERO ORIGIN
E979 58               (     mon09v35.asm):00914                 LSLB                            DOUBLE FOR WORD VALUES
E97A 3085             (     mon09v35.asm):00915                 LEAX    B,X                     MOVE TO CORRECT OFFSET
E97C                  (     mon09v35.asm):00916         R17
E97C 1703A1           (     mon09v35.asm):00917                 LBSR    GETADR          GET WORD VALUE
E97F ED84             (     mon09v35.asm):00918                 STD             ,X                      SET REGISTER VALUE
E981                  (     mon09v35.asm):00919         CHG3
E981 160463           (     mon09v35.asm):00920                 LBRA    LFCR            QUIT
                      (     mon09v35.asm):00921         ;* TABLE OF REGISTER NAMES
E984                  (     mon09v35.asm):00922         CHGTAB
E984 4341424458595550 (     mon09v35.asm):00923                 FCN             'CABDXYUPS'
     5300
                      (     mon09v35.asm):00924         ;*
                      (     mon09v35.asm):00925         ;* 'DB' - DISPLAY BREAKPOINTS
                      (     mon09v35.asm):00926         ;*
E98E                  (     mon09v35.asm):00927         DSPBRK
E98E 8630             (     mon09v35.asm):00928                 LDA             #'0'            START WITH BRKPT ZERO
E990 8E7F84           (     mon09v35.asm):00929                 LDX             #BRKTAB         POINT TO TABLE
E993                  (     mon09v35.asm):00930         DSPB1
E993 3402             (     mon09v35.asm):00931                 PSHS    A                       SAVE NUMBER
E995 8642             (     mon09v35.asm):00932                 LDA             #'B'            PRECEDE WITH 'B'
E997 17046E           (     mon09v35.asm):00933                 LBSR    PUTCHR          OUTPUT
E99A A6E4             (     mon09v35.asm):00934                 LDA             ,S                      GET NUMBER BACK
E99C 170469           (     mon09v35.asm):00935                 LBSR    PUTCHR          OUTPUT
E99F 863D             (     mon09v35.asm):00936                 LDA             #'='            AND FOLLOW WITH '='
E9A1 170464           (     mon09v35.asm):00937                 LBSR    PUTCHR          OUTPUT
E9A4 EC81             (     mon09v35.asm):00938                 LDD             ,X++            GET VALUE
E9A6 260A             (     mon09v35.asm):00939                 BNE             DSPB2           NON-ZERO, DISPLAY
E9A8 170411           (     mon09v35.asm):00940                 LBSR    WRMSG           OUTPUT MESSAGE INSTEAD
E9AB 2A2A2A2A00       (     mon09v35.asm):00941                 FCN             '****'
E9B0 2003             (     mon09v35.asm):00942                 BRA             DSPB3           CONTINUE
E9B2                  (     mon09v35.asm):00943         DSPB2
E9B2 1703ED           (     mon09v35.asm):00944                 LBSR    WRDOUT          OUTPUT VALUE
E9B5                  (     mon09v35.asm):00945         DSPB3
E9B5 170429           (     mon09v35.asm):00946                 LBSR    SPACE           SEPERATE WITH SPACE
E9B8 3001             (     mon09v35.asm):00947                 LEAX    1,X                     SKIP OPCODE SAVE
E9BA 3502             (     mon09v35.asm):00948                 PULS    A                       RESTORE NUMBER
E9BC 4C               (     mon09v35.asm):00949                 INCA                            ADVANCE
E9BD 8138             (     mon09v35.asm):00950                 CMPA    #'8'            BEYOND END?
E9BF 25D2             (     mon09v35.asm):00951                 BLO             DSPB1           NO, CONTINUE
E9C1 160423           (     mon09v35.asm):00952                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v35.asm):00953         ;*
                      (     mon09v35.asm):00954         ;* 'B' - SET BREAKPOINT
                      (     mon09v35.asm):00955         ;*
E9C4                  (     mon09v35.asm):00956         SETBRK
E9C4 17040C           (     mon09v35.asm):00957                 LBSR    GETECH          GET CHARACTER
E9C7 8030             (     mon09v35.asm):00958                 SUBA    #'0'            CONVERT TO NUMBER
E9C9 8108             (     mon09v35.asm):00959                 CMPA    #8                      IN RANGE?
E9CB 1024FC44         (     mon09v35.asm):00960                 LBHS    ERROR           NO, QUIT
E9CF 3402             (     mon09v35.asm):00961                 PSHS    A                       SAVE NUMBER
E9D1 48               (     mon09v35.asm):00962                 LSLA                            DOUBLE FOR 16 BIT VALUES
E9D2 ABE0             (     mon09v35.asm):00963                 ADDA    ,S+                     TRIPLE FOR OPCODE BYTE
E9D4 8E7F84           (     mon09v35.asm):00964                 LDX             #BRKTAB         POINT TO BREAKPOINT TABLE
E9D7 3086             (     mon09v35.asm):00965                 LEAX    A,X                     ADVANCE TO BREAKPOINT
E9D9 170405           (     mon09v35.asm):00966                 LBSR    SPACE           SEPERATE WITH SPACE
E9DC 170341           (     mon09v35.asm):00967                 LBSR    GETADR          GET VALUE
E9DF ED84             (     mon09v35.asm):00968                 STD             ,X                      SAVE IN TABLE
E9E1 160403           (     mon09v35.asm):00969                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v35.asm):00970         ;*
                      (     mon09v35.asm):00971         ;* 'S' - SINGLE STEP
                      (     mon09v35.asm):00972         ;*
E9E4                  (     mon09v35.asm):00973         GOSTEP
E9E4 170304           (     mon09v35.asm):00974                 LBSR    GETPC           GET ADDRESS
E9E7 1703FD           (     mon09v35.asm):00975                 LBSR    LFCR            OUTPUT MESSAGE
E9EA                  (     mon09v35.asm):00976         GOSTP1
E9EA 170464           (     mon09v35.asm):00977                 LBSR    STEPDI          STEP AND DISPLAY INSTRUCTION
E9ED 7D7F7F           (     mon09v35.asm):00978                 TST             STPFLG          DISPLAY REGISTERS?
E9F0 2B03             (     mon09v35.asm):00979                 BMI             NODSR           NO, DON'T DISPLAY
E9F2                  (     mon09v35.asm):00980         STPREG
E9F2 17FEC8           (     mon09v35.asm):00981                 LBSR    DISREG          DISPLAY REGISTERS
E9F5                  (     mon09v35.asm):00982         NODSR
E9F5 1703FB           (     mon09v35.asm):00983                 LBSR    GETCHR          GET KEY FROM TERMINAL
E9F8 813F             (     mon09v35.asm):00984                 CMPA    #'?'            DISPLAY REGS?
E9FA 27F6             (     mon09v35.asm):00985                 BEQ             STPREG          IF SO, DISPLAY
E9FC 8120             (     mon09v35.asm):00986                 CMPA    #' '            STEP TO NEXT?
E9FE 27EA             (     mon09v35.asm):00987                 BEQ             GOSTP1          IF SO, STEP
EA00 811B             (     mon09v35.asm):00988                 CMPA    #$1B            EXIT STEPPING?
EA02 2709             (     mon09v35.asm):00989                 BEQ             GOSTP2          IF SO, QUIT
EA04 810D             (     mon09v35.asm):00990                 CMPA    #$0D            TOGGLE REGISTER DISPLAY?
EA06 26ED             (     mon09v35.asm):00991                 BNE             NODSR           IF NOT, IGNORE
EA08 737F7F           (     mon09v35.asm):00992                 COM             STPFLG          TOGGLE DISPLAY FLAG
EA0B 20E8             (     mon09v35.asm):00993                 BRA             NODSR           GET NEXT KEY
EA0D                  (     mon09v35.asm):00994         GOSTP2
EA0D 39               (     mon09v35.asm):00995                 RTS
                      (     mon09v35.asm):00996         ;*
                      (     mon09v35.asm):00997         ;* 'G' - GO (EXECUTE)
                      (     mon09v35.asm):00998         ;*
EA0E                  (     mon09v35.asm):00999         GOEXEC
EA0E 1702DA           (     mon09v35.asm):01000                 LBSR    GETPC           GET ADDRESS
EA11 1703D3           (     mon09v35.asm):01001                 LBSR    LFCR            NEW LINE
                      (     mon09v35.asm):01002         ;*      STEP ONE INST. BEFORE INSERTING BREAKPOINTS, SO THAT BREAKPOINTS
                      (     mon09v35.asm):01003         ;*      CAN BE USED WITHIN LOOPS ETC.
EA14 17044B           (     mon09v35.asm):01004                 LBSR    STEP            STEP ONE INSTRUCTION
                      (     mon09v35.asm):01005         ;*      INSERT BREAKPOINTS
EA17 8E7F84           (     mon09v35.asm):01006                 LDX             #BRKTAB         POINT TO BREAKPOINT TABLE
EA1A C608             (     mon09v35.asm):01007                 LDB             #8                      EIGHT BREAKPOINTS
EA1C                  (     mon09v35.asm):01008         GOEX3
EA1C 10AE81           (     mon09v35.asm):01009                 LDY             ,X++            GET BREAKPOINT ADDRESS
EA1F 2708             (     mon09v35.asm):01010                 BEQ             GOEX4           NO BREAKPOINT, QUIT
EA21 A6A4             (     mon09v35.asm):01011                 LDA             ,Y                      GET OPCODE
EA23 A784             (     mon09v35.asm):01012                 STA             ,X                      SAVE IN TABLE
EA25 863F             (     mon09v35.asm):01013                 LDA             #$3F            GET 'SWI' BREAKPOINT OPCODE
EA27 A7A4             (     mon09v35.asm):01014                 STA             ,Y                      SAVE IN CODE SPACE
EA29                  (     mon09v35.asm):01015         GOEX4
EA29 3001             (     mon09v35.asm):01016                 LEAX    1,X                     ADVANCE TO NEXT IN TABLE
EA2B 5A               (     mon09v35.asm):01017                 DECB                            REDUCE COUNT OF BRKPTS
EA2C 26EE             (     mon09v35.asm):01018                 BNE             GOEX3           DO ALL EIGHT
EA2E 10FE7F7B         (     mon09v35.asm):01019                 LDS             SAVS            RESTORE STACK POINTER
EA32 B67F6F           (     mon09v35.asm):01020                 LDA             SAVCC           GET SAVED CC
EA35 F67F72           (     mon09v35.asm):01021                 LDB             SAVDP           GET SAVED DPR
EA38 3406             (     mon09v35.asm):01022                 PSHS    A,B                     SAVE ON STACK FOR LAST RESTORE
EA3A FC7F70           (     mon09v35.asm):01023                 LDD             SAVA            RESTORE A, B REGISTERS
EA3D BE7F73           (     mon09v35.asm):01024                 LDX             SAVX            RESTORE X REGISTER
EA40 10BE7F75         (     mon09v35.asm):01025                 LDY             SAVY            RESTORE Y REGISTER
EA44 FE7F77           (     mon09v35.asm):01026                 LDU             SAVU            RESTORE U REGISTER
EA47 3509             (     mon09v35.asm):01027                 PULS    CC,DP           RESTORE CC + DP
EA49 6E9F7F79         (     mon09v35.asm):01028                 JMP             [SAVPC]         EXECUTE USER PGM
                      (     mon09v35.asm):01029         ;*
                      (     mon09v35.asm):01030         ;* 'RR' - REPEATING READ
                      (     mon09v35.asm):01031         ;*
EA4D                  (     mon09v35.asm):01032         RDLOOP
EA4D 1702D0           (     mon09v35.asm):01033                 LBSR    GETADR          GET ADDRESS
EA50 1F01             (     mon09v35.asm):01034                 TFR             D,X                     SET UP 'X'
EA52 170392           (     mon09v35.asm):01035                 LBSR    LFCR            NEW LINE
EA55                  (     mon09v35.asm):01036         RDLP1
EA55 A684             (     mon09v35.asm):01037                 LDA             ,X                      READ LOCATION
EA57 1703CC           (     mon09v35.asm):01038                 LBSR    CHKCHR          ABORT?
EA5A 26F9             (     mon09v35.asm):01039                 BNE             RDLP1           NO, ITS OK
EA5C 39               (     mon09v35.asm):01040                 RTS
                      (     mon09v35.asm):01041         ;*
                      (     mon09v35.asm):01042         ;* 'RW' - REPEATING WRITE
                      (     mon09v35.asm):01043         ;*
EA5D                  (     mon09v35.asm):01044         WRLOOP
EA5D 1702C0           (     mon09v35.asm):01045                 LBSR    GETADR          GET ADDRESS
EA60 1F01             (     mon09v35.asm):01046                 TFR             D,X                     SET UP 'X'
EA62 17037C           (     mon09v35.asm):01047                 LBSR    SPACE           SPACE OVER
EA65 1702FF           (     mon09v35.asm):01048                 LBSR    GETBYT          GET DATA
EA68 1026FBA7         (     mon09v35.asm):01049                 LBNE    ERROR           INVALID
EA6C 3402             (     mon09v35.asm):01050                 PSHS    A                       SAVE ACCA
EA6E 170376           (     mon09v35.asm):01051                 LBSR    LFCR            NEW LINE
EA71                  (     mon09v35.asm):01052         WRLP1
EA71 A6E4             (     mon09v35.asm):01053                 LDA             ,S                      GET CHAR
EA73 A784             (     mon09v35.asm):01054                 STA             ,X                      WRITE IT OUT
EA75 1703AE           (     mon09v35.asm):01055                 LBSR    CHKCHR          ABORT COMMAND?
EA78 26F7             (     mon09v35.asm):01056                 BNE             WRLP1           CONTINUE
EA7A 3582             (     mon09v35.asm):01057                 PULS    A,PC            GO HOME
                      (     mon09v35.asm):01058         ;*
                      (     mon09v35.asm):01059         ;* 'XR' - REPEATING 16 BIT READ
                      (     mon09v35.asm):01060         ;*
EA7C                  (     mon09v35.asm):01061         XRLOOP
EA7C 1702A1           (     mon09v35.asm):01062                 LBSR    GETADR          GET ADDRESS
EA7F 1F01             (     mon09v35.asm):01063                 TFR             D,X                     SET UP 'X'
EA81 170363           (     mon09v35.asm):01064                 LBSR    LFCR            NEW LINE
EA84                  (     mon09v35.asm):01065         XRLP1
EA84 EC84             (     mon09v35.asm):01066                 LDD             ,X                      READ LOCATION
EA86 17039D           (     mon09v35.asm):01067                 LBSR    CHKCHR          ABORT?
EA89 26F9             (     mon09v35.asm):01068                 BNE             XRLP1           NO, ITS OK
EA8B 39               (     mon09v35.asm):01069                 RTS
                      (     mon09v35.asm):01070         ;*
                      (     mon09v35.asm):01071         ;* 'XW' - REPEATING 16 BITWRITE
                      (     mon09v35.asm):01072         ;*
EA8C                  (     mon09v35.asm):01073         XWLOOP
EA8C 170291           (     mon09v35.asm):01074                 LBSR    GETADR          GET ADDRESS
EA8F 1F01             (     mon09v35.asm):01075                 TFR             D,X                     SET UP 'X'
EA91 17034D           (     mon09v35.asm):01076                 LBSR    SPACE           SPACE OVER
EA94 170289           (     mon09v35.asm):01077                 LBSR    GETADR          GET DATA
EA97 3406             (     mon09v35.asm):01078                 PSHS    A,B                     SAVE ACCA
EA99 17034B           (     mon09v35.asm):01079                 LBSR    LFCR            NEW LINE
EA9C                  (     mon09v35.asm):01080         XWLP1
EA9C ECE4             (     mon09v35.asm):01081                 LDD     ,S                              GET CHAR
EA9E ED84             (     mon09v35.asm):01082                 STD             ,X                      WRITE IT OUT
EAA0 170383           (     mon09v35.asm):01083                 LBSR    CHKCHR          ABORT COMMAND?
EAA3 26F7             (     mon09v35.asm):01084                 BNE             XWLP1           CONTINUE
EAA5 3586             (     mon09v35.asm):01085                 PULS    A,B,PC          GO HOME
                      (     mon09v35.asm):01086         ;*
                      (     mon09v35.asm):01087         ;* 'MT' - MEMORY TEST
                      (     mon09v35.asm):01088         ;*
EAA7 170259           (     mon09v35.asm):01089         RAMTEST LBSR    GETRNG          GET ADDRESS RANGE
EAAA FD7F7D           (     mon09v35.asm):01090                 STD     TEMP            SAVE ENDING ADDRESS
EAAD CCFFFF           (     mon09v35.asm):01091                 LDD     #-1             BEGIN WITH NEGATIVE 1
EAB0 FD7F9C           (     mon09v35.asm):01092                 STD     DSPBUF          SAVE PASS COUNT
EAB3 170331           (     mon09v35.asm):01093                 LBSR    LFCR            NEW LINE
EAB6 1F12             (     mon09v35.asm):01094                 TFR     X,Y             COPY STARTING ADDRESS
EAB8 6F80             (     mon09v35.asm):01095         RAM0    CLR     ,X+             ZAP ONE BYTE
EABA BC7F7D           (     mon09v35.asm):01096                 CMPX    TEMP            ARE WE OVER?
EABD 23F9             (     mon09v35.asm):01097                 BLS     RAM0            NO, CLEAR EM ALL
EABF 1F21             (     mon09v35.asm):01098         RAM1    TFR     Y,X             RESET STARTING ADDRESS
EAC1 860D             (     mon09v35.asm):01099                 LDA     #$0D            GET CR
EAC3 170342           (     mon09v35.asm):01100                 LBSR    PUTCHR          BACK TO START OF LINE
EAC6 1702F3           (     mon09v35.asm):01101                 LBSR    WRMSG           OUTPUT MESSAGE
EAC9 506173733A2000   (     mon09v35.asm):01102                 FCN             'Pass: '
EAD0 FC7F9C           (     mon09v35.asm):01103                 LDD     DSPBUF          GET COUNTER
EAD3 C30001           (     mon09v35.asm):01104                 ADDD    #1              ADVANCE PASS COUNT
EAD6 FD7F9C           (     mon09v35.asm):01105                 STD     DSPBUF          RESAVE
EAD9 1702C6           (     mon09v35.asm):01106                 LBSR    WRDOUT          OUTPUT
EADC 170302           (     mon09v35.asm):01107                 LBSR    SPACE           SPACE OVER
EADF 170344           (     mon09v35.asm):01108         RAM2    LBSR    CHKCHR          CHARACTER READY?
EAE2 271C             (     mon09v35.asm):01109                 BEQ     RAM5            ESCAPE, QUIT & RESTART MONITOR
EAE4 F67F9D           (     mon09v35.asm):01110                 LDB     DSPBUF+1        GET EXPECTED VALUE
EAE7 E184             (     mon09v35.asm):01111                 CMPB    ,X              DID IT KEEP ITS VALUE
EAE9 264E             (     mon09v35.asm):01112                 BNE     RAM7            NO, ERROR
EAEB 8601             (     mon09v35.asm):01113                 LDA     #%00000001      FIRST DATA VALUE
EAED A784             (     mon09v35.asm):01114         RAM3    STA     ,X              RESAVE IT
EAEF A184             (     mon09v35.asm):01115                 CMPA    ,X              SAME ?
EAF1 2613             (     mon09v35.asm):01116                 BNE     RAM6            FAILED
EAF3 48               (     mon09v35.asm):01117                 LSLA                    SHIFT THE BIT
EAF4 26F7             (     mon09v35.asm):01118                 BNE     RAM3            CONTINUE TILL ALL DONE
EAF6 5C               (     mon09v35.asm):01119         RAM4    INCB                    ADVANCE TO NEXT VALUE
EAF7 E780             (     mon09v35.asm):01120                 STB     ,X+             SAVE REGISTER
EAF9 BC7F7D           (     mon09v35.asm):01121                 CMPX    TEMP            ARE WE IN RANGE?
EAFC 23E1             (     mon09v35.asm):01122                 BLS     RAM2            YES, ITS OK
EAFE 20BF             (     mon09v35.asm):01123                 BRA     RAM1            AND RESTART
EB00 1702E4           (     mon09v35.asm):01124         RAM5    LBSR    LFCR            NEW LINE
EB03 16FACF           (     mon09v35.asm):01125                 LBRA    MAIN            AND RESTART MONITOR
                      (     mon09v35.asm):01126         ;* VERIFY OF LOCATION FAILED
EB06 3402             (     mon09v35.asm):01127         RAM6    PSHS    A               SAVE VALUE WRITTEN
EB08 1702B1           (     mon09v35.asm):01128                 LBSR    WRMSG           OUTPUT MESSAGE
EB0B 416464723A2000   (     mon09v35.asm):01129                 FCN             'Addr: '
EB12 1F10             (     mon09v35.asm):01130                 TFR     X,D             GET ADDRESS
EB14 17028B           (     mon09v35.asm):01131                 LBSR    WRDOUT          OUTPUT
EB17 1702A2           (     mon09v35.asm):01132                 LBSR    WRMSG           OUTPUT MESSAGE
EB1A 2C2057726F74653A (     mon09v35.asm):01133                 FCN             ', Wrote: '
     2000
EB24 3502             (     mon09v35.asm):01134                 PULS    A               RESTORE VALUE
EB26 17027D           (     mon09v35.asm):01135                 LBSR    HEXOUT          OUTPUT
EB29 170290           (     mon09v35.asm):01136                 LBSR    WRMSG           OUTPUT MESSAGE
EB2C 2C20526561643A20 (     mon09v35.asm):01137                 FCN             ', Read: '
     00
EB35 A684             (     mon09v35.asm):01138                 LDA     ,X              GET VALUE READ
EB37 2033             (     mon09v35.asm):01139                 BRA     RAM8            CONTINUE
                      (     mon09v35.asm):01140         ;* DATA WAS CORRUPTED BY OTHER WRITES
EB39 170280           (     mon09v35.asm):01141         RAM7    LBSR    WRMSG           OUTPUT MESSAGE
EB3C 416464723A2000   (     mon09v35.asm):01142                 FCN             'Addr: '
EB43 1F10             (     mon09v35.asm):01143                 TFR     X,D             GET ADDR
EB45 17025A           (     mon09v35.asm):01144                 LBSR    WRDOUT          OUTPUT
EB48 170271           (     mon09v35.asm):01145                 LBSR    WRMSG           OUTPUT MESSAGE
EB4B 2C20457870656374 (     mon09v35.asm):01146                 FCN             ', Expected: '
     65643A2000
EB58 B67F9D           (     mon09v35.asm):01147                 LDA     DSPBUF+1        GET VALUE
EB5B 170248           (     mon09v35.asm):01148                 LBSR    HEXOUT          OUTPUT
EB5E 17025B           (     mon09v35.asm):01149                 LBSR    WRMSG           OUTPUT MESSAGE
EB61 2C20526561643A20 (     mon09v35.asm):01150                 FCN             ', Read: '
     00
EB6A A684             (     mon09v35.asm):01151                 LDA     ,X              GET VALUE BACK
EB6C 170237           (     mon09v35.asm):01152         RAM8    LBSR    HEXOUT          OUTPUT VALUE
EB6F 170275           (     mon09v35.asm):01153                 LBSR    LFCR            NEW LINE
EB72 F67F9D           (     mon09v35.asm):01154                 LDB     DSPBUF+1        GET CORRECT NEXT VALUE
EB75 16FF7E           (     mon09v35.asm):01155                 LBRA    RAM4
                      (     mon09v35.asm):01156         ;*
                      (     mon09v35.asm):01157         ;* '+' - HEXIDECIMAL ADDITION
                      (     mon09v35.asm):01158         ;*
EB78                  (     mon09v35.asm):01159         HEXADD
EB78 1701A5           (     mon09v35.asm):01160                 LBSR    GETADR          GET FIRST VALUE
EB7B 3406             (     mon09v35.asm):01161                 PSHS    A,B                     SAVE IT
EB7D 862B             (     mon09v35.asm):01162                 LDA             #'+'            PLUS SIGN
EB7F 170286           (     mon09v35.asm):01163                 LBSR    PUTCHR          DISPLAY
EB82 17019B           (     mon09v35.asm):01164                 LBSR    GETADR          GET SECOND VALUE
EB85 E3E4             (     mon09v35.asm):01165                 ADDD    ,S                      PERFORM ADDITION
EB87 2013             (     mon09v35.asm):01166                 BRA             HEXSHO          DISPLAY IT
                      (     mon09v35.asm):01167         ;*
                      (     mon09v35.asm):01168         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (     mon09v35.asm):01169         ;*
EB89                  (     mon09v35.asm):01170         HEXSUB
EB89 170194           (     mon09v35.asm):01171                 LBSR    GETADR          GET FIRST
EB8C 3406             (     mon09v35.asm):01172                 PSHS    A,B                     SAVE IT
EB8E 862D             (     mon09v35.asm):01173                 LDA             #'-'            MINUS SIGN
EB90 170275           (     mon09v35.asm):01174                 LBSR    PUTCHR          DISPLAY
EB93 17018A           (     mon09v35.asm):01175                 LBSR    GETADR          GET SECOND ADDRESS
EB96 3406             (     mon09v35.asm):01176                 PSHS    A,B                     SAVE IT
EB98 EC62             (     mon09v35.asm):01177                 LDD             2,S                     GET FIRST VALUE
EB9A A3E1             (     mon09v35.asm):01178                 SUBD    ,S++            PERFORM SUBTRACTION
EB9C                  (     mon09v35.asm):01179         HEXSHO
EB9C EDE4             (     mon09v35.asm):01180                 STD             ,S                      SAVE RESULT
EB9E 863D             (     mon09v35.asm):01181                 LDA             #'='            EQUALS SIGN
EBA0 170265           (     mon09v35.asm):01182                 LBSR    PUTCHR          DISPLAY
EBA3 3506             (     mon09v35.asm):01183                 PULS    A,B                     RESTORE RESULT
EBA5 1701FA           (     mon09v35.asm):01184                 LBSR    WRDOUT          OUTPUT
EBA8 16023C           (     mon09v35.asm):01185                 LBRA    LFCR            NEW LINE & RETURN
                      (     mon09v35.asm):01186         ;*
                      (     mon09v35.asm):01187         ;* '?' - HELP COMMAND
                      (     mon09v35.asm):01188         ;*
EBAB                  (     mon09v35.asm):01189         HELP
EBAB 8EF9F3           (     mon09v35.asm):01190                 LDX             #HTEXT          POINT TO HELP TEXT
EBAE                  (     mon09v35.asm):01191         HLP1
EBAE C619             (     mon09v35.asm):01192                 LDB             #25                     COLUMN COUNTER
EBB0                  (     mon09v35.asm):01193         HLP2
EBB0 A680             (     mon09v35.asm):01194                 LDA             ,X+                     GET CHAR FROM TEXT
EBB2 2718             (     mon09v35.asm):01195                 BEQ             HLP4            EXIT THIS LINE
EBB4 817C             (     mon09v35.asm):01196                 CMPA    #'|'            SEPERATOR?
EBB6 2706             (     mon09v35.asm):01197                 BEQ             HLP3            YES, EXIT
EBB8 17024D           (     mon09v35.asm):01198                 LBSR    PUTCHR          OUTPUT
EBBB 5A               (     mon09v35.asm):01199                 DECB                            BACKUP
EBBC 20F2             (     mon09v35.asm):01200                 BRA             HLP2            NEXT
EBBE                  (     mon09v35.asm):01201         HLP3
EBBE 170220           (     mon09v35.asm):01202                 LBSR    SPACE           OUTPUT SPACE
EBC1 5A               (     mon09v35.asm):01203                 DECB                            REDUCE COUNT
EBC2 26FA             (     mon09v35.asm):01204                 BNE             HLP3            KEEP GOING
EBC4 1701F5           (     mon09v35.asm):01205                 LBSR    WRMSG           OUTPUT MESSAGE
EBC7 2D2000           (     mon09v35.asm):01206                 FCN             '- '            SEPERATOR
EBCA 20E4             (     mon09v35.asm):01207                 BRA             HLP2            AND CONTINUE
EBCC                  (     mon09v35.asm):01208         HLP4
EBCC 170218           (     mon09v35.asm):01209                 LBSR    LFCR            NEW LINE
EBCF 170254           (     mon09v35.asm):01210                 LBSR    CHKCHR          TEST FOR CHARACTER ENTERED
EBD2 2704             (     mon09v35.asm):01211                 BEQ             HLP5            IF SO, EXIT
EBD4 A684             (     mon09v35.asm):01212                 LDA             ,X                      IS THIS THE END?
EBD6 2AD6             (     mon09v35.asm):01213                 BPL             HLP1            NO, KEEP GOING
EBD8                  (     mon09v35.asm):01214         HLP5
EBD8 39               (     mon09v35.asm):01215                 RTS
                      (     mon09v35.asm):01216         
                      (     mon09v35.asm):01217         ;******************************************************************************
                      (     mon09v35.asm):01218         ;* 'T' - TRANSPARENT MODE
                      (     mon09v35.asm):01219         ;******************************************************************************
     EBD9             (     mon09v35.asm):01220         TMODE   EQU     *                       TERMINAL ROUTINE
EBD9                  (     mon09v35.asm):01221         TM1
EBD9 BE7F6B           (     mon09v35.asm):01222                 LDX             >UART1          POINT TO MAIN UART
EBDC                  (     mon09v35.asm):01223         TM2
EBDC 1711AA           (     mon09v35.asm):01224                 LBSR    READ            TEST FOR CHAR FROM TERMINAL
EBDF 260C             (     mon09v35.asm):01225                 BNE             TM3                     NONE, IGNORE
EBE1 811B             (     mon09v35.asm):01226                 CMPA    #$1B            ESCAPE?
EBE3 10270200         (     mon09v35.asm):01227                 LBEQ    LFCR            NEW LINE, AND RETURN
EBE7 BE7F6D           (     mon09v35.asm):01228                 LDX             >UART2          POINT TO UART 2
EBEA 1711AA           (     mon09v35.asm):01229                 LBSR    WRITE           OUTPUT TO AUX PORT
EBED                  (     mon09v35.asm):01230         TM3
EBED BE7F6D           (     mon09v35.asm):01231                 LDX             >UART2          POINT TO UART 2
EBF0 171196           (     mon09v35.asm):01232                 LBSR    READ            TEST FOR CHAR FROM AUX
EBF3 26E4             (     mon09v35.asm):01233                 BNE             TM1                     NONE, IGNORE
EBF5 BE7F6B           (     mon09v35.asm):01234                 LDX             >UART1          POINT TO UART 1
EBF8 17119C           (     mon09v35.asm):01235                 LBSR    WRITE           OUTPUT TO TERMINAL
EBFB 20DF             (     mon09v35.asm):01236                 BRA             TM2                     GET NEXT CHAR
                      (     mon09v35.asm):01237         
                      (     mon09v35.asm):01238         ;******************************************************************************
                      (     mon09v35.asm):01239         ;* 'L' - LOAD
                      (     mon09v35.asm):01240         ;******************************************************************************
EBFD                  (     mon09v35.asm):01241         LOAD
EBFD B67F6A           (     mon09v35.asm):01242                 LDA             IOCON                   GET I/O CONFIG
EC00 3402             (     mon09v35.asm):01243                 PSHS    A                               SAVE
EC02 1701E2           (     mon09v35.asm):01244                 LBSR    LFCR                    NEW LINE
EC05                  (     mon09v35.asm):01245         DLO1
EC05 7F7F6A           (     mon09v35.asm):01246                 CLR             IOCON                   INDICATE NO OUTPUT, READ UART
EC08 8D16             (     mon09v35.asm):01247                 BSR             DLOAD                   DOWNLOAD RECORD
EC0A 240C             (     mon09v35.asm):01248                 BCC             DLO2                    END
EC0C A6E4             (     mon09v35.asm):01249                 LDA             ,S                              GET OLD I/O CONFIG
EC0E B77F6A           (     mon09v35.asm):01250                 STA             IOCON                   RESET
EC11 862E             (     mon09v35.asm):01251                 LDA             #'.'                    GET DOT
EC13 1701F2           (     mon09v35.asm):01252                 LBSR    PUTCHR                  OUTPUT
EC16 20ED             (     mon09v35.asm):01253                 BRA             DLO1                    CONTINUE
EC18                  (     mon09v35.asm):01254         DLO2
EC18 3502             (     mon09v35.asm):01255                 PULS    A                               RESTORE A
EC1A B77F6A           (     mon09v35.asm):01256                 STA             IOCON                   SAVE
EC1D 1601C7           (     mon09v35.asm):01257                 LBRA    LFCR                    New line & return
                      (     mon09v35.asm):01258         ;
                      (     mon09v35.asm):01259         ;* Download a record in either MOTOROLA or INTEL hex format
EC20                  (     mon09v35.asm):01260         DLOAD
EC20 1701D0           (     mon09v35.asm):01261                 LBSR    GETCHR                  Get a character
EC23 813A             (     mon09v35.asm):01262                 CMPA    #':'                    Start of INTEL record?
EC25 2770             (     mon09v35.asm):01263                 BEQ             DLINT                   Yes, download INTEL
EC27 8153             (     mon09v35.asm):01264                 CMPA    #'S'                    Start of MOTOROLA record?
EC29 26F5             (     mon09v35.asm):01265                 BNE             DLOAD                   No, keep looking
                      (     mon09v35.asm):01266         ;
                      (     mon09v35.asm):01267         ;* Download a record in MOTOROLA hex format
EC2B                  (     mon09v35.asm):01268         DLMOT
EC2B 1701C5           (     mon09v35.asm):01269                 LBSR    GETCHR                  GET NEXT CHAR
EC2E 8130             (     mon09v35.asm):01270                 CMPA    #'0'                    HEADER RECORD?
EC30 27EE             (     mon09v35.asm):01271                 BEQ             DLOAD                   SKIP IT
EC32 8139             (     mon09v35.asm):01272                 CMPA    #'9'                    END OF FILE?
EC34 2760             (     mon09v35.asm):01273                 BEQ             DLEOF                   END OF FILE
EC36 8131             (     mon09v35.asm):01274                 CMPA    #'1'                    DATA RECORD?
EC38 2642             (     mon09v35.asm):01275                 BNE             LODERR                  LOAD ERROR
EC3A 17012A           (     mon09v35.asm):01276                 LBSR    GETBYT                  GET LENGTH
EC3D 263D             (     mon09v35.asm):01277                 BNE             LODERR                  Report error
EC3F B77F7D           (     mon09v35.asm):01278                 STA             TEMP                    START CHECKSUM
EC42 8003             (     mon09v35.asm):01279                 SUBA    #3                              CONVERT
EC44 B77F7E           (     mon09v35.asm):01280                 STA             TEMP+1                  Set length
EC47 17011D           (     mon09v35.asm):01281                 LBSR    GETBYT                  Get first byte of address
EC4A 2630             (     mon09v35.asm):01282                 BNE             LODERR                  Report error
EC4C 1F89             (     mon09v35.asm):01283                 TFR             A,B                             Save for later
EC4E BB7F7D           (     mon09v35.asm):01284                 ADDA    TEMP                    Include in checksum
EC51 B77F7D           (     mon09v35.asm):01285                 STA             TEMP                    Resave
EC54 170110           (     mon09v35.asm):01286                 LBSR    GETBYT                  Get next byte of address
EC57 2623             (     mon09v35.asm):01287                 BNE             LODERR                  Report error
EC59 1E89             (     mon09v35.asm):01288                 EXG             A,B                             Swap
EC5B 1F01             (     mon09v35.asm):01289                 TFR             D,X                             Set pointer
EC5D FB7F7D           (     mon09v35.asm):01290                 ADDB    TEMP                    Include in checksum
EC60 F77F7D           (     mon09v35.asm):01291                 STB             TEMP                    Resave checksum
EC63                  (     mon09v35.asm):01292         DLMOT1
EC63 170101           (     mon09v35.asm):01293                 LBSR    GETBYT                  Get a data byte
EC66 A780             (     mon09v35.asm):01294                 STA             ,X+                             Save in RAM
EC68 BB7F7D           (     mon09v35.asm):01295                 ADDA    TEMP                    Include checksum
EC6B B77F7D           (     mon09v35.asm):01296                 STA             TEMP                    Resave
EC6E 7A7F7E           (     mon09v35.asm):01297                 DEC             TEMP+1                  Reduce length
EC71 26F0             (     mon09v35.asm):01298                 BNE             DLMOT1                  Do them all
EC73 1700F1           (     mon09v35.asm):01299                 LBSR    GETBYT                  Get a byte
EC76 BB7F7D           (     mon09v35.asm):01300                 ADDA    TEMP                    Add computed checksum
EC79 4C               (     mon09v35.asm):01301                 INCA                                    Test for success
EC7A 2718             (     mon09v35.asm):01302                 BEQ             DLRTS                   Download OK
                      (     mon09v35.asm):01303         ;
                      (     mon09v35.asm):01304         ;* Error occured on loading
EC7C                  (     mon09v35.asm):01305         LODERR
EC7C 8603             (     mon09v35.asm):01306                 LDA             #3                              GET DEFAULT I/O
EC7E B77F6A           (     mon09v35.asm):01307                 STA             IOCON                   SET I/O
EC81 170138           (     mon09v35.asm):01308                 LBSR    WRMSG                   OUTPUT
EC84 203F4C6F61642065 (     mon09v35.asm):01309                 FCC             ' ?Load error'
     72726F72
EC90 FF               (     mon09v35.asm):01310                 FCB             $FF
EC91 16F941           (     mon09v35.asm):01311                 LBRA    MAIN                    BACK FOR COMMAND
                      (     mon09v35.asm):01312         ;
                      (     mon09v35.asm):01313         ;* Return indicating another record
EC94                  (     mon09v35.asm):01314         DLRTS
EC94 1A01             (     mon09v35.asm):01315                 ORCC    #$01                    SET 'C' FLAG
EC96                  (     mon09v35.asm):01316         DLEOF
                      (     mon09v35.asm):01317                 IFNE JQ_LDFIX
                      (     mon09v35.asm):01318                 JMP             DLEOF_E                 FINISH LAST EOF RECORD
                      (     mon09v35.asm):01319                 ELSE
EC96 39               (     mon09v35.asm):01320                 RTS                                             RETURN TO CALLER
                      (     mon09v35.asm):01321                 ENDC
                      (     mon09v35.asm):01322         ;
                      (     mon09v35.asm):01323         ;* Download record in INTEL format
EC97                  (     mon09v35.asm):01324         DLINT
EC97 1700CD           (     mon09v35.asm):01325                 LBSR    GETBYT                  Get count
EC9A 26E0             (     mon09v35.asm):01326                 BNE             LODERR                  Report error
EC9C B77F7D           (     mon09v35.asm):01327                 STA             TEMP                    Start checksum
EC9F B77F7E           (     mon09v35.asm):01328                 STA             TEMP+1                  Record length
ECA2 8100             (     mon09v35.asm):01329                 CMPA    #0                              Test & clear C
ECA4 27F0             (     mon09v35.asm):01330                 BEQ             DLEOF                   End of file
                      (     mon09v35.asm):01331         ;* Get address
ECA6 1700BE           (     mon09v35.asm):01332                 LBSR    GETBYT                  Get first byte of address
ECA9 26D1             (     mon09v35.asm):01333                 BNE             LODERR                  Report error
ECAB 1F89             (     mon09v35.asm):01334                 TFR             A,B                             Save for later
ECAD BB7F7D           (     mon09v35.asm):01335                 ADDA    TEMP                    Include in checksum
ECB0 B77F7D           (     mon09v35.asm):01336                 STA             TEMP                    Resave
ECB3 1700B1           (     mon09v35.asm):01337                 LBSR    GETBYT                  Get next byte of address
ECB6 26C4             (     mon09v35.asm):01338                 BNE             LODERR                  Report error
ECB8 1E89             (     mon09v35.asm):01339                 EXG             A,B                             Swap
ECBA 1F01             (     mon09v35.asm):01340                 TFR             D,X                             Set pointer
ECBC FB7F7D           (     mon09v35.asm):01341                 ADDB    TEMP                    Include in checksum
ECBF F77F7D           (     mon09v35.asm):01342                 STB             TEMP                    Resave checksum
                      (     mon09v35.asm):01343         ;* Get record type
ECC2 1700A2           (     mon09v35.asm):01344                 LBSR    GETBYT                  Get type value
ECC5 26B5             (     mon09v35.asm):01345                 BNE             LODERR                  Report error
ECC7 BB7F7D           (     mon09v35.asm):01346                 ADDA    TEMP                    Include checksum
ECCA B77F7D           (     mon09v35.asm):01347                 STA             TEMP                    Resave checksum
                      (     mon09v35.asm):01348         ;* Get data bytes
ECCD                  (     mon09v35.asm):01349         DLINT1
ECCD 170097           (     mon09v35.asm):01350                 LBSR    GETBYT                  Get data byte
ECD0 26AA             (     mon09v35.asm):01351                 BNE             LODERR                  Report error
ECD2 A780             (     mon09v35.asm):01352                 STA             ,X+                             Write to memory
ECD4 BB7F7D           (     mon09v35.asm):01353                 ADDA    TEMP                    Include checksum
ECD7 B77F7D           (     mon09v35.asm):01354                 STA             TEMP                    Resave checksum
ECDA 7A7F7E           (     mon09v35.asm):01355                 DEC             TEMP+1                  Reduce length
ECDD 26EE             (     mon09v35.asm):01356                 BNE             DLINT1                  Do them all
                      (     mon09v35.asm):01357         ;* Get checksum
ECDF BDED67           (     mon09v35.asm):01358                 JSR             GETBYT                  Read a byte
ECE2 2698             (     mon09v35.asm):01359                 BNE             LODERR                  Report error
ECE4 BB7F7D           (     mon09v35.asm):01360                 ADDA    TEMP                    Include checksum
ECE7 27AB             (     mon09v35.asm):01361                 BEQ             DLRTS                   Report success
ECE9 2091             (     mon09v35.asm):01362                 BRA             LODERR                  Report failure
                      (     mon09v35.asm):01363         ;*
                      (     mon09v35.asm):01364         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (     mon09v35.asm):01365         ;*
ECEB                  (     mon09v35.asm):01366         GETPC
ECEB 8D3A             (     mon09v35.asm):01367                 BSR             GETAD1          Get address
ECED 2710             (     mon09v35.asm):01368                 BEQ             GETPC1          Normal data
ECEF 8120             (     mon09v35.asm):01369                 CMPA    #' '            Space?
ECF1 2631             (     mon09v35.asm):01370                 BNE             GETERR          Report error
ECF3 1700C6           (     mon09v35.asm):01371                 LBSR    WRMSG           Output message
ECF6 2D3E00           (     mon09v35.asm):01372                 FCN             '->'            Display address
ECF9 FC7F79           (     mon09v35.asm):01373                 LDD             SAVPC           Get PC value
ECFC 1600A3           (     mon09v35.asm):01374                 LBRA    WRDOUT          Display
ECFF                  (     mon09v35.asm):01375         GETPC1
ECFF FD7F79           (     mon09v35.asm):01376                 STD             SAVPC           Set new PC
ED02 39               (     mon09v35.asm):01377                 RTS
                      (     mon09v35.asm):01378         ;*
                      (     mon09v35.asm):01379         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (     mon09v35.asm):01380         ;*
ED03                  (     mon09v35.asm):01381         GETRNG
ED03 8D1B             (     mon09v35.asm):01382                 BSR             GETADR          Get first address
ED05 1F01             (     mon09v35.asm):01383                 TFR             D,X                     Save in X
ED07 862C             (     mon09v35.asm):01384                 LDA             #','            Separator
ED09 1700FC           (     mon09v35.asm):01385                 LBSR    PUTCHR          Display
ED0C 8D19             (     mon09v35.asm):01386                 BSR             GETAD1          Get second address
ED0E 2786             (     mon09v35.asm):01387                 BEQ             DLEOF           Normal data
ED10 8120             (     mon09v35.asm):01388                 CMPA    #' '            Space?
ED12 2610             (     mon09v35.asm):01389                 BNE             GETERR          No, report error
ED14 1700A5           (     mon09v35.asm):01390                 LBSR    WRMSG           Output message
ED17 4646464600       (     mon09v35.asm):01391                 FCN             'FFFF'
ED1C CCFFFF           (     mon09v35.asm):01392                 LDD             #$FFFF          Assume top of RAM
ED1F 39               (     mon09v35.asm):01393                 RTS
                      (     mon09v35.asm):01394         ;*
                      (     mon09v35.asm):01395         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (     mon09v35.asm):01396         ;*
ED20                  (     mon09v35.asm):01397         GETADR
ED20 8D05             (     mon09v35.asm):01398                 BSR             GETAD1          Get word value
ED22 270F             (     mon09v35.asm):01399                 BEQ             GETAD2          Its OK
ED24                  (     mon09v35.asm):01400         GETERR
ED24 16F8EC           (     mon09v35.asm):01401                 LBRA    ERROR           Report error
                      (     mon09v35.asm):01402         ;* Get word value without error checking
ED27                  (     mon09v35.asm):01403         GETAD1
ED27 8D3E             (     mon09v35.asm):01404                 BSR             GETBYT          Get HIGH byte
ED29 2609             (     mon09v35.asm):01405                 BNE             GETAD3          Test for special register
ED2B 1F89             (     mon09v35.asm):01406                 TFR             A,B             Copy for later
ED2D 8D38             (     mon09v35.asm):01407                 BSR             GETBYT          Get LOW byte
ED2F 26F3             (     mon09v35.asm):01408                 BNE             GETERR          Report error
ED31 1E89             (     mon09v35.asm):01409                 EXG             A,B             Correct order
ED33                  (     mon09v35.asm):01410         GETAD2
ED33 39               (     mon09v35.asm):01411                 RTS
                      (     mon09v35.asm):01412         ;* Handle special register names
ED34                  (     mon09v35.asm):01413         GETAD3
ED34 3410             (     mon09v35.asm):01414                 PSHS    X               Save X
ED36 BE7F73           (     mon09v35.asm):01415                 LDX             SAVX            Assume X
ED39 8158             (     mon09v35.asm):01416                 CMPA    #'X'            Is it X?
ED3B 271C             (     mon09v35.asm):01417                 BEQ             GETAD4          Yes
ED3D BE7F75           (     mon09v35.asm):01418                 LDX             SAVY            Assume Y
ED40 8159             (     mon09v35.asm):01419                 CMPA    #'Y'            Is it Y?
ED42 2715             (     mon09v35.asm):01420                 BEQ             GETAD4          Yes
ED44 BE7F77           (     mon09v35.asm):01421                 LDX             SAVU            Assume U
ED47 8155             (     mon09v35.asm):01422                 CMPA    #'U'            Is it U?
ED49 270E             (     mon09v35.asm):01423                 BEQ             GETAD4          Yes
ED4B BE7F73           (     mon09v35.asm):01424                 LDX             SAVX            Assume S
ED4E 8153             (     mon09v35.asm):01425                 CMPA    #'S'            Is it S?
ED50 2707             (     mon09v35.asm):01426                 BEQ             GETAD4          Yes
ED52 BE7F79           (     mon09v35.asm):01427                 LDX             SAVPC           Assume PC?
ED55 8150             (     mon09v35.asm):01428                 CMPA    #'P'            Is it PC?
ED57 260C             (     mon09v35.asm):01429                 BNE             GETAD5          No, error
ED59                  (     mon09v35.asm):01430         GETAD4
ED59 863D             (     mon09v35.asm):01431                 LDA             #'='            Separator
ED5B 1700AA           (     mon09v35.asm):01432                 LBSR    PUTCHR          Echo it
ED5E 1F10             (     mon09v35.asm):01433                 TFR             X,D             D = value
ED60 8D40             (     mon09v35.asm):01434                 BSR             WRDOUT          Display it
ED62 4F               (     mon09v35.asm):01435                 CLRA                    Set 'Z'
ED63 1F10             (     mon09v35.asm):01436                 TFR             X,D             Get value back
ED65                  (     mon09v35.asm):01437         GETAD5
ED65 3590             (     mon09v35.asm):01438                 PULS    X,PC            Restore & return
                      (     mon09v35.asm):01439         
                      (     mon09v35.asm):01440         ;*
                      (     mon09v35.asm):01441         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (     mon09v35.asm):01442         ;*
ED67                  (     mon09v35.asm):01443         GETBYT
ED67 8D20             (     mon09v35.asm):01444                 BSR             GETNIB          Get FIRST nibble
ED69 2611             (     mon09v35.asm):01445                 BNE             GETB3           Invalid, test for quote
ED6B 48               (     mon09v35.asm):01446                 LSLA                            Rotate
ED6C 48               (     mon09v35.asm):01447                 LSLA                            into
ED6D 48               (     mon09v35.asm):01448                 LSLA                            high
ED6E 48               (     mon09v35.asm):01449                 LSLA                            nibble
ED6F 3402             (     mon09v35.asm):01450                 PSHS    A                       Save for later
ED71 8D16             (     mon09v35.asm):01451                 BSR             GETNIB          Get SECOND nibble
ED73 2604             (     mon09v35.asm):01452                 BNE             GETB2           Report error
ED75 AAE4             (     mon09v35.asm):01453                 ORA             ,S                      Include high
ED77                  (     mon09v35.asm):01454         GETB4
ED77 1A04             (     mon09v35.asm):01455                 ORCC    #$04            Indicate success (SET 'Z')
ED79                  (     mon09v35.asm):01456         GETB2
ED79 3261             (     mon09v35.asm):01457                 LEAS    1,S                     Skip saved value
ED7B                  (     mon09v35.asm):01458         GETB1
ED7B 39               (     mon09v35.asm):01459                 RTS
ED7C                  (     mon09v35.asm):01460         GETB3
ED7C 8127             (     mon09v35.asm):01461                 CMPA    #$27            Single quote?
ED7E 26FB             (     mon09v35.asm):01462                 BNE             GETB1           No, abort
ED80 170070           (     mon09v35.asm):01463                 LBSR    GETCHR          Get ASCII character
ED83 170082           (     mon09v35.asm):01464                 LBSR    PUTCHR          Echo on terminal
ED86 1A04             (     mon09v35.asm):01465                 ORCC    #$04            Indicate success (SET 'Z')
ED88 39               (     mon09v35.asm):01466                 RTS
                      (     mon09v35.asm):01467         
                      (     mon09v35.asm):01468                 IFNE JQ_LDFIX           not functional!
                      (     mon09v35.asm):01469         ;*
                      (     mon09v35.asm):01470         ;* EOF DETECTED, CONTINUE FETCHING BYTES TILL A CR OR LF
                      (     mon09v35.asm):01471         ;*  IS RECEIVED THEN RETURN TO CALLER
                      (     mon09v35.asm):01472         ;*
ED89                  (     mon09v35.asm):01473         DLEOF_E
                      (     mon09v35.asm):01474                 LBSR    GETCHR                  Get ASCII character
                      (     mon09v35.asm):01475                 CMPA    #$0D                    Is it a CR character?
                      (     mon09v35.asm):01476                 BEQ             DLEOF_E1                Yes, exit
                      (     mon09v35.asm):01477                 CMPA    #$0A                    Is it a LF character?
                      (     mon09v35.asm):01478                 BEQ             DLEOF_E1                Yes, exit
                      (     mon09v35.asm):01479                 BRA             DLEOF_E                 Loop till CR or LF recieved
ED89                  (     mon09v35.asm):01480         DLEOF_E1
                      (     mon09v35.asm):01481                 RTS                                             RETURN TO CALLER
                      (     mon09v35.asm):01482                 ENDC
                      (     mon09v35.asm):01483         ;*
                      (     mon09v35.asm):01484         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (     mon09v35.asm):01485         ;*
ED89                  (     mon09v35.asm):01486         GETNIB
ED89 170047           (     mon09v35.asm):01487                 LBSR    GETECH          Get character
ED8C 8030             (     mon09v35.asm):01488                 SUBA    #'0'            Convert numbers
ED8E 8109             (     mon09v35.asm):01489                 CMPA    #9                      Numeric?
ED90 230A             (     mon09v35.asm):01490                 BLS             GETN1           Yes, OK
ED92 8007             (     mon09v35.asm):01491                 SUBA    #7                      Convert alphas
ED94 810A             (     mon09v35.asm):01492                 CMPA    #$A                     Under?
ED96 2507             (     mon09v35.asm):01493                 BLO             GETN2           Yer, error
ED98 810F             (     mon09v35.asm):01494                 CMPA    #$F                     Over?
ED9A 2203             (     mon09v35.asm):01495                 BHI             GETN2           Yes, error
ED9C                  (     mon09v35.asm):01496         GETN1
ED9C 1A04             (     mon09v35.asm):01497                 ORCC    #$04            SET 'Z' FLAG, INDICATE OK
ED9E 39               (     mon09v35.asm):01498                 RTS
ED9F                  (     mon09v35.asm):01499         GETN2
ED9F 8B37             (     mon09v35.asm):01500                 ADDA    #$37            Normalize character + clear Z
EDA1 39               (     mon09v35.asm):01501                 RTS
                      (     mon09v35.asm):01502         ;*
                      (     mon09v35.asm):01503         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (     mon09v35.asm):01504         ;*
EDA2                  (     mon09v35.asm):01505         WRDOUT
EDA2 8D02             (     mon09v35.asm):01506                 BSR             HEXOUT          Output first byte
EDA4 1F98             (     mon09v35.asm):01507                 TFR             B,A                     Get second byte
                      (     mon09v35.asm):01508         ;*
                      (     mon09v35.asm):01509         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (     mon09v35.asm):01510         ;*
EDA6                  (     mon09v35.asm):01511         HEXOUT
EDA6 3402             (     mon09v35.asm):01512                 PSHS    A                       Save low nibble
EDA8 44               (     mon09v35.asm):01513                 LSRA                            Rotate
EDA9 44               (     mon09v35.asm):01514                 LSRA                            upper nibble
EDAA 44               (     mon09v35.asm):01515                 LSRA                            into
EDAB 44               (     mon09v35.asm):01516                 LSRA                            lower nibble
EDAC 8D02             (     mon09v35.asm):01517                 BSR             HOUT            Output high nibble
EDAE 3502             (     mon09v35.asm):01518                 PULS    A                       Restore low nibble
                      (     mon09v35.asm):01519         ;*
                      (     mon09v35.asm):01520         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (     mon09v35.asm):01521         ;*
EDB0                  (     mon09v35.asm):01522         HOUT
EDB0 840F             (     mon09v35.asm):01523                 ANDA    #$0F            Remove upper half
EDB2 8B30             (     mon09v35.asm):01524                 ADDA    #'0'            Convert to printable
EDB4 8139             (     mon09v35.asm):01525                 CMPA    #'9'            In range?
EDB6 2302             (     mon09v35.asm):01526                 BLS             HOUT1           Yes, display
EDB8 8B07             (     mon09v35.asm):01527                 ADDA    #7                      Convert to alpha
EDBA                  (     mon09v35.asm):01528         HOUT1
EDBA 204C             (     mon09v35.asm):01529                 BRA             PUTCHR          Output character
                      (     mon09v35.asm):01530         
                      (     mon09v35.asm):01531         ;******************************************************************************
                      (     mon09v35.asm):01532         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (     mon09v35.asm):01533         ;******************************************************************************
EDBC 3410             (     mon09v35.asm):01534         WRMSG   PSHS    X               SAVE X
EDBE AE62             (     mon09v35.asm):01535                 LDX     2,S             GET OLD PC
EDC0 8D04             (     mon09v35.asm):01536                 BSR     WRLIN           OUTPUT LINE
EDC2 AF62             (     mon09v35.asm):01537                 STX     2,S             UPDATE OLD PC
EDC4 3590             (     mon09v35.asm):01538                 PULS    X,PC            RESTORE X, RETURN
                      (     mon09v35.asm):01539         
                      (     mon09v35.asm):01540         ;******************************************************************************
                      (     mon09v35.asm):01541         ;* DISPLAY MESSAGE(X)
                      (     mon09v35.asm):01542         ;******************************************************************************
EDC6                  (     mon09v35.asm):01543         WRLIN
EDC6 A680             (     mon09v35.asm):01544                 LDA             ,X+                     GET CHAR FROM MESSAGE
EDC8 2708             (     mon09v35.asm):01545                 BEQ             WRLND           END, QUIT
EDCA 81FF             (     mon09v35.asm):01546                 CMPA    #$FF            NEWLINE END, LFCR & EXIT
EDCC 2719             (     mon09v35.asm):01547                 BEQ             LFCR            IF SO, NEW LINE, RETURN
EDCE 8D38             (     mon09v35.asm):01548                 BSR             PUTCHR          OUTPUT TO TERM
EDD0 20F4             (     mon09v35.asm):01549                 BRA             WRLIN           KEEP GOING
EDD2                  (     mon09v35.asm):01550         WRLND
EDD2 39               (     mon09v35.asm):01551                 RTS
                      (     mon09v35.asm):01552         
                      (     mon09v35.asm):01553         ;******************************************************************************
                      (     mon09v35.asm):01554         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (     mon09v35.asm):01555         ;******************************************************************************
EDD3                  (     mon09v35.asm):01556         GETECH
EDD3 8D1E             (     mon09v35.asm):01557                 BSR             GETCHR          GET CHARACTER
EDD5 8120             (     mon09v35.asm):01558                 CMPA    #' '            SPACE?
EDD7 23F9             (     mon09v35.asm):01559                 BLS             WRLND           IF < DON'T DISPLAY
EDD9 8161             (     mon09v35.asm):01560                 CMPA    #$61            LOWER CASE?
EDDB 252B             (     mon09v35.asm):01561                 BLO             PUTCHR          OK
EDDD 845F             (     mon09v35.asm):01562                 ANDA    #$5F            CONVERT TO UPPER
EDDF 2027             (     mon09v35.asm):01563                 BRA             PUTCHR          ECHO
                      (     mon09v35.asm):01564         
                      (     mon09v35.asm):01565         ;******************************************************************************
                      (     mon09v35.asm):01566         ;* DISPLAY A SPACE ON THE TERMINAL
                      (     mon09v35.asm):01567         ;******************************************************************************
EDE1                  (     mon09v35.asm):01568         SPACE
EDE1 3402             (     mon09v35.asm):01569                 PSHS    A               SAVE A
EDE3 8620             (     mon09v35.asm):01570                 LDA     #' '            GET SPACE
EDE5 2008             (     mon09v35.asm):01571                 BRA     LFC1            DISLAY AND GO HOME
                      (     mon09v35.asm):01572         
                      (     mon09v35.asm):01573         ;******************************************************************************
                      (     mon09v35.asm):01574         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (     mon09v35.asm):01575         ;******************************************************************************
EDE7                  (     mon09v35.asm):01576         LFCR
EDE7 3402             (     mon09v35.asm):01577                 PSHS    A                               SAVE
EDE9 860A             (     mon09v35.asm):01578                 LDA             #$0A                    GET LF
EDEB 8D1B             (     mon09v35.asm):01579                 BSR             PUTCHR                  OUTPUT
EDED 860D             (     mon09v35.asm):01580                 LDA             #$0D                    GET CR
EDEF                  (     mon09v35.asm):01581         LFC1
EDEF 8D17             (     mon09v35.asm):01582                 BSR             PUTCHR                  OUTPUT
EDF1 3582             (     mon09v35.asm):01583                 PULS    A,PC                    RESTORE AND GO HOME
                      (     mon09v35.asm):01584         
                      (     mon09v35.asm):01585         ;******************************************************************************
                      (     mon09v35.asm):01586         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (     mon09v35.asm):01587         ;******************************************************************************
EDF3                  (     mon09v35.asm):01588         GETCHR
EDF3 3410             (     mon09v35.asm):01589                 PSHS    X                               SAVE 'X'
EDF5 BE7F6B           (     mon09v35.asm):01590                 LDX             >UART1                  POINT TO CONSOLE
EDF8 B67F6A           (     mon09v35.asm):01591                 LDA             IOCON                   GET I/O CONFIG
EDFB 44               (     mon09v35.asm):01592                 LSRA                                    SHIFT TO CARRY
EDFC 2503             (     mon09v35.asm):01593                 BCS             GETC1                   READ FROM UART
EDFE BE7F6D           (     mon09v35.asm):01594                 LDX             >UART2                  POINT TO AUX UART
EE01                  (     mon09v35.asm):01595         GETC1
EE01 170F85           (     mon09v35.asm):01596                 LBSR    READ                    READ TERMINAL
EE04 26FB             (     mon09v35.asm):01597                 BNE             GETC1                   KEEP TRYING
EE06 3590             (     mon09v35.asm):01598                 PULS    X,PC
                      (     mon09v35.asm):01599         
                      (     mon09v35.asm):01600         ;******************************************************************************
                      (     mon09v35.asm):01601         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (     mon09v35.asm):01602         ;******************************************************************************
EE08                  (     mon09v35.asm):01603         PUTCHR
EE08 3416             (     mon09v35.asm):01604                 PSHS    A,B,X                   SAVE REGS
EE0A F67F6A           (     mon09v35.asm):01605                 LDB             IOCON                   GET I/O CONFIG
EE0D C502             (     mon09v35.asm):01606                 BITB    #2                              WRITE TO TERM?
EE0F 2706             (     mon09v35.asm):01607                 BEQ             PUT1                    NO, TRY UART
EE11 BE7F6B           (     mon09v35.asm):01608                 LDX             >UART1                  POINT TO UART1
EE14 170F80           (     mon09v35.asm):01609                 LBSR    WRITE                   OUTPUT TO TERMINAL
EE17                  (     mon09v35.asm):01610         PUT1
EE17 F67F6A           (     mon09v35.asm):01611                 LDB             IOCON                   INCASE CORRUPTED
EE1A C504             (     mon09v35.asm):01612                 BITB    #4                              WRITE TO UART?
EE1C 2706             (     mon09v35.asm):01613                 BEQ             PUT2                    NO, SKIP IT
EE1E BE7F6D           (     mon09v35.asm):01614                 LDX             >UART2                  POINT TO UART2
EE21 170F73           (     mon09v35.asm):01615                 LBSR    WRITE                   OUTPUT TO UART
EE24                  (     mon09v35.asm):01616         PUT2
EE24 3596             (     mon09v35.asm):01617                 PULS    A,B,X,PC                RESTORE AND GO HOME
                      (     mon09v35.asm):01618         
                      (     mon09v35.asm):01619         ;******************************************************************************
                      (     mon09v35.asm):01620         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (     mon09v35.asm):01621         ;* SCREEN OUTPUT FLOW CONTROL.
                      (     mon09v35.asm):01622         ;******************************************************************************
EE26                  (     mon09v35.asm):01623         CHKCHR
EE26 3410             (     mon09v35.asm):01624                 PSHS    X                               SAVE PTR
EE28 BE7F6B           (     mon09v35.asm):01625                 LDX             >UART1                  POINT TO CONSOLE UART
EE2B F67F6A           (     mon09v35.asm):01626                 LDB             IOCON                   GET I/O CONFIG
EE2E 2B07             (     mon09v35.asm):01627                 BMI             CHKC1                   ALREADY HELD
EE30 170F56           (     mon09v35.asm):01628                 LBSR    READ                    READ TERMINAL
EE33 8120             (     mon09v35.asm):01629                 CMPA    #' '                    SPACE?
EE35 2616             (     mon09v35.asm):01630                 BNE             CHKC3                   NO, IGNORE IT
EE37                  (     mon09v35.asm):01631         CHKC1
EE37 CA80             (     mon09v35.asm):01632                 ORB             #%10000000              SET HELD BIT
EE39 170F4D           (     mon09v35.asm):01633                 LBSR    READ                    GET KEY FROM CONSOLE
EE3C 8120             (     mon09v35.asm):01634                 CMPA    #' '                    SPACE?
EE3E 270A             (     mon09v35.asm):01635                 BEQ             CHKC2                   YES, ALLOW
EE40 C47F             (     mon09v35.asm):01636                 ANDB    #%01111111              DISABLE HELD BIT
EE42 810D             (     mon09v35.asm):01637                 CMPA    #$0D                    CARRIAGE RETURN?
EE44 2704             (     mon09v35.asm):01638                 BEQ             CHKC2                   ALLOW
EE46 811B             (     mon09v35.asm):01639                 CMPA    #$1B                    ESCAPE?
EE48 26ED             (     mon09v35.asm):01640                 BNE             CHKC1                   NO, IGNORE
EE4A                  (     mon09v35.asm):01641         CHKC2
EE4A F77F6A           (     mon09v35.asm):01642                 STB             IOCON                   RESAVE I/O CONFIG BYTE
EE4D                  (     mon09v35.asm):01643         CHKC3
EE4D 811B             (     mon09v35.asm):01644                 CMPA    #$1B                    TEST FOR ESCAPE CHARACTER
EE4F 3590             (     mon09v35.asm):01645                 PULS    X,PC
                      (     mon09v35.asm):01646         
                      (     mon09v35.asm):01647         ;******************************************************************************
                      (     mon09v35.asm):01648         ;* STEP ONE INSTRUCTION
                      (     mon09v35.asm):01649         ;******************************************************************************
EE51                  (     mon09v35.asm):01650         STEPDI
EE51 10BE7F79         (     mon09v35.asm):01651                 LDY             SAVPC                   GET PC
EE55 CE7F9C           (     mon09v35.asm):01652                 LDU             #DSPBUF                 GET INPUT BUFFER
EE58 170265           (     mon09v35.asm):01653                 LBSR    DISASS                  DISPLAY
EE5B 1F31             (     mon09v35.asm):01654                 TFR             U,X                             POINT TO IT
EE5D 17FF66           (     mon09v35.asm):01655                 LBSR    WRLIN                   DISPLAY
EE60 200A             (     mon09v35.asm):01656                 BRA             STEPCE                  AND PERFORM STEP
                      (     mon09v35.asm):01657         
                      (     mon09v35.asm):01658         ;******************************************************************************
                      (     mon09v35.asm):01659         ;* STEP WITHOUT DISPLAYING INSTRUCTION
                      (     mon09v35.asm):01660         ;******************************************************************************
EE62 10BE7F79         (     mon09v35.asm):01661         STEP    LDY     SAVPC           GET PROGRAM COUNTER
EE66 CE7F9C           (     mon09v35.asm):01662                 LDU     #DSPBUF         POINT TO FREE RAM FOR DISASEMBLY OUTPUT
EE69 170254           (     mon09v35.asm):01663                 LBSR    DISASS          PERFORM DISASSEMBLY
EE6C 10BF7F79         (     mon09v35.asm):01664         STEPCE  STY     SAVPC           SAVE NEW PC
EE70 FE7F80           (     mon09v35.asm):01665                 LDU     PTRSAV          GET POINTER BACK
EE73 ECC0             (     mon09v35.asm):01666                 LDD     ,U+             GET OPCODE
                      (     mon09v35.asm):01667         ;* TEST FOR LONG CONDITIONAL BRANCHES
EE75 8110             (     mon09v35.asm):01668         LCBRAN  CMPA    #$10            PREFIX?
EE77 2612             (     mon09v35.asm):01669                 BNE     LOBRAN          NO, GOT FOR IT
EE79 E6C4             (     mon09v35.asm):01670                 LDB     ,U              GET OPCODE
EE7B C122             (     mon09v35.asm):01671                 CMPB    #$22            IN RANGE?
EE7D 250C             (     mon09v35.asm):01672                 BLO     LOBRAN          NO
EE7F C12F             (     mon09v35.asm):01673                 CMPB    #$2F            IN RANGE?
EE81 2208             (     mon09v35.asm):01674                 BHI     LOBRAN          NO
EE83 A6C0             (     mon09v35.asm):01675                 LDA     ,U+             GET OPCOIDE BYTE
EE85 170216           (     mon09v35.asm):01676                 LBSR    TSTCON          TEST CONDITIONAL
EE88 2705             (     mon09v35.asm):01677                 BEQ     LBRAN1          YES, DO IT
EE8A 39               (     mon09v35.asm):01678                 RTS
                      (     mon09v35.asm):01679         ;* TEST FOR LONG BRANCHES
EE8B 8116             (     mon09v35.asm):01680         LOBRAN  CMPA    #$16            IS IT LBRA?
EE8D 2606             (     mon09v35.asm):01681                 BNE     LBRANS          NO, TRY LBSR
EE8F ECC1             (     mon09v35.asm):01682         LBRAN1  LDD     ,U++            GET OFFSET
EE91 30CB             (     mon09v35.asm):01683                 LEAX    D,U             PERFORM BRANCH
EE93 2034             (     mon09v35.asm):01684                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v35.asm):01685         ;* TEST FOR LONG BRANCH TO SUB
EE95 8117             (     mon09v35.asm):01686         LBRANS  CMPA    #$17            'LBSR'?
EE97 2606             (     mon09v35.asm):01687                 BNE     SCOBRA          NO, TRY SHORT CONDITIONALS
EE99 ECC1             (     mon09v35.asm):01688                 LDD     ,U++            GET OFFSET
EE9B 30CB             (     mon09v35.asm):01689                 LEAX    D,U             SET UP ADDRESS
EE9D 2020             (     mon09v35.asm):01690                 BRA     SAVSTK
                      (     mon09v35.asm):01691         ;* TEST FOR SHORT CONDITIONAL BRANCHES
EE9F 8122             (     mon09v35.asm):01692         SCOBRA  CMPA    #$22            < 'BHI'?
EEA1 250A             (     mon09v35.asm):01693                 BLO     SHBRAN          NO, TRY SHORT BRANCHES
EEA3 812F             (     mon09v35.asm):01694                 CMPA    #$2F            > 'BLE'?
EEA5 2206             (     mon09v35.asm):01695                 BHI     SHBRAN          NO, TRY SHORT BRANCHES
EEA7 1701F4           (     mon09v35.asm):01696                 LBSR    TSTCON          SEE OF CONDITIONAL IS OK
EEAA 2705             (     mon09v35.asm):01697                 BEQ     SBRAN1          YES, DO IT
EEAC 39               (     mon09v35.asm):01698                 RTS
                      (     mon09v35.asm):01699         ;* TEST FOR SHORT BRANCHES
EEAD 8120             (     mon09v35.asm):01700         SHBRAN  CMPA    #$20            SHORT BRANCH?
EEAF 2606             (     mon09v35.asm):01701                 BNE     SBRANS          NO, TRY SHORT BRANCH TO SUB
EEB1 E6C0             (     mon09v35.asm):01702         SBRAN1  LDB     ,U+             GET OFFSET
EEB3 30C5             (     mon09v35.asm):01703                 LEAX    B,U             EMULATE JUMP
EEB5 2012             (     mon09v35.asm):01704                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v35.asm):01705         ;* TEST FOR SHORT BRANCH TO SUBROUTINE
EEB7 818D             (     mon09v35.asm):01706         SBRANS  CMPA    #$8D            'BSR'?
EEB9 2612             (     mon09v35.asm):01707                 BNE     TSTTFR          NO, TRY TRANSFER
EEBB E6C0             (     mon09v35.asm):01708                 LDB     ,U+             GET OFFSET
EEBD 30C5             (     mon09v35.asm):01709                 LEAX    B,U             PERFORM BRANCH
EEBF 10BE7F7B         (     mon09v35.asm):01710         SAVSTK  LDY     SAVS            GET STACK POINTER
EEC3 EFA3             (     mon09v35.asm):01711                 STU     ,--Y            PUSH ADDRESS
EEC5 10BF7F7B         (     mon09v35.asm):01712                 STY     SAVS            RESAVE
EEC9 BF7F79           (     mon09v35.asm):01713         SAVNPC  STX     SAVPC           SAVE IT
EECC 39               (     mon09v35.asm):01714                 RTS
                      (     mon09v35.asm):01715         ;* TEST FOR TRANSFER
EECD 811F             (     mon09v35.asm):01716         TSTTFR  CMPA    #$1F            TRANSFER?
EECF 2620             (     mon09v35.asm):01717                 BNE     TSTEXG          NO, TRY EXCHANGE
EED1 8D01             (     mon09v35.asm):01718                 BSR     LOKREG          LOOKUP REGISTER
EED3 39               (     mon09v35.asm):01719                 RTS
                      (     mon09v35.asm):01720         ;* LOOKUP REGISTER, AND SIMULATE IF PC XFER OR EXCHANGE
EED4 A6C4             (     mon09v35.asm):01721         LOKREG  LDA     ,U              GET POSTBYTE
EED6 840F             (     mon09v35.asm):01722                 ANDA    #$0F            REMOVE HIGH REGISTER
EED8 8105             (     mon09v35.asm):01723                 CMPA    #5              IS IT PC?
EEDA 2610             (     mon09v35.asm):01724                 BNE     LOK1            NO, IT'S OK TO EXECUTE
EEDC A6C4             (     mon09v35.asm):01725                 LDA     ,U              GET REG POSTBYTE BACK
EEDE 44               (     mon09v35.asm):01726                 LSRA                    SHIFT
EEDF 44               (     mon09v35.asm):01727                 LSRA                    HIGH REGISTER
EEE0 44               (     mon09v35.asm):01728                 LSRA                    TO LOW (LEAVE X 2)
EEE1 8EF9AF           (     mon09v35.asm):01729         LOK2    LDX     #TFREGT         POINT TO TABLE
EEE4 840F             (     mon09v35.asm):01730                 ANDA    #$0F            INSURE WE GET VALID REG
EEE6 AE86             (     mon09v35.asm):01731                 LDX     A,X             GET ADDRESS OF VARIABLE
EEE8 EC84             (     mon09v35.asm):01732                 LDD     ,X              GET REGISTER VALUE
EEEA 202E             (     mon09v35.asm):01733                 BRA     STDPC           SAVE IT
EEEC 3262             (     mon09v35.asm):01734         LOK1    LEAS    2,S             SKIP LAST CALL
EEEE 160151           (     mon09v35.asm):01735                 LBRA    NOREXE          EXECUTE NORMAL INSTRUCTION
                      (     mon09v35.asm):01736         ;* TEST FOR EXCHANGE
EEF1 811E             (     mon09v35.asm):01737         TSTEXG  CMPA    #$1E            IS IT EXCHANGE
EEF3 2619             (     mon09v35.asm):01738                 BNE     TSTRTS          NO, TRY RTS
EEF5 10BE7F79         (     mon09v35.asm):01739                 LDY     SAVPC           GET OLD PC VALUE
EEF9 A6C4             (     mon09v35.asm):01740                 LDA     ,U              GET REGISTER
EEFB 84F0             (     mon09v35.asm):01741                 ANDA    #$F0            USE HIGH ONLY
EEFD 8150             (     mon09v35.asm):01742                 CMPA    #$50            IS PC FIRST?
EEFF 2607             (     mon09v35.asm):01743                 BNE     TSTE1           NO, SKIP
EF01 A6C4             (     mon09v35.asm):01744                 LDA     ,U              GET REG BACK
EF03 48               (     mon09v35.asm):01745                 LSLA                    DOUBLE
EF04 8DDB             (     mon09v35.asm):01746                 BSR     LOK2            GET ADDRESS OF REG TO SWAP WITH
EF06 2002             (     mon09v35.asm):01747                 BRA     TSTE2           PERFORM MOVE TO PC
EF08 8DCA             (     mon09v35.asm):01748         TSTE1   BSR     LOKREG          GET REGISTER SEE IF PC IS LOW REGISTER
EF0A 10AF84           (     mon09v35.asm):01749         TSTE2   STY     ,X              SAVE PC IN REGISTER
EF0D 39               (     mon09v35.asm):01750                 RTS
                      (     mon09v35.asm):01751         ;* TEST FOR 'RTS' INSTRUCTIONS
EF0E 8139             (     mon09v35.asm):01752         TSTRTS  CMPA    #$39            IS IT 'RTS'
EF10 260C             (     mon09v35.asm):01753                 BNE     TPULS           NO, TRY PULS
EF12 FE7F7B           (     mon09v35.asm):01754                 LDU     SAVS            POINT TO STACK
EF15 3706             (     mon09v35.asm):01755                 PULU    A,B             GET DATA
EF17 FF7F7B           (     mon09v35.asm):01756                 STU     SAVS            RESAVE SP
EF1A FD7F79           (     mon09v35.asm):01757         STDPC   STD     SAVPC
EF1D 39               (     mon09v35.asm):01758                 RTS
                      (     mon09v35.asm):01759         ;* TEST FOR 'PULS' INSTRUCTION
EF1E 8135             (     mon09v35.asm):01760         TPULS   CMPA    #$35            PULLING FROM S?
EF20 260D             (     mon09v35.asm):01761                 BNE     TPULU           NO, TRY PULU
EF22 BE7F7B           (     mon09v35.asm):01762                 LDX     SAVS            GET SAVED 'S' REG
EF25 108EF9BB         (     mon09v35.asm):01763                 LDY     #PULSTAB        POINT TO TABLE
EF29 8D15             (     mon09v35.asm):01764                 BSR     DOPUL           PERFORM PULL
EF2B BF7F7B           (     mon09v35.asm):01765                 STX     SAVS            RESAVE NEW 'S' REGISTER
EF2E 39               (     mon09v35.asm):01766                 RTS
                      (     mon09v35.asm):01767         ;* TEST FOR A 'PULU' INSTRUCTION
EF2F 8137             (     mon09v35.asm):01768         TPULU   CMPA    #$37            IS IT 'PULU'?
EF31 262E             (     mon09v35.asm):01769                 BNE     JSREXT          NO, TRY JSR EXTENDED
EF33 BE7F77           (     mon09v35.asm):01770                 LDX     SAVU            GET SAVED 'U'
EF36 108EF9CB         (     mon09v35.asm):01771                 LDY     #PULUTAB        POINT TO TABLE
EF3A 8D04             (     mon09v35.asm):01772                 BSR     DOPUL           PERFORM PULL
EF3C BF7F77           (     mon09v35.asm):01773                 STX     SAVU            RESAVE 'S'
EF3F 39               (     mon09v35.asm):01774                 RTS
                      (     mon09v35.asm):01775         ;* PERFORM PUL OPERATIONS
EF40 A6C4             (     mon09v35.asm):01776         DOPUL   LDA     ,U              GET POSTBYTE
EF42 C604             (     mon09v35.asm):01777                 LDB     #4              TEST FOR FIRST FOUR BITS (8 BIT REG)
EF44 5A               (     mon09v35.asm):01778         DOPUL1  DECB                    DECREMENT COUNT
EF45 44               (     mon09v35.asm):01779                 LSRA                    SHIFT
EF46 2413             (     mon09v35.asm):01780                 BCC     DOPUL2          NOTHING, GO AGAIN
EF48 3406             (     mon09v35.asm):01781                 PSHS    A,B             SAVE REGS
EF4A 5D               (     mon09v35.asm):01782                 TSTB                    ARE WE INTO 16 BITS?
EF4B 2B06             (     mon09v35.asm):01783                 BMI     PUL16           YES, PERFORM 16 BITS
EF4D A680             (     mon09v35.asm):01784                 LDA     ,X+             PULL A BYTE
EF4F A7B1             (     mon09v35.asm):01785                 STA     [,Y++]          SAVE IN REGISTER
EF51 2004             (     mon09v35.asm):01786                 BRA     DOPUL3          GO AGAIN
EF53 EC81             (     mon09v35.asm):01787         PUL16   LDD     ,X++            GET 16 BIT VALUE
EF55 EDB1             (     mon09v35.asm):01788                 STD     [,Y++]          SAVE IN REGISTER
EF57 3506             (     mon09v35.asm):01789         DOPUL3  PULS    A,B             RESTORE
EF59 20E9             (     mon09v35.asm):01790                 BRA     DOPUL1          CONTINUE
EF5B 3122             (     mon09v35.asm):01791         DOPUL2  LEAY    2,Y             ADVANCE
EF5D 4D               (     mon09v35.asm):01792                 TSTA                    ARE WE CONE
EF5E 26E4             (     mon09v35.asm):01793                 BNE     DOPUL1          CONTINUE
EF60 39               (     mon09v35.asm):01794                 RTS
                      (     mon09v35.asm):01795         ;* TEST FOR 'JSR' EXTENDED
EF61 81BD             (     mon09v35.asm):01796         JSREXT  CMPA    #$BD            IS IT EXTENDED JSR
EF63 2604             (     mon09v35.asm):01797                 BNE     JMPEXT          NO, TRY JUMP EXTENDED
EF65 8D06             (     mon09v35.asm):01798                 BSR     DJMPEX          FAKE JUMP
EF67 2021             (     mon09v35.asm):01799                 BRA     PSHPC           SAVE PC
                      (     mon09v35.asm):01800         ;* TEST FOR 'JMP' EXTENDED
EF69 817E             (     mon09v35.asm):01801         JMPEXT  CMPA    #$7E            IS IT JMP EXTENDED?
EF6B 2604             (     mon09v35.asm):01802                 BNE     JSRDIR          NO, TRY JMP DIRECT
EF6D ECC1             (     mon09v35.asm):01803         DJMPEX  LDD     ,U++            GET ADDRESS
EF6F 20A9             (     mon09v35.asm):01804                 BRA     STDPC           SAVE IT
                      (     mon09v35.asm):01805         ;* TEST FOR 'JSR' DIRECT
EF71 819D             (     mon09v35.asm):01806         JSRDIR  CMPA    #$9D            'JSR' DIRECT PAGE?
EF73 2604             (     mon09v35.asm):01807                 BNE     JMPDIR          NO, TRY JUMP
EF75 8D06             (     mon09v35.asm):01808                 BSR     DJMPDI          DO IT
EF77 2011             (     mon09v35.asm):01809                 BRA     PSHPC           SAVE PC
                      (     mon09v35.asm):01810         ;* TEST FOR 'JMP' DIRECT PAGE
EF79 810E             (     mon09v35.asm):01811         JMPDIR  CMPA    #$0E            IS IT JUMP DIRECT PAGE?
EF7B 2607             (     mon09v35.asm):01812                 BNE     JSRIND          NO, TRY JUMP INDEXED
EF7D E6C0             (     mon09v35.asm):01813         DJMPDI  LDB     ,U+             GET LOW ADDRESS
EF7F B67F72           (     mon09v35.asm):01814                 LDA     SAVDP           GET DIRECT PAGE
EF82 2096             (     mon09v35.asm):01815                 BRA     STDPC           SAVE IT
                      (     mon09v35.asm):01816         ;* TEST FOR 'JSR' INDEXED
EF84 81AD             (     mon09v35.asm):01817         JSRIND  CMPA    #$AD            IS IT 'JSR' INDEXED?
EF86 260B             (     mon09v35.asm):01818                 BNE     JMPIND          NO, TRY NEXT
EF88 8D0F             (     mon09v35.asm):01819                 BSR     DJMPIN          DO IT
EF8A BE7F7B           (     mon09v35.asm):01820         PSHPC   LDX     SAVS            GET ADDRESS
EF8D EF83             (     mon09v35.asm):01821                 STU     ,--X            SAVE
EF8F BF7F7B           (     mon09v35.asm):01822                 STX     SAVS            RESAVE
EF92 39               (     mon09v35.asm):01823                 RTS
                      (     mon09v35.asm):01824         ;* TEST FOR 'JMP' INDEXED
EF93 816E             (     mon09v35.asm):01825         JMPIND  CMPA    #$6E            IS IT JUMP INDEXED?
EF95 102600A9         (     mon09v35.asm):01826                 LBNE    NOREXE          NO, NON-TRANSFER INSTRUCTION
                      (     mon09v35.asm):01827         ;* FIRST POINT Y AT REGISTER INVOLVED
EF99 A6C0             (     mon09v35.asm):01828         DJMPIN  LDA     ,U+             GET POSTBYTE
EF9B 3402             (     mon09v35.asm):01829                 PSHS    A               SAVE IT
EF9D 8460             (     mon09v35.asm):01830                 ANDA    #%01100000      SAVE ONLY REGISTER
EF9F 44               (     mon09v35.asm):01831                 LSRA                    CONVERT
EFA0 44               (     mon09v35.asm):01832                 LSRA                    REGISTER
EFA1 44               (     mon09v35.asm):01833                 LSRA                    INTO INDEX VALUE
EFA2 44               (     mon09v35.asm):01834                 LSRA                    SHIFT IT OVER
EFA3 8EF9B1           (     mon09v35.asm):01835                 LDX     #INDTAB         POINT TO TABLE
EFA6 10AE86           (     mon09v35.asm):01836                 LDY     A,X             GET REGISTER ADDRESS
EFA9 10BF7F7D         (     mon09v35.asm):01837                 STY     TEMP            SAVE FOR INC/DEC
EFAD 10AEA4           (     mon09v35.asm):01838                 LDY     ,Y              GET REGISTER CONTENTS
EFB0 A6E4             (     mon09v35.asm):01839                 LDA     ,S              GET POSTBYTE BACK
EFB2 2B0C             (     mon09v35.asm):01840                 BMI     NOT5BO          NOT A FIVE BIT OFFSET
                      (     mon09v35.asm):01841         ;* FIVE BIT REGISTER OFFSET
EFB4 841F             (     mon09v35.asm):01842                 ANDA    #%00011111      SAVE ONLY OFFSET
EFB6 8110             (     mon09v35.asm):01843                 CMPA    #%00010000      NEGATIVE?
EFB8 2502             (     mon09v35.asm):01844                 BLO     SINOK           NO, IT'S OK
EFBA 8AE0             (     mon09v35.asm):01845                 ORA     #%11100000      CONVERT TO NEGATIVE
EFBC 30A6             (     mon09v35.asm):01846         SINOK   LEAX    A,Y             GET ADDRESS
EFBE 205E             (     mon09v35.asm):01847                 BRA     XSAVPC          SAVE IT
                      (     mon09v35.asm):01848         ;* TEST FOR NO OFFSET
EFC0 848F             (     mon09v35.asm):01849         NOT5BO  ANDA    #%10001111      REMOVE REGISTER & INDIRECT BIT
EFC2 8184             (     mon09v35.asm):01850                 CMPA    #$84            NO OFFSET?
EFC4 2604             (     mon09v35.asm):01851                 BNE     TOFF8           NO, TRY OFFSET OF 8
EFC6 1F21             (     mon09v35.asm):01852                 TFR     Y,X             COPY
EFC8 2054             (     mon09v35.asm):01853                 BRA     XSAVPC          SAVE IT
                      (     mon09v35.asm):01854         ;* TEST FOR EIGHT BIT OFFSET
EFCA 8188             (     mon09v35.asm):01855         TOFF8   CMPA    #$88            8 BIT OFSET?
EFCC 2604             (     mon09v35.asm):01856                 BNE     TOFF16          NO, TRY 16 BIT OFFSET
EFCE E6C0             (     mon09v35.asm):01857                 LDB     ,U+             GET OFFSET
EFD0 201A             (     mon09v35.asm):01858                 BRA     BSAVOF          GO FOR IT
                      (     mon09v35.asm):01859         ;* TEST FOR 16 BIT OFFSET
EFD2 8189             (     mon09v35.asm):01860         TOFF16  CMPA    #$89            16 BIT OFFSET?
EFD4 2606             (     mon09v35.asm):01861                 BNE     TOFFA           TRY A ACCUMULATOR OFFSET
EFD6 ECC0             (     mon09v35.asm):01862                 LDD     ,U+             GET OFFSET
EFD8 30AB             (     mon09v35.asm):01863                 LEAX    D,Y             DO IT
EFDA 2042             (     mon09v35.asm):01864                 BRA     XSAVPC          SAVE IT
                      (     mon09v35.asm):01865         ;* TEST FOR ACCA OFFSET
EFDC 8186             (     mon09v35.asm):01866         TOFFA   CMPA    #$86            OFFSET BY ACCA
EFDE 2605             (     mon09v35.asm):01867                 BNE     TOFFB           NO, TRY B
EFE0 F67F70           (     mon09v35.asm):01868                 LDB     SAVA            GET ACCA
EFE3 2007             (     mon09v35.asm):01869                 BRA     BSAVOF          SAVE IT
                      (     mon09v35.asm):01870         ;* TEST FOR ACCB OFFSET
EFE5 8185             (     mon09v35.asm):01871         TOFFB   CMPA    #$85            B OFFSET
EFE7 2607             (     mon09v35.asm):01872                 BNE     TOFFD           NO, TRY D OFFSET
EFE9 F67F71           (     mon09v35.asm):01873                 LDB     SAVB            GET B
EFEC 30A5             (     mon09v35.asm):01874         BSAVOF  LEAX    B,Y             DO OFFSET
EFEE 202E             (     mon09v35.asm):01875                 BRA     XSAVPC          SAVE IT
                      (     mon09v35.asm):01876         ;* TEST FOR ACCD OFFSET
EFF0 818B             (     mon09v35.asm):01877         TOFFD   CMPA    #$8B            IS IT D OFFSET?
EFF2 2607             (     mon09v35.asm):01878                 BNE     TAINC1          NO, TRY AUTO INC
EFF4 FC7F70           (     mon09v35.asm):01879                 LDD     SAVA            GET D ACCUMULATOR
EFF7 30AB             (     mon09v35.asm):01880                 LEAX    D,Y             DO IT
EFF9 2023             (     mon09v35.asm):01881                 BRA     XSAVPC          SAVE IT
                      (     mon09v35.asm):01882         ;* TEST FOR AUTO INCREMENT
EFFB 8180             (     mon09v35.asm):01883         TAINC1  CMPA    #$80            AUTO INC BY 1?
EFFD 2604             (     mon09v35.asm):01884                 BNE     TAINC2          NO, TRY AUTO INC BY 2
EFFF 30A0             (     mon09v35.asm):01885                 LEAX    ,Y+             GET ADDRESS
F001 2016             (     mon09v35.asm):01886                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v35.asm):01887         ;* TEST FOR DOUBLE AUTO INCREMENT
F003 8181             (     mon09v35.asm):01888         TAINC2  CMPA    #$81            AUTO INC BY 1?
F005 2604             (     mon09v35.asm):01889                 BNE     TADEC1          NO, TRY AUTO DEC
F007 30A1             (     mon09v35.asm):01890                 LEAX    ,Y++            GET ADDRESS
F009 200E             (     mon09v35.asm):01891                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v35.asm):01892         ;* TEST FOR AUTO DECREMENT
F00B 8182             (     mon09v35.asm):01893         TADEC1  CMPA    #$82            AUTO DEC?
F00D 2604             (     mon09v35.asm):01894                 BNE     TADEC2          NO, TRY AUTO DEC BY TWO
F00F 30A2             (     mon09v35.asm):01895                 LEAX    ,-Y             GET ADDRESS
F011 2006             (     mon09v35.asm):01896                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v35.asm):01897         ;* TEST FOR DOUBLE AUTO DECREMENT
F013 8183             (     mon09v35.asm):01898         TADEC2  CMPA    #$83            DOUBLE AUTO DEC.
F015 2609             (     mon09v35.asm):01899                 BNE     TPCO8           NO, TRY PC OFFSET
F017 30A3             (     mon09v35.asm):01900                 LEAX    ,--Y            GET OFFSET
F019 10AF9F7F7D       (     mon09v35.asm):01901         RSVREG  STY     [TEMP]          RESAVE REGISTER CONTENTS
F01E 2016             (     mon09v35.asm):01902         XSAVPC  BRA     SAVXPC          SAVE NEW PC
                      (     mon09v35.asm):01903         ;* TEST FOR EIGHT BIT OFFSET FROM PCR
F020 818C             (     mon09v35.asm):01904         TPCO8   CMPA    #$8C            8 BIT PC RELATIVE?
F022 2606             (     mon09v35.asm):01905                 BNE     TPCO16          NO, TRY 16 BIT PC RELATIVE
F024 E6C0             (     mon09v35.asm):01906                 LDB     ,U+             GET BYTE
F026 30C5             (     mon09v35.asm):01907                 LEAX    B,U             OFFSET IT
F028 200C             (     mon09v35.asm):01908                 BRA     SAVXPC          RESAVE PC
                      (     mon09v35.asm):01909         ;* TEST FOR 16 BIT OFFSET FROM PCR
F02A 818D             (     mon09v35.asm):01910         TPCO16  CMPA    #$8D            16 BIT OFFSET
F02C 2606             (     mon09v35.asm):01911                 BNE     TEIND           NO, TRY EXTENDED INDIRECT
F02E ECC1             (     mon09v35.asm):01912                 LDD     ,U++            GET VALUE
F030 30CB             (     mon09v35.asm):01913                 LEAX    D,U             POINT TO NEW LOCATION
F032 2002             (     mon09v35.asm):01914                 BRA     SAVXPC          RESAVE
                      (     mon09v35.asm):01915         ;* EXTENDED ADDRESSING VIA INDEXED POSTBYTE
F034 AEC1             (     mon09v35.asm):01916         TEIND   LDX     ,U++            GET ADDRESS
                      (     mon09v35.asm):01917         ;* SET SAVED PC TO CALCULATED ADDRESS (IN 'X').
                      (     mon09v35.asm):01918         ;* CHECK FOR & PERFORM INDIRECTION IF REQUIRED
F036 3502             (     mon09v35.asm):01919         SAVXPC  PULS    A               RESTORE POSTBYTE
F038 8510             (     mon09v35.asm):01920                 BITA    #%00010000      INDIRECT ADDRESSING?
F03A 2702             (     mon09v35.asm):01921                 BEQ     NINXIN          NOT INDIRECT
F03C AE84             (     mon09v35.asm):01922                 LDX     ,X              PERFORM A LEVEL OF INDIRECTION
F03E BF7F79           (     mon09v35.asm):01923         NINXIN  STX     SAVPC           SAVE IT
F041 39               (     mon09v35.asm):01924                 RTS
                      (     mon09v35.asm):01925         ;* NORMAL EXECUTABLE INSTRUCTION, COPY IT INTO OUR RAM, THEN EXECUTE IT
F042 335F             (     mon09v35.asm):01926         NOREXE  LEAU    -1,U            BACKUP TO INSTRUCTION
F044 8E7FCE           (     mon09v35.asm):01927                 LDX     #INSRAM         POINT TO RAM FOR INSTRUCTION
                      (     mon09v35.asm):01928         ;* COPY INSTRUCTION INTO RAM
F047 11B37F79         (     mon09v35.asm):01929         NORE1   CMPU    SAVPC           ARE WE THERE
F04B 2406             (     mon09v35.asm):01930                 BHS     NORE2           END OF INSTRUCTION
F04D A6C0             (     mon09v35.asm):01931                 LDA     ,U+             GET DATA
F04F A780             (     mon09v35.asm):01932                 STA     ,X+             SAVE IN RAM
F051 20F4             (     mon09v35.asm):01933                 BRA     NORE1           CONTINUE
                      (     mon09v35.asm):01934         ;* INSERT A JUMP AFTER IT
F053 867E             (     mon09v35.asm):01935         NORE2   LDA     #$7E            GET 'JMP' EXTENDED INSTRUCTION
F055 A780             (     mon09v35.asm):01936                 STA     ,X+             SAVE IT
F057 CCF07E           (     mon09v35.asm):01937                 LDD     #NORE3          POINT AT ADDRESS TO JUMP TO
F05A ED84             (     mon09v35.asm):01938                 STD     ,X              SAVE IT
F05C 10FF7F7D         (     mon09v35.asm):01939                 STS     TEMP            SAVE SP
F060 10FE7F7B         (     mon09v35.asm):01940                 LDS     SAVS            RESTORE STACK POINTER
F064 B67F6F           (     mon09v35.asm):01941                 LDA     SAVCC           GET CC
F067 F67F72           (     mon09v35.asm):01942                 LDB     SAVDP           GET DP
F06A 3406             (     mon09v35.asm):01943                 PSHS    A,B             SAVE CC AND DP
F06C FC7F70           (     mon09v35.asm):01944                 LDD     SAVA            RESTORE A, B
F06F BE7F73           (     mon09v35.asm):01945                 LDX     SAVX            RESTORE X
F072 10BE7F75         (     mon09v35.asm):01946                 LDY     SAVY            RESTORE Y
F076 FE7F77           (     mon09v35.asm):01947                 LDU     SAVU            RESTORE U
F079 3509             (     mon09v35.asm):01948                 PULS    CC,DP           RESTORE CC AND DP
F07B 7E7FCE           (     mon09v35.asm):01949                 JMP     INSRAM          EXECUTE INSTRUCTION
                      (     mon09v35.asm):01950         ;* INSTRUCTION SHOULD RETURN TO HERE
F07E 3409             (     mon09v35.asm):01951         NORE3   PSHS    CC,DP           SAVE REGS
F080 FD7F70           (     mon09v35.asm):01952                 STD     SAVA            SAVE REGS
F083 BF7F73           (     mon09v35.asm):01953                 STX     SAVX            SAVE X
F086 10BF7F75         (     mon09v35.asm):01954                 STY     SAVY            SAVE Y
F08A FF7F77           (     mon09v35.asm):01955                 STU     SAVU            SAVE U
F08D 3506             (     mon09v35.asm):01956                 PULS    A,B             GET REGS BACK
F08F B77F6F           (     mon09v35.asm):01957                 STA     SAVCC           SAVE CC
F092 F77F72           (     mon09v35.asm):01958                 STB     SAVDP           SAVE DP
F095 10FF7F7B         (     mon09v35.asm):01959                 STS     SAVS            SAVE STACK POINTER
F099 10FE7F7D         (     mon09v35.asm):01960                 LDS     TEMP            RESTORE OUR STACK
F09D 39               (     mon09v35.asm):01961                 RTS
                      (     mon09v35.asm):01962         ;*
                      (     mon09v35.asm):01963         ;* SUBROUTINE TO EVALUATE CONDITIONAL BRANCH OPCODES, AND DETERMINE
                      (     mon09v35.asm):01964         ;* IF THEY ARE TO BE EXECUTED
                      (     mon09v35.asm):01965         ;*
F09E C603             (     mon09v35.asm):01966         TSTCON  LDB     #3              TEST FOR THREE CONDITIONALS
F0A0 812F             (     mon09v35.asm):01967                 CMPA    #$2F            IS IT 'BLE'?
F0A2 2602             (     mon09v35.asm):01968                 BNE     TSTC0           NO, ITS NORMAL
F0A4 C606             (     mon09v35.asm):01969                 LDB     #6              HANDLE WRETCHED 'BLE' CASE
F0A6 8022             (     mon09v35.asm):01970         TSTC0   SUBA    #$22            CONVERT OPCODE TO SIMPLE INDEX
F0A8 48               (     mon09v35.asm):01971                 LSLA                    ROTATE..
F0A9 48               (     mon09v35.asm):01972                 LSLA                    TWICE FOR FOUR BYTE ENTRIES
F0AA 8EF974           (     mon09v35.asm):01973                 LDX     #CONTAB         POINT TO TABLE
F0AD 3086             (     mon09v35.asm):01974                 LEAX    A,X             ADVANCE TO TABLE ENTRY
F0AF B67F6F           (     mon09v35.asm):01975                 LDA     SAVCC           GET CONDITION CODES
F0B2 A480             (     mon09v35.asm):01976                 ANDA    ,X+             MASK OUT NON-APPLICABLE ONES
F0B4 A180             (     mon09v35.asm):01977         TSTC1   CMPA    ,X+             DOES IT MATCH?
F0B6 2706             (     mon09v35.asm):01978                 BEQ     TSTC2           IT'S OK
F0B8 5A               (     mon09v35.asm):01979                 DECB                    REDUCE COUNT
F0B9 26F9             (     mon09v35.asm):01980                 BNE     TSTC1           CONTINUE
F0BB 86FF             (     mon09v35.asm):01981                 LDA     #255            INDICATE CONDITIONAL NOT MET
F0BD 39               (     mon09v35.asm):01982                 RTS
F0BE 4F               (     mon09v35.asm):01983         TSTC2   CLRA                    INDICATE CONDITIONAL MET
F0BF 39               (     mon09v35.asm):01984                 RTS
                      (     mon09v35.asm):01985         ;*
                      (     mon09v35.asm):01986         ;* DISASSEMBLE OPCODE POINTED TO BY Y. PLACE IN OUTPUT BUFFER POINTED TO BY U
                      (     mon09v35.asm):01987         ;*
F0C0 10BF7F80         (     mon09v35.asm):01988         DISASS  STY     PTRSAV          SAVE INSTRUCTION POINTER
F0C4 3440             (     mon09v35.asm):01989                 PSHS    U               SAVE INST POINTER
F0C6 CC201A           (     mon09v35.asm):01990                 LDD     #$2000+26       GET SPACE+NUMBER OF BYTES TO CLEAR
F0C9 A7C0             (     mon09v35.asm):01991         DISA1   STA     ,U+             SET A SPACE
F0CB 5A               (     mon09v35.asm):01992                 DECB                    REDUCE COUNT
F0CC 26FB             (     mon09v35.asm):01993                 BNE     DISA1           CONTINUE
F0CE 8EF436           (     mon09v35.asm):01994                 LDX     #OPTAB1         POINT TO GENERAL OPCODE TABLE
F0D1 A6A4             (     mon09v35.asm):01995                 LDA     ,Y              GET DATA BYTE
F0D3 8110             (     mon09v35.asm):01996                 CMPA    #$10            PREFIX BYTE?
F0D5 2709             (     mon09v35.asm):01997                 BEQ     SETOP2          NEW TABLE
F0D7 8111             (     mon09v35.asm):01998                 CMPA    #$11            OTHER PREFIX BYTE
F0D9 260A             (     mon09v35.asm):01999                 BNE     OPFIND          NO, IT'S OK
F0DB 8EF745           (     mon09v35.asm):02000                 LDX     #OPTAB3         POINT TO THIRD TABLE
F0DE 2003             (     mon09v35.asm):02001                 BRA     OPFNXT          OK
F0E0 8EF6D0           (     mon09v35.asm):02002         SETOP2  LDX     #OPTAB2         POINT TO SECOND OPERAND TABLE
F0E3 3121             (     mon09v35.asm):02003         OPFNXT  LEAY    1,Y             SKIP PREFIX BYTE
                      (     mon09v35.asm):02004         ;* LOOK FOR OPCODE IN TABLE
F0E5 A680             (     mon09v35.asm):02005         OPFIND  LDA     ,X+             GET BYTE FROM TABLE
F0E7 A1A4             (     mon09v35.asm):02006                 CMPA    ,Y              IS THIS IT?
F0E9 270C             (     mon09v35.asm):02007                 BEQ     FNDOPC          FOUND IT
F0EB 81CF             (     mon09v35.asm):02008                 CMPA    #$CF            END OF TABLE?
F0ED 2704             (     mon09v35.asm):02009                 BEQ     BADOPC          IF SO, FAKE AN OPCODE
F0EF 3002             (     mon09v35.asm):02010                 LEAX    2,X             ADVANCE
F0F1 20F2             (     mon09v35.asm):02011                 BRA     OPFIND          KEEP LOOKING
F0F3 10BE7F80         (     mon09v35.asm):02012         BADOPC  LDY     PTRSAV          INSURE WE ARE AT BEGINNING
                      (     mon09v35.asm):02013         ;* LOCATED OPCODE, GENERATE STRING
F0F7 3121             (     mon09v35.asm):02014         FNDOPC  LEAY    1,Y             SKIP TO POSTBYTE
F0F9 A680             (     mon09v35.asm):02015                 LDA     ,X+             GET DATA
F0FB B77F82           (     mon09v35.asm):02016                 STA     INSTYP          SAVE FOR LATER
F0FE E684             (     mon09v35.asm):02017                 LDB     ,X              GET INSTRUCTION NUMBER
F100 8604             (     mon09v35.asm):02018                 LDA     #4              FOUR BYTES/ENTRY
F102 3D               (     mon09v35.asm):02019                 MUL                     CALCULATE ENTRY OFFSET
F103 8EF760           (     mon09v35.asm):02020                 LDX     #ITABLE         POINT TO INSTRUCTION TABLE
F106 308B             (     mon09v35.asm):02021                 LEAX    D,X             ADVANCE TO IT
F108 C604             (     mon09v35.asm):02022                 LDB     #4              SIZE OF INSTRIUCTION FIELD
F10A A680             (     mon09v35.asm):02023         FNDO1   LDA     ,X+             GET CHAR
F10C A7C0             (     mon09v35.asm):02024                 STA     ,U+             SAVE IN OUTPUT
F10E 5A               (     mon09v35.asm):02025                 DECB                    MOVE FOUR CHARACTERS
F10F 26F9             (     mon09v35.asm):02026                 BNE     FNDO1           CONTINUE
F111 B67F82           (     mon09v35.asm):02027         FNDO2   LDA     INSTYP          GET TYPE BITS BACK
F114 840F             (     mon09v35.asm):02028                 ANDA    #$0F            REMOVE CRAP
F116 10270173         (     mon09v35.asm):02029                 LBEQ    ENDIS           NO OPERANDS
                      (     mon09v35.asm):02030         ;* INSERT SPACES FOR OPERAND
F11A C620             (     mon09v35.asm):02031                 LDB     #' '            GET A SPACE
F11C E7C0             (     mon09v35.asm):02032                 STB     ,U+             SAVE IN OUTPUT
F11E E7C0             (     mon09v35.asm):02033                 STB     ,U+             SAVE IN OUTPUT
F120 4A               (     mon09v35.asm):02034                 DECA                    IS 8 BIT IT IMMEDIATE?
F121 2606             (     mon09v35.asm):02035                 BNE     IMM16           NO, TRY 16 BIT IMMEDIATE
                      (     mon09v35.asm):02036         ;* EIGHT BIT IMMEDIATE ADDRESSING OPERAND
F123 8623             (     mon09v35.asm):02037         IMM8    LDA     #'#'            INDICATE IMMEDIATE
F125 A7C0             (     mon09v35.asm):02038                 STA     ,U+             SAVE IT
F127 2010             (     mon09v35.asm):02039                 BRA     OP8             QUIT
                      (     mon09v35.asm):02040         ;* SIXTEEN BIT IMMEDIATE ADDRESSING
F129 4A               (     mon09v35.asm):02041         IMM16   DECA                    IS THIS IT?
F12A 2606             (     mon09v35.asm):02042                 BNE     DIRECT          NO, TRY DIRECT
F12C 8623             (     mon09v35.asm):02043                 LDA     #'#'            INDICATE IMMEDIATE
F12E A7C0             (     mon09v35.asm):02044                 STA     ,U+             SAVE IT
F130 2011             (     mon09v35.asm):02045                 BRA     OP16            16 BIT OPERAND
                      (     mon09v35.asm):02046         ;* DIRECT PAGE ADDRESSING
F132 4A               (     mon09v35.asm):02047         DIRECT  DECA                    IS THIS IT?
F133 260B             (     mon09v35.asm):02048                 BNE     EXTEND          NO, TRY EXTENDED
F135 863C             (     mon09v35.asm):02049                 LDA     #'<'            INDICATE DIRECT
F137 A7C0             (     mon09v35.asm):02050                 STA     ,U+             SAVE IT
F139 A6A0             (     mon09v35.asm):02051         OP8     LDA     ,Y+             GET OPERAND BYTE
F13B 170192           (     mon09v35.asm):02052                 LBSR    WRHEXB          OUTPUT
F13E 2008             (     mon09v35.asm):02053                 BRA     ENDIS1          END GO HOME
                      (     mon09v35.asm):02054         ;* EXTENDED ADDRESSING
F140 4A               (     mon09v35.asm):02055         EXTEND  DECA                    IS THIS IT?
F141 2608             (     mon09v35.asm):02056                 BNE     INDEX           NO, TRY INDEXED
F143 ECA1             (     mon09v35.asm):02057         OP16    LDD     ,Y++            GET OPCODES
F145 170190           (     mon09v35.asm):02058                 LBSR    WRHEXW          OUTPUT WORD
F148 160142           (     mon09v35.asm):02059         ENDIS1  LBRA    ENDIS           GO HOME
                      (     mon09v35.asm):02060         ;* INDEXED ADDRESSING MODES
F14B 4A               (     mon09v35.asm):02061         INDEX   DECA                    IS IT INDEXED?
F14C 102600CB         (     mon09v35.asm):02062                 LBNE    PSHPUL          NO, TRY PUSH OR PUL
F150 A6A0             (     mon09v35.asm):02063                 LDA     ,Y+             GET POST BYTE
F152 B77F83           (     mon09v35.asm):02064                 STA     POSBYT          SAVE FOR LATER
                      (     mon09v35.asm):02065         ;* TEST FOR FIVE BIT OFFSET
F155 2B04             (     mon09v35.asm):02066                 BMI     NO5BO           NOT A FIVE BIT OFFSET
F157 841F             (     mon09v35.asm):02067                 ANDA    #$1F            CONVERT TO POSTBYTE
F159 2014             (     mon09v35.asm):02068                 BRA     EVLX1           INSERT REGISTER AND CONTINUE
                      (     mon09v35.asm):02069         ;* TEST FOR INDIRECT MODE
F15B 8510             (     mon09v35.asm):02070         NO5BO   BITA    #$10            TEST FOR INDIRECT
F15D 2704             (     mon09v35.asm):02071                 BEQ     NOIND           NOT INDIRECT
F15F C65B             (     mon09v35.asm):02072                 LDB     #'['            GET OPENING
F161 E7C0             (     mon09v35.asm):02073                 STB     ,U+             SAVE IN OUTPUT
                      (     mon09v35.asm):02074         ;* TEST FOR NO OFFSET
F163 848F             (     mon09v35.asm):02075         NOIND   ANDA    #$8F            REMOVE REGS AND INDIRECT BIT
F165 8184             (     mon09v35.asm):02076                 CMPA    #$84            NO OFFSET?
F167 272E             (     mon09v35.asm):02077                 BEQ     INSR1           INSERT REGISTER AND EXIT
                      (     mon09v35.asm):02078         ;* TEST FOR EIGHT BIT OFFSET
F169 8188             (     mon09v35.asm):02079                 CMPA    #$88            EIGHT BIT OFFSET
F16B 2607             (     mon09v35.asm):02080                 BNE     EVL1            NO, TRY NEXT
F16D A6A0             (     mon09v35.asm):02081                 LDA     ,Y+             GET BYTE OFFSET
F16F 17015E           (     mon09v35.asm):02082         EVLX1   LBSR    WRHEXB          OUTPUT
F172 2023             (     mon09v35.asm):02083                 BRA     INSR1           CONTINUE
                      (     mon09v35.asm):02084         ;* TEST FOR 16 BIT OFFSET
F174 8189             (     mon09v35.asm):02085         EVL1    CMPA    #$89            16 BIT OFSET?
F176 2607             (     mon09v35.asm):02086                 BNE     EVL2            NO, TRY NEXT
F178 ECA1             (     mon09v35.asm):02087                 LDD     ,Y++            GET OPERAND
F17A 17015B           (     mon09v35.asm):02088                 LBSR    WRHEXW          OUTPUT
F17D 2018             (     mon09v35.asm):02089                 BRA     INSR1           INSERT REGISTER
                      (     mon09v35.asm):02090         ;* TEST FOR A ACCUMULATOR OFFSET
F17F 8186             (     mon09v35.asm):02091         EVL2    CMPA    #$86            IS IT 'A' OFFSET?
F181 2604             (     mon09v35.asm):02092                 BNE     EVL3            NO, TRY NEXT
F183 8641             (     mon09v35.asm):02093                 LDA     #'A'            GET ACCA
F185 200E             (     mon09v35.asm):02094                 BRA     SAIREG          GO HOME
                      (     mon09v35.asm):02095         ;* TEST FOR B ACCUMULATOR OFFSET
F187 8185             (     mon09v35.asm):02096         EVL3    CMPA    #$85            IS IT 'B' OFFSET?
F189 2604             (     mon09v35.asm):02097                 BNE     EVL4            NO, TRY NEXT
F18B 8642             (     mon09v35.asm):02098                 LDA     #'B'            GET B
F18D 2006             (     mon09v35.asm):02099                 BRA     SAIREG          GO HOME
                      (     mon09v35.asm):02100         ;* TEST FRO 'D' ACCUMULATOR OFFSET
F18F 818B             (     mon09v35.asm):02101         EVL4    CMPA    #$8B            D OFFSET?
F191 2606             (     mon09v35.asm):02102                 BNE     EVL5            NO, TRY NEXT
F193 8644             (     mon09v35.asm):02103                 LDA     #'D'            GET D REGISTER
F195 A7C0             (     mon09v35.asm):02104         SAIREG  STA     ,U+             SAVE IT
F197 202C             (     mon09v35.asm):02105         INSR1   BRA     INSREG
                      (     mon09v35.asm):02106         ;* TEST FOR EXTENDED INDIRECT
F199 818F             (     mon09v35.asm):02107         EVL5    CMPA    #$8F            EXTENDED INDIRECT?
F19B 2607             (     mon09v35.asm):02108                 BNE     EVL6            NO, TRY NEXT
F19D ECA1             (     mon09v35.asm):02109                 LDD     ,Y++            GET OFFSET
F19F 170136           (     mon09v35.asm):02110                 LBSR    WRHEXW          OUTPUT
F1A2 2054             (     mon09v35.asm):02111                 BRA     EVLFIN          AND CONTINUE
                      (     mon09v35.asm):02112         ;* TEST FOR PC OFFSET, 8 BIT
F1A4 818C             (     mon09v35.asm):02113         EVL6    CMPA    #$8C            EIGHT BIT PC OFFSET?
F1A6 2607             (     mon09v35.asm):02114                 BNE     EVL7            NO, TRY NEXT
F1A8 A6A0             (     mon09v35.asm):02115                 LDA     ,Y+             GET OFFSET
F1AA 170123           (     mon09v35.asm):02116                 LBSR    WRHEXB          OUTPUT
F1AD 2009             (     mon09v35.asm):02117                 BRA     WRPCRG          OUTPUT PC REGISTER
                      (     mon09v35.asm):02118         ;* TEST FOR PC OFFSET, 16 BIT
F1AF 818D             (     mon09v35.asm):02119         EVL7    CMPA    #$8D            PC OFFSET?
F1B1 2612             (     mon09v35.asm):02120                 BNE     INSREG          NO, INSERT REGISTER
F1B3 ECA1             (     mon09v35.asm):02121                 LDD     ,Y++            GET OFFSET
F1B5 170120           (     mon09v35.asm):02122                 LBSR    WRHEXW          OUTPUT
F1B8 8EF401           (     mon09v35.asm):02123         WRPCRG  LDX     #PCRG           POINT TO STRING
F1BB A680             (     mon09v35.asm):02124         WRPR1   LDA     ,X+             GET CHAR
F1BD A7C0             (     mon09v35.asm):02125                 STA     ,U+             SAVE
F1BF 8152             (     mon09v35.asm):02126                 CMPA    #'R'            END?
F1C1 26F8             (     mon09v35.asm):02127                 BNE     WRPR1           NO, CONTINUE
F1C3 2033             (     mon09v35.asm):02128                 BRA     EVLFIN          END IT NOW
                      (     mon09v35.asm):02129         ;* INSERT REGISTER BITS
F1C5 862C             (     mon09v35.asm):02130         INSREG  LDA     #','            GET COMMA
F1C7 A7C0             (     mon09v35.asm):02131                 STA     ,U+             SAVE IT
F1C9 B67F83           (     mon09v35.asm):02132                 LDA     POSBYT          GET POSTBYTE
F1CC C62D             (     mon09v35.asm):02133                 LDB     #'-'            GET MINUS
F1CE 848F             (     mon09v35.asm):02134                 ANDA    #$8F            REMOVE CRAP
F1D0 8182             (     mon09v35.asm):02135                 CMPA    #$82            DECREMENT BY ONE?
F1D2 2706             (     mon09v35.asm):02136                 BEQ     DEC1            DECREMENT BY ONE
F1D4 8183             (     mon09v35.asm):02137                 CMPA    #$83            DECREMENT BY TWO?
F1D6 2604             (     mon09v35.asm):02138                 BNE     NODEC           NO, DON'T DEC
F1D8 E7C0             (     mon09v35.asm):02139                 STB     ,U+             SAVE
F1DA E7C0             (     mon09v35.asm):02140         DEC1    STB     ,U+             AGAIN
F1DC B67F83           (     mon09v35.asm):02141         NODEC   LDA     POSBYT          GET POSTBYTE
F1DF 44               (     mon09v35.asm):02142                 LSRA                    SHIFT
F1E0 44               (     mon09v35.asm):02143                 LSRA                    REGISTER
F1E1 44               (     mon09v35.asm):02144                 LSRA                    BITS
F1E2 44               (     mon09v35.asm):02145                 LSRA                    INTO
F1E3 44               (     mon09v35.asm):02146                 LSRA                    BOTTOM
F1E4 C658             (     mon09v35.asm):02147                 LDB     #'X'            GET 'X'
F1E6 8403             (     mon09v35.asm):02148                 ANDA    #$03            REMOVE CRAP
F1E8 270C             (     mon09v35.asm):02149                 BEQ     EVLEND          ITS 'X'
F1EA C659             (     mon09v35.asm):02150                 LDB     #'Y'            GET 'Y'
F1EC 4A               (     mon09v35.asm):02151                 DECA                    TEST FOR 'Y'
F1ED 2707             (     mon09v35.asm):02152                 BEQ     EVLEND          YES
F1EF C655             (     mon09v35.asm):02153                 LDB     #'U'            GET 'U'
F1F1 4A               (     mon09v35.asm):02154                 DECA                    TEST
F1F2 2702             (     mon09v35.asm):02155                 BEQ     EVLEND          ITS 'U'
F1F4 C653             (     mon09v35.asm):02156                 LDB     #'S'            MUST BE 'S'
F1F6 E7C0             (     mon09v35.asm):02157         EVLEND  STB     ,U+             SAVE IN OUTPUT
F1F8 B67F83           (     mon09v35.asm):02158         EVLFIN  LDA     POSBYT          GET POSTBYTE
F1FB C62B             (     mon09v35.asm):02159                 LDB     #'+'            GET PLUS
F1FD 848F             (     mon09v35.asm):02160                 ANDA    #$8F            GET TYPE
F1FF 8180             (     mon09v35.asm):02161                 CMPA    #$80            IS IT INC BY ONE
F201 2706             (     mon09v35.asm):02162                 BEQ     INC1            IF SO, WE HAVE IT
F203 8181             (     mon09v35.asm):02163                 CMPA    #$81            INC BY TWO?
F205 2604             (     mon09v35.asm):02164                 BNE     NOINC           NO INCREMENT
F207 E7C0             (     mon09v35.asm):02165                 STB     ,U+             SAVE ONE
F209 E7C0             (     mon09v35.asm):02166         INC1    STB     ,U+             SAVE TWO
F20B B67F83           (     mon09v35.asm):02167         NOINC   LDA     POSBYT          GET POSTBYTE
F20E 2A08             (     mon09v35.asm):02168                 BPL     NOIND1          FIVE BIT OFFSET
F210 8510             (     mon09v35.asm):02169                 BITA    #$10            INDIRECT?
F212 2704             (     mon09v35.asm):02170                 BEQ     NOIND1          NO INDIRECT
F214 865D             (     mon09v35.asm):02171                 LDA     #']'            CLOSING BRACE
F216 A7C0             (     mon09v35.asm):02172                 STA     ,U+             SAVE IT
F218 160072           (     mon09v35.asm):02173         NOIND1  LBRA    ENDIS           END IT
                      (     mon09v35.asm):02174         ;* PULS OR PULL OPCODES
F21B 4A               (     mon09v35.asm):02175         PSHPUL  DECA                    IS IT PUSH OR PULL?
F21C 2635             (     mon09v35.asm):02176                 BNE     TFREXG          NO, TRY TRANSFER OR EXCHANGE
F21E A6A0             (     mon09v35.asm):02177                 LDA     ,Y+             GET POSTBYTE
F220 8EF425           (     mon09v35.asm):02178                 LDX     #PSHTAB         GET 'CC'
F223 44               (     mon09v35.asm):02179         PSH1    LSRA                    SHIFT OUT BITS
F224 2425             (     mon09v35.asm):02180                 BCC     PSHNXT          SKIP THIS ONE
F226 3406             (     mon09v35.asm):02181                 PSHS    A,B             SAVE REGS
F228 EC81             (     mon09v35.asm):02182                 LDD     ,X++            GET DATA
F22A 8155             (     mon09v35.asm):02183                 CMPA    #'U'            SAVEING U REGISTER
F22C 2607             (     mon09v35.asm):02184                 BNE     PSH4            NO, IT'S OK
F22E 7D7F82           (     mon09v35.asm):02185                 TST     INSTYP          SPECIAL CASE
F231 2A02             (     mon09v35.asm):02186                 BPL     PSH4            OK
F233 8653             (     mon09v35.asm):02187                 LDA     #'S'            CONVERT
F235 A7C0             (     mon09v35.asm):02188         PSH4    STA     ,U+             SAVE IT
F237 5D               (     mon09v35.asm):02189                 TSTB                    MORE?
F238 2702             (     mon09v35.asm):02190                 BEQ     PSH2            NO, SKIP IT
F23A E7C0             (     mon09v35.asm):02191                 STB     ,U+             SAVE
F23C 3506             (     mon09v35.asm):02192         PSH2    PULS    A,B             RESTORE REGS
F23E 4D               (     mon09v35.asm):02193                 TSTA                    MORE BITS?
F23F 270F             (     mon09v35.asm):02194                 BEQ     PSH3            NO, QUIT
F241 3402             (     mon09v35.asm):02195                 PSHS    A               RESAVE
F243 862C             (     mon09v35.asm):02196                 LDA     #','            GET COMMA
F245 A7C0             (     mon09v35.asm):02197                 STA     ,U+             SAVE
F247 3502             (     mon09v35.asm):02198                 PULS    A               GET IT BACK
F249 20D8             (     mon09v35.asm):02199                 BRA     PSH1            CONTINUE
F24B 3002             (     mon09v35.asm):02200         PSHNXT  LEAX    2,X             ADVANCE
F24D 4D               (     mon09v35.asm):02201                 TSTA                    ARE WE OK
F24E 26D3             (     mon09v35.asm):02202                 BNE     PSH1            KEEP TRYING
F250 16003A           (     mon09v35.asm):02203         PSH3    LBRA    ENDIS           DONE
                      (     mon09v35.asm):02204         ;* TRANSFER AND EXCHANGE POSTBYTE OPCODES
F253 4A               (     mon09v35.asm):02205         TFREXG  DECA                    TRANSFER OR EXCHANGE?
F254 2623             (     mon09v35.asm):02206                 BNE     SBRAN           TRY SHORT BRANCH
F256 A6A4             (     mon09v35.asm):02207                 LDA     ,Y              GET POSTBYTE
F258 44               (     mon09v35.asm):02208                 LSRA                    SHIFT
F259 44               (     mon09v35.asm):02209                 LSRA                    INTO
F25A 44               (     mon09v35.asm):02210                 LSRA                    LOW
F25B 44               (     mon09v35.asm):02211                 LSRA                    NIBBLE
F25C 8D0B             (     mon09v35.asm):02212                 BSR     TFRREG          GET REGISTER
F25E 862C             (     mon09v35.asm):02213                 LDA     #','            SEPERATOR
F260 A7C0             (     mon09v35.asm):02214                 STA     ,U+             SAVE
F262 A6A0             (     mon09v35.asm):02215                 LDA     ,Y+             GET POSTBYTE AGAIN
F264 8D03             (     mon09v35.asm):02216                 BSR     TFRREG          PLACE IT
F266 160024           (     mon09v35.asm):02217                 LBRA    ENDIS           GO HOME
                      (     mon09v35.asm):02218         ;* CALCULATE TRANSFER REGISTER
F269 840F             (     mon09v35.asm):02219         TFRREG  ANDA    #$0F            REMOVE HIGH CRAP
F26B 48               (     mon09v35.asm):02220                 LSLA                    MULTIPLY BY TWO
F26C 8EF405           (     mon09v35.asm):02221                 LDX     #REGTAB         POINT TO TABLE
F26F EC86             (     mon09v35.asm):02222                 LDD     A,X             GET REGISTER VALUE
F271 A7C0             (     mon09v35.asm):02223                 STA     ,U+             SAVE IT
F273 5D               (     mon09v35.asm):02224                 TSTB                    SECOND BYTE?
F274 2702             (     mon09v35.asm):02225                 BEQ     TFRET           NO, SKIP IT
F276 E7C0             (     mon09v35.asm):02226                 STB     ,U+             SAVE IT
F278 39               (     mon09v35.asm):02227         TFRET   RTS
                      (     mon09v35.asm):02228         ;* SHORT BRANCH
F279 4A               (     mon09v35.asm):02229         SBRAN   DECA                    SHORT BRANCH
F27A 2608             (     mon09v35.asm):02230                 BNE     LBRAN           NO, TRY LONG BRANCH
F27C E6A0             (     mon09v35.asm):02231                 LDB     ,Y+             GET OPERATOR
F27E 30A5             (     mon09v35.asm):02232                 LEAX    B,Y             GET NEW ADDRESS
F280 1F10             (     mon09v35.asm):02233                 TFR     X,D             COPY
F282 2006             (     mon09v35.asm):02234                 BRA     SAVADR          FINISH
                      (     mon09v35.asm):02235         ;* LONG BRANCH
F284                  (     mon09v35.asm):02236         LBRAN
F284 ECA1             (     mon09v35.asm):02237                 LDD     ,Y++            GET OPERAND
F286 3420             (     mon09v35.asm):02238                 PSHS    Y               SAVE Y
F288 E3E1             (     mon09v35.asm):02239                 ADDD    ,S++            ADD OFFSET TO REG
F28A                  (     mon09v35.asm):02240         SAVADR
F28A 17004B           (     mon09v35.asm):02241                 LBSR    WRHEXW          OUTPUT WORD.
F28D                  (     mon09v35.asm):02242         ENDIS
F28D 86FF             (     mon09v35.asm):02243                 LDA     #$FF            LINE TERMINATOR
F28F A7C4             (     mon09v35.asm):02244                 STA     ,U              SAVE IT
                      (     mon09v35.asm):02245         ;* INSERT ADDRESS/BYTE DATA
F291 EEE4             (     mon09v35.asm):02246                 LDU     ,S              RESTORE U REGISTER
F293 3420             (     mon09v35.asm):02247                 PSHS    Y               SAVE POINTER TO END
F295 BE7F80           (     mon09v35.asm):02248                 LDX     PTRSAV          POINT TO STARTING ADDRESS
F298 1F10             (     mon09v35.asm):02249                 TFR     X,D             COPY
F29A 170045           (     mon09v35.asm):02250                 LBSR    WRHEX           OUTPUT
F29D 1F98             (     mon09v35.asm):02251                 TFR     B,A             COPY
F29F 170040           (     mon09v35.asm):02252                 LBSR    WRHEX           OUTPUT
F2A2 5F               (     mon09v35.asm):02253                 CLRB                    START WITH ZERO
F2A3                  (     mon09v35.asm):02254         END1
F2A3 ACE4             (     mon09v35.asm):02255                 CMPX    ,S              ARE WE AT END?
F2A5 240A             (     mon09v35.asm):02256                 BHS     END2            IF SO, QUIT
F2A7 5C               (     mon09v35.asm):02257                 INCB                    ADVANCE
F2A8 3341             (     mon09v35.asm):02258                 LEAU    1,U             ADVANCE
F2AA A680             (     mon09v35.asm):02259                 LDA     ,X+             GET BYTE
F2AC 170033           (     mon09v35.asm):02260                 LBSR    WRHEX           OUTPUT
F2AF 20F2             (     mon09v35.asm):02261                 BRA     END1            CONTINUE
F2B1                  (     mon09v35.asm):02262         END2
F2B1 3262             (     mon09v35.asm):02263                 LEAS    2,S             RESTORE STACK
F2B3 EEE4             (     mon09v35.asm):02264                 LDU     ,S              RESTORE U REGISTER
F2B5 33C814           (     mon09v35.asm):02265                 LEAU    20,U            ADVANCE TO TEXT FIELD
F2B8 BE7F80           (     mon09v35.asm):02266                 LDX     PTRSAV          GET POINTER BACK
F2BB                  (     mon09v35.asm):02267         END3
F2BB 5A               (     mon09v35.asm):02268                 DECB                    REDUCE COUNT
F2BC 2B10             (     mon09v35.asm):02269                 BMI     END4            CONTINUE
F2BE A680             (     mon09v35.asm):02270                 LDA     ,X+             GO IT AGAIN
F2C0 8120             (     mon09v35.asm):02271                 CMPA    #' '            < SPACE?
F2C2 2504             (     mon09v35.asm):02272                 BLO     END5            YES
F2C4 817F             (     mon09v35.asm):02273                 CMPA    #$7F            > 7F?
F2C6 2502             (     mon09v35.asm):02274                 BLO     END6            OK
F2C8                  (     mon09v35.asm):02275         END5
F2C8 862E             (     mon09v35.asm):02276                 LDA     #'.'            CONVERT TO DOT
F2CA                  (     mon09v35.asm):02277         END6
F2CA A7C0             (     mon09v35.asm):02278                 STA     ,U+             SAVE
F2CC 20ED             (     mon09v35.asm):02279                 BRA     END3
F2CE                  (     mon09v35.asm):02280         END4
F2CE 35C0             (     mon09v35.asm):02281                 PULS    U,PC            GO HOME
                      (     mon09v35.asm):02282         
                      (     mon09v35.asm):02283         ;*
                      (     mon09v35.asm):02284         ;* SUBROUTINES
                      (     mon09v35.asm):02285         ;*
F2D0                  (     mon09v35.asm):02286         WRHEXB
F2D0 3402             (     mon09v35.asm):02287                 PSHS    A               SAVE IT
F2D2 8624             (     mon09v35.asm):02288                 LDA             #'$'            INDICATE HEX
F2D4 A7C0             (     mon09v35.asm):02289                 STA             ,U+             SAVE
F2D6 2008             (     mon09v35.asm):02290                 BRA             WRHEX1          CONTINUE
F2D8                  (     mon09v35.asm):02291         WRHEXW
F2D8 3404             (     mon09v35.asm):02292                 PSHS    B               SAVE B
F2DA C624             (     mon09v35.asm):02293                 LDB             #'$'            INDICATE HEX
F2DC E7C0             (     mon09v35.asm):02294                 STB             ,U+             SAVE IT
F2DE 8D02             (     mon09v35.asm):02295                 BSR             WRHEX           OUTPUT
F2E0                  (     mon09v35.asm):02296         WRHEX1
F2E0 3502             (     mon09v35.asm):02297                 PULS    A               RESTORE
F2E2                  (     mon09v35.asm):02298         WRHEX
F2E2 3402             (     mon09v35.asm):02299                 PSHS    A               SAVE IT
F2E4 44               (     mon09v35.asm):02300                 LSRA                    SHIFT
F2E5 44               (     mon09v35.asm):02301                 LSRA                    HIGH BYTE
F2E6 44               (     mon09v35.asm):02302                 LSRA                    INTO
F2E7 44               (     mon09v35.asm):02303                 LSRA                    LOW FOR OUTPUT
F2E8 8D02             (     mon09v35.asm):02304                 BSR             WRHEXN          OUTPUT NIBBLE
F2EA 3502             (     mon09v35.asm):02305                 PULS    A               RETORE
F2EC                  (     mon09v35.asm):02306         WRHEXN
F2EC 840F             (     mon09v35.asm):02307                 ANDA    #$0F            REMOVE CRAP
F2EE 8B30             (     mon09v35.asm):02308                 ADDA    #$30            CONVERT
F2F0 8139             (     mon09v35.asm):02309                 CMPA    #$39            OK?
F2F2 2302             (     mon09v35.asm):02310                 BLS             WRNOK           OK
F2F4 8B07             (     mon09v35.asm):02311                 ADDA    #7              CONVERT
F2F6                  (     mon09v35.asm):02312         WRNOK
F2F6 A7C0             (     mon09v35.asm):02313                 STA             ,U+             SAVE IT
F2F8 39               (     mon09v35.asm):02314                 RTS
                      (     mon09v35.asm):02315         
                      (     mon09v35.asm):02316         ;MODS BY JQ
                      (     mon09v35.asm):02317         ;*
                      (     mon09v35.asm):02318         ;* 6309 ILLOP/DIV0 HANDLER
                      (     mon09v35.asm):02319         ;*
                      (     mon09v35.asm):02320          IFNE JQ_ILLOP  USE JQ ILLOP ENHANCEMENTS
     0080             (     mon09v35.asm):02321         MD_DIV0         EQU     $80                     MD.7 = DIV0 FLAG
     0040             (     mon09v35.asm):02322         MD_ILOP         EQU     $40                     MD.6 = ILLOP FLAG
                      (     mon09v35.asm):02323         
F2F9                  (     mon09v35.asm):02324         ILOPHND
F2F9 8E7F6F           (     mon09v35.asm):02325                 LDX             #SAVCC                  POINT TO START OF SAVED REGS
F2FC C60C             (     mon09v35.asm):02326                 LDB             #12                             MOVE 12 BYTES
F2FE                  (     mon09v35.asm):02327         ILOPH1
F2FE A6E0             (     mon09v35.asm):02328                 LDA             ,S+                             GET BYTE
F300 A780             (     mon09v35.asm):02329                 STA             ,X+                             SAVE
F302 5A               (     mon09v35.asm):02330                 DECB                                    DECREMENT COUNT
F303 26F9             (     mon09v35.asm):02331                 BNE             ILOPH1                  DO THEM ALL
F305 10FF7F7B         (     mon09v35.asm):02332                 STS             SAVS                    SAVE STACK POINTER
                      (     mon09v35.asm):02333         
                      (     mon09v35.asm):02334         ;       DETERMINE TRAP SOURCE
F309 8EF34D           (     mon09v35.asm):02335                 LDX             #MSG_DIV0               DIV0 MESSAGE POINTER
F30C 113C80           (     mon09v35.asm):02336                 BITMD   #MD_DIV0                Trap entry - see if Division by 0 TRAP
F30F 260B             (     mon09v35.asm):02337                 BNE             ILOPH3                  DIV0 TRAP
                      (     mon09v35.asm):02338         
F311                  (     mon09v35.asm):02339         ILOPH2
F311 8EF338           (     mon09v35.asm):02340                 LDX             #MSG_ILLOP              ILLOP MESSAGE POINTER
F314 113C40           (     mon09v35.asm):02341                 BITMD   #MD_ILOP                Trap entry - see if ILLOP TRAP
F317 2603             (     mon09v35.asm):02342                 BNE             ILOPH3                  illegal instruction TRAP
F319 8EF322           (     mon09v35.asm):02343                 LDX             #MSG_TRAPERR    UNKNOWN TRAP SOURCE
                      (     mon09v35.asm):02344         
F31C                  (     mon09v35.asm):02345         ILOPH3
F31C BDE42A           (     mon09v35.asm):02346                 JSR             MON09_WRLIN             EMIT THE STRING
F31F 7EF3E8           (     mon09v35.asm):02347                 JMP             BRKREG                  DISPLAY REGISTERS
                      (     mon09v35.asm):02348         
F322                  (     mon09v35.asm):02349         MSG_TRAPERR
F322 2A2A2A20554B4E4F (     mon09v35.asm):02350                 FCC             '*** UKNOWN Trap ***'
     574E205472617020
     2A2A2A
F335 0D0A00           (     mon09v35.asm):02351                 FCB             $0D,$0A,0               NEW LINE
                      (     mon09v35.asm):02352         
F338                  (     mon09v35.asm):02353         MSG_ILLOP
F338 2A2A2A20494C4C4F (     mon09v35.asm):02354                 FCC             '*** ILLOP Trap ***'
     502054726170202A
     2A2A
F34A 0D0A00           (     mon09v35.asm):02355                 FCB             $0D,$0A,0               NEW LINE
                      (     mon09v35.asm):02356         
F34D                  (     mon09v35.asm):02357         MSG_DIV0
F34D 2A2A2A2044495630 (     mon09v35.asm):02358                 FCC             '*** DIV0 Trap ***'
     2054726170202A2A
     2A
F35E 0D0A00           (     mon09v35.asm):02359                 FCB             $0D,$0A,0               NEW LINE
                      (     mon09v35.asm):02360          ENDC                   USE JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):02361         ;
                      (     mon09v35.asm):02362         ;*
                      (     mon09v35.asm):02363         ;* NMI HANDLER
                      (     mon09v35.asm):02364         ;*
F361                  (     mon09v35.asm):02365         NMIHND
F361 8E7F6F           (     mon09v35.asm):02366                 LDX             #SAVCC          POINT TO START OF SAVED REGS
F364 C60C             (     mon09v35.asm):02367                 LDB             #12                     MOVE 12 BYTES
F366                  (     mon09v35.asm):02368         NMIH1
F366 A6E0             (     mon09v35.asm):02369                 LDA             ,S+                     GET BYTE
F368 A780             (     mon09v35.asm):02370                 STA             ,X+                     SAVE
F36A 5A               (     mon09v35.asm):02371                 DECB                            DECREMENT COUNT
F36B 26F9             (     mon09v35.asm):02372                 BNE             NMIH1           DO THEM ALL
F36D 10FF7F7B         (     mon09v35.asm):02373                 STS             SAVS            SAVE STACK POINTER
F371 17FA48           (     mon09v35.asm):02374                 LBSR    WRMSG           DISPLAY MESSAGE
F374 2A2A2A204E4D4920 (     mon09v35.asm):02375                 FCC             '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F389 FF               (     mon09v35.asm):02376                 FCB             $FF                     NEW LINE
F38A 205C             (     mon09v35.asm):02377                 BRA             BRKREG          DISPLAY REGISTERS
                      (     mon09v35.asm):02378         
                      (     mon09v35.asm):02379         ;*
                      (     mon09v35.asm):02380         ;* SWI HANDLER
                      (     mon09v35.asm):02381         ;*
F38C                  (     mon09v35.asm):02382         SWIHND
F38C 108E7F84         (     mon09v35.asm):02383                 LDY             #BRKTAB         POINT TO BREAKPOINT TABLE
F390 AE6A             (     mon09v35.asm):02384                 LDX             10,S            GET STORED PC
F392 301F             (     mon09v35.asm):02385                 LEAX    -1,X            BACKUP TO BREAKPOINT ADDRESS
F394 C608             (     mon09v35.asm):02386                 LDB             #8                      CHECK EIGHT BREAKPOINTS
F396                  (     mon09v35.asm):02387         SWIHN1
F396 ACA4             (     mon09v35.asm):02388                 CMPX    ,Y                      IS THIS IT?
F398 2710             (     mon09v35.asm):02389                 BEQ             SWIHN2          YES
F39A 3123             (     mon09v35.asm):02390                 LEAY    3,Y                     SKIP OPCODE
F39C 5A               (     mon09v35.asm):02391                 DECB                            REDUCE COUNT
F39D 26F7             (     mon09v35.asm):02392                 BNE             SWIHN1          CONTINUE
F39F E662             (     mon09v35.asm):02393                 LDB             2,S                     RESTORE B.
F3A1 AE64             (     mon09v35.asm):02394                 LDX             4,S                     RESTORE X.
F3A3 10AE66           (     mon09v35.asm):02395                 LDY             6,S                     RESTORE Y.
F3A6 6E9F7F5C         (     mon09v35.asm):02396                 JMP             [SWIADR]        NOT A BREAKPOINT, EXECUTE SWI HANDLER
F3AA                  (     mon09v35.asm):02397         SWIHN2
F3AA F77F82           (     mon09v35.asm):02398                 STB             INSTYP          SAVE BREAKPOINT NUMBER
F3AD 8E7F6F           (     mon09v35.asm):02399                 LDX             #SAVCC          POINT TO START OF SAVED REGS
F3B0 C60A             (     mon09v35.asm):02400                 LDB             #10                     MOVE 10
F3B2                  (     mon09v35.asm):02401         SWIHN25
F3B2 A6E0             (     mon09v35.asm):02402                 LDA             ,S+                     GET BYTE
F3B4 A780             (     mon09v35.asm):02403                 STA             ,X+                     SAVE
F3B6 5A               (     mon09v35.asm):02404                 DECB                            DECREMENT COUNT
F3B7 26F9             (     mon09v35.asm):02405                 BNE             SWIHN25         DO THEM ALL
F3B9 3510             (     mon09v35.asm):02406                 PULS    X                       GET PC
F3BB 301F             (     mon09v35.asm):02407                 LEAX    -1,X            SET BACK TO REAL PC
F3BD BF7F79           (     mon09v35.asm):02408                 STX             SAVPC           SAVED PC
F3C0 10FF7F7B         (     mon09v35.asm):02409                 STS             SAVS            SAVE STACK POINTER
F3C4 17F9F5           (     mon09v35.asm):02410                 LBSR    WRMSG           DISPLAY MESSAGE
F3C7 2A2A2A2042726561 (     mon09v35.asm):02411                 FCN             '*** Breakpoint #'
     6B706F696E742023
     00
F3D8 8638             (     mon09v35.asm):02412                 LDA             #$38            GET NUMBER, PLUS ASCII CONVERT
F3DA B07F82           (     mon09v35.asm):02413                 SUBA    INSTYP          CONVERT TO PROPER DIGIT
F3DD 17FA28           (     mon09v35.asm):02414                 LBSR    PUTCHR          DISPLAY
F3E0 17F9D9           (     mon09v35.asm):02415                 LBSR    WRMSG           OUTPUT MESSAGE
F3E3 202A2A2A         (     mon09v35.asm):02416                 FCC             ' ***'          TRAILING MESSAGE
F3E7 FF               (     mon09v35.asm):02417                 FCB             $FF                     NEW LINE
F3E8                  (     mon09v35.asm):02418         BRKREG
F3E8 17F4D2           (     mon09v35.asm):02419                 LBSR    DISREG          DISPLAY
F3EB                  (     mon09v35.asm):02420         BRKRES
F3EB 8E7F84           (     mon09v35.asm):02421                 LDX             #BRKTAB         POINT TO BREAKPOINT TABLE
F3EE C608             (     mon09v35.asm):02422                 LDB             #8                      DO IT EIGHT TIMES
F3F0                  (     mon09v35.asm):02423         SWIHN3
F3F0 10AE81           (     mon09v35.asm):02424                 LDY             ,X++            GET REG
F3F3 2704             (     mon09v35.asm):02425                 BEQ             SWIHN4          NO BRK, NEXT
F3F5 A684             (     mon09v35.asm):02426                 LDA             ,X                      GET OPCODE
F3F7 A7A4             (     mon09v35.asm):02427                 STA             ,Y                      REPLACE IN RAM
F3F9                  (     mon09v35.asm):02428         SWIHN4
F3F9 3001             (     mon09v35.asm):02429                 LEAX    1,X                     SKIP OPCODE
F3FB 5A               (     mon09v35.asm):02430                 DECB                            REDUCE COUNT
F3FC 26F2             (     mon09v35.asm):02431                 BNE             SWIHN3          GO AGAIN
F3FE 16F1D4           (     mon09v35.asm):02432                 LBRA    MAIN            DO PROMPT
                      (     mon09v35.asm):02433         
                      (     mon09v35.asm):02434         ;*
                      (     mon09v35.asm):02435         ;* CONSTANTS
F401                  (     mon09v35.asm):02436         PCRG
F401 2C504352         (     mon09v35.asm):02437                 FCC             ',PCR'
                      (     mon09v35.asm):02438         
                      (     mon09v35.asm):02439         ;*
                      (     mon09v35.asm):02440         ;* TRANSFER/EXCHANGE REGISTER TABLE
                      (     mon09v35.asm):02441         ;*
F405                  (     mon09v35.asm):02442         REGTAB
F405 4400             (     mon09v35.asm):02443                 FCN             'D'             0
F407 5800             (     mon09v35.asm):02444                 FCN             'X'             1
F409 5900             (     mon09v35.asm):02445                 FCN             'Y'             2
F40B 5500             (     mon09v35.asm):02446                 FCN             'U'             3
F40D 5300             (     mon09v35.asm):02447                 FCN             'S'             4
F40F 5043             (     mon09v35.asm):02448                 FCC             'PC'    5
F411 3F00             (     mon09v35.asm):02449                 FCN             '?'             6
F413 3F00             (     mon09v35.asm):02450                 FCN             '?'             7
F415 4100             (     mon09v35.asm):02451                 FCN             'A'             8
F417 4200             (     mon09v35.asm):02452                 FCN             'B'             9
F419 4343             (     mon09v35.asm):02453                 FCC             'CC'    A
F41B 4450             (     mon09v35.asm):02454                 FCC             'DP'    B
F41D 3F00             (     mon09v35.asm):02455                 FCN             '?'             C
F41F 3F00             (     mon09v35.asm):02456                 FCN             '?'             D
F421 3F00             (     mon09v35.asm):02457                 FCN             '?'             E
F423 3F00             (     mon09v35.asm):02458                 FCN             '?'             F
                      (     mon09v35.asm):02459         
                      (     mon09v35.asm):02460         ;*
                      (     mon09v35.asm):02461         ;* PUSH/PULL REGISTER TABLE
                      (     mon09v35.asm):02462         ;*
F425                  (     mon09v35.asm):02463         PSHTAB
F425 4343             (     mon09v35.asm):02464                 FCC             'CC'
F427 4100             (     mon09v35.asm):02465                 FCN             'A'
F429 4200             (     mon09v35.asm):02466                 FCN             'B'
F42B 4450             (     mon09v35.asm):02467                 FCC             'DP'
F42D 5800             (     mon09v35.asm):02468                 FCN             'X'
F42F 5900             (     mon09v35.asm):02469                 FCN             'Y'
F431 5500             (     mon09v35.asm):02470                 FCN             'U'
F433 504300           (     mon09v35.asm):02471                 FCN             'PC'
                      (     mon09v35.asm):02472         
                      (     mon09v35.asm):02473         ;*
                      (     mon09v35.asm):02474         ;* OPCODE TABLE, OPCODE BYTE, TYPE BYTE, TEXT BYTE
                      (     mon09v35.asm):02475         ;*
F436                  (     mon09v35.asm):02476         OPTAB1
F436 860101           (     mon09v35.asm):02477                 FCB     $86,1,1         'LDA' INSTRUCTIONS
F439 960301           (     mon09v35.asm):02478                 FCB     $96,3,1
F43C A60501           (     mon09v35.asm):02479                 FCB     $A6,5,1
F43F B60401           (     mon09v35.asm):02480                 FCB     $B6,4,1
F442 C60102           (     mon09v35.asm):02481                 FCB     $C6,1,2         'LDB' INSTRUCTIONS
F445 D60302           (     mon09v35.asm):02482                 FCB     $D6,3,2
F448 E60502           (     mon09v35.asm):02483                 FCB     $E6,5,2
F44B F60402           (     mon09v35.asm):02484                 FCB     $F6,4,2
F44E CC0203           (     mon09v35.asm):02485                 FCB     $CC,2,3         'LDD' INSTRUCTIONS
F451 DC0303           (     mon09v35.asm):02486                 FCB     $DC,3,3
F454 EC0503           (     mon09v35.asm):02487                 FCB     $EC,5,3
F457 FC0403           (     mon09v35.asm):02488                 FCB     $FC,4,3
F45A CE0204           (     mon09v35.asm):02489                 FCB     $CE,2,4         'LDU' INSTRUCTIONS
F45D DE0304           (     mon09v35.asm):02490                 FCB     $DE,3,4
F460 EE0504           (     mon09v35.asm):02491                 FCB     $EE,5,4
F463 FE0404           (     mon09v35.asm):02492                 FCB     $FE,4,4
F466 8E0205           (     mon09v35.asm):02493                 FCB     $8E,2,5         'LDX' INSTRUCTIONS
F469 9E0305           (     mon09v35.asm):02494                 FCB     $9E,3,5
F46C AE0505           (     mon09v35.asm):02495                 FCB     $AE,5,5
F46F BE0405           (     mon09v35.asm):02496                 FCB     $BE,4,5
F472 970306           (     mon09v35.asm):02497                 FCB     $97,3,6         'STA' INSTRUCTINOS
F475 A70506           (     mon09v35.asm):02498                 FCB     $A7,5,6
F478 B70406           (     mon09v35.asm):02499                 FCB     $B7,4,6
F47B D70307           (     mon09v35.asm):02500                 FCB     $D7,3,7         'STB' INSTRUCTIONS
F47E E70507           (     mon09v35.asm):02501                 FCB     $E7,5,7
F481 F70407           (     mon09v35.asm):02502                 FCB     $F7,4,7
F484 DD0308           (     mon09v35.asm):02503                 FCB     $DD,3,8         'STD' INSTRUCTIONS
F487 ED0508           (     mon09v35.asm):02504                 FCB     $ED,5,8
F48A FD0408           (     mon09v35.asm):02505                 FCB     $FD,4,8
F48D DF0309           (     mon09v35.asm):02506                 FCB     $DF,3,9         'STU' INSTRUCTIONS
F490 EF0509           (     mon09v35.asm):02507                 FCB     $EF,5,9
F493 FF0409           (     mon09v35.asm):02508                 FCB     $FF,4,9
F496 9F030A           (     mon09v35.asm):02509                 FCB     $9F,3,10        'STX' INSTRUCTIONS
F499 AF050A           (     mon09v35.asm):02510                 FCB     $AF,5,10
F49C BF040A           (     mon09v35.asm):02511                 FCB     $BF,4,10
F49F 3A000B           (     mon09v35.asm):02512                 FCB     $3A,0,11        'ABX'
F4A2 89010C           (     mon09v35.asm):02513                 FCB     $89,1,12        'ADCA'
F4A5 99030C           (     mon09v35.asm):02514                 FCB     $99,3,12
F4A8 A9050C           (     mon09v35.asm):02515                 FCB     $A9,5,12
F4AB B9040C           (     mon09v35.asm):02516                 FCB     $B9,4,12
F4AE C9010D           (     mon09v35.asm):02517                 FCB     $C9,1,13        'ADCB'
F4B1 D9030D           (     mon09v35.asm):02518                 FCB     $D9,3,13
F4B4 E9050D           (     mon09v35.asm):02519                 FCB     $E9,5,13
F4B7 F9040D           (     mon09v35.asm):02520                 FCB     $F9,4,13
F4BA 8B010E           (     mon09v35.asm):02521                 FCB     $8B,1,14        'ADDA'
F4BD 9B030E           (     mon09v35.asm):02522                 FCB     $9B,3,14
F4C0 AB050E           (     mon09v35.asm):02523                 FCB     $AB,5,14
F4C3 BB040E           (     mon09v35.asm):02524                 FCB     $BB,4,14
F4C6 CB010F           (     mon09v35.asm):02525                 FCB     $CB,1,15        'ADDB'
F4C9 DB030F           (     mon09v35.asm):02526                 FCB     $DB,3,15
F4CC EB050F           (     mon09v35.asm):02527                 FCB     $EB,5,15
F4CF FB040F           (     mon09v35.asm):02528                 FCB     $FB,4,15
F4D2 C30210           (     mon09v35.asm):02529                 FCB     $C3,2,16        'ADDD'
F4D5 D30310           (     mon09v35.asm):02530                 FCB     $D3,3,16
F4D8 E30510           (     mon09v35.asm):02531                 FCB     $E3,5,16
F4DB F30410           (     mon09v35.asm):02532                 FCB     $F3,4,16
F4DE 480011           (     mon09v35.asm):02533                 FCB     $48,0,17        'ASLA'
F4E1 580012           (     mon09v35.asm):02534                 FCB     $58,0,18        'ASLB'
F4E4 080313           (     mon09v35.asm):02535                 FCB     $08,3,19        'ASL'
F4E7 680513           (     mon09v35.asm):02536                 FCB     $68,5,19
F4EA 780413           (     mon09v35.asm):02537                 FCB     $78,4,19
F4ED 470014           (     mon09v35.asm):02538                 FCB     $47,0,20        'ASRA'
F4F0 570015           (     mon09v35.asm):02539                 FCB     $57,0,21        'ASRB'
F4F3 070316           (     mon09v35.asm):02540                 FCB     $07,3,22        'ASR'
F4F6 670516           (     mon09v35.asm):02541                 FCB     $67,5,22
F4F9 770416           (     mon09v35.asm):02542                 FCB     $77,4,22
F4FC 850117           (     mon09v35.asm):02543                 FCB     $85,1,23        'BITA'
F4FF 950317           (     mon09v35.asm):02544                 FCB     $95,3,23
F502 A50517           (     mon09v35.asm):02545                 FCB     $A5,5,23
F505 B50417           (     mon09v35.asm):02546                 FCB     $B5,4,23
F508 C50118           (     mon09v35.asm):02547                 FCB     $C5,1,24        'BITB'
F50B D50318           (     mon09v35.asm):02548                 FCB     $D5,3,24
F50E E50518           (     mon09v35.asm):02549                 FCB     $E5,5,24
F511 F50418           (     mon09v35.asm):02550                 FCB     $F5,4,24
F514 4F0019           (     mon09v35.asm):02551                 FCB     $4F,0,25        'CLRA'
F517 5F001A           (     mon09v35.asm):02552                 FCB     $5F,0,26        'CLRB'
F51A 0F031B           (     mon09v35.asm):02553                 FCB     $0F,3,27        'CLR'
F51D 6F051B           (     mon09v35.asm):02554                 FCB     $6F,5,27
F520 7F041B           (     mon09v35.asm):02555                 FCB     $7F,4,27
F523 81011C           (     mon09v35.asm):02556                 FCB     $81,1,28        'CMPA'
F526 91031C           (     mon09v35.asm):02557                 FCB     $91,3,28
F529 A1051C           (     mon09v35.asm):02558                 FCB     $A1,5,28
F52C B1041C           (     mon09v35.asm):02559                 FCB     $B1,4,28
F52F C1011D           (     mon09v35.asm):02560                 FCB     $C1,1,29        'CMPB'
F532 D1031D           (     mon09v35.asm):02561                 FCB     $D1,3,29
F535 E1051D           (     mon09v35.asm):02562                 FCB     $E1,5,29
F538 F1041D           (     mon09v35.asm):02563                 FCB     $F1,4,29
F53B 8C021E           (     mon09v35.asm):02564                 FCB     $8C,2,30        'CMPX'
F53E 9C031E           (     mon09v35.asm):02565                 FCB     $9C,3,30
F541 AC051E           (     mon09v35.asm):02566                 FCB     $AC,5,30
F544 BC041E           (     mon09v35.asm):02567                 FCB     $BC,4,30
F547 43001F           (     mon09v35.asm):02568                 FCB     $43,0,31        'COMA'
F54A 530020           (     mon09v35.asm):02569                 FCB     $53,0,32        'COMB'
F54D 030321           (     mon09v35.asm):02570                 FCB     $03,3,33        'COM'
F550 630521           (     mon09v35.asm):02571                 FCB     $63,5,33
F553 730421           (     mon09v35.asm):02572                 FCB     $73,4,33
F556 3C0122           (     mon09v35.asm):02573                 FCB     $3C,1,34        'CWAI'
F559 190023           (     mon09v35.asm):02574                 FCB     $19,0,35        'DAA'
F55C 4A0024           (     mon09v35.asm):02575                 FCB     $4A,0,36        'DECA'
F55F 5A0025           (     mon09v35.asm):02576                 FCB     $5A,0,37        'DECB'
F562 0A0326           (     mon09v35.asm):02577                 FCB     $0A,3,38        'DEC'
F565 6A0526           (     mon09v35.asm):02578                 FCB     $6A,5,38
F568 7A0426           (     mon09v35.asm):02579                 FCB     $7A,4,38
F56B 880127           (     mon09v35.asm):02580                 FCB     $88,1,39        'EORA'
F56E 980327           (     mon09v35.asm):02581                 FCB     $98,3,39
F571 A80527           (     mon09v35.asm):02582                 FCB     $A8,5,39
F574 B80427           (     mon09v35.asm):02583                 FCB     $B8,4,39
F577 C80128           (     mon09v35.asm):02584                 FCB     $C8,1,40        'EORB'
F57A D80328           (     mon09v35.asm):02585                 FCB     $D8,3,40
F57D E80528           (     mon09v35.asm):02586                 FCB     $E8,5,40
F580 F80428           (     mon09v35.asm):02587                 FCB     $F8,4,40
F583 1E0729           (     mon09v35.asm):02588                 FCB     $1E,7,41        'EXG'
F586 1F072A           (     mon09v35.asm):02589                 FCB     $1F,7,42        'TFR'
F589 34062B           (     mon09v35.asm):02590                 FCB     $34,6,43        'PSHS'
F58C 36862C           (     mon09v35.asm):02591                 FCB     $36,$86,44      'PSHU'
F58F 35062D           (     mon09v35.asm):02592                 FCB     $35,6,45        'PULS'
F592 37862E           (     mon09v35.asm):02593                 FCB     $37,$86,46      'PULU'
F595 4C002F           (     mon09v35.asm):02594                 FCB     $4C,0,47        'INCA'
F598 5C0030           (     mon09v35.asm):02595                 FCB     $5C,0,48        'INCB'
F59B 0C0331           (     mon09v35.asm):02596                 FCB     $0C,3,49        'INC'
F59E 6C0531           (     mon09v35.asm):02597                 FCB     $6C,5,49
F5A1 7C0431           (     mon09v35.asm):02598                 FCB     $7C,4,49
F5A4 0E0332           (     mon09v35.asm):02599                 FCB     $0E,3,50        'JMP'
F5A7 6E0532           (     mon09v35.asm):02600                 FCB     $6E,5,50
F5AA 7E0432           (     mon09v35.asm):02601                 FCB     $7E,4,50
F5AD 9D0333           (     mon09v35.asm):02602                 FCB     $9D,3,51        'JSR'
F5B0 AD0533           (     mon09v35.asm):02603                 FCB     $AD,5,51
F5B3 BD0433           (     mon09v35.asm):02604                 FCB     $BD,4,51
F5B6 320534           (     mon09v35.asm):02605                 FCB     $32,5,52        'LEAS'
F5B9 330535           (     mon09v35.asm):02606                 FCB     $33,5,53        'LEAU'
F5BC 300536           (     mon09v35.asm):02607                 FCB     $30,5,54        'LEAX'
F5BF 310537           (     mon09v35.asm):02608                 FCB     $31,5,55        'LEAY'
F5C2 440038           (     mon09v35.asm):02609                 FCB     $44,0,56        'LSRA'
F5C5 540039           (     mon09v35.asm):02610                 FCB     $54,0,57        'LSRB'
F5C8 04033A           (     mon09v35.asm):02611                 FCB     $04,3,58        'LSR'
F5CB 64053A           (     mon09v35.asm):02612                 FCB     $64,5,58
F5CE 74043A           (     mon09v35.asm):02613                 FCB     $74,4,58
F5D1 3D003B           (     mon09v35.asm):02614                 FCB     $3D,0,59        'MUL'
F5D4 40003C           (     mon09v35.asm):02615                 FCB     $40,0,60        'NEGA'
F5D7 50003D           (     mon09v35.asm):02616                 FCB     $50,0,61        'NEGB'
F5DA 00033E           (     mon09v35.asm):02617                 FCB     $00,3,62        'NEG'
F5DD 60053E           (     mon09v35.asm):02618                 FCB     $60,5,62
F5E0 70043E           (     mon09v35.asm):02619                 FCB     $70,4,62
F5E3 12003F           (     mon09v35.asm):02620                 FCB     $12,0,63        'NOP'
F5E6 8A0140           (     mon09v35.asm):02621                 FCB     $8A,1,64        'ORA'
F5E9 9A0340           (     mon09v35.asm):02622                 FCB     $9A,3,64
F5EC AA0540           (     mon09v35.asm):02623                 FCB     $AA,5,64
F5EF BA0440           (     mon09v35.asm):02624                 FCB     $BA,4,64
F5F2 CA0141           (     mon09v35.asm):02625                 FCB     $CA,1,65        'ORB'
F5F5 DA0341           (     mon09v35.asm):02626                 FCB     $DA,3,65
F5F8 EA0541           (     mon09v35.asm):02627                 FCB     $EA,5,65
F5FB FA0441           (     mon09v35.asm):02628                 FCB     $FA,4,65
F5FE 1A0142           (     mon09v35.asm):02629                 FCB     $1A,1,66        'ORCC'
F601 840143           (     mon09v35.asm):02630                 FCB     $84,1,67        'ANDA'
F604 940343           (     mon09v35.asm):02631                 FCB     $94,3,67
F607 A40543           (     mon09v35.asm):02632                 FCB     $A4,5,67
F60A B40443           (     mon09v35.asm):02633                 FCB     $B4,4,67
F60D C40144           (     mon09v35.asm):02634                 FCB     $C4,1,68        'ANDB'
F610 D40344           (     mon09v35.asm):02635                 FCB     $D4,3,68
F613 E40544           (     mon09v35.asm):02636                 FCB     $E4,5,68
F616 F40444           (     mon09v35.asm):02637                 FCB     $F4,4,68
F619 1C0145           (     mon09v35.asm):02638                 FCB     $1C,1,69        'ANDCC'
F61C 490046           (     mon09v35.asm):02639                 FCB     $49,0,70        'ROLA'
F61F 590047           (     mon09v35.asm):02640                 FCB     $59,0,71        'ROLB'
F622 090348           (     mon09v35.asm):02641                 FCB     $09,3,72        'ROL'
F625 690548           (     mon09v35.asm):02642                 FCB     $69,5,72
F628 790448           (     mon09v35.asm):02643                 FCB     $79,4,72
F62B 460049           (     mon09v35.asm):02644                 FCB     $46,0,73        'RORA'
F62E 56004A           (     mon09v35.asm):02645                 FCB     $56,0,74        'RORB'
F631 06034B           (     mon09v35.asm):02646                 FCB     $06,3,75        'ROR'
F634 66054B           (     mon09v35.asm):02647                 FCB     $66,5,75
F637 76044B           (     mon09v35.asm):02648                 FCB     $76,4,75
F63A 3B004C           (     mon09v35.asm):02649                 FCB     $3B,0,76        'RTI'
F63D 39004D           (     mon09v35.asm):02650                 FCB     $39,0,77        'RTS'
F640 82014E           (     mon09v35.asm):02651                 FCB     $82,1,78        'SBCA'
F643 92034E           (     mon09v35.asm):02652                 FCB     $92,3,78
F646 A2054E           (     mon09v35.asm):02653                 FCB     $A2,5,78
F649 B2044E           (     mon09v35.asm):02654                 FCB     $B2,4,78
F64C C2014F           (     mon09v35.asm):02655                 FCB     $C2,1,79        'SBCB'
F64F D2034F           (     mon09v35.asm):02656                 FCB     $D2,3,79
F652 E2054F           (     mon09v35.asm):02657                 FCB     $E2,5,79
F655 F2044F           (     mon09v35.asm):02658                 FCB     $F2,4,79
F658 1D0050           (     mon09v35.asm):02659                 FCB     $1D,0,80
F65B 800151           (     mon09v35.asm):02660                 FCB     $80,1,81        'SUBA'
F65E 900351           (     mon09v35.asm):02661                 FCB     $90,3,81
F661 A00551           (     mon09v35.asm):02662                 FCB     $A0,5,81
F664 B00451           (     mon09v35.asm):02663                 FCB     $B0,4,81
F667 C00152           (     mon09v35.asm):02664                 FCB     $C0,1,82        'SUBB'
F66A D00352           (     mon09v35.asm):02665                 FCB     $D0,3,82
F66D E00552           (     mon09v35.asm):02666                 FCB     $E0,5,82
F670 F00452           (     mon09v35.asm):02667                 FCB     $F0,4,82
F673 830253           (     mon09v35.asm):02668                 FCB     $83,2,83        'SUBD'
F676 930353           (     mon09v35.asm):02669                 FCB     $93,3,83
F679 A30553           (     mon09v35.asm):02670                 FCB     $A3,5,83
F67C B30453           (     mon09v35.asm):02671                 FCB     $B3,4,83
F67F 3F0054           (     mon09v35.asm):02672                 FCB     $3F,0,84        'SWI'
F682 130055           (     mon09v35.asm):02673                 FCB     $13,0,85        'SYNC'
F685 4D0056           (     mon09v35.asm):02674                 FCB     $4D,0,86        'TSTA'
F688 5D0057           (     mon09v35.asm):02675                 FCB     $5D,0,87        'TSTB'
F68B 0D0358           (     mon09v35.asm):02676                 FCB     $0D,3,88        'TST'
F68E 6D0558           (     mon09v35.asm):02677                 FCB     $6D,5,88
F691 7D0458           (     mon09v35.asm):02678                 FCB     $7D,4,88
F694 160963           (     mon09v35.asm):02679                 FCB     $16,9,99        'LBRA'
F697 170964           (     mon09v35.asm):02680                 FCB     $17,9,100       'LBSR'
F69A 200865           (     mon09v35.asm):02681                 FCB     $20,8,101       'BRA'
F69D 210866           (     mon09v35.asm):02682                 FCB     $21,8,102       'BRN'
F6A0 220867           (     mon09v35.asm):02683                 FCB     $22,8,103       'BHI'
F6A3 230868           (     mon09v35.asm):02684                 FCB     $23,8,104       'BLS'
F6A6 240869           (     mon09v35.asm):02685                 FCB     $24,8,105       'BCC'
F6A9 25086A           (     mon09v35.asm):02686                 FCB     $25,8,106       'BCS'
F6AC 26086B           (     mon09v35.asm):02687                 FCB     $26,8,107       'BNE'
F6AF 27086C           (     mon09v35.asm):02688                 FCB     $27,8,108       'BEQ'
F6B2 28086D           (     mon09v35.asm):02689                 FCB     $28,8,109       'BVC'
F6B5 29086E           (     mon09v35.asm):02690                 FCB     $29,8,110       'BVS'
F6B8 2A086F           (     mon09v35.asm):02691                 FCB     $2A,8,111       'BPL'
F6BB 2B0870           (     mon09v35.asm):02692                 FCB     $2B,8,112       'BMI'
F6BE 2C0871           (     mon09v35.asm):02693                 FCB     $2C,8,113       'BGE'
F6C1 2D0872           (     mon09v35.asm):02694                 FCB     $2D,8,114       'BLT'
F6C4 2E0873           (     mon09v35.asm):02695                 FCB     $2E,8,115       'BGT'
F6C7 2F0874           (     mon09v35.asm):02696                 FCB     $2F,8,116       'BLE'
F6CA 8D0884           (     mon09v35.asm):02697                 FCB     $8D,8,132       'BSR'
F6CD CF0000           (     mon09v35.asm):02698                 FCB     $CF,0,0         'FCB', UNKNOWN OPCODE
                      (     mon09v35.asm):02699         
                      (     mon09v35.asm):02700         ;*
                      (     mon09v35.asm):02701         ;* OPERAND TABLE NUMBER TWO, $10 PREFIX INSTRUCTIONS
                      (     mon09v35.asm):02702         ;*
F6D0                  (     mon09v35.asm):02703         OPTAB2
F6D0 830259           (     mon09v35.asm):02704                 FCB     $83,2,89        'CMPD'
F6D3 8C025A           (     mon09v35.asm):02705                 FCB     $8C,2,90        'CMPY'
F6D6 8E025C           (     mon09v35.asm):02706                 FCB     $8E,2,92        'LDY'
F6D9 930359           (     mon09v35.asm):02707                 FCB     $93,3,89
F6DC 9C035A           (     mon09v35.asm):02708                 FCB     $9C,3,90
F6DF 9E035C           (     mon09v35.asm):02709                 FCB     $9E,3,92
F6E2 9F035E           (     mon09v35.asm):02710                 FCB     $9F,3,94        'STY'
F6E5 A30559           (     mon09v35.asm):02711                 FCB     $A3,5,89
F6E8 AC055A           (     mon09v35.asm):02712                 FCB     $AC,5,90
F6EB AE055C           (     mon09v35.asm):02713                 FCB     $AE,5,92
F6EE AF055E           (     mon09v35.asm):02714                 FCB     $AF,5,94
F6F1 B30459           (     mon09v35.asm):02715                 FCB     $B3,4,89
F6F4 BC045A           (     mon09v35.asm):02716                 FCB     $BC,4,90
F6F7 BE045C           (     mon09v35.asm):02717                 FCB     $BE,4,92
F6FA BF045E           (     mon09v35.asm):02718                 FCB     $BF,4,94
F6FD CE025B           (     mon09v35.asm):02719                 FCB     $CE,2,91        'LDS'
F700 DE035B           (     mon09v35.asm):02720                 FCB     $DE,3,91
F703 DF035D           (     mon09v35.asm):02721                 FCB     $DF,3,93        'STS'
F706 EE055B           (     mon09v35.asm):02722                 FCB     $EE,5,91
F709 EF055D           (     mon09v35.asm):02723                 FCB     $EF,5,93
F70C FE045B           (     mon09v35.asm):02724                 FCB     $FE,4,91
F70F FF045D           (     mon09v35.asm):02725                 FCB     $FF,4,93
F712 3F005F           (     mon09v35.asm):02726                 FCB     $3F,0,95        'SWI2'
F715 210975           (     mon09v35.asm):02727                 FCB     $21,9,117       'LBRN'
F718 220976           (     mon09v35.asm):02728                 FCB     $22,9,118       'LBHI'
F71B 230977           (     mon09v35.asm):02729                 FCB     $23,9,119       'LBLS'
F71E 240978           (     mon09v35.asm):02730                 FCB     $24,9,120       'LBCC'
F721 250979           (     mon09v35.asm):02731                 FCB     $25,9,121       'LBCS'
F724 26097A           (     mon09v35.asm):02732                 FCB     $26,9,122       'LBNE'
F727 27097B           (     mon09v35.asm):02733                 FCB     $27,9,123       'LBEQ'
F72A 28097C           (     mon09v35.asm):02734                 FCB     $28,9,124       'LBVC'
F72D 29097D           (     mon09v35.asm):02735                 FCB     $29,9,125       'LBVS'
F730 2A097E           (     mon09v35.asm):02736                 FCB     $2A,9,126       'LBPL'
F733 2B097F           (     mon09v35.asm):02737                 FCB     $2B,9,127       'LBMI'
F736 2C0980           (     mon09v35.asm):02738                 FCB     $2C,9,128       'LBGE'
F739 2D0981           (     mon09v35.asm):02739                 FCB     $2D,9,129       'LBLT'
F73C 2E0982           (     mon09v35.asm):02740                 FCB     $2E,9,130       'LBGT'
F73F 2F0983           (     mon09v35.asm):02741                 FCB     $2F,9,131       'LBLE'
F742 CF0100           (     mon09v35.asm):02742                 FCB     $CF,1,0
                      (     mon09v35.asm):02743         
                      (     mon09v35.asm):02744         ;*
                      (     mon09v35.asm):02745         ;* OPERAND TABLE #3, $11 PREFIXES
                      (     mon09v35.asm):02746         ;*
F745                  (     mon09v35.asm):02747         OPTAB3
F745 8C0260           (     mon09v35.asm):02748                 FCB     $8C,2,96        'CMPS'
F748 9C0360           (     mon09v35.asm):02749                 FCB     $9C,3,96
F74B AC0560           (     mon09v35.asm):02750                 FCB     $AC,5,96
F74E BC0460           (     mon09v35.asm):02751                 FCB     $BC,4,96
F751 830261           (     mon09v35.asm):02752                 FCB     $83,2,97        'CMPU'
F754 930361           (     mon09v35.asm):02753                 FCB     $93,3,97
F757 A30561           (     mon09v35.asm):02754                 FCB     $A3,5,97
F75A B30461           (     mon09v35.asm):02755                 FCB     $B3,4,97
F75D 3F0062           (     mon09v35.asm):02756                 FCB     $3F,0,98        'SWI3'
                      (     mon09v35.asm):02757         
                      (     mon09v35.asm):02758         ;*
                      (     mon09v35.asm):02759         ;* INSTRUCTION TEXT TABLE
                      (     mon09v35.asm):02760         ;*
F760                  (     mon09v35.asm):02761         ITABLE
F760 46434220         (     mon09v35.asm):02762                 FCC     'FCB '          0
F764 4C444120         (     mon09v35.asm):02763                 FCC     'LDA '          1
F768 4C444220         (     mon09v35.asm):02764                 FCC     'LDB '          2
F76C 4C444420         (     mon09v35.asm):02765                 FCC     'LDD '          3
F770 4C445520         (     mon09v35.asm):02766                 FCC     'LDU '          4
F774 4C445820         (     mon09v35.asm):02767                 FCC     'LDX '          5
F778 53544120         (     mon09v35.asm):02768                 FCC     'STA '          6
F77C 53544220         (     mon09v35.asm):02769                 FCC     'STB '          7
F780 53544420         (     mon09v35.asm):02770                 FCC     'STD '          8
F784 53545520         (     mon09v35.asm):02771                 FCC     'STU '          9
F788 53545820         (     mon09v35.asm):02772                 FCC     'STX '          10
F78C 41425820         (     mon09v35.asm):02773                 FCC     'ABX '          11
F790 41444341         (     mon09v35.asm):02774                 FCC     'ADCA'          12
F794 41444342         (     mon09v35.asm):02775                 FCC     'ADCB'          13
F798 41444441         (     mon09v35.asm):02776                 FCC     'ADDA'          14
F79C 41444442         (     mon09v35.asm):02777                 FCC     'ADDB'          15
F7A0 41444444         (     mon09v35.asm):02778                 FCC     'ADDD'          16
F7A4 41534C41         (     mon09v35.asm):02779                 FCC     'ASLA'          17
F7A8 41534C42         (     mon09v35.asm):02780                 FCC     'ASLB'          18
F7AC 41534C20         (     mon09v35.asm):02781                 FCC     'ASL '          19
F7B0 41535241         (     mon09v35.asm):02782                 FCC     'ASRA'          20
F7B4 41535242         (     mon09v35.asm):02783                 FCC     'ASRB'          21
F7B8 41535220         (     mon09v35.asm):02784                 FCC     'ASR '          22
F7BC 42495441         (     mon09v35.asm):02785                 FCC     'BITA'          23
F7C0 42495442         (     mon09v35.asm):02786                 FCC     'BITB'          24
F7C4 434C5241         (     mon09v35.asm):02787                 FCC     'CLRA'          25
F7C8 434C5242         (     mon09v35.asm):02788                 FCC     'CLRB'          26
F7CC 434C5220         (     mon09v35.asm):02789                 FCC     'CLR '          27
F7D0 434D5041         (     mon09v35.asm):02790                 FCC     'CMPA'          28
F7D4 434D5042         (     mon09v35.asm):02791                 FCC     'CMPB'          29
F7D8 434D5058         (     mon09v35.asm):02792                 FCC     'CMPX'          30
F7DC 434F4D41         (     mon09v35.asm):02793                 FCC     'COMA'          31
F7E0 434F4D42         (     mon09v35.asm):02794                 FCC     'COMB'          32
F7E4 434F4D20         (     mon09v35.asm):02795                 FCC     'COM '          33
F7E8 43574149         (     mon09v35.asm):02796                 FCC     'CWAI'          34
F7EC 44414120         (     mon09v35.asm):02797                 FCC     'DAA '          35
F7F0 44454341         (     mon09v35.asm):02798                 FCC     'DECA'          36
F7F4 44454342         (     mon09v35.asm):02799                 FCC     'DECB'          37
F7F8 44454320         (     mon09v35.asm):02800                 FCC     'DEC '          38
F7FC 454F5241         (     mon09v35.asm):02801                 FCC     'EORA'          39
F800 454F5242         (     mon09v35.asm):02802                 FCC     'EORB'          40
F804 45584720         (     mon09v35.asm):02803                 FCC     'EXG '          41
F808 54465220         (     mon09v35.asm):02804                 FCC     'TFR '          42
F80C 50534853         (     mon09v35.asm):02805                 FCC     'PSHS'          43
F810 50534855         (     mon09v35.asm):02806                 FCC     'PSHU'          44
F814 50554C53         (     mon09v35.asm):02807                 FCC     'PULS'          45
F818 50554C55         (     mon09v35.asm):02808                 FCC     'PULU'          46
F81C 494E4341         (     mon09v35.asm):02809                 FCC     'INCA'          47
F820 494E4342         (     mon09v35.asm):02810                 FCC     'INCB'          48
F824 494E4320         (     mon09v35.asm):02811                 FCC     'INC '          49
F828 4A4D5020         (     mon09v35.asm):02812                 FCC     'JMP '          50
F82C 4A535220         (     mon09v35.asm):02813                 FCC     'JSR '          51
F830 4C454153         (     mon09v35.asm):02814                 FCC     'LEAS'          52
F834 4C454155         (     mon09v35.asm):02815                 FCC     'LEAU'          53
F838 4C454158         (     mon09v35.asm):02816                 FCC     'LEAX'          54
F83C 4C454159         (     mon09v35.asm):02817                 FCC     'LEAY'          55
F840 4C535241         (     mon09v35.asm):02818                 FCC     'LSRA'          56
F844 4C535242         (     mon09v35.asm):02819                 FCC     'LSRB'          57
F848 4C535220         (     mon09v35.asm):02820                 FCC     'LSR '          58
F84C 4D554C20         (     mon09v35.asm):02821                 FCC     'MUL '          59
F850 4E454741         (     mon09v35.asm):02822                 FCC     'NEGA'          60
F854 4E454742         (     mon09v35.asm):02823                 FCC     'NEGB'          61
F858 4E454720         (     mon09v35.asm):02824                 FCC     'NEG '          62
F85C 4E4F5020         (     mon09v35.asm):02825                 FCC     'NOP '          63
F860 4F524120         (     mon09v35.asm):02826                 FCC     'ORA '          64
F864 4F524220         (     mon09v35.asm):02827                 FCC     'ORB '          65
F868 4F524343         (     mon09v35.asm):02828                 FCC     'ORCC'          66
F86C 414E4441         (     mon09v35.asm):02829                 FCC     'ANDA'          67
F870 414E4442         (     mon09v35.asm):02830                 FCC     'ANDB'          68
F874 414E4443         (     mon09v35.asm):02831                 FCC     'ANDC'          69
F878 524F4C41         (     mon09v35.asm):02832                 FCC     'ROLA'          70
F87C 524F4C42         (     mon09v35.asm):02833                 FCC     'ROLB'          71
F880 524F4C20         (     mon09v35.asm):02834                 FCC     'ROL '          72
F884 524F5241         (     mon09v35.asm):02835                 FCC     'RORA'          73
F888 524F5242         (     mon09v35.asm):02836                 FCC     'RORB'          74
F88C 524F5220         (     mon09v35.asm):02837                 FCC     'ROR '          75
F890 52544920         (     mon09v35.asm):02838                 FCC     'RTI '          76
F894 52545320         (     mon09v35.asm):02839                 FCC     'RTS '          77
F898 53424341         (     mon09v35.asm):02840                 FCC     'SBCA'          78
F89C 53424342         (     mon09v35.asm):02841                 FCC     'SBCB'          79
F8A0 53455820         (     mon09v35.asm):02842                 FCC     'SEX '          80
F8A4 53554241         (     mon09v35.asm):02843                 FCC     'SUBA'          81
F8A8 53554242         (     mon09v35.asm):02844                 FCC     'SUBB'          82
F8AC 53554244         (     mon09v35.asm):02845                 FCC     'SUBD'          83
F8B0 53574920         (     mon09v35.asm):02846                 FCC     'SWI '          84
F8B4 53594E43         (     mon09v35.asm):02847                 FCC     'SYNC'          85
F8B8 54535441         (     mon09v35.asm):02848                 FCC     'TSTA'          86
F8BC 54535442         (     mon09v35.asm):02849                 FCC     'TSTB'          87
F8C0 54535420         (     mon09v35.asm):02850                 FCC     'TST '          88
F8C4 434D5044         (     mon09v35.asm):02851                 FCC     'CMPD'          89
F8C8 434D5059         (     mon09v35.asm):02852                 FCC     'CMPY'          90
F8CC 4C445320         (     mon09v35.asm):02853                 FCC     'LDS '          91
F8D0 4C445920         (     mon09v35.asm):02854                 FCC     'LDY '          92
F8D4 53545320         (     mon09v35.asm):02855                 FCC     'STS '          93
F8D8 53545920         (     mon09v35.asm):02856                 FCC     'STY '          94
F8DC 53574932         (     mon09v35.asm):02857                 FCC     'SWI2'          95
F8E0 434D5053         (     mon09v35.asm):02858                 FCC     'CMPS'          96
F8E4 434D5055         (     mon09v35.asm):02859                 FCC     'CMPU'          97
F8E8 53574933         (     mon09v35.asm):02860                 FCC     'SWI3'          98
F8EC 4C425241         (     mon09v35.asm):02861                 FCC     'LBRA'          99
F8F0 4C425352         (     mon09v35.asm):02862                 FCC     'LBSR'          100
F8F4 42524120         (     mon09v35.asm):02863                 FCC     'BRA '          101
F8F8 42524E20         (     mon09v35.asm):02864                 FCC     'BRN '          102
F8FC 42484920         (     mon09v35.asm):02865                 FCC     'BHI '          103
F900 424C5320         (     mon09v35.asm):02866                 FCC     'BLS '          104
F904 42434320         (     mon09v35.asm):02867                 FCC     'BCC '          105
F908 42435320         (     mon09v35.asm):02868                 FCC     'BCS '          106
F90C 424E4520         (     mon09v35.asm):02869                 FCC     'BNE '          107
F910 42455120         (     mon09v35.asm):02870                 FCC     'BEQ '          108
F914 42564320         (     mon09v35.asm):02871                 FCC     'BVC '          109
F918 42565320         (     mon09v35.asm):02872                 FCC     'BVS '          110
F91C 42504C20         (     mon09v35.asm):02873                 FCC     'BPL '          111
F920 424D4920         (     mon09v35.asm):02874                 FCC     'BMI '          112
F924 42474520         (     mon09v35.asm):02875                 FCC     'BGE '          113
F928 424C5420         (     mon09v35.asm):02876                 FCC     'BLT '          114
F92C 42475420         (     mon09v35.asm):02877                 FCC     'BGT '          115
F930 424C4520         (     mon09v35.asm):02878                 FCC     'BLE '          116
F934 4C42524E         (     mon09v35.asm):02879                 FCC     'LBRN'          117
F938 4C424849         (     mon09v35.asm):02880                 FCC     'LBHI'          118
F93C 4C424C53         (     mon09v35.asm):02881                 FCC     'LBLS'          119
F940 4C424343         (     mon09v35.asm):02882                 FCC     'LBCC'          120
F944 4C424353         (     mon09v35.asm):02883                 FCC     'LBCS'          121
F948 4C424E45         (     mon09v35.asm):02884                 FCC     'LBNE'          122
F94C 4C424551         (     mon09v35.asm):02885                 FCC     'LBEQ'          123
F950 4C425643         (     mon09v35.asm):02886                 FCC     'LBVC'          124
F954 4C425653         (     mon09v35.asm):02887                 FCC     'LBVS'          125
F958 4C42504C         (     mon09v35.asm):02888                 FCC     'LBPL'          126
F95C 4C424D49         (     mon09v35.asm):02889                 FCC     'LBMI'          127
F960 4C424745         (     mon09v35.asm):02890                 FCC     'LBGE'          128
F964 4C424C54         (     mon09v35.asm):02891                 FCC     'LBLT'          129
F968 4C424754         (     mon09v35.asm):02892                 FCC     'LBGT'          130
F96C 4C424C45         (     mon09v35.asm):02893                 FCC     'LBLE'          131
F970 42535220         (     mon09v35.asm):02894                 FCC     'BSR '          132
                      (     mon09v35.asm):02895         
                      (     mon09v35.asm):02896         ;*
                      (     mon09v35.asm):02897         ;* CONDITIONAL TABLE, FIRST BYTE IS MASK, NEXT THREE BYTES ARE POSSIBLE
                      (     mon09v35.asm):02898         ;* BIT SETTINGS
                      (     mon09v35.asm):02899         ;*
F974                  (     mon09v35.asm):02900         CONTAB
F974 05000000         (     mon09v35.asm):02901                 FCB     $05,$00,$00,$00 'BHI', NO C OR Z
F978 05010405         (     mon09v35.asm):02902                 FCB     $05,$01,$04,$05 'BLS', EITHER C OR Z
F97C 01000000         (     mon09v35.asm):02903                 FCB     $01,$00,$00,$00 'BCC', NO C
F980 01010101         (     mon09v35.asm):02904                 FCB     $01,$01,$01,$01 'BCS', C SET
F984 04000000         (     mon09v35.asm):02905                 FCB     $04,$00,$00,$00 'BNE', NO Z
F988 04040404         (     mon09v35.asm):02906                 FCB     $04,$04,$04,$04 'BEQ', Z SET
F98C 02000000         (     mon09v35.asm):02907                 FCB     $02,$00,$00,$00 'BVC', V CLEAR
F990 02020202         (     mon09v35.asm):02908                 FCB     $02,$02,$02,$02 'BVS', V SET
F994 08000000         (     mon09v35.asm):02909                 FCB     $08,$00,$00,$00 'BPL', N CLEAR
F998 08080808         (     mon09v35.asm):02910                 FCB     $08,$08,$08,$08 'BMI', N SET
F99C 0A000A0A         (     mon09v35.asm):02911                 FCB     $0A,$00,$0A,$0A 'BGE', N=V
F9A0 0A080202         (     mon09v35.asm):02912                 FCB     $0A,$08,$02,$02 'BLT', N -= V
F9A4 0E0A0000         (     mon09v35.asm):02913                 FCB     $0E,$0A,$00,$00 'BGT', N=V, Z=0
F9A8 0E080204         (     mon09v35.asm):02914                 FCB     $0E,$08,$02,$04 'BLE', V-=N OR Z=1
F9AC 0C060E           (     mon09v35.asm):02915                 FCB     $0C,$06,$0E
                      (     mon09v35.asm):02916         
                      (     mon09v35.asm):02917         ;* TRANSFER AND EXCHANGE REGISTER TABLE
F9AF 7F70             (     mon09v35.asm):02918         TFREGT  FDB     SAVA
F9B1 7F73             (     mon09v35.asm):02919         INDTAB  FDB     SAVX
F9B3 7F75             (     mon09v35.asm):02920                 FDB     SAVY
F9B5 7F77             (     mon09v35.asm):02921                 FDB     SAVU
F9B7 7F7B             (     mon09v35.asm):02922                 FDB     SAVS
F9B9 7F79             (     mon09v35.asm):02923                 FDB     SAVPC
                      (     mon09v35.asm):02924         
                      (     mon09v35.asm):02925         ;* PULL TABLE FOR PULS
F9BB 7F6F             (     mon09v35.asm):02926         PULSTAB FDB     SAVCC
F9BD 7F70             (     mon09v35.asm):02927                 FDB     SAVA
F9BF 7F71             (     mon09v35.asm):02928                 FDB     SAVB
F9C1 7F72             (     mon09v35.asm):02929                 FDB     SAVDP
F9C3 7F73             (     mon09v35.asm):02930                 FDB     SAVX
F9C5 7F75             (     mon09v35.asm):02931                 FDB     SAVY
F9C7 7F77             (     mon09v35.asm):02932                 FDB     SAVU
F9C9 7F79             (     mon09v35.asm):02933                 FDB     SAVPC
                      (     mon09v35.asm):02934         
                      (     mon09v35.asm):02935         ;* PULL TABLE FOR PULU
F9CB 7F6F             (     mon09v35.asm):02936         PULUTAB FDB     SAVCC
F9CD 7F70             (     mon09v35.asm):02937                 FDB     SAVA
F9CF 7F71             (     mon09v35.asm):02938                 FDB     SAVB
F9D1 7F72             (     mon09v35.asm):02939                 FDB     SAVDP
F9D3 7F73             (     mon09v35.asm):02940                 FDB     SAVX
F9D5 7F75             (     mon09v35.asm):02941                 FDB     SAVY
F9D7 7F7B             (     mon09v35.asm):02942                 FDB     SAVS
F9D9 7F79             (     mon09v35.asm):02943                 FDB     SAVPC
                      (     mon09v35.asm):02944         
                      (     mon09v35.asm):02945         ;* VECTOR HANDLERS
F9DB 6E9F7F60         (     mon09v35.asm):02946         SWI3    JMP     [SWI3ADR]
F9DF 6E9F7F5E         (     mon09v35.asm):02947         SWI2    JMP     [SWI2ADR]
F9E3 6E9F7F62         (     mon09v35.asm):02948         IRQ             JMP     [IRQADR]
F9E7 6E9F7F64         (     mon09v35.asm):02949         FIRQ    JMP     [FIRQADR]
                      (     mon09v35.asm):02950         ;MODS BY JQ
                      (     mon09v35.asm):02951          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
F9EB 6E9F7F66         (     mon09v35.asm):02952         NMI             JMP     [NMIADR]
                      (     mon09v35.asm):02953          ENDC
                      (     mon09v35.asm):02954          IFNE JQ_ILLOP          USE JQ ILLOP ENHANCEMENTS
F9EF 6E9F7F68         (     mon09v35.asm):02955         ILOP    JMP     [ILOPADR]
                      (     mon09v35.asm):02956          ENDC
                      (     mon09v35.asm):02957         ;
                      (     mon09v35.asm):02958         ;* HELP TEXT
F9F3 00               (     mon09v35.asm):02959         HTEXT   FCB     0               NEW LINE TO START
F9F4 4220302D37203C61 (     mon09v35.asm):02960                 FCN             'B 0-7 <addr>|Set breakpoint (0000=remove)'
     6464723E7C536574
     20627265616B706F
     696E742028303030
     303D72656D6F7665
     2900
FA1E 4352203C7265673E (     mon09v35.asm):02961                 FCN             'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
FA3E 4355203C75617274 (     mon09v35.asm):02962                 FCN             'CU <uart> <addr>|Change UART address'
     3E203C616464723E
     7C4368616E676520
     5541525420616464
     7265737300
                      (     mon09v35.asm):02963         
                      (     mon09v35.asm):02964          IFNE JQ_ILLOP  JQ ILLOP ENHANCEMENTS
FA63 4356203C7665633E (     mon09v35.asm):02965                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-7)'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7220
     287665633D312D37
     2900
                      (     mon09v35.asm):02966          ELSE
                      (     mon09v35.asm):02967                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-6)'
                      (     mon09v35.asm):02968          ENDC                   JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):02969         
FA95 44427C446973706C (     mon09v35.asm):02970                 FCN             'DB|Display breakpoints'
     617920627265616B
     706F696E747300
FAAC 4444203C61646472 (     mon09v35.asm):02971                 FCN             'DD <addr>,<addr>|Display dissasembled memory'
     3E2C3C616464723E
     7C446973706C6179
     2064697373617365
     6D626C6564206D65
     6D6F727900
FAD9 444D203C61646472 (     mon09v35.asm):02972                 FCN             'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
FB0C 44527C446973706C (     mon09v35.asm):02973                 FCN             'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
FB2B 44557C446973706C (     mon09v35.asm):02974                 FCN             'DU|Display UART addresses'
     6179205541525420
     6164647265737365
     7300
FB45 44567C446973706C (     mon09v35.asm):02975                 FCN             'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
FB62 45203C616464723E (     mon09v35.asm):02976                 FCN             'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
FB77 464D203C61646472 (     mon09v35.asm):02977                 FCN             'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
FB9B 47205B3C61646472 (     mon09v35.asm):02978                 FCN             'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
                      (     mon09v35.asm):02979         ;MODS BY JQ
                      (     mon09v35.asm):02980          IFNE JQ_JMPMOD         JQ JUMP ENHANCEMENTS
                      (     mon09v35.asm):02981         ;       FCN             'J <B><T><F>|Jump to <B>ASIC, <T>inyBASIC or <F>ORTH'
FBBB 4A203C423E3C463E (     mon09v35.asm):02982                 FCN             'J <B><F>|Jump to <B>ASIC or <F>ORTH'
     7C4A756D7020746F
     203C423E41534943
     206F72203C463E4F
     52544800
                      (     mon09v35.asm):02983          ENDC                           JQ JUMP ENHANCEMENTS
                      (     mon09v35.asm):02984         ;
FBDF 4C7C4C6F61642069 (     mon09v35.asm):02985                 FCN             'L|Load iHEX or S19 image from UART2'
     484558206F722053
     313920696D616765
     2066726F6D205541
     52543200
FC03 4D4D203C61646472 (     mon09v35.asm):02986                 FCN             'MM <addr>,<addr> <addr>|Move memory (Source,End Destination)'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F72792028536F75
     7263652C456E6420
     44657374696E6174
     696F6E2900
FC40 4D54203C61646472 (     mon09v35.asm):02987                 FCN             'MT <addr>,<addr>|Memory test'
     3E2C3C616464723E
     7C4D656D6F727920
     7465737400
FC5D 5252203C61646472 (     mon09v35.asm):02988                 FCN             'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
FC7D 5257203C61646472 (     mon09v35.asm):02989                 FCN             'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
FCA5 53205B3C61646472 (     mon09v35.asm):02990                 FCN             'S [<addr>]|Single step execution'
     3E5D7C53696E676C
     6520737465702065
     7865637574696F6E
     00
                      (     mon09v35.asm):02991         ;       FCN             'T|Terminal passthrough to UART2'
FCC6 57203C616464723E (     mon09v35.asm):02992                 FCN             'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
FCE6 5852203C61646472 (     mon09v35.asm):02993                 FCN             'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
FD06 5857203C61646472 (     mon09v35.asm):02994                 FCN             'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
FD2E 2B203C76616C7565 (     mon09v35.asm):02995                 FCN             '+ <value>+<value>|Hexadecimal addition'
     3E2B3C76616C7565
     3E7C486578616465
     63696D616C206164
     646974696F6E00
FD55 2D203C76616C7565 (     mon09v35.asm):02996                 FCN             '- <value>-<value>|Hexadecimal subtraction'
     3E2D3C76616C7565
     3E7C486578616465
     63696D616C207375
     627472616374696F
     6E00
FD7F FF               (     mon09v35.asm):02997                 FCB     -1              END OF TABLE
                      (     mon09v35.asm):02998         ;*
                      (     mon09v35.asm):02999         ;
                      (     mon09v35.asm):03000         ;===============================================================================
                      (     mon09v35.asm):03001         ;*
                      (     mon09v35.asm):03002         ;* MACHINE DEPENDANT I/O ROUTINES FOR 68(3)B50 UARTS
                      (     mon09v35.asm):03003         ;*      X REGISTER HOLDS PORT ADDRESS.
                      (     mon09v35.asm):03004         ;===============================================================================
                      (     mon09v35.asm):03005         ;* INITIALIZE UART(X)
FD80                  (     mon09v35.asm):03006         INIT
FD80 8603             (     mon09v35.asm):03007                 LDA             #CTRL1                  MASTER RESET
FD82 A784             (     mon09v35.asm):03008                 STA             ,X                              WRITE COMMAND REG
FD84 8615             (     mon09v35.asm):03009                 LDA             #CTRL2                  ENABLE 115200, 8NO1
FD86 A784             (     mon09v35.asm):03010                 STA             ,X                              WRITE COMMAND REG
FD88 39               (     mon09v35.asm):03011                 RTS
                      (     mon09v35.asm):03012         ;
                      (     mon09v35.asm):03013         ;===============================================================================
                      (     mon09v35.asm):03014         ;* READ UART(X)
FD89                  (     mon09v35.asm):03015         READ
FD89 A684             (     mon09v35.asm):03016                 LDA             ,X                              GET STATUS
FD8B 8501             (     mon09v35.asm):03017                 BITA    #RDRF                   RECEIVER READY?
FD8D 2705             (     mon09v35.asm):03018                 BEQ             NOCHR                   NO CHARACTER
FD8F A601             (     mon09v35.asm):03019                 LDA             1,X                             READ CHARACTER
FD91 1A04             (     mon09v35.asm):03020                 ORCC    #%00000100              SET 'Z'
FD93 39               (     mon09v35.asm):03021                 RTS
FD94                  (     mon09v35.asm):03022         NOCHR
FD94 86FF             (     mon09v35.asm):03023                 LDA     #$FF                            NO CHAR
FD96 39               (     mon09v35.asm):03024                 RTS
                      (     mon09v35.asm):03025         ;
                      (     mon09v35.asm):03026         ;===============================================================================
                      (     mon09v35.asm):03027         ;* WRITE UART(X)
FD97                  (     mon09v35.asm):03028         WRITE
FD97 E684             (     mon09v35.asm):03029                 LDB             ,X                              GET STATUS
FD99 C502             (     mon09v35.asm):03030                 BITB    #TDRE                   XMITTER READY?
FD9B 27FA             (     mon09v35.asm):03031                 BEQ             WRITE                   NO, TRY AGAIN
FD9D A701             (     mon09v35.asm):03032                 STA             1,X                             OUTPUT
FD9F 39               (     mon09v35.asm):03033                 RTS
                      (     mon09v35.asm):03034         ;
                      (     mon09v35.asm):03035         ;===============================================================================
                      (     mon09v35.asm):03036         ; LOOKUP TABLE CONTAINING MON09 RAM INTERRUPT RE-VECTORING ADDRESSES
                      (     mon09v35.asm):03037         ;===============================================================================
FDA0 6E9F7F5C         (     mon09v35.asm):03038         MON09_SWIADR    JMP     [SWIADR]        ;SWI Interrupt vector
FDA4 6E9F7F5E         (     mon09v35.asm):03039         MON09_SWI2ADR   JMP     [SWI2ADR]       ;SWI2 Interrupt vector
FDA8 6E9F7F60         (     mon09v35.asm):03040         MON09_SWI3ADR   JMP     [SWI3ADR]       ;SWI3 Interrupt vector
FDAC 6E9F7F64         (     mon09v35.asm):03041         MON09_FIRQADR   JMP     [FIRQADR]       ;FIRQ Interrupt vector
FDB0 6E9F7F62         (     mon09v35.asm):03042         MON09_IRQADR    JMP     [IRQADR]        ;IRQ Interrupt vector
FDB4 6E9F7F66         (     mon09v35.asm):03043         MON09_NMIADR    JMP     [NMIADR]        ;NMI Interrupt vector
                      (     mon09v35.asm):03044         
                      (     mon09v35.asm):03045           IFNE JQ_ILLOP         USE JQ ILLOP ENHANCEMENTS
FDB8 6E9F7F68         (     mon09v35.asm):03046         MON09_ILOPADR   JMP     [ILOPADR]       ;ILLOP Interrupt vector
                      (     mon09v35.asm):03047           ENDC                          USE JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):03048         ;
                      (     mon09v35.asm):03049          IFLT LOC       ;IF NOT IN RAM
FDBC FFFFFFFFFFFFFFFF (     mon09v35.asm):03050                 FILL $FF,VECTTBL-*
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFF
                      (     mon09v35.asm):03051         ;*
                      (     mon09v35.asm):03052         ;* MACHINE VECTORS
                      (     mon09v35.asm):03053         ;*
                      (     mon09v35.asm):03054         ;MODS BY JQ
                      (     mon09v35.asm):03055           IFNE JQ_ILLOP         USE JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):03056                 ORG     VECTTBL
FFF0 F9EF             (     mon09v35.asm):03057                 FDB     ILOP            HD6309 ONLY
                      (     mon09v35.asm):03058           ELSE
                      (     mon09v35.asm):03059                 ORG     VECTTBL
                      (     mon09v35.asm):03060           ENDC                          USE JQ ILLOP ENHANCEMENTS
                      (     mon09v35.asm):03061         ;
FFF2 F9DB             (     mon09v35.asm):03062                 FDB     SWI3
FFF4 F9DF             (     mon09v35.asm):03063                 FDB     SWI2
FFF6 F9E7             (     mon09v35.asm):03064                 FDB     FIRQ
FFF8 F9E3             (     mon09v35.asm):03065                 FDB     IRQ
FFFA F38C             (     mon09v35.asm):03066                 FDB     SWIHND
                      (     mon09v35.asm):03067         ;MODS BY JQ
                      (     mon09v35.asm):03068           IFNE JQ_NMIRAM        USE JQ NMI ENHANCEMENTS
FFFC F9EB             (     mon09v35.asm):03069                 FDB     NMI                     USE LOCAL NMI HANDLER
                      (     mon09v35.asm):03070           ELSE
                      (     mon09v35.asm):03071                 FDB     NMIHND          USE MON09 NMI HANDLER
                      (     mon09v35.asm):03072           ENDC
                      (     mon09v35.asm):03073         ;
FFFE E448             (     mon09v35.asm):03074                 FDB     RESET
                      (     mon09v35.asm):03075          ENDC           ;IF NOT IN RAM
