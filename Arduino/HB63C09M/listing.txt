 AS V1.42 Beta [Bld 261] - Source File blockcopy.asm - Page 1 - 02/12/2024 05:52:04 AM


    1/   0 :                            ; short block copy
    2/   0 : =$4000                     loader: equ    $4000                      ; copy loader to this location
    3/   0 : =$3F08                     sycall: equ    $3f08                      ; this is machine code to call monitor
    4/   0 : =$84                       loadsm: equ    $84                        ; this is the specific byte we write to loader+1
    5/   0 :                                                                      ; this modifys the code to be lda x
    6/   0 :                            
    7/   0 : =$A03E                     loadfm: equ    $A03E                      ; address of the byte loader
    8/   0 :                            
    9/   0 :                            
   10/   0 :                            
   11/   0 :                                    ;org    $FFC0                      ; this is where the loader is placed by the MCU
   12/ 300 :                                    org    $300
   13/ 300 :                            InitValues:
   14/ 300 : 8E 03 0A                           ldx    #CopyBlock                 ; copy code starts here
   15/ 303 : CE 40 00                           ldu    #loader                    ; destination of loader code
   16/ 306 : 10 86 00 08                CpByts: ldw    #((LstByt+2)-CopyBlock)    ; number of bytes into W
   17/ 30A :                            
   18/ 30A :                            ;;  we need to relocate the loader to the static block so we can load the rom space.
   19/ 30A :                            
   20/ 30A :                            CopyBlock:
   21/ 30A : A6 80                              lda    ,x+                         ; transfer a byte
   22/ 30C : A7 C0                              sta    ,u+                         ; store a byte
   23/ 30E : 10 5A                              decw
   24/ 310 : 26 F8                      LstByt: bne CopyBlock
   25/ 312 :                            
   26/ 312 :                            ;;  This is a bit tricky, the byte loader sends a new byte at each read attempt
   27/ 312 :                            ;;  so when we are reading from the address stored in x multiple times each time
   28/ 312 :                            ;;  this is a new value.  See the Arduinio sketch for the specifc structure
   29/ 312 :                            ;;  of the stored data (TLDR - byte 1 and 2 = destination address,  byte 3 and 4 contain
   30/ 312 :                            ;;  the number of bytes - and the following data is the actual ROM code.)
   31/ 312 :                            ;;  The read attempt must be continuious and consecutive or the loader will reset.
   32/ 312 :                            ;;  that is, you can not do other IO routines with the AVR while reading the data (like
   33/ 312 :                            ;;  use the disk routines or the UART.)
   34/ 312 :                            
   35/ 312 :                            
   36/ 312 : 8E A0 3E                           ldx   #loadfm                     ; set the start address to the loader
   37/ 315 : 86 FF                              lda   #255                        ; unlock code magic nubmer to the loader
   38/ 317 : A7 84                              sta   ,x                           ; unlock the loader
   39/ 319 : A6 84                              lda   ,x                           ; load destiation address into D
   40/ 31B : E6 84                              ldb   ,x                           ; ...
   41/ 31D : 1F 03                              tfr   d,u                         ; we will need A
   42/ 31F : 11 A6 84                           lde   ,x                           ; byte count into W
   43/ 322 : 11 E6 84                           ldf   ,x                           ; ...
   44/ 325 : 86 84                              lda   #loadsm                     ; load self modifying code to a
   45/ 327 : B7 40 01                           sta   loader+1                    ; modify the code lda x+ -> lda x
   46/ 32A : 7E 40 00                           jmp   loader                      ; jump to self copied loader
   47/ 32D :                            
   48/ 32D :                            
   49/ 32D :                            
 AS V1.42 Beta [Bld 261] - Source File blockcopy.asm - Page 2 - 02/12/2024 05:52:04 AM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
 COPYBLOCK :                    30A C | *CPBYTS :                       306 C |
*DATE :                "02/12/2024" - | *FALSE :                          0 - |
*HAS64 :                          1 - | *INITVALUES :                   300 C |
*LISTON :                         1 - |  LOADER :                      4000 - |
 LOADFM :                      A03E - |  LOADSM :                        84 - |
 LSTBYT :                       310 C | *MACEXP :                         7 - |
*MOMCPU :                      6309 - | *MOMCPUNAME :                "6309" - |
*NESTMAX :                      100 - | *PADDING :                        0 - |
*RELAXED :                        0 - | *SYCALL :                      3F08 - |
*TIME :               "05:52:04 AM" - | *TRUE :                           1 - |
*VERSION :                     142F - |

     24 symbols
     19 unused symbols

 AS V1.42 Beta [Bld 261] - Source File blockcopy.asm - Page 3 - 02/12/2024 05:52:04 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.00 seconds assembly time

     49 lines source file
      2 passes
      0 errors
      0 warnings
