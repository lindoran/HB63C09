* 6809 assembly program generated by cmoc 0.1.90


	SECTION	code


_fputChar	EXPORT


*******************************************************************************

* FUNCTION fputChar(): defined at fdos.c:28
_fputChar	EQU	*
* Prototype: void fputChar(char)
* Assembly-only function.
* Line fdos.c:29: inline assembly
* Inline assembly:


        LDA 3,S
        JSR 0xCD18
    

* End of inline assembly.
* Useless label L00007 removed
	RTS
* END FUNCTION fputChar(): defined at fdos.c:28
funcend_fputChar	EQU *
funcsize_fputChar	EQU	funcend_fputChar-_fputChar
_finBuffer	EXPORT


*******************************************************************************

* FUNCTION finBuffer(): defined at fdos.c:43
_finBuffer	EQU	*
* Prototype: void finBuffer(void)
* Assembly-only function.
* Line fdos.c:44: inline assembly
* Inline assembly:


        JSR 0xCD1B ;
        LDA #0x0A ;
        JSR 0xCD18 ;
    

* End of inline assembly.
* Useless label L00008 removed
	RTS
* END FUNCTION finBuffer(): defined at fdos.c:43
funcend_finBuffer	EQU *
funcsize_finBuffer	EQU	funcend_finBuffer-_finBuffer
_print	EXPORT


*******************************************************************************

* FUNCTION print(): defined at fdos.c:74
_print	EQU	*
* Prototype: void print(const char *)
* Assembly-only function.
* Line fdos.c:75: inline assembly
* Inline assembly:


        LDX 2,s ; load the address of the string to output
    p1:
        LDA ,x+ ; load the first character of the string
        CMPA #0x0A ; if its a newline
        BNE p2 ; we have to print 0x0D if not we skip and go on
        JSR 0xCD18 ; print the newline
        LDA #0x0D ; stage the carrage return
    p2: JSR 0xCD18 ; call the putchr routine to output the character
        BNE p1 ; the character is not null, we keep going

    

* End of inline assembly.
* Useless label L00009 removed
	RTS
* END FUNCTION print(): defined at fdos.c:74
funcend_print	EQU *
funcsize_print	EQU	funcend_print-_print
_fchrClass	EXPORT


*******************************************************************************

* FUNCTION fchrClass(): defined at fdos.c:94
_fchrClass	EQU	*
* Prototype: char fchrClass(char)
* Assembly-only function.
* Line fdos.c:95: inline assembly
* Inline assembly:


        CLRB ; start with b as 0 ie not a letter / number
        LDA 3,s ; get the lsb from 16 bit value from the stack
        JSR 0xCD21 ; determine if a letter or a number,if so carry is cleared
        BCS cl ; if c flag is set (this also updates the last terminator in the dos enviorntment)
        INCB ; return 1 if its a character
    cl:
    

* End of inline assembly.
* Useless label L00010 removed
	RTS
* END FUNCTION fchrClass(): defined at fdos.c:94
funcend_fchrClass	EQU *
funcsize_fchrClass	EQU	funcend_fchrClass-_fchrClass
_pcrlf	EXPORT


*******************************************************************************

* FUNCTION pcrlf(): defined at fdos.c:107
_pcrlf	EQU	*
* Prototype: void pcrlf(void)
* Assembly-only function.
* Line fdos.c:108: inline assembly
* Inline assembly:


        JSR 0xCD24
    

* End of inline assembly.
* Useless label L00011 removed
	RTS
* END FUNCTION pcrlf(): defined at fdos.c:107
funcend_pcrlf	EQU *
funcsize_pcrlf	EQU	funcend_pcrlf-_pcrlf
_fgetNext	EXPORT


*******************************************************************************

* FUNCTION fgetNext(): defined at fdos.c:129
_fgetNext	EQU	*
* Prototype: char fgetNext(void)
* Assembly-only function.
* Line fdos.c:130: inline assembly
* Inline assembly:


        JSR 0xCD27 ; get next character
        TFR A,B ; place in B where cmoc expects return
    

* End of inline assembly.
* Useless label L00012 removed
	RTS
* END FUNCTION fgetNext(): defined at fdos.c:129
funcend_fgetNext	EQU *
funcsize_fgetNext	EQU	funcend_fgetNext-_fgetNext
_frestoreIO	EXPORT


*******************************************************************************

* FUNCTION frestoreIO(): defined at fdos.c:137
_frestoreIO	EQU	*
* Prototype: void frestoreIO(void)
* Assembly-only function.
* Line fdos.c:138: inline assembly
* Inline assembly:


        JSR 0xCD2A ; restore io vectors
    

* End of inline assembly.
* Useless label L00013 removed
	RTS
* END FUNCTION frestoreIO(): defined at fdos.c:137
funcend_frestoreIO	EQU *
funcsize_frestoreIO	EQU	funcend_frestoreIO-_frestoreIO
_foutHex	EXPORT


*******************************************************************************

* FUNCTION foutHex(): defined at fdos.c:150
_foutHex	EQU	*
* Prototype: void foutHex(const void *)
* Assembly-only function.
* Line fdos.c:151: inline assembly
* Inline assembly:


        LDX 2,s
        JSR 0xCD3C
    

* End of inline assembly.
* Useless label L00014 removed
	RTS
* END FUNCTION foutHex(): defined at fdos.c:150
funcend_foutHex	EQU *
funcsize_foutHex	EQU	funcend_foutHex-_foutHex


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 0 utility routine(s).


*******************************************************************************

	END
