                      (           fdos.s):00001         * 6809 assembly program generated by cmoc 0.1.90
                      (           fdos.s):00002         
                      (           fdos.s):00003         
                      (           fdos.s):00004                 SECTION code
                      (           fdos.s):00005         
                      (           fdos.s):00006         
                      (           fdos.s):00007         _fputChar       EXPORT
                      (           fdos.s):00008         
                      (           fdos.s):00009         
                      (           fdos.s):00010         *******************************************************************************
                      (           fdos.s):00011         
                      (           fdos.s):00012         * FUNCTION fputChar(): defined at fdos.c:28
     0000             (           fdos.s):00013         _fputChar       EQU     *
                      (           fdos.s):00014         * Prototype: void fputChar(char)
                      (           fdos.s):00015         * Assembly-only function.
                      (           fdos.s):00016         * Line fdos.c:29: inline assembly
                      (           fdos.s):00017         * Inline assembly:
                      (           fdos.s):00018         
                      (           fdos.s):00019         
0000 A663             (           fdos.s):00020                 LDA 3,S
0002 BDCD18           (           fdos.s):00021                 JSR 0xCD18
                      (           fdos.s):00022             
                      (           fdos.s):00023         
                      (           fdos.s):00024         * End of inline assembly.
                      (           fdos.s):00025         * Useless label L00007 removed
0005 39               (           fdos.s):00026                 RTS
                      (           fdos.s):00027         * END FUNCTION fputChar(): defined at fdos.c:28
     0006             (           fdos.s):00028         funcend_fputChar        EQU *
     0006             (           fdos.s):00029         funcsize_fputChar       EQU     funcend_fputChar-_fputChar
                      (           fdos.s):00030         _finBuffer      EXPORT
                      (           fdos.s):00031         
                      (           fdos.s):00032         
                      (           fdos.s):00033         *******************************************************************************
                      (           fdos.s):00034         
                      (           fdos.s):00035         * FUNCTION finBuffer(): defined at fdos.c:43
     0006             (           fdos.s):00036         _finBuffer      EQU     *
                      (           fdos.s):00037         * Prototype: void finBuffer(void)
                      (           fdos.s):00038         * Assembly-only function.
                      (           fdos.s):00039         * Line fdos.c:44: inline assembly
                      (           fdos.s):00040         * Inline assembly:
                      (           fdos.s):00041         
                      (           fdos.s):00042         
0006 BDCD1B           (           fdos.s):00043                 JSR 0xCD1B ;
0009 860A             (           fdos.s):00044                 LDA #0x0A ;
000B BDCD18           (           fdos.s):00045                 JSR 0xCD18 ;
                      (           fdos.s):00046             
                      (           fdos.s):00047         
                      (           fdos.s):00048         * End of inline assembly.
                      (           fdos.s):00049         * Useless label L00008 removed
000E 39               (           fdos.s):00050                 RTS
                      (           fdos.s):00051         * END FUNCTION finBuffer(): defined at fdos.c:43
     000F             (           fdos.s):00052         funcend_finBuffer       EQU *
     0009             (           fdos.s):00053         funcsize_finBuffer      EQU     funcend_finBuffer-_finBuffer
                      (           fdos.s):00054         _print  EXPORT
                      (           fdos.s):00055         
                      (           fdos.s):00056         
                      (           fdos.s):00057         *******************************************************************************
                      (           fdos.s):00058         
                      (           fdos.s):00059         * FUNCTION print(): defined at fdos.c:74
     000F             (           fdos.s):00060         _print  EQU     *
                      (           fdos.s):00061         * Prototype: void print(const char *)
                      (           fdos.s):00062         * Assembly-only function.
                      (           fdos.s):00063         * Line fdos.c:75: inline assembly
                      (           fdos.s):00064         * Inline assembly:
                      (           fdos.s):00065         
                      (           fdos.s):00066         
000F AE62             (           fdos.s):00067                 LDX 2,s ; load the address of the string to output
0011                  (           fdos.s):00068             p1:
0011 A680             (           fdos.s):00069                 LDA ,x+ ; load the first character of the string
0013 810A             (           fdos.s):00070                 CMPA #0x0A ; if its a newline
0015 2605             (           fdos.s):00071                 BNE p2 ; we have to print 0x0D if not we skip and go on
0017 BDCD18           (           fdos.s):00072                 JSR 0xCD18 ; print the newline
001A 860D             (           fdos.s):00073                 LDA #0x0D ; stage the carrage return
001C BDCD18           (           fdos.s):00074             p2: JSR 0xCD18 ; call the putchr routine to output the character
001F 26F0             (           fdos.s):00075                 BNE p1 ; the character is not null, we keep going
                      (           fdos.s):00076         
                      (           fdos.s):00077             
                      (           fdos.s):00078         
                      (           fdos.s):00079         * End of inline assembly.
                      (           fdos.s):00080         * Useless label L00009 removed
0021 39               (           fdos.s):00081                 RTS
                      (           fdos.s):00082         * END FUNCTION print(): defined at fdos.c:74
     0022             (           fdos.s):00083         funcend_print   EQU *
     0013             (           fdos.s):00084         funcsize_print  EQU     funcend_print-_print
                      (           fdos.s):00085         _fchrClass      EXPORT
                      (           fdos.s):00086         
                      (           fdos.s):00087         
                      (           fdos.s):00088         *******************************************************************************
                      (           fdos.s):00089         
                      (           fdos.s):00090         * FUNCTION fchrClass(): defined at fdos.c:94
     0022             (           fdos.s):00091         _fchrClass      EQU     *
                      (           fdos.s):00092         * Prototype: char fchrClass(char)
                      (           fdos.s):00093         * Assembly-only function.
                      (           fdos.s):00094         * Line fdos.c:95: inline assembly
                      (           fdos.s):00095         * Inline assembly:
                      (           fdos.s):00096         
                      (           fdos.s):00097         
0022 5F               (           fdos.s):00098                 CLRB ; start with b as 0 ie not a letter / number
0023 A663             (           fdos.s):00099                 LDA 3,s ; get the lsb from 16 bit value from the stack
0025 BDCD21           (           fdos.s):00100                 JSR 0xCD21 ; determine if a letter or a number,if so carry is cleared
0028 2501             (           fdos.s):00101                 BCS cl ; if c flag is set (this also updates the last terminator in the dos enviorntment)
002A 5C               (           fdos.s):00102                 INCB ; return 1 if its a character
002B                  (           fdos.s):00103             cl:
                      (           fdos.s):00104             
                      (           fdos.s):00105         
                      (           fdos.s):00106         * End of inline assembly.
                      (           fdos.s):00107         * Useless label L00010 removed
002B 39               (           fdos.s):00108                 RTS
                      (           fdos.s):00109         * END FUNCTION fchrClass(): defined at fdos.c:94
     002C             (           fdos.s):00110         funcend_fchrClass       EQU *
     000A             (           fdos.s):00111         funcsize_fchrClass      EQU     funcend_fchrClass-_fchrClass
                      (           fdos.s):00112         _pcrlf  EXPORT
                      (           fdos.s):00113         
                      (           fdos.s):00114         
                      (           fdos.s):00115         *******************************************************************************
                      (           fdos.s):00116         
                      (           fdos.s):00117         * FUNCTION pcrlf(): defined at fdos.c:107
     002C             (           fdos.s):00118         _pcrlf  EQU     *
                      (           fdos.s):00119         * Prototype: void pcrlf(void)
                      (           fdos.s):00120         * Assembly-only function.
                      (           fdos.s):00121         * Line fdos.c:108: inline assembly
                      (           fdos.s):00122         * Inline assembly:
                      (           fdos.s):00123         
                      (           fdos.s):00124         
002C BDCD24           (           fdos.s):00125                 JSR 0xCD24
                      (           fdos.s):00126             
                      (           fdos.s):00127         
                      (           fdos.s):00128         * End of inline assembly.
                      (           fdos.s):00129         * Useless label L00011 removed
002F 39               (           fdos.s):00130                 RTS
                      (           fdos.s):00131         * END FUNCTION pcrlf(): defined at fdos.c:107
     0030             (           fdos.s):00132         funcend_pcrlf   EQU *
     0004             (           fdos.s):00133         funcsize_pcrlf  EQU     funcend_pcrlf-_pcrlf
                      (           fdos.s):00134         _fgetNext       EXPORT
                      (           fdos.s):00135         
                      (           fdos.s):00136         
                      (           fdos.s):00137         *******************************************************************************
                      (           fdos.s):00138         
                      (           fdos.s):00139         * FUNCTION fgetNext(): defined at fdos.c:129
     0030             (           fdos.s):00140         _fgetNext       EQU     *
                      (           fdos.s):00141         * Prototype: char fgetNext(void)
                      (           fdos.s):00142         * Assembly-only function.
                      (           fdos.s):00143         * Line fdos.c:130: inline assembly
                      (           fdos.s):00144         * Inline assembly:
                      (           fdos.s):00145         
                      (           fdos.s):00146         
0030 BDCD27           (           fdos.s):00147                 JSR 0xCD27 ; get next character
0033 1F89             (           fdos.s):00148                 TFR A,B ; place in B where cmoc expects return
                      (           fdos.s):00149             
                      (           fdos.s):00150         
                      (           fdos.s):00151         * End of inline assembly.
                      (           fdos.s):00152         * Useless label L00012 removed
0035 39               (           fdos.s):00153                 RTS
                      (           fdos.s):00154         * END FUNCTION fgetNext(): defined at fdos.c:129
     0036             (           fdos.s):00155         funcend_fgetNext        EQU *
     0006             (           fdos.s):00156         funcsize_fgetNext       EQU     funcend_fgetNext-_fgetNext
                      (           fdos.s):00157         _frestoreIO     EXPORT
                      (           fdos.s):00158         
                      (           fdos.s):00159         
                      (           fdos.s):00160         *******************************************************************************
                      (           fdos.s):00161         
                      (           fdos.s):00162         * FUNCTION frestoreIO(): defined at fdos.c:137
     0036             (           fdos.s):00163         _frestoreIO     EQU     *
                      (           fdos.s):00164         * Prototype: void frestoreIO(void)
                      (           fdos.s):00165         * Assembly-only function.
                      (           fdos.s):00166         * Line fdos.c:138: inline assembly
                      (           fdos.s):00167         * Inline assembly:
                      (           fdos.s):00168         
                      (           fdos.s):00169         
0036 BDCD2A           (           fdos.s):00170                 JSR 0xCD2A ; restore io vectors
                      (           fdos.s):00171             
                      (           fdos.s):00172         
                      (           fdos.s):00173         * End of inline assembly.
                      (           fdos.s):00174         * Useless label L00013 removed
0039 39               (           fdos.s):00175                 RTS
                      (           fdos.s):00176         * END FUNCTION frestoreIO(): defined at fdos.c:137
     003A             (           fdos.s):00177         funcend_frestoreIO      EQU *
     0004             (           fdos.s):00178         funcsize_frestoreIO     EQU     funcend_frestoreIO-_frestoreIO
                      (           fdos.s):00179         _foutHex        EXPORT
                      (           fdos.s):00180         
                      (           fdos.s):00181         
                      (           fdos.s):00182         *******************************************************************************
                      (           fdos.s):00183         
                      (           fdos.s):00184         * FUNCTION foutHex(): defined at fdos.c:150
     003A             (           fdos.s):00185         _foutHex        EQU     *
                      (           fdos.s):00186         * Prototype: void foutHex(const void *)
                      (           fdos.s):00187         * Assembly-only function.
                      (           fdos.s):00188         * Line fdos.c:151: inline assembly
                      (           fdos.s):00189         * Inline assembly:
                      (           fdos.s):00190         
                      (           fdos.s):00191         
003A AE62             (           fdos.s):00192                 LDX 2,s
003C BDCD3C           (           fdos.s):00193                 JSR 0xCD3C
                      (           fdos.s):00194             
                      (           fdos.s):00195         
                      (           fdos.s):00196         * End of inline assembly.
                      (           fdos.s):00197         * Useless label L00014 removed
003F 39               (           fdos.s):00198                 RTS
                      (           fdos.s):00199         * END FUNCTION foutHex(): defined at fdos.c:150
     0040             (           fdos.s):00200         funcend_foutHex EQU *
     0006             (           fdos.s):00201         funcsize_foutHex        EQU     funcend_foutHex-_foutHex
                      (           fdos.s):00202         
                      (           fdos.s):00203         
                      (           fdos.s):00204                 ENDSECTION
                      (           fdos.s):00205         
                      (           fdos.s):00206         
                      (           fdos.s):00207         
                      (           fdos.s):00208         
                      (           fdos.s):00209                 SECTION initgl
                      (           fdos.s):00210         
                      (           fdos.s):00211         
                      (           fdos.s):00212         
                      (           fdos.s):00213         
                      (           fdos.s):00214         *******************************************************************************
                      (           fdos.s):00215         
                      (           fdos.s):00216         * Initialize global variables.
                      (           fdos.s):00217         
                      (           fdos.s):00218         
                      (           fdos.s):00219                 ENDSECTION
                      (           fdos.s):00220         
                      (           fdos.s):00221         
                      (           fdos.s):00222         
                      (           fdos.s):00223         
                      (           fdos.s):00224                 SECTION rodata
                      (           fdos.s):00225         
                      (           fdos.s):00226         
     0000             (           fdos.s):00227         string_literals_start   EQU     *
     0000             (           fdos.s):00228         string_literals_end     EQU     *
                      (           fdos.s):00229         
                      (           fdos.s):00230         
                      (           fdos.s):00231         *******************************************************************************
                      (           fdos.s):00232         
                      (           fdos.s):00233         * READ-ONLY GLOBAL VARIABLES
                      (           fdos.s):00234         
                      (           fdos.s):00235         
                      (           fdos.s):00236                 ENDSECTION
                      (           fdos.s):00237         
                      (           fdos.s):00238         
                      (           fdos.s):00239         
                      (           fdos.s):00240         
                      (           fdos.s):00241                 SECTION rwdata
                      (           fdos.s):00242         
                      (           fdos.s):00243         
                      (           fdos.s):00244         * Statically-initialized global variables
                      (           fdos.s):00245         * Statically-initialized local static variables
                      (           fdos.s):00246         
                      (           fdos.s):00247         
                      (           fdos.s):00248                 ENDSECTION
                      (           fdos.s):00249         
                      (           fdos.s):00250         
                      (           fdos.s):00251         
                      (           fdos.s):00252         
                      (           fdos.s):00253                 SECTION bss
                      (           fdos.s):00254         
                      (           fdos.s):00255         
     0000             (           fdos.s):00256         bss_start       EQU     *
                      (           fdos.s):00257         * Uninitialized global variables
                      (           fdos.s):00258         * Uninitialized local static variables
     0000             (           fdos.s):00259         bss_end EQU     *
                      (           fdos.s):00260         
                      (           fdos.s):00261         
                      (           fdos.s):00262                 ENDSECTION
                      (           fdos.s):00263         
                      (           fdos.s):00264         
                      (           fdos.s):00265         
                      (           fdos.s):00266         
                      (           fdos.s):00267         *******************************************************************************
                      (           fdos.s):00268         
                      (           fdos.s):00269         * Importing 0 utility routine(s).
                      (           fdos.s):00270         
                      (           fdos.s):00271         
                      (           fdos.s):00272         *******************************************************************************
                      (           fdos.s):00273         
                      (           fdos.s):00274                 END
