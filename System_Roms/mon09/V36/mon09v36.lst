                      (     mon09v36.asm):00001         ;******************************************************************************
                      (     mon09v36.asm):00002         ;*
                      (     mon09v36.asm):00003         ;* MON09: A software debug monitor for the 6809
                      (     mon09v36.asm):00004         ;*
                      (     mon09v36.asm):00005         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (     mon09v36.asm):00006         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and 48K of RAM
                      (     mon09v36.asm):00007         ;* from $2000-$DFFF. The 8K block from $0000-$1FFF is used for I/O devices
                      (     mon09v36.asm):00008         ;* etc. MON09 uses 160 bytes of memory at the very top of available RAM,
                      (     mon09v36.asm):00009         ;* and the user stack pointer is initialized to point to the beginning of
                      (     mon09v36.asm):00010         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (     mon09v36.asm):00011         ;*
                      (     mon09v36.asm):00012         ;* Console and Host I/O device drivers are included for both 6551 and 6552
                      (     mon09v36.asm):00013         ;* type uarts, which are selected by the set symbol 'utype', and conditionally
                      (     mon09v36.asm):00014         ;* assembled into the code. THIS FILE MUST BE PROCESSED WITH 'MACRO' PRIOR
                      (     mon09v36.asm):00015         ;* TO ASSEMBLING WITH ASM09!!! You can modify the I/O drivers to support a
                      (     mon09v36.asm):00016         ;* different uart device if you wish. The serial I/O drivers are at the very
                      (     mon09v36.asm):00017         ;* end of the monitor source code (Just before the interrupt vectors).
                      (     mon09v36.asm):00018         ;*
                      (     mon09v36.asm):00019         ;* Copyright 1985-2007 Dave Dunfield
                      (     mon09v36.asm):00020         ;* All rights reserved.
                      (     mon09v36.asm):00021         ;*
                      (     mon09v36.asm):00022         ;* Additional modifications for the 6809SBC by Johnny Quest.
                      (     mon09v36.asm):00023         ;*
                      (     mon09v36.asm):00024         ;******************************************************************************
                      (     mon09v36.asm):00025         ; VERSION 3.6
                      (     mon09v36.asm):00026         ; 2021-0904:    JQ      ON ILLOP/DIV INTERRUPT, CORRECTED BUG WHERE THE HANDLER
                      (     mon09v36.asm):00027         ;                                        JUMPS TO THE BREAKPOINT DISPLAY TO EXIT BUT THE 'BRKREG'
                      (     mon09v36.asm):00028         ;                                        IS LOCATED WITHIN THE BREAKPOINT ROUTINE, WHICH CAUSES
                      (     mon09v36.asm):00029         ;                                        CONFUSIION AND EVENTUAL HANG.
                      (     mon09v36.asm):00030         ;                               JQ      SEEMS THAT DETECTION OF A 6309 AND SETTING IT TO 'NATIVE'
                      (     mon09v36.asm):00031         ;                                        MODE CAUSES PROBLEMS, SO THE MODE REGISTER IS NOT TOUCHED
                      (     mon09v36.asm):00032         ;                                        AND THE HD6309 IS LEFT IN 'EMULATION MODE'.
                      (     mon09v36.asm):00033         ;                               JQ      CORRECTED BUG IN 'CHGREG' WHERE CHANGING REGISTER 'D' WAS NOT
                      (     mon09v36.asm):00034         ;                                        RECOGNIZED AS A 16-BIT REGISTER.
                      (     mon09v36.asm):00035         ;******************************************************************************
                      (     mon09v36.asm):00036         ; VERSION 3.5
                      (     mon09v36.asm):00037         ; 2021-0824:    JQ      ON ILLOP/DIV INTERRUPT, INFORMS WHICH ONE CAUSED IT.
                      (     mon09v36.asm):00038         ;                               JQ      IF 6309 IS DETECTED, THE MODE REGISTER IS SET TO 'NATIVE'.
                      (     mon09v36.asm):00039         ; 2021-0823:    JQ      ADDED SUPPORT FOR DETECTING IF THE HOST MCU IS AN MC6809
                      (     mon09v36.asm):00040         ;                                        OR AN HD6309 AND EMITS THE PROPER SIGN-ON MESSAGE.
                      (     mon09v36.asm):00041         ;                               JQ      ADDED A BUILD DATE AND TIME TO THE SIGN-ON MESSAGE. THE
                      (     mon09v36.asm):00042         ;                                        LINUX "build.sh" SCRIPT CREATES A SEPARATE ASSEMBLY FILE
                      (     mon09v36.asm):00043         ;                                        THAT IS "INCLUDED" IN THE MAIN ASSEMBLY FILE.
                      (     mon09v36.asm):00044         ;                               JQ      BE AWARE THAT THE DISASSEMBLER DOES NOT YET SUPPORT THE
                      (     mon09v36.asm):00045         ;                                        6309 EXTENDED INSTRUCTIONS.
                      (     mon09v36.asm):00046         ; 2021-0419:    JQ      ADDED SUPPORT FOR MERGING THE BINARY IMAGES OF THE
                      (     mon09v36.asm):00047         ;                                        LANGUAGE SUPPORT MODULES DIRECTLY INTO THE MON09
                      (     mon09v36.asm):00048         ;                                        IMAGE FILE. USE CONDITIONAL ASSEMBLY TO ENABLE/DISABLE.
                      (     mon09v36.asm):00049         ;                                        CONSTRUCTED MASTER BUILD SCRIPT TO ASSEMBLE THE VARIOUS
                      (     mon09v36.asm):00050         ;                                        LANGUAGE MODULES INTO A MASTER FIRMWARE IMAGE FILE. THUS,
                      (     mon09v36.asm):00051         ;                                        INCLUDING THEM INTO THE MON09 IMAGE AS DATA STATEMENTS
                      (     mon09v36.asm):00052         ;                                        IS UNNESSESARY.
                      (     mon09v36.asm):00053         ; 2021-0412:    JQ      CHANGED THE MANNER IN WHICH NMI IS HANDLED SO THAT THE
                      (     mon09v36.asm):00054         ;                                        VECTOR CAN BE SET IN MEMORY JUST AS THE FIRQ, IRQ, SWI2
                      (     mon09v36.asm):00055         ;                                        AND SWI3 HANDLERS DO. IF AN NMI VECTOR IS NOT SPECIFIED,
                      (     mon09v36.asm):00056         ;                                        MON09 DEFAULTS TO THE INTERNAL NMI HANDLER, WHICH IS SHOWN
                      (     mon09v36.asm):00057         ;                                        BY THE 'DV' COMMAND. ADDED ADDITIONAL BYTES TO THE DATA
                      (     mon09v36.asm):00058         ;                                        TABLES AND AN NMI HANDLER. USE CONDITIONAL STATEMENT TO
                      (     mon09v36.asm):00059         ;                                        ENABLE IT.
                      (     mon09v36.asm):00060         ;                               JQ      ADDED HD6309 ILLOP INSTRUCTION HANDLER. IF NO VECTOR
                      (     mon09v36.asm):00061         ;                                        SPECIFIED, DEFAULTS TO THE MON09 ILLOP HANDLER. USE
                      (     mon09v36.asm):00062         ;                                        CONDITIONAL STATEMENT TO ENABLE IT.
                      (     mon09v36.asm):00063         ;                               JQ      ADDED 'JUMP' COMMAND TO ACCESS THE FP BASIC, TINY BASIC
                      (     mon09v36.asm):00064         ;                                        AND FORTH MODULES IN ROM. USE CONDITIONAL STATEMENT TO
                      (     mon09v36.asm):00065         ;                                        ENABLE IT.
                      (     mon09v36.asm):00066         ;                               JQ      ADDED JUMP TABLE OF 'HOOKS' THAT PROVIDES A SUMMARY OF
                      (     mon09v36.asm):00067         ;                                        USER ACCESSIBLE MON09 ROM ENTRY ADDRESSES AND IRQ RE-
                      (     mon09v36.asm):00068         ;                                        VECTORING ADDRESSES IN DATA RAM. IT IS INTENDED TO BE
                      (     mon09v36.asm):00069         ;                                        EASILY IDENTIFIED AND EXTRACTED FROM THE SYMBOL TABLE
                      (     mon09v36.asm):00070         ;                                        TO BE 'INCLUDED' IN THE USER'S PROGRAM FILE. SINCE THE
                      (     mon09v36.asm):00071         ;                                        TABLE IS LOCATED AT
                      (     mon09v36.asm):00072         ;                               JQ      IN 'FILMEM' ROUTINE, ADDED CODE TO LIMIT THE USER
                      (     mon09v36.asm):00073         ;                                        SPECIFIED ENDING ADDRESS SO AS NOT TO OVERWRITE MON09
                      (     mon09v36.asm):00074         ;                                        DATA IN RAM. THIS EFFECTIVELY LIMITS THE 'FM' COMMAND
                      (     mon09v36.asm):00075         ;                                        TO RAM ONLY ON THE 6809SBC.
                      (     mon09v36.asm):00076         ;
                      (     mon09v36.asm):00077         ;******************************************************************************
                      (     mon09v36.asm):00078         ; VERSION 3.4
                      (     mon09v36.asm):00079         ; 2021-0404:    JQ      MODIFIED FOR USE WITH 6809SBC PROJECT USING 6850 ACIA.
                      (     mon09v36.asm):00080         ;                                        ASSEMBLES WITH LWASM V4.18, WHICH SUPPORTS MACROS AND
                      (     mon09v36.asm):00081         ;                                        CONDITIONAL ASSEMBLY STATEMENTS.
                      (     mon09v36.asm):00082         ;
                      (     mon09v36.asm):00083         ;******************************************************************************
                      (     mon09v36.asm):00084         ;MODS BY JQ
     0024             (     mon09v36.asm):00085         VERSION         EQU     36              VERSION TIMES 10
     0001             (     mon09v36.asm):00086         JQ_DETMCU       EQU     1               SET TO '1' TO ENABLE DETECTION OF MCU TYPE
     0001             (     mon09v36.asm):00087         JQ_NMIRAM       EQU     1               SET TO '1' TO ENABLE NMI HANDLER IN RAM
     0001             (     mon09v36.asm):00088         JQ_ILLOP        EQU     1               SET TO '1' TO ENABLE 6309 ILLOP HANDLER
     0001             (     mon09v36.asm):00089         JQ_JMPMOD       EQU     1               SET TO '1' TO ENABLE JUMP TO MODULES
     0000             (     mon09v36.asm):00090         JQ_EMBEDBIN     EQU     0               SET TO '1' TO EMBED MODULE BINARY IMAGES
     0000             (     mon09v36.asm):00091         JQ_EFORTH       EQU     0               SET TO '1' TO USE EFORTH, ELSE Z79FORTH
                      (     mon09v36.asm):00092         ;
                      (     mon09v36.asm):00093         ; TO-DO
     0000             (     mon09v36.asm):00094         JQ_EEPROM       EQU     0               SET TO '1' TO ENABLE EEPROM WRITING
     0000             (     mon09v36.asm):00095         JQ_LDFIX        EQU     0               SET TO '1' TO ENABLE PROPER EOF HANDLING DURING LOAD
                      (     mon09v36.asm):00096         ;
     8C00             (     mon09v36.asm):00097         TNYBASSTRT      EQU     $8C00                           START ADDRESS OF TINY BASIC IN ROM
     9C00             (     mon09v36.asm):00098         TNYBASEND       EQU     TNYBASSTRT+$1000        END ADDRESS OF TINY BASIC IN ROM
                      (     mon09v36.asm):00099         
     9C00             (     mon09v36.asm):00100         FTHIMGSTRT      EQU     $9C00                           START ADDRESS OF FORTH IMAGE IN ROM
     BC00             (     mon09v36.asm):00101         FTHIMGEND       EQU     FTHIMGSTRT+$2000        END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v36.asm):00102          IFNE JQ_EFORTH                 IF USING EFORTH
0000                  (     mon09v36.asm):00103         FORTHCOLD       EQU     $0100                           DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v36.asm):00104          ELSE
     9C00             (     mon09v36.asm):00105         FORTHCOLD       EQU     FTHIMGSTRT                      DESTINATION ADDRESS IN RAM (COLD START)
                      (     mon09v36.asm):00106          ENDC                                   IF USING EFORTH
                      (     mon09v36.asm):00107         
     BE00             (     mon09v36.asm):00108         FPBASSTRT       EQU     $BE00                           START ADDRESS OF FP BASIC IN ROM
     E400             (     mon09v36.asm):00109         FPBASEND        EQU     FPBASSTRT+$2600         END ADDRESS OF FP BASIC IN ROM
                      (     mon09v36.asm):00110         ;
                      (     mon09v36.asm):00111         ;== HARDWARE CONSTANTS =================================================
     E400             (     mon09v36.asm):00112         CODE            EQU     $E400   MON09 code goes here
     0000             (     mon09v36.asm):00113         RAMSTRT         EQU     $0000   START OF RAM
     8000             (     mon09v36.asm):00114         RAMEND          EQU     $8000   END OF RAM
                      (     mon09v36.asm):00115         
     8800             (     mon09v36.asm):00116         ROMSTRT         EQU     $8800   START OF ROM
     0000             (     mon09v36.asm):00117         ROMEND          EQU     $10000  END OF ROM
                      (     mon09v36.asm):00118         
                      (     mon09v36.asm):00119          IFNE JQ_ILLOP                  JQ ILLOP ENHANCEMENTS
     FFF0             (     mon09v36.asm):00120         VECTTBL         EQU     $FFF0
                      (     mon09v36.asm):00121          ELSE
0000                  (     mon09v36.asm):00122         VECTTBL         EQU     $FFF2
                      (     mon09v36.asm):00123          ENDC                                   JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):00124         
     9C00             (     mon09v36.asm):00125         LOC             EQU     RAMEND-CODE     OFFSET -> RAM OR ROM CODE LOCATION
                      (     mon09v36.asm):00126         
     7FFF             (     mon09v36.asm):00127         STACK   EQU     RAMEND-1        MON09 Stack (Top of RAM)
                      (     mon09v36.asm):00128         
                      (     mon09v36.asm):00129         ;MODS BY JQ
     7F60             (     mon09v36.asm):00130         RAM             SET     RAMEND-160      MON09 data goes here
                      (     mon09v36.asm):00131          IFNE JQ_NMIRAM NO JQ NMI ENHANCEMENTS
     7F5E             (     mon09v36.asm):00132         RAM             SET     RAM-2   MON09 NMI VECTOR STORAGE
                      (     mon09v36.asm):00133          ENDC                   NO JQ NMI ENHANCEMENTS
                      (     mon09v36.asm):00134          IFNE JQ_ILLOP  JQ ILLOP ENHANCEMENTS
     7F5C             (     mon09v36.asm):00135         RAM             SET     RAM-2   MON09 ILLOP VECTOR STORAGE
                      (     mon09v36.asm):00136          ENDC                   NO JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):00137          IFNE JQ_EEPROM JQ EEPROM WRITE ENHANCEMENTS
0000                  (     mon09v36.asm):00138         RAM             SET     RAM-2   MON09 E2P PAGE-BYTE COUNTER STORAGE
                      (     mon09v36.asm):00139          ENDC                   JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v36.asm):00140         ;
                      (     mon09v36.asm):00141         ;== 6850 ACIA CONSTANTS ===============================================
     8000             (     mon09v36.asm):00142         SER1    EQU     $8000           Serial Port 1 (Console)
     8000             (     mon09v36.asm):00143         SER2    EQU     $8000           Serial Port 2 (Aux)
                      (     mon09v36.asm):00144         
     0001             (     mon09v36.asm):00145         RDRF    EQU     1                       BIT MASK POSITION FOR RDRF FLAG
     0002             (     mon09v36.asm):00146         TDRE    EQU     2                       BIT MASK POSITION FOR TDRE FLAG
                      (     mon09v36.asm):00147         
     0003             (     mon09v36.asm):00148         CTRL1   EQU     $03                     MASTER RESET
     0015             (     mon09v36.asm):00149         CTRL2   EQU     $15                     115.2K BAUD @8N1
                      (     mon09v36.asm):00150         ;
                      (     mon09v36.asm):00151         ;======================================================================
                      (     mon09v36.asm):00152         ;*
                      (     mon09v36.asm):00153                 ORG     RAM                             Internal MON09 variables
                      (     mon09v36.asm):00154         ;*
                      (     mon09v36.asm):00155         ;* MON09 INTERNAL MEMORY
                      (     mon09v36.asm):00156         ;*
7F5C                  (     mon09v36.asm):00157         SWIADR  RMB     2               SWI VECTOR ADDRESS
7F5E                  (     mon09v36.asm):00158         SWI2ADR RMB     2               SWI2 VECTOR ADDRESS
7F60                  (     mon09v36.asm):00159         SWI3ADR RMB     2               SWI3 VECTOR ADDRESS
7F62                  (     mon09v36.asm):00160         IRQADR  RMB     2               IRQ VECTOR ADDRESS
7F64                  (     mon09v36.asm):00161         FIRQADR RMB     2               FIRQ VECTOR ADDRESS
                      (     mon09v36.asm):00162         ;MODS BY JQ
                      (     mon09v36.asm):00163          IFNE JQ_NMIRAM USE LOCAL NMI HANDLER
7F66                  (     mon09v36.asm):00164         NMIADR  RMB     2               NMI VECTOR ADDRESS
                      (     mon09v36.asm):00165          ENDC
                      (     mon09v36.asm):00166          IFNE JQ_ILLOP          USE LOCAL ILLOP HANDLER
7F68                  (     mon09v36.asm):00167         ILOPADR RMB     2               6309 ILLOP VECTOR ADDRESS
                      (     mon09v36.asm):00168          ENDC
                      (     mon09v36.asm):00169          IFNE JQ_EEPROM         JQ EEPROM WRITE ENHANCEMENTS
7F6A                  (     mon09v36.asm):00170         E2PCNT  RMB     1               EEPROM PAGE-BYTE COUNTER
                      (     mon09v36.asm):00171          ENDC                           JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v36.asm):00172         ;
7F6A                  (     mon09v36.asm):00173         IOCON   RMB     1               I/O CONFIGURATION BYTE
7F6B                  (     mon09v36.asm):00174         UART1   RMB     2               UART 1 ADDRESS
7F6D                  (     mon09v36.asm):00175         UART2   RMB     2               UART 2 ADDRESS
7F6F                  (     mon09v36.asm):00176         SAVCC   RMB     1               SAVED CONDITION CODE REGISTER
7F70                  (     mon09v36.asm):00177         SAVA    RMB     1               SAVED 6809 A REGISTER
7F71                  (     mon09v36.asm):00178         SAVB    RMB     1               SAVED 6809 B REGISTER
7F72                  (     mon09v36.asm):00179         SAVDP   RMB     1               SAVED DIRECT PAGE REGISTER
7F73                  (     mon09v36.asm):00180         SAVX    RMB     2               SAVED X REGISTER
7F75                  (     mon09v36.asm):00181         SAVY    RMB     2               SAVED Y REGISTER
7F77                  (     mon09v36.asm):00182         SAVU    RMB     2               SAVED U REGISTER
7F79                  (     mon09v36.asm):00183         SAVPC   RMB     2               SAVED PROGRAM COUNTER
7F7B                  (     mon09v36.asm):00184         SAVS    RMB     2               SAVED S REGISTER
7F7D                  (     mon09v36.asm):00185         TEMP    RMB     2               TEMPORARY STORAGE
7F7F                  (     mon09v36.asm):00186         STPFLG  RMB     1               REGISTER DISPLAY WHILE STEPPING FLAG
7F80                  (     mon09v36.asm):00187         PTRSAV  RMB     2               SINGLE STEP AND DISASSEMBLER CODE POINTER
7F82                  (     mon09v36.asm):00188         INSTYP  RMB     1               DISASSEMBLED INSTRUCTION TYPE
7F83                  (     mon09v36.asm):00189         POSBYT  RMB     1               POSTBYTE STORAGE AREA
7F84                  (     mon09v36.asm):00190         BRKTAB  RMB     24              BREAKPOINT TABLE
7F9C                  (     mon09v36.asm):00191         DSPBUF  RMB     50              DISASSEMBLER DISPLAY BUFFER
7FCE                  (     mon09v36.asm):00192         INSRAM  RMB     7               INSTRUCTION EXECUTION ADDRESS
                      (     mon09v36.asm):00193         
                      (     mon09v36.asm):00194         ;**********************************************************************
                      (     mon09v36.asm):00195          IFNE JQ_EMBEDBIN               ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v36.asm):00196         ;*
                      (     mon09v36.asm):00197                 ; INCLUDE BINARY IMAGES OF ADDITONAL LANGUAGE MODULES
                      (     mon09v36.asm):00198                 ; NOTE: THE MASTER FIRMWARE BUILD SCRIPT HANDLES
                      (     mon09v36.asm):00199                 ;       COMBINING THE VARIOUS LANGUAGE MODULES INTO
                      (     mon09v36.asm):00200                 ;       THE PROPER ADDRESSES IN THE FINAL HEX AND BIN
                      (     mon09v36.asm):00201                 ;       FILES.
                      (     mon09v36.asm):00202         ;*
                      (     mon09v36.asm):00203         ;========> START OF MICRO BASIC PLUS BINARY IMAGE <==========
                      (     mon09v36.asm):00204                         ORG     TNYBASSTRT      START ADDRESS OF TINY BASIC IN ROM
                      (     mon09v36.asm):00205                         JMP     MONITOR         COLD START MON09
                      (     mon09v36.asm):00206                         FILL $FF,FTHIMGSTRT-*
                      (     mon09v36.asm):00207         
                      (     mon09v36.asm):00208         ;========> START OF FORTH BINARY IMAGE <=====================
                      (     mon09v36.asm):00209                         ORG     FTHIMGSTRT      START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v36.asm):00210         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v36.asm):00211                 INCLUDEBIN      ../../forth/eForth/ef09.bin
                      (     mon09v36.asm):00212                         FILL $FF,FPBASSTRT-*
                      (     mon09v36.asm):00213         
                      (     mon09v36.asm):00214         ;========> START OF FP BASIC BINARY IMAGE <==================
                      (     mon09v36.asm):00215                         ORG     FPBASSTRT       START ADDRESS OF FP BASIC IN ROM
                      (     mon09v36.asm):00216         ;               JMP     MONITOR         COLD START MON09
                      (     mon09v36.asm):00217                 INCLUDEBIN      ../../basic/exbasrom/ExBasROM.bin
                      (     mon09v36.asm):00218                         FILL $FF,CODE-*
                      (     mon09v36.asm):00219         ;
                      (     mon09v36.asm):00220         ;**********************************************************************
                      (     mon09v36.asm):00221          ENDC                           ;EMBED MODULE BINARY IMAGES WITH MON09 IMAGE
                      (     mon09v36.asm):00222         ;*
                      (     mon09v36.asm):00223                 ORG     CODE            MONITOR CODE STARTS HERE
                      (     mon09v36.asm):00224         
E400 7EE448           (     mon09v36.asm):00225                 JMP     RESET           JUMP TO MON09 COLD-START
                      (     mon09v36.asm):00226         
                      (     mon09v36.asm):00227         ;===============================================================================
                      (     mon09v36.asm):00228         ; TRAMPOLINE JUMP TABLE CONTAINING MON09 ROM ENTRY POINTS FOR USER PROGRAMS
                      (     mon09v36.asm):00229         ;===============================================================================
E403 7EEDF0           (     mon09v36.asm):00230         MON09_GETCHR    JMP     GETCHR  ;Reads character from selected input device, returns
                      (     mon09v36.asm):00231                                                                 ; in ACCA.
E406 7EEDD0           (     mon09v36.asm):00232         MON09_GETECH    JMP     GETECH  ;Reads and echos char. from selected input device,
                      (     mon09v36.asm):00233                                                                 ; converts it to capital, and returns in ACCA.
E409 7EED86           (     mon09v36.asm):00234         MON09_GETNIB    JMP     GETNIB  ;Gets a single hex nibble from selected input device,
                      (     mon09v36.asm):00235                                                                 ; and returns in ACCA. Sets 'Z' flag if successful.
E40C 7EED64           (     mon09v36.asm):00236         MON09_GETBYT    JMP     GETBYT  ;Gets a single hex byte from selected  input  device,
                      (     mon09v36.asm):00237                                                                 ; and returns in ACCA. Sets 'Z' flag is successful.
E40F 7EED1D           (     mon09v36.asm):00238         MON09_GETADR    JMP     GETADR  ;Gets a hex word from selected input device, and
                      (     mon09v36.asm):00239                                                                 ; returns in D accumulator. Sets 'Z' if successful.
E412 7EED00           (     mon09v36.asm):00240         MON09_GETRNG    JMP     GETRNG  ;Gets an address range from selected input device,
                      (     mon09v36.asm):00241                                                                 ; first address is returned in 'X', and second address
                      (     mon09v36.asm):00242                                                                 ; is returned in 'D'. Sets 'Z' if successful.
E415 7EEE23           (     mon09v36.asm):00243         MON09_CHKCHR    JMP     CHKCHR  ;Checks for character from terminal, and  returns  in
                      (     mon09v36.asm):00244                                                                 ; ACCA if found, otherwise returns $FF. Sets 'Z' flag
                      (     mon09v36.asm):00245                                                                 ; If character is found, and is the escape character.
E418 7EEE05           (     mon09v36.asm):00246         MON09_PUTCHR    JMP     PUTCHR  ;Writes character in ACCA to all enabled output devs.
E41B 7EEDDE           (     mon09v36.asm):00247         MON09_SPACE             JMP     SPACE   ;Writes a space to all enabled output devices.
E41E 7EEDE4           (     mon09v36.asm):00248         MON09_LFCR              JMP     LFCR    ;Writes a line-feed, Carriage-return pair to all
                      (     mon09v36.asm):00249                                                                 ; enabled output devices.
E421 7EEDAD           (     mon09v36.asm):00250         MON09_HOUT              JMP     HOUT    ;Outputs nibble in ACCA to output devices in HEX.
E424 7EEDA3           (     mon09v36.asm):00251         MON09_HEXOUT    JMP     HEXOUT  ;Outputs byte in ACCA to output devices in HEX.
E427 7EED9F           (     mon09v36.asm):00252         MON09_WRDOUT    JMP     WRDOUT  ;Outputs word in ACCD to output devices in HEX.
E42A 7EEDC3           (     mon09v36.asm):00253         MON09_WRLIN             JMP     WRLIN   ;Outputs message string pointed to by X to enabled
                      (     mon09v36.asm):00254                                                                 ; output devices. String ends with null ($00) or with
                      (     mon09v36.asm):00255                                                                 ; Carriage-Return ($0D). If strings ends with Carriage
                      (     mon09v36.asm):00256                                                                 ; Return, then LFCR is displayed at end.
E42D 7EEDB9           (     mon09v36.asm):00257         MON09_WRMSG             JMP     WRMSG   ;Same as above, except message string in inline with
                      (     mon09v36.asm):00258                                                                 ; code, and immediatly follows call to WRMSG.
E430 7EEC1D           (     mon09v36.asm):00259         MON09_DLOAD             JMP     DLOAD   ;Downloads one record of a motorola hex format file
                      (     mon09v36.asm):00260                                                                 ; from the selected input device. Sets 'C' if record
                      (     mon09v36.asm):00261                                                                 ; was NOT an end of file record.
E433 7EEBFA           (     mon09v36.asm):00262         MON09_LOAD              JMP     LOAD    ;Selects AUX input, and downloads entire motorola hex
                      (     mon09v36.asm):00263                                                                 ; format file. Prints '.' for every record received.
E436 7EF0BD           (     mon09v36.asm):00264         MON09_DISASS    JMP     DISASS  ;Disassembles opcode pointed to by Y, and placed  the
                      (     mon09v36.asm):00265                                                                 ; disasembler output text in memory pointed to by U.
                      (     mon09v36.asm):00266                                                                 ; disassembler output text ends with carriage return.
                      (     mon09v36.asm):00267                                                                 ; Y is left pointing to next opcode in memory.
E439 7EEE5F           (     mon09v36.asm):00268         MON09_STEP              JMP     STEP    ;Steps one instruction, from address in saved program
                      (     mon09v36.asm):00269                                                                 ; counter. All saved registers are updated.
E43C 7EEE4E           (     mon09v36.asm):00270         MON09_STEPDI    JMP     STEPDI  ;Same as above, except  disassembled  instruction  is
                      (     mon09v36.asm):00271                                                                 ; Displayed.
E43F 7EE8BA           (     mon09v36.asm):00272         MON09_DISREG    JMP     DISREG  ;Displays all of the saved registers.
E442 7EE484           (     mon09v36.asm):00273         MON09_MONITOR   JMP     MONITOR ;Reenters the monitor.
E445 7EE448           (     mon09v36.asm):00274         MON09_RESET             JMP     RESET   ;Reinitializes the monitor via RESET.
                      (     mon09v36.asm):00275         ;===============================================================================
                      (     mon09v36.asm):00276         ;*
                      (     mon09v36.asm):00277         ;* INITIALIZATIONS.
                      (     mon09v36.asm):00278         ;*
E448                  (     mon09v36.asm):00279         RESET
E448 10CE7FFF         (     mon09v36.asm):00280                 LDS             #STACK          SET UP STACK
E44C 8E7F5C           (     mon09v36.asm):00281                 LDX             #SWIADR         POINT TO START
E44F                  (     mon09v36.asm):00282         CLRRAM          ;CLEAR MON09 DATA AREA
E44F 6F80             (     mon09v36.asm):00283                 CLR             ,X+                     CLEAR IT
E451 8C7FCE           (     mon09v36.asm):00284                 CMPX    #INSRAM         AT BUFFER?
E454 25F9             (     mon09v36.asm):00285                 BLO             CLRRAM          KEEP GOING
                      (     mon09v36.asm):00286         
                      (     mon09v36.asm):00287                 ;INIT ACIA1
E456 8E8000           (     mon09v36.asm):00288                 LDX             #SER1           GET SERIAL PORT 1
E459 BF7F6B           (     mon09v36.asm):00289                 STX             >UART1          SET IT UP
E45C 171921           (     mon09v36.asm):00290                 LBSR    INIT            INITIALIZE IT
                      (     mon09v36.asm):00291         
                      (     mon09v36.asm):00292                 ;INIT ACIA2
E45F 8E8000           (     mon09v36.asm):00293                 LDX             #SER2           GET SERIAL PORT 2
E462 BF7F6D           (     mon09v36.asm):00294                 STX             >UART2          SET IT UP
E465 171918           (     mon09v36.asm):00295                 LBSR    INIT            INITIALIZE IT
                      (     mon09v36.asm):00296         
                      (     mon09v36.asm):00297                 ;INIT I/O CONFIG FLAG
E468 8603             (     mon09v36.asm):00298                 LDA             #3                      DEFAULT I/O CONFIGURATION
E46A B77F6A           (     mon09v36.asm):00299                 STA             IOCON           SET IT
                      (     mon09v36.asm):00300         
                      (     mon09v36.asm):00301                 ;INIT SHADOW STACK
E46D CC7F5C           (     mon09v36.asm):00302                 LDD             #RAM            DEFAULT STACK AT TOP OF RAM
E470 FD7F7B           (     mon09v36.asm):00303                 STD             SAVS            SAVE IT
                      (     mon09v36.asm):00304         
                      (     mon09v36.asm):00305                 ;INIT SHADOW CONDITION REGISTER
E473 86D0             (     mon09v36.asm):00306                 LDA             #$D0            SET CC
E475 B77F6F           (     mon09v36.asm):00307                 STA             SAVCC           SAVE IT
                      (     mon09v36.asm):00308         
                      (     mon09v36.asm):00309         ;MODS BY JQ
                      (     mon09v36.asm):00310          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
E478 CCF361           (     mon09v36.asm):00311                 LDD             #NMIHND                 SET DEFAULT NMI HANDLER
E47B FD7F66           (     mon09v36.asm):00312                 STD             NMIADR                  SAVE IT
                      (     mon09v36.asm):00313          ENDC                           JQ NMI ENHANCEMENTS
                      (     mon09v36.asm):00314         ;
                      (     mon09v36.asm):00315          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E47E CCF2F6           (     mon09v36.asm):00316                 LDD             #ILOPHND                SET DEFAULT ILLOP HANDLER
E481 FD7F68           (     mon09v36.asm):00317                 STD             ILOPADR                 SAVE IT
                      (     mon09v36.asm):00318          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):00319         ;
                      (     mon09v36.asm):00320         ;* Emit the sign-on message
E484                  (     mon09v36.asm):00321         MONITOR
                      (     mon09v36.asm):00322                 ; Emit the first part of the sign-on message
E484 170932           (     mon09v36.asm):00323                 LBSR    WRMSG           OUTPUT MESSAGE
E487 0A0D             (     mon09v36.asm):00324                 FCB             $0A,$0D
E489 4D4F4E3039205665 (     mon09v36.asm):00325                 FCC             'MON09 Version '
     7273696F6E20
E497 332E36           (     mon09v36.asm):00326                 FCB             VERSION/10+$30,'.',VERSION%10+$30
E49A 0D0A             (     mon09v36.asm):00327                 FCB             $0D,$0A
                      (     mon09v36.asm):00328         
                      (     mon09v36.asm):00329         ;       INCLUDE A DATE OF BUILD STRING
                      (     mon09v36.asm):00330                 INCLUDE datestring.asm
E49C 4275696C643A2032 (   datestring.asm):00001                 FCC     'Build: 2021-0904 @02:49:16 EDT'
     3032312D30393034
     204030323A34393A
     313620454454
                      (     mon09v36.asm):00331         
E4BA 0D0A             (     mon09v36.asm):00332                 FCB             $0D,$0A
E4BC 284329313938352D (     mon09v36.asm):00333                 FCC             '(C)1985-2007 Dave Dunfield'
     3230303720446176
     652044756E666965
     6C64
E4D6 0A0D             (     mon09v36.asm):00334                 FCB             $0A,$0D
E4D8 2843293230323120 (     mon09v36.asm):00335                 FCC             '(C)2021 Johnny Quest'
     4A6F686E6E792051
     75657374
E4EC 0A0D             (     mon09v36.asm):00336                 FCB             $0A,$0D
E4EE 204D6F6469666965 (     mon09v36.asm):00337                 FCC             ' Modified and Enhanced for 6809SBC by JQ'
     6420616E6420456E
     68616E6365642066
     6F72203638303953
     4243206279204A51
                      (     mon09v36.asm):00338         ;       FCB             $0A,$0D,$FF
E516 FF               (     mon09v36.asm):00339                 FCB             $FF
                      (     mon09v36.asm):00340         ;
                      (     mon09v36.asm):00341         ;------------------------------------------------------------
                      (     mon09v36.asm):00342          IFNE JQ_DETMCU         JQ MCU DETECTION
                      (     mon09v36.asm):00343         ; Added by JQ - Determine MCU and send message string
                      (     mon09v36.asm):00344         ;* Determine whether processor is 6309 or 6809
                      (     mon09v36.asm):00345         ;* Returns Z clear if 6309, set if 6809
E517 8EE53F           (     mon09v36.asm):00346                 LDX             #NOT6809                POINT TO 6309 STRING
E51A 3406             (     mon09v36.asm):00347                 PSHS    D                               SAVE D REGISTER
E51C 1043             (     mon09v36.asm):00348                 FDB             $1043                   6309 COMD INSRUCTION (COMA on 6809)
E51E E161             (     mon09v36.asm):00349                 CMPB    1,S                             NOT EQUAL IF 6309
E520 3506             (     mon09v36.asm):00350                 PULS    D                               RESTORE D REGISTER
E522 2603             (     mon09v36.asm):00351                 BNE             MONITOR1                BRANCH IF 6309 DETECTED
E524 8EE52C           (     mon09v36.asm):00352                 LDX             #MOT6809                MODIFY POINTER TO 6809 STRING
                      (     mon09v36.asm):00353         ;
E527                  (     mon09v36.asm):00354         MONITOR1
E527 BDE42A           (     mon09v36.asm):00355                 JSR             MON09_WRLIN             EMIT THE STRING
                      (     mon09v36.asm):00356         ;       LDMD    #$01                    SET 6309 NATIVE MODE
E52A 202F             (     mon09v36.asm):00357                 BRA             MONITOR2                CONTINUE SIGN-ON MESSAGE
                      (     mon09v36.asm):00358         ;
E52C                  (     mon09v36.asm):00359         MOT6809
E52C 204D43553A202020 (     mon09v36.asm):00360                 FCC             ' MCU:     MC6809'
     20204D4336383039
E53C 0A0D00           (     mon09v36.asm):00361                 FCB             $0A,$0D,0
E53F                  (     mon09v36.asm):00362         NOT6809
E53F 204D43553A202020 (     mon09v36.asm):00363                 FCC             ' MCU:     HD6309 - Native'
     2020484436333039
     202D204E61746976
     65
E558 0A0D00           (     mon09v36.asm):00364                 FCB             $0A,$0D,0
                      (     mon09v36.asm):00365          ENDC                           JQ MCU DETECTION
                      (     mon09v36.asm):00366         ;------------------------------------------------------------
                      (     mon09v36.asm):00367         ;
E55B                  (     mon09v36.asm):00368         MONITOR2
                      (     mon09v36.asm):00369                 ; Emit the rest of the sign-on message
E55B 17085B           (     mon09v36.asm):00370                 LBSR    WRMSG           OUTPUT MESSAGE
E55E 2055415254287329 (     mon09v36.asm):00371                 FCC             ' UART(s): 6850 ACIA'
     3A20363835302041
     434941
E571 0A0D             (     mon09v36.asm):00372                 FCB             $0A,$0D
                      (     mon09v36.asm):00373         ;MODS BY JQ
                      (     mon09v36.asm):00374          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
E573 20456E61626C6564 (     mon09v36.asm):00375                 FCC             ' Enabled: NMI Trapping'
     3A204E4D49205472
     617070696E67
E589 0A0D             (     mon09v36.asm):00376                 FCB             $0A,$0D
                      (     mon09v36.asm):00377          ENDC                           JQ NMI ENHANCEMENTS
                      (     mon09v36.asm):00378          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E58B 20456E61626C6564 (     mon09v36.asm):00379                 FCC             ' Enabled: 6309 ILLOP & DIV0 Trapping'
     3A20363330392049
     4C4C4F5020262044
     4956302054726170
     70696E67
E5AF 0A0D             (     mon09v36.asm):00380                 FCB             $0A,$0D
                      (     mon09v36.asm):00381          ENDC                           JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):00382          IFNE JQ_EEPROM         JQ EEPROM ENHANCEMENTS
                      (     mon09v36.asm):00383                 FCC             ' Enabled: EEPROM Write'
                      (     mon09v36.asm):00384                 FCB             $0A,$0D
                      (     mon09v36.asm):00385          ENDC                           JQ EEPROM ENHANCEMENTS
                      (     mon09v36.asm):00386         ;
E5B1 416C6C2072696768 (     mon09v36.asm):00387                 FCC             'All rights & remedies reserved.'
     747320262072656D
     6564696573207265
     7365727665642E
E5D0 0AFF             (     mon09v36.asm):00388                 FCB             $0A,$FF
                      (     mon09v36.asm):00389         
E5D2                  (     mon09v36.asm):00390         MAIN
E5D2 10CE7FFF         (     mon09v36.asm):00391                 LDS             #STACK          FIX STACK IN CASE ERROR
E5D6 1707E0           (     mon09v36.asm):00392                 LBSR    WRMSG           OUTPUT MESSAGE
E5D9 2A2000           (     mon09v36.asm):00393                 FCN             '* '
E5DC 1707F1           (     mon09v36.asm):00394                 LBSR    GETECH          GET CHARACTER
E5DF 5F               (     mon09v36.asm):00395                 CLRB                            INDICATE NO SECOND CHAR
                      (     mon09v36.asm):00396         ;* LOOK FOR COMMAND IN TABLE
E5E0                  (     mon09v36.asm):00397         LOOKC
E5E0 8EE618           (     mon09v36.asm):00398                 LDX             #CMDTAB         POINT TO COMMAND TABLE
E5E3 7F7F7D           (     mon09v36.asm):00399                 CLR             TEMP            INDICATE NO PARTIAL MATCH
E5E6                  (     mon09v36.asm):00400         LOOK1
E5E6 10A381           (     mon09v36.asm):00401                 CMPD    ,X++            DOES IT MATCH
E5E9 271E             (     mon09v36.asm):00402                 BEQ             LOOK3           YES IT DOES
E5EB A11E             (     mon09v36.asm):00403                 CMPA    -2,X            DOES FIRST CHAR MATCH?
E5ED 2603             (     mon09v36.asm):00404                 BNE             LOOK2           NO, DON'T RECORD
E5EF 7A7F7D           (     mon09v36.asm):00405                 DEC             TEMP            SET FLAG
E5F2                  (     mon09v36.asm):00406         LOOK2
E5F2 3002             (     mon09v36.asm):00407                 LEAX    2,X                     ADVANCE TO NEXT
E5F4 6D84             (     mon09v36.asm):00408                 TST             ,X                      HAVE WE HIT THE END
E5F6 26EE             (     mon09v36.asm):00409                 BNE             LOOK1           NO, KEEP LOOKING
E5F8 5D               (     mon09v36.asm):00410                 TSTB                            ALREADY HAVE TWO CHARS?
E5F9 2615             (     mon09v36.asm):00411                 BNE             ERROR           YES, ERROR
E5FB F67F7D           (     mon09v36.asm):00412                 LDB             TEMP            ANY PARTIAL MATCHES?
E5FE 2710             (     mon09v36.asm):00413                 BEQ             ERROR           NO, ERROR
E600 1F89             (     mon09v36.asm):00414                 TFR             A,B                     SAVE CHAR IN 'A'
E602 1707CB           (     mon09v36.asm):00415                 LBSR    GETECH          GET NEXT CHAR
E605 1E89             (     mon09v36.asm):00416                 EXG             A,B                     SWAP BACK
E607 20D7             (     mon09v36.asm):00417                 BRA             LOOKC           AND CONTINUE
                      (     mon09v36.asm):00418         ;* COMMAND WAS FOUND, EXECUTE IT
E609                  (     mon09v36.asm):00419         LOOK3
E609 1707D2           (     mon09v36.asm):00420                 LBSR    SPACE           OUTPUT SPACE
E60C AD94             (     mon09v36.asm):00421                 JSR             [,X]            EXECUTE COMMAND
E60E 20C2             (     mon09v36.asm):00422                 BRA             MAIN            AND RETURN
                      (     mon09v36.asm):00423         ;* ERROR HAS OCCURED
E610                  (     mon09v36.asm):00424         ERROR
E610 1707A6           (     mon09v36.asm):00425                 LBSR    WRMSG           OUTPUT MESSAGE
E613 203F             (     mon09v36.asm):00426                 FCC             ' ?'
E615 FF               (     mon09v36.asm):00427                 FCB             $FF
E616 20BA             (     mon09v36.asm):00428                 BRA             MAIN            TRY AGAIN
                      (     mon09v36.asm):00429         ;* COMMAND LOOKUP TABLE
E618                  (     mon09v36.asm):00430         CMDTAB
E618 444D             (     mon09v36.asm):00431                 FCB             'D','M'         DISPLAY MEMORY
E61A E733             (     mon09v36.asm):00432                 FDB             MEMORY
E61C 4444             (     mon09v36.asm):00433                 FCB             'D','D'         DISASSEMBLE
E61E E7D7             (     mon09v36.asm):00434                 FDB             DISASM
E620 4452             (     mon09v36.asm):00435                 FCB             'D','R'         DISPLAY REGISTERS
E622 E8BA             (     mon09v36.asm):00436                 FDB             DISREG
E624 4442             (     mon09v36.asm):00437                 FCB             'D','B'         VIEW BREAKPOINTS
E626 E98B             (     mon09v36.asm):00438                 FDB             DSPBRK
E628 4456             (     mon09v36.asm):00439                 FCB             'D','V'         DISPLAY VECTORS
E62A E7F9             (     mon09v36.asm):00440                 FDB             DISVEC
E62C 4455             (     mon09v36.asm):00441                 FCB             'D','U'         DISPLAY UARTS
E62E E83E             (     mon09v36.asm):00442                 FDB             DISURT
E630 4352             (     mon09v36.asm):00443                 FCB             'C','R'         CHANGE REGISTER
E632 E940             (     mon09v36.asm):00444                 FDB             CHGREG
E634 4356             (     mon09v36.asm):00445                 FCB             'C','V'         CHANGE VECTORS
E636 E857             (     mon09v36.asm):00446                 FDB             CHGVEC
E638 4355             (     mon09v36.asm):00447                 FCB             'C','U'         CHANGE UARTS
E63A E899             (     mon09v36.asm):00448                 FDB             CHGURT          DO IT
E63C 4500             (     mon09v36.asm):00449                 FCB             'E',0           SUBSTITUTE MEMORY
E63E E794             (     mon09v36.asm):00450                 FDB             SUBMEM
                      (     mon09v36.asm):00451          IFNE JQ_JMPMOD         JQ JUMP MODULE ENHANCEMENTS
E640 4A42             (     mon09v36.asm):00452                 FCB             'J','B'         JUMP TO FP BASIC MODULE
E642 E689             (     mon09v36.asm):00453                 FDB             JUMPFPBAS
                      (     mon09v36.asm):00454         ;       FCB             'J','T'         JUMP TO TINYBASIC MODULE
                      (     mon09v36.asm):00455         ;       FDB             JUMPTNYBAS
E644 4A46             (     mon09v36.asm):00456                 FCB             'J','F'         JUMP TO FORTH MODULE
E646 E6D5             (     mon09v36.asm):00457                 FDB             JUMPFORTH
                      (     mon09v36.asm):00458          ENDC                           JQ JUMP MODULE ENHANCEMENTS
                      (     mon09v36.asm):00459         ;
E648 4C00             (     mon09v36.asm):00460                 FCB             'L',0           DOWNLOAD
E64A EBFA             (     mon09v36.asm):00461                 FDB             LOAD
E64C 4200             (     mon09v36.asm):00462                 FCB             'B',0           SET BREAKPOINT
E64E E9C1             (     mon09v36.asm):00463                 FDB             SETBRK
E650 5300             (     mon09v36.asm):00464                 FCB             'S',0           STEP
E652 E9E1             (     mon09v36.asm):00465                 FDB             GOSTEP
E654 4700             (     mon09v36.asm):00466                 FCB             'G',0           GO
E656 EA0B             (     mon09v36.asm):00467                 FDB             GOEXEC
E658 5400             (     mon09v36.asm):00468                 FCB             'T',0           TRANSPARENT MODE
E65A EBD6             (     mon09v36.asm):00469                 FDB             TMODE
E65C 464D             (     mon09v36.asm):00470                 FCB             'F','M'         FILL MEMORY
E65E E6F6             (     mon09v36.asm):00471                 FDB             FILMEM
E660 5252             (     mon09v36.asm):00472                 FCB             'R','R'         REPEATING READ
E662 EA4A             (     mon09v36.asm):00473                 FDB             RDLOOP
E664 5257             (     mon09v36.asm):00474                 FCB             'R','W'         REPEATING WRITE
E666 EA5A             (     mon09v36.asm):00475                 FDB             WRLOOP
E668 4D54             (     mon09v36.asm):00476                 FCB             'M','T'         MEMORY TEST
E66A EAA4             (     mon09v36.asm):00477                 FDB             RAMTEST
E66C 5700             (     mon09v36.asm):00478                 FCB             'W',0           WRITE MEMORY
E66E E784             (     mon09v36.asm):00479                 FDB             WRIMEM
E670 4D4D             (     mon09v36.asm):00480                 FCB             'M','M'         MOVE MEMORY
E672 E719             (     mon09v36.asm):00481                 FDB             MOVMEM
E674 5852             (     mon09v36.asm):00482                 FCB             'X','R'         REPEATING 16 BIT READ
E676 EA79             (     mon09v36.asm):00483                 FDB             XRLOOP
E678 5857             (     mon09v36.asm):00484                 FCB             'X','W'         REPEATING 16 BIT WRITE
E67A EA89             (     mon09v36.asm):00485                 FDB             XWLOOP
E67C 2B00             (     mon09v36.asm):00486                 FCB             '+',0           HEX ADDITION
E67E EB75             (     mon09v36.asm):00487                 FDB             HEXADD
E680 2D00             (     mon09v36.asm):00488                 FCB             '-',0           HEX SUBTRACTION
E682 EB86             (     mon09v36.asm):00489                 FDB             HEXSUB
E684 3F00             (     mon09v36.asm):00490                 FCB             '?',0           HELP COMMAND
E686 EBA8             (     mon09v36.asm):00491                 FDB             HELP
E688 00               (     mon09v36.asm):00492                 FCB             0               MARK END OF TABLE
                      (     mon09v36.asm):00493         
                      (     mon09v36.asm):00494         ;MODS BY JQ
                      (     mon09v36.asm):00495         ;******************************************************************************
                      (     mon09v36.asm):00496         ;* 'J' - JUMP TO MODULE
                      (     mon09v36.asm):00497         ;******************************************************************************
                      (     mon09v36.asm):00498          IFNE JQ_JMPMOD         JQ JUMP TO MODULES
                      (     mon09v36.asm):00499         ;==============================================
E689                  (     mon09v36.asm):00500         JUMPFPBAS
E689 8EE695           (     mon09v36.asm):00501                 LDX             #FPBASMSG       POINT TO MESSAGE START
E68C 170734           (     mon09v36.asm):00502                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v36.asm):00503         
E68F 7EBE00           (     mon09v36.asm):00504                 JMP             FPBASSTRT       JUMP TO FORTH COLD START
                      (     mon09v36.asm):00505         
E692 16074F           (     mon09v36.asm):00506                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v36.asm):00507         
E695                  (     mon09v36.asm):00508         FPBASMSG
E695 0D0A             (     mon09v36.asm):00509                 FCB             $0D,$0A
E697 426F6F74696E6720 (     mon09v36.asm):00510                 FCC             'Booting MS FP BASIC...'
     4D53204650204241
     5349432E2E2E
E6AD 0D0A             (     mon09v36.asm):00511                 FCB             $0D,$0A
E6AF FF               (     mon09v36.asm):00512                 FCB             $FF                     END OF TABLE
                      (     mon09v36.asm):00513         ;
                      (     mon09v36.asm):00514         ;==============================================
E6B0                  (     mon09v36.asm):00515         JUMPTNYBAS
E6B0 8EE6BC           (     mon09v36.asm):00516                 LDX             #TNYBASMSG      POINT TO MESSAGE START
E6B3 17070D           (     mon09v36.asm):00517                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v36.asm):00518         
E6B6 7E8C00           (     mon09v36.asm):00519                 JMP             TNYBASSTRT      JUMP TO FORTH COLD START
                      (     mon09v36.asm):00520         
E6B9 160728           (     mon09v36.asm):00521                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v36.asm):00522         
E6BC                  (     mon09v36.asm):00523         TNYBASMSG
E6BC 0D0A             (     mon09v36.asm):00524                 FCB             $0D,$0A
E6BE 426F6F74696E6720 (     mon09v36.asm):00525                 FCC             'Booting TinyBASIC...'
     54696E7942415349
     432E2E2E
E6D2 0D0A             (     mon09v36.asm):00526                 FCB             $0D,$0A
E6D4 FF               (     mon09v36.asm):00527                 FCB             $FF                     END OF TABLE
                      (     mon09v36.asm):00528         
                      (     mon09v36.asm):00529         ;==============================================
                      (     mon09v36.asm):00530         ; Load Forth into RAM.
                      (     mon09v36.asm):00531         ;INTERNAL MOVMEM ROUTINE: IMAGE START IN X, IMAGE END IN D, DESTINATION
                      (     mon09v36.asm):00532         ;  START ADDRESS IN Y.
E6D5                  (     mon09v36.asm):00533         JUMPFORTH
                      (     mon09v36.asm):00534          IFNE JQ_EFORTH                 IF USING EFORTH
                      (     mon09v36.asm):00535                 LDX             #FTHIMGSTRT     START ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v36.asm):00536                 LDY             #FORTHCOLD      DESTINATION ADDRESS IN RAM
                      (     mon09v36.asm):00537                 LDD             #FTHIMGEND      END ADDRESS OF FORTH IMAGE IN ROM
                      (     mon09v36.asm):00538                 STD             TEMP            MOVE TO VARIABLE
                      (     mon09v36.asm):00539         
E6D5                  (     mon09v36.asm):00540         JMPFTH1
                      (     mon09v36.asm):00541                 LDA             ,X+                     GET SOURCE BYTE
                      (     mon09v36.asm):00542                 STA             ,Y+                     SAVE IN DEST
                      (     mon09v36.asm):00543                 CMPX    TEMP            SAVE IT
                      (     mon09v36.asm):00544                 BLS             JMPFTH1         KEEP MOVING
                      (     mon09v36.asm):00545          ENDC                                   IF USING EFORTH
                      (     mon09v36.asm):00546         
E6D5 8EE6E1           (     mon09v36.asm):00547                 LDX             #FTHBTMSG       POINT TO MESSAGE START
E6D8 1706E8           (     mon09v36.asm):00548                 LBSR    WRLIN           OUTPUT A MESSAGE
                      (     mon09v36.asm):00549         
E6DB BD9C00           (     mon09v36.asm):00550                 JSR             FORTHCOLD       EXECUTE A CALL TO FORTH COLD START
                      (     mon09v36.asm):00551         
E6DE 160703           (     mon09v36.asm):00552                 LBRA    LFCR            NEW LINE AND RETURN TO MON09 PROMPT
                      (     mon09v36.asm):00553         
E6E1                  (     mon09v36.asm):00554         FTHBTMSG
E6E1 0D0A             (     mon09v36.asm):00555                 FCB             $0D,$0A
E6E3 426F6F74696E6720 (     mon09v36.asm):00556                 FCC             'Booting FORTH...'
     464F5254482E2E2E
E6F3 0D0A             (     mon09v36.asm):00557                 FCB             $0D,$0A
E6F5 FF               (     mon09v36.asm):00558                 FCB             $FF                     END OF TABLE
                      (     mon09v36.asm):00559         
                      (     mon09v36.asm):00560          ENDC                           JQ JUMP TO MODULES
                      (     mon09v36.asm):00561         ;
                      (     mon09v36.asm):00562         ;******************************************************************************
                      (     mon09v36.asm):00563         ;* 'F' - FILL MEMORY
                      (     mon09v36.asm):00564         ;******************************************************************************
E6F6                  (     mon09v36.asm):00565         FILMEM
E6F6 170607           (     mon09v36.asm):00566                 LBSR    GETRNG          GET ADDRESSES
                      (     mon09v36.asm):00567         ;MODS BY JQ
E6F9 10837F5B         (     mon09v36.asm):00568                 CMPD    #RAM-1          START OF MON09 DATA?
E6FD 2F03             (     mon09v36.asm):00569                 BLE             FILL1           NO, ADDRESS OKAY
E6FF CC7F5B           (     mon09v36.asm):00570                 LDD             #RAM-1          STOP AT MON09 DATA-1
                      (     mon09v36.asm):00571         ;
E702                  (     mon09v36.asm):00572         FILL1
E702 FD7F7D           (     mon09v36.asm):00573                 STD             TEMP            SAVE IT
E705 1706D6           (     mon09v36.asm):00574                 LBSR    SPACE           SPACE OVER
E708 170659           (     mon09v36.asm):00575                 LBSR    GETBYT          GET DATA BYTE
E70B 1026FF01         (     mon09v36.asm):00576                 LBNE    ERROR           INVALID
E70F                  (     mon09v36.asm):00577         FILL2
E70F A780             (     mon09v36.asm):00578                 STA             ,X+                     WRITE IT
E711 BC7F7D           (     mon09v36.asm):00579                 CMPX    TEMP            ARE WE THERE
E714 23F9             (     mon09v36.asm):00580                 BLS             FILL2           NO, KEEP GOING
E716 1606CB           (     mon09v36.asm):00581                 LBRA    LFCR            NEW LINE
                      (     mon09v36.asm):00582         ;
                      (     mon09v36.asm):00583         ;******************************************************************************
                      (     mon09v36.asm):00584         * 'MM' - MOVE MEMORY
                      (     mon09v36.asm):00585         ;******************************************************************************
E719                  (     mon09v36.asm):00586         MOVMEM
                      (     mon09v36.asm):00587          IFNE 0         FOR TESTING
                      (     mon09v36.asm):00588                 JMP             $2000
                      (     mon09v36.asm):00589          ELSE
E719 1705E4           (     mon09v36.asm):00590                 LBSR    GETRNG          GET A RANGE
E71C FD7F7D           (     mon09v36.asm):00591                 STD             TEMP            SAVE LAST VALUE
E71F 1706BC           (     mon09v36.asm):00592                 LBSR    SPACE           SEPERATOR
E722 1705F8           (     mon09v36.asm):00593                 LBSR    GETADR          GET DEST ADDRESS
E725 1F02             (     mon09v36.asm):00594                 TFR             D,Y                     SET IT UP
                      (     mon09v36.asm):00595         
E727                  (     mon09v36.asm):00596         MOVM1
E727 A680             (     mon09v36.asm):00597                 LDA             ,X+                     GET SOURCE BYTE
E729 A7A0             (     mon09v36.asm):00598                 STA             ,Y+                     SAVE IN DEST
E72B BC7F7D           (     mon09v36.asm):00599                 CMPX    TEMP            SAVE IT
E72E 23F7             (     mon09v36.asm):00600                 BLS             MOVM1           KEEP MOVEING
E730 1606B1           (     mon09v36.asm):00601                 LBRA    LFCR            NEW LINE
                      (     mon09v36.asm):00602         
                      (     mon09v36.asm):00603         ;  IFNE JQ_EEPROM               JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v36.asm):00604         ;  ENDC                         JQ EEPROM WRITE ENHANCEMENTS
                      (     mon09v36.asm):00605          ENDC           FOR TESTING
                      (     mon09v36.asm):00606         ;
                      (     mon09v36.asm):00607         ;******************************************************************************
                      (     mon09v36.asm):00608         ;* 'DM' - DISPLAY MEMORY
                      (     mon09v36.asm):00609         ;******************************************************************************
E733                  (     mon09v36.asm):00610         MEMORY
                      (     mon09v36.asm):00611          IFNE 0         FOR TESTING
                      (     mon09v36.asm):00612                 JMP             $1000
                      (     mon09v36.asm):00613          ELSE
                      (     mon09v36.asm):00614         
E733 1705CA           (     mon09v36.asm):00615                 LBSR    GETRNG          GET ADDRESS
E736 FD7F7D           (     mon09v36.asm):00616                 STD             TEMP            SAVE
E739                  (     mon09v36.asm):00617         MEM1
E739 1706A8           (     mon09v36.asm):00618                 LBSR    LFCR            NEW LINE
E73C 1706E4           (     mon09v36.asm):00619                 LBSR    CHKCHR          CHECK FOR CHAR
E73F 1027FE8F         (     mon09v36.asm):00620                 LBEQ    MAIN            ESCAPE, QUIT
E743 1F10             (     mon09v36.asm):00621                 TFR             X,D                     GET ADDRESS
E745 3406             (     mon09v36.asm):00622                 PSHS    D                       SAVE FOR LATER
E747 170655           (     mon09v36.asm):00623                 LBSR    WRDOUT          DISPLAY
E74A C610             (     mon09v36.asm):00624                 LDB             #16                     DISPLAY 16 TO A LINE
E74C                  (     mon09v36.asm):00625         MEM2
E74C 17068F           (     mon09v36.asm):00626                 LBSR    SPACE           OUTPUT A SPACE
E74F C503             (     mon09v36.asm):00627                 BITB    #3                      ON A BOUNDARY?
E751 2603             (     mon09v36.asm):00628                 BNE             MEM3            NO, SPACE
E753 170688           (     mon09v36.asm):00629                 LBSR    SPACE           EXTRA SPACE
E756                  (     mon09v36.asm):00630         MEM3
E756 A680             (     mon09v36.asm):00631                 LDA             ,X+                     GET BYTE
E758 170648           (     mon09v36.asm):00632                 LBSR    HEXOUT          DISPLAY
E75B 5A               (     mon09v36.asm):00633                 DECB                            REDUCE COUNT
E75C 26EE             (     mon09v36.asm):00634                 BNE             MEM2            CONTINUE
E75E C604             (     mon09v36.asm):00635                 LDB             #4                      FOUR SPACE
E760                  (     mon09v36.asm):00636         MEM4
E760 17067B           (     mon09v36.asm):00637                 LBSR    SPACE           DISPLAY A SPACE
E763 5A               (     mon09v36.asm):00638                 DECB                            REDUCE COUNT
E764 26FA             (     mon09v36.asm):00639                 BNE             MEM4            CONTINUE
E766 3510             (     mon09v36.asm):00640                 PULS    X                       RESTORE D TO X
E768 C610             (     mon09v36.asm):00641                 LDB             #16                     COUNT OF 16
E76A                  (     mon09v36.asm):00642         MEM5
E76A A680             (     mon09v36.asm):00643                 LDA             ,X+                     GET CHAR
E76C 8120             (     mon09v36.asm):00644                 CMPA    #' '            <SPACE
E76E 2504             (     mon09v36.asm):00645                 BLO             MEM6            CONVERT TO DOT
E770 817F             (     mon09v36.asm):00646                 CMPA    #$7F            PRINTABLE?
E772 2502             (     mon09v36.asm):00647                 BLO             MEM7            OK TO DISPLAY
E774                  (     mon09v36.asm):00648         MEM6
E774 862E             (     mon09v36.asm):00649                 LDA             #'.'            CHANGE TO DOT
E776                  (     mon09v36.asm):00650         MEM7
E776 17068C           (     mon09v36.asm):00651                 LBSR    PUTCHR          OUTPUT
E779 5A               (     mon09v36.asm):00652                 DECB                            REDUCE COUNT
E77A 26EE             (     mon09v36.asm):00653                 BNE             MEM5            DISPLAY THEM ALL
E77C BC7F7D           (     mon09v36.asm):00654                 CMPX    TEMP            PAST END?
E77F 23B8             (     mon09v36.asm):00655                 BLS             MEM1            NO, KEEP GOING
E781 160660           (     mon09v36.asm):00656                 LBRA    LFCR            NEW LINE
                      (     mon09v36.asm):00657          ENDC           FOR TESTING
                      (     mon09v36.asm):00658         
                      (     mon09v36.asm):00659         
                      (     mon09v36.asm):00660         ;*
                      (     mon09v36.asm):00661         ;* 'W' - WRITE TO MEMORY
                      (     mon09v36.asm):00662         ;*
E784                  (     mon09v36.asm):00663         WRIMEM
E784 170596           (     mon09v36.asm):00664                 LBSR    GETADR          GET ADDRESS
E787 1F01             (     mon09v36.asm):00665                 TFR             D,X                     SET IT UP
E789 170652           (     mon09v36.asm):00666                 LBSR    SPACE           STEP OVER
E78C 1705D5           (     mon09v36.asm):00667                 LBSR    GETBYT          GET BYTE
E78F A784             (     mon09v36.asm):00668                 STA             ,X                      WRITE TO MEMORY
E791 160650           (     mon09v36.asm):00669                 LBRA    LFCR            NEW LINE
                      (     mon09v36.asm):00670         ;*
                      (     mon09v36.asm):00671         ;* 'E' - EDIT MEMORY
                      (     mon09v36.asm):00672         ;*
E794                  (     mon09v36.asm):00673         SUBMEM
E794 170586           (     mon09v36.asm):00674                 LBSR    GETADR          GET ADDRESS
E797 1F01             (     mon09v36.asm):00675                 TFR             D,X                     COPY
E799                  (     mon09v36.asm):00676         SUBM1
E799 170648           (     mon09v36.asm):00677                 LBSR    LFCR            NEW LINE
E79C 1F10             (     mon09v36.asm):00678                 TFR             X,D                     GET ADDRESS
E79E 1705FE           (     mon09v36.asm):00679                 LBSR    WRDOUT          OUTPUT
E7A1 C608             (     mon09v36.asm):00680                 LDB             #8                      NEW COUNT
E7A3                  (     mon09v36.asm):00681         SUBM2
E7A3 170638           (     mon09v36.asm):00682                 LBSR    SPACE           SEPERATOR
E7A6 A684             (     mon09v36.asm):00683                 LDA             ,X                      GET BYTE
E7A8 1705F8           (     mon09v36.asm):00684                 LBSR    HEXOUT          DISPLAY
E7AB 862D             (     mon09v36.asm):00685                 LDA             #'-'            PROMPT
E7AD 170655           (     mon09v36.asm):00686                 LBSR    PUTCHR          OUTPUT
E7B0 1705B1           (     mon09v36.asm):00687                 LBSR    GETBYT          GET A BYTE
E7B3 2609             (     mon09v36.asm):00688                 BNE             SUBM4           INVALID
E7B5 A784             (     mon09v36.asm):00689                 STA             ,X                      RESAVE
E7B7                  (     mon09v36.asm):00690         SUBM3
E7B7 3001             (     mon09v36.asm):00691                 LEAX    1,X                     ADVANCE
E7B9 5A               (     mon09v36.asm):00692                 DECB                            REDUCE COUNT
E7BA 26E7             (     mon09v36.asm):00693                 BNE             SUBM2           MORE, CONTINUE
E7BC 20DB             (     mon09v36.asm):00694                 BRA             SUBM1           NEW LINE
E7BE                  (     mon09v36.asm):00695         SUBM4
E7BE 810D             (     mon09v36.asm):00696                 CMPA    #$0D            CR?
E7C0 10270620         (     mon09v36.asm):00697                 LBEQ    LFCR            IF SO, QUIT
E7C4 8120             (     mon09v36.asm):00698                 CMPA    #' '            SPACE?
E7C6 2605             (     mon09v36.asm):00699                 BNE             SUBM5           NO
E7C8 170613           (     mon09v36.asm):00700                 LBSR    SPACE           FILL FOR TWO DIGITS
E7CB 20EA             (     mon09v36.asm):00701                 BRA             SUBM3           ADVANCE
E7CD                  (     mon09v36.asm):00702         SUBM5
E7CD 8108             (     mon09v36.asm):00703                 CMPA    #$08            BACKSPACE?
E7CF 1026FE3D         (     mon09v36.asm):00704                 LBNE    ERROR           INVALID
E7D3 301F             (     mon09v36.asm):00705                 LEAX    -1,X            BACKUP
E7D5 20C2             (     mon09v36.asm):00706                 BRA             SUBM1           NEW LINE
                      (     mon09v36.asm):00707         ;*
                      (     mon09v36.asm):00708         ;* 'DI' - DISASSEMBLE
                      (     mon09v36.asm):00709         ;*
E7D7                  (     mon09v36.asm):00710         DISASM
E7D7 170526           (     mon09v36.asm):00711                 LBSR    GETRNG          GET ADDRESS
E7DA FD7F7D           (     mon09v36.asm):00712                 STD             TEMP            SAVE
E7DD 1F12             (     mon09v36.asm):00713                 TFR             X,Y                     COPY TO Y
E7DF 170602           (     mon09v36.asm):00714                 LBSR    LFCR            NEW LINE
E7E2 CE7F9C           (     mon09v36.asm):00715                 LDU             #DSPBUF         POINT TO INPUT BUFFER
E7E5                  (     mon09v36.asm):00716         DISS1
E7E5 1708D5           (     mon09v36.asm):00717                 LBSR    DISASS          DISASSEMBLE
E7E8 1F31             (     mon09v36.asm):00718                 TFR             U,X                     COPY
E7EA 1705D6           (     mon09v36.asm):00719                 LBSR    WRLIN           OUTPUT
E7ED 170633           (     mon09v36.asm):00720                 LBSR    CHKCHR          END?
E7F0 2706             (     mon09v36.asm):00721                 BEQ             DISS2           YES, QUIT
E7F2 10BC7F7D         (     mon09v36.asm):00722                 CMPY    TEMP            OVER?
E7F6 25ED             (     mon09v36.asm):00723                 BLO             DISS1           TRY AGAIN
E7F8                  (     mon09v36.asm):00724         DISS2
E7F8 39               (     mon09v36.asm):00725                 RTS
                      (     mon09v36.asm):00726         ;*
                      (     mon09v36.asm):00727         ;* 'DV' - DISPLAY VECTORS
                      (     mon09v36.asm):00728         ;*
E7F9                  (     mon09v36.asm):00729         DISVEC
E7F9 8EE80F           (     mon09v36.asm):00730                 LDX             #VECTXT         POINT TO VECTOR TEXT
E7FC 108E7F5C         (     mon09v36.asm):00731                 LDY             #SWIADR         POINT TO FIRST VECTOR
E800                  (     mon09v36.asm):00732         DISV1
E800 1705C0           (     mon09v36.asm):00733                 LBSR    WRLIN           OUTPUT A MESSAGE
E803 ECA1             (     mon09v36.asm):00734                 LDD             ,Y++            GET A VECTOR
E805 170597           (     mon09v36.asm):00735                 LBSR    WRDOUT          OUTPUT VECTOR ADDRESS
E808 A684             (     mon09v36.asm):00736                 LDA             ,X                      MORE TEXT?
E80A 26F4             (     mon09v36.asm):00737                 BNE             DISV1           AND CONTINUE
E80C 1605D5           (     mon09v36.asm):00738                 LBRA    LFCR            NEW LINE
E80F                  (     mon09v36.asm):00739         VECTXT
E80F 5357493D00       (     mon09v36.asm):00740                 FCN             'SWI='
E814 20535749323D00   (     mon09v36.asm):00741                 FCN             ' SWI2='
E81B 20535749333D00   (     mon09v36.asm):00742                 FCN             ' SWI3='
E822 204952513D00     (     mon09v36.asm):00743                 FCN             ' IRQ='
E828 20464952513D00   (     mon09v36.asm):00744                 FCN             ' FIRQ='
                      (     mon09v36.asm):00745         ;MODS BY JQ
                      (     mon09v36.asm):00746          IFNE JQ_NMIRAM         JQ NMI ENHANCEMENTS
E82F 204E4D493D00     (     mon09v36.asm):00747                 FCN             ' NMI='
                      (     mon09v36.asm):00748          ENDC
                      (     mon09v36.asm):00749          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
E835 20494C4C4F503D00 (     mon09v36.asm):00750                 FCN             ' ILLOP='
                      (     mon09v36.asm):00751          ENDC
                      (     mon09v36.asm):00752         ;
E83D 00               (     mon09v36.asm):00753                 FCB     0               END OF TABLE
                      (     mon09v36.asm):00754         ;*
                      (     mon09v36.asm):00755         ;* 'DU' DISPLAY UARTS
                      (     mon09v36.asm):00756         ;*
E83E                  (     mon09v36.asm):00757         DISURT
E83E 8EE847           (     mon09v36.asm):00758                 LDX             #URTEXT         POINT TO TEXT
E841 108E7F6B         (     mon09v36.asm):00759                 LDY             #UART1          POINT TO UART
E845 20B9             (     mon09v36.asm):00760                 BRA             DISV1           DISPLAY IT
E847                  (     mon09v36.asm):00761         URTEXT
E847 55415254313D00   (     mon09v36.asm):00762                 FCN             'UART1='
E84E 2055415254323D00 (     mon09v36.asm):00763                 FCN             ' UART2='
E856 00               (     mon09v36.asm):00764                 FCB             0
                      (     mon09v36.asm):00765         ;*
                      (     mon09v36.asm):00766         ;* 'CV' - CHANGE VECTOR
                      (     mon09v36.asm):00767         ;*
E857                  (     mon09v36.asm):00768         CHGVEC
E857 170576           (     mon09v36.asm):00769                 LBSR    GETECH          GET CHAR & ECHO
E85A 8153             (     mon09v36.asm):00770                 CMPA    #'S'            SWI?
E85C 2604             (     mon09v36.asm):00771                 BNE             CHGV1           NO
E85E 8631             (     mon09v36.asm):00772                 LDA             #'1'            SAME AS '1'
E860 201E             (     mon09v36.asm):00773                 BRA             CHGV5           AND CONTINUE
E862                  (     mon09v36.asm):00774         CHGV1
E862 8149             (     mon09v36.asm):00775                 CMPA    #'I'            IRQ?
E864 2604             (     mon09v36.asm):00776                 BNE             CHGV2           NO, ITS OK
E866 8634             (     mon09v36.asm):00777                 LDA             #'4'            CONVERT
E868 2016             (     mon09v36.asm):00778                 BRA             CHGV5           AND CONTINUE
E86A                  (     mon09v36.asm):00779         CHGV2
E86A 8146             (     mon09v36.asm):00780                 CMPA    #'F'            FIRQ?
E86C 2604             (     mon09v36.asm):00781                 BNE             CHGV3           NO
E86E 8635             (     mon09v36.asm):00782                 LDA             #'5'            CONVERT
E870 200E             (     mon09v36.asm):00783                 BRA             CHGV5           AND CONTINUE
E872                  (     mon09v36.asm):00784         CHGV3
                      (     mon09v36.asm):00785         ;MODS BY JQ
                      (     mon09v36.asm):00786          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
E872 814E             (     mon09v36.asm):00787                 CMPA    #'N'            NMI?
E874 2604             (     mon09v36.asm):00788                 BNE             CHGV4           NO
E876 8636             (     mon09v36.asm):00789                 LDA             #'6'            CONVERT
E878 2006             (     mon09v36.asm):00790                 BRA             CHGV5           AND CONTINUE
                      (     mon09v36.asm):00791          ENDC                           USE JQ NMI ENHANCEMENTS
E87A                  (     mon09v36.asm):00792         CHGV4
                      (     mon09v36.asm):00793          IFNE JQ_ILLOP          USE ILLOP HANDLER
E87A 814C             (     mon09v36.asm):00794                 CMPA    #'L'            6309 ILLOP?
E87C 2602             (     mon09v36.asm):00795                 BNE             CHGV5           NO
E87E 8637             (     mon09v36.asm):00796                 LDA             #'7'            CONVERT
                      (     mon09v36.asm):00797          ENDC                           USE ILLOP HANDLER
                      (     mon09v36.asm):00798         ;
E880                  (     mon09v36.asm):00799         CHGV5
E880 8031             (     mon09v36.asm):00800                 SUBA    #'1'            TEST IT
                      (     mon09v36.asm):00801         ;---------------------
                      (     mon09v36.asm):00802         ;MODS BY JQ
     0004             (     mon09v36.asm):00803         CHKRNG  SET     4                       IRQ HANDLER MAX NUMBER
                      (     mon09v36.asm):00804          IFNE JQ_NMIRAM         NO JQ NMI ENHANCEMENTS
     0005             (     mon09v36.asm):00805         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v36.asm):00806          ENDC                           NO JQ NMI ENHANCEMENTS
                      (     mon09v36.asm):00807          IFNE JQ_ILLOP          JQ ILLOP ENHANCEMENTS
     0006             (     mon09v36.asm):00808         CHKRNG  SET     CHKRNG+1        IRQ HANDLER MAX NUMBER
                      (     mon09v36.asm):00809           ENDC                          NO JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):00810         ;---------------------
E882 8106             (     mon09v36.asm):00811                 CMPA    #CHKRNG         CHECK RANGE
                      (     mon09v36.asm):00812         ;
E884 1022FD88         (     mon09v36.asm):00813                 LBHI    ERROR           INVALID
E888 8E7F5C           (     mon09v36.asm):00814                 LDX             #SWIADR         POINT TO IT
E88B                  (     mon09v36.asm):00815         CHGV6
E88B 48               (     mon09v36.asm):00816                 LSLA                            X2 FOR 2 BYTE ENTRIES
E88C 3086             (     mon09v36.asm):00817                 LEAX    A,X                     ADVANCE TO VECTOR
E88E 17054D           (     mon09v36.asm):00818                 LBSR    SPACE           SEPERATOR
E891 170489           (     mon09v36.asm):00819                 LBSR    GETADR          GET NEW VALUE
E894 ED84             (     mon09v36.asm):00820                 STD             ,X                      WRITE NEW VECTOR
E896 16054B           (     mon09v36.asm):00821                 LBRA    LFCR            NEW LINE & EXIT
                      (     mon09v36.asm):00822         
                      (     mon09v36.asm):00823         ;*
                      (     mon09v36.asm):00824         ;* 'CU' - CHANGE UART ADDRESS
                      (     mon09v36.asm):00825         ;*
E899                  (     mon09v36.asm):00826         CHGURT
E899 170534           (     mon09v36.asm):00827                 LBSR    GETECH          GET AND ECHO
E89C 8031             (     mon09v36.asm):00828                 SUBA    #'1'            CONVERT
E89E 8101             (     mon09v36.asm):00829                 CMPA    #1              IN RANGE?
E8A0 1022FD6C         (     mon09v36.asm):00830                 LBHI    ERROR           INVALID
E8A4 8E7F6B           (     mon09v36.asm):00831                 LDX             #UART1          POINT TO IT
E8A7 48               (     mon09v36.asm):00832                 LSLA                    X2 FOR 2 BYTE ENTRIES
E8A8 3086             (     mon09v36.asm):00833                 LEAX    A,X             ADVANCE TO IT
E8AA 170531           (     mon09v36.asm):00834                 LBSR    SPACE           SEPERATOR
E8AD 17046D           (     mon09v36.asm):00835                 LBSR    GETADR          GET ADDRESS
E8B0 ED84             (     mon09v36.asm):00836                 STD             ,X              SET IT
E8B2 1F01             (     mon09v36.asm):00837                 TFR             D,X             SET UP POINTER
E8B4 1714C9           (     mon09v36.asm):00838                 LBSR    INIT            INITIALIZE IT
E8B7 16052A           (     mon09v36.asm):00839                 LBRA    LFCR            NEW LINE
                      (     mon09v36.asm):00840         ;*
                      (     mon09v36.asm):00841         ;* 'DR' - DISPLAY REGISTERS
                      (     mon09v36.asm):00842         ;*
E8BA                  (     mon09v36.asm):00843         DISREG
E8BA 8EE904           (     mon09v36.asm):00844                 LDX             #REGTXT         POINT TO TEXT
E8BD 108E7F6F         (     mon09v36.asm):00845                 LDY             #SAVCC          POINT TO VALUE
E8C1 8D31             (     mon09v36.asm):00846                 BSR             RSUB1           'CC='
E8C3 1704FD           (     mon09v36.asm):00847                 LBSR    WRLIN           ' ['
E8C6 CEE92E           (     mon09v36.asm):00848                 LDU             #CCBITS         POINT TO BIT TABLE
E8C9 E63F             (     mon09v36.asm):00849                 LDB             -1,Y            GET BITS BACK
E8CB 3420             (     mon09v36.asm):00850                 PSHS    Y                       SAVE POINTER
E8CD 108E0008         (     mon09v36.asm):00851                 LDY             #8                      EIGHT BITS IN BYTE
E8D1                  (     mon09v36.asm):00852         REGB1
E8D1 A6C0             (     mon09v36.asm):00853                 LDA             ,U+                     GET BIT IDENTIFIER
E8D3 58               (     mon09v36.asm):00854                 ASLB                            IS IT SET?
E8D4 2502             (     mon09v36.asm):00855                 BCS             RBITS           YES, DISPLAY IT
E8D6 862D             (     mon09v36.asm):00856                 LDA             #'-'            NO, DISPLAY DASH
E8D8                  (     mon09v36.asm):00857         RBITS
E8D8 17052A           (     mon09v36.asm):00858                 LBSR    PUTCHR          OUTPUT A CHARACTER
E8DB 313F             (     mon09v36.asm):00859                 LEAY    -1,Y            REDUCE COUNT
E8DD 26F2             (     mon09v36.asm):00860                 BNE             REGB1           MORE TO GO
E8DF 3520             (     mon09v36.asm):00861                 PULS    Y                       RESTORE Y
E8E1 8D11             (     mon09v36.asm):00862                 BSR             RSUB1           '] A='
E8E3 8D0F             (     mon09v36.asm):00863                 BSR             RSUB1           ' B='
E8E5 8D0D             (     mon09v36.asm):00864                 BSR             RSUB1           ' DP='
E8E7 8D13             (     mon09v36.asm):00865                 BSR             RSUB2           ' X='
E8E9 8D11             (     mon09v36.asm):00866                 BSR             RSUB2           ' Y='
E8EB 8D0F             (     mon09v36.asm):00867                 BSR             RSUB2           ' U='
E8ED 8D0D             (     mon09v36.asm):00868                 BSR             RSUB2           ' PC='
E8EF 8D0B             (     mon09v36.asm):00869                 BSR             RSUB2           ' S='
E8F1 1604F0           (     mon09v36.asm):00870                 LBRA    LFCR            QUIT
                      (     mon09v36.asm):00871         ;* DISPLAY 8 BIT REGISTER VALUE
E8F4                  (     mon09v36.asm):00872         RSUB1
E8F4 1704CC           (     mon09v36.asm):00873                 LBSR    WRLIN           OUTPUT BYTE VALUE
E8F7 A6A0             (     mon09v36.asm):00874                 LDA             ,Y+                     GET REGISTER VALUE
E8F9 1604A7           (     mon09v36.asm):00875                 LBRA    HEXOUT          OUTPUT IN HEX
                      (     mon09v36.asm):00876         ;* DISPLAY 16 BIT REGISTER VALUE
E8FC                  (     mon09v36.asm):00877         RSUB2
E8FC 1704C4           (     mon09v36.asm):00878                 LBSR    WRLIN           OUTPUT WORD VALUE
E8FF ECA1             (     mon09v36.asm):00879                 LDD             ,Y++            GET REGISTER VALUE
E901 16049B           (     mon09v36.asm):00880                 LBRA    WRDOUT          OUTPUT IN HEX
                      (     mon09v36.asm):00881         ;* TABLE OF TEXT FOR REGISTER DISPLAY
E904                  (     mon09v36.asm):00882         REGTXT
E904 43433D00         (     mon09v36.asm):00883                 FCN             'CC='
E908 205B00           (     mon09v36.asm):00884                 FCN             ' ['
E90B 5D20413D00       (     mon09v36.asm):00885                 FCN             '] A='
E910 20423D00         (     mon09v36.asm):00886                 FCN             ' B='
E914 2044503D00       (     mon09v36.asm):00887                 FCN             ' DP='
E919 20583D00         (     mon09v36.asm):00888                 FCN             ' X='
E91D 20593D00         (     mon09v36.asm):00889                 FCN             ' Y='
E921 20553D00         (     mon09v36.asm):00890                 FCN             ' U='
E925 2050433D00       (     mon09v36.asm):00891                 FCN             ' PC='
E92A 20533D00         (     mon09v36.asm):00892                 FCN             ' S='
                      (     mon09v36.asm):00893         ;* TABLE OF CONDITION CODE BIT MEANINGS
E92E                  (     mon09v36.asm):00894         CCBITS
E92E 454648494E5A5643 (     mon09v36.asm):00895                 FCC     'EFHINZVC'
                      (     mon09v36.asm):00896         ;*
                      (     mon09v36.asm):00897         ;* 'CR' - CHANGE REGISTER
                      (     mon09v36.asm):00898         ;*
                      (     mon09v36.asm):00899         ;* TABLE OF REGISTER NAMES
E936                  (     mon09v36.asm):00900         CHGTAB
E936 4341424458595550 (     mon09v36.asm):00901                 FCN             'CABDXYUPS'
     5300
                      (     mon09v36.asm):00902         ;
E940                  (     mon09v36.asm):00903         CHGREG
E940 17048D           (     mon09v36.asm):00904                 LBSR    GETECH          GET OPERAND
E943 8120             (     mon09v36.asm):00905                 CMPA    #' '            A+B?
E945 2727             (     mon09v36.asm):00906                 BEQ             CHG4            YES
E947 8EE936           (     mon09v36.asm):00907                 LDX             #CHGTAB         POINT TO TABLE
E94A 5F               (     mon09v36.asm):00908                 CLRB                            ZERO INDICATOR
E94B                  (     mon09v36.asm):00909         CHG1
E94B A184             (     mon09v36.asm):00910                 CMPA    ,X                      IS THIS IT?
E94D 2708             (     mon09v36.asm):00911                 BEQ             CHG2            YES
E94F 5C               (     mon09v36.asm):00912                 INCB                            ADVANCE COUNT
E950 6D80             (     mon09v36.asm):00913                 TST             ,X+                     END OF TABLE
E952 26F7             (     mon09v36.asm):00914                 BNE             CHG1            NO, KEEP TRYING
E954 16FCB9           (     mon09v36.asm):00915                 LBRA    ERROR           INDICATE ERROR
E957                  (     mon09v36.asm):00916         CHG2
E957 170484           (     mon09v36.asm):00917                 LBSR    SPACE           OUTPUT SPACE
E95A 8E7F6F           (     mon09v36.asm):00918                 LDX             #SAVCC          POINT TO START OF REGISTERS
                      (     mon09v36.asm):00919         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v36.asm):00920         ;       CMPB    #4                      16 BIT?
E95D C103             (     mon09v36.asm):00921                 CMPB    #3                      16 BIT?
                      (     mon09v36.asm):00922         ;-----------
E95F 241B             (     mon09v36.asm):00923                 BHS             R16                     YES
E961 3085             (     mon09v36.asm):00924                 LEAX    B,X                     OFFSET TO ADDRESS
E963 1703FE           (     mon09v36.asm):00925                 LBSR    GETBYT          GET NEW VALUE
E966 1026FCA6         (     mon09v36.asm):00926                 LBNE    ERROR           INVALID
E96A A784             (     mon09v36.asm):00927                 STA             ,X                      SAVE IN REGISTER
E96C 201A             (     mon09v36.asm):00928                 BRA             CHG3            AND QUIT
E96E                  (     mon09v36.asm):00929         CHG4
E96E 170448           (     mon09v36.asm):00930                 LBSR    WRMSG           OUTPUT MESSAGE
E971 5B41425D2000     (     mon09v36.asm):00931                 FCN             '[AB] '
                      (     mon09v36.asm):00932         ;MODS BY JQ - UNNEEDED SPACE
                      (     mon09v36.asm):00933         ;       LBSR    SPACE           OUTPUT SPACE
                      (     mon09v36.asm):00934         ;-----------
E977 8E7F70           (     mon09v36.asm):00935                 LDX             #SAVA           POINT TO 'D'
E97A 2007             (     mon09v36.asm):00936                 BRA             R17                     MAKE LIKE 16 BIT REG
E97C                  (     mon09v36.asm):00937         R16
                      (     mon09v36.asm):00938         ;MODS BY JQ - CORRECT INDEX TO 16-BIT REG D
                      (     mon09v36.asm):00939         ;       LEAX    4,X                     OFFSET TO 16 BIT REGISTERS
E97C 3003             (     mon09v36.asm):00940                 LEAX    3,X                     OFFSET TO 16 BIT REGISTERS
                      (     mon09v36.asm):00941         ;-----------
E97E C004             (     mon09v36.asm):00942                 SUBB    #4                      CONVERT TO ZERO ORIGIN
E980 58               (     mon09v36.asm):00943                 LSLB                            DOUBLE FOR WORD VALUES
E981 3085             (     mon09v36.asm):00944                 LEAX    B,X                     MOVE TO CORRECT OFFSET
E983                  (     mon09v36.asm):00945         R17
E983 170397           (     mon09v36.asm):00946                 LBSR    GETADR          GET WORD VALUE
E986 ED84             (     mon09v36.asm):00947                 STD             ,X                      SET REGISTER VALUE
E988                  (     mon09v36.asm):00948         CHG3
E988 160459           (     mon09v36.asm):00949                 LBRA    LFCR            QUIT
                      (     mon09v36.asm):00950         ;*
                      (     mon09v36.asm):00951         ;* 'DB' - DISPLAY BREAKPOINTS
                      (     mon09v36.asm):00952         ;*
E98B                  (     mon09v36.asm):00953         DSPBRK
E98B 8630             (     mon09v36.asm):00954                 LDA             #'0'            START WITH BRKPT ZERO
E98D 8E7F84           (     mon09v36.asm):00955                 LDX             #BRKTAB         POINT TO TABLE
E990                  (     mon09v36.asm):00956         DSPB1
E990 3402             (     mon09v36.asm):00957                 PSHS    A                       SAVE NUMBER
E992 8642             (     mon09v36.asm):00958                 LDA             #'B'            PRECEDE WITH 'B'
E994 17046E           (     mon09v36.asm):00959                 LBSR    PUTCHR          OUTPUT
E997 A6E4             (     mon09v36.asm):00960                 LDA             ,S                      GET NUMBER BACK
E999 170469           (     mon09v36.asm):00961                 LBSR    PUTCHR          OUTPUT
E99C 863D             (     mon09v36.asm):00962                 LDA             #'='            AND FOLLOW WITH '='
E99E 170464           (     mon09v36.asm):00963                 LBSR    PUTCHR          OUTPUT
E9A1 EC81             (     mon09v36.asm):00964                 LDD             ,X++            GET VALUE
E9A3 260A             (     mon09v36.asm):00965                 BNE             DSPB2           NON-ZERO, DISPLAY
E9A5 170411           (     mon09v36.asm):00966                 LBSR    WRMSG           OUTPUT MESSAGE INSTEAD
E9A8 2A2A2A2A00       (     mon09v36.asm):00967                 FCN             '****'
E9AD 2003             (     mon09v36.asm):00968                 BRA             DSPB3           CONTINUE
E9AF                  (     mon09v36.asm):00969         DSPB2
E9AF 1703ED           (     mon09v36.asm):00970                 LBSR    WRDOUT          OUTPUT VALUE
E9B2                  (     mon09v36.asm):00971         DSPB3
E9B2 170429           (     mon09v36.asm):00972                 LBSR    SPACE           SEPERATE WITH SPACE
E9B5 3001             (     mon09v36.asm):00973                 LEAX    1,X                     SKIP OPCODE SAVE
E9B7 3502             (     mon09v36.asm):00974                 PULS    A                       RESTORE NUMBER
E9B9 4C               (     mon09v36.asm):00975                 INCA                            ADVANCE
E9BA 8138             (     mon09v36.asm):00976                 CMPA    #'8'            BEYOND END?
E9BC 25D2             (     mon09v36.asm):00977                 BLO             DSPB1           NO, CONTINUE
E9BE 160423           (     mon09v36.asm):00978                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v36.asm):00979         ;*
                      (     mon09v36.asm):00980         ;* 'B' - SET BREAKPOINT
                      (     mon09v36.asm):00981         ;*
E9C1                  (     mon09v36.asm):00982         SETBRK
E9C1 17040C           (     mon09v36.asm):00983                 LBSR    GETECH          GET CHARACTER
E9C4 8030             (     mon09v36.asm):00984                 SUBA    #'0'            CONVERT TO NUMBER
E9C6 8108             (     mon09v36.asm):00985                 CMPA    #8                      IN RANGE?
E9C8 1024FC44         (     mon09v36.asm):00986                 LBHS    ERROR           NO, QUIT
E9CC 3402             (     mon09v36.asm):00987                 PSHS    A                       SAVE NUMBER
E9CE 48               (     mon09v36.asm):00988                 LSLA                            DOUBLE FOR 16 BIT VALUES
E9CF ABE0             (     mon09v36.asm):00989                 ADDA    ,S+                     TRIPLE FOR OPCODE BYTE
E9D1 8E7F84           (     mon09v36.asm):00990                 LDX             #BRKTAB         POINT TO BREAKPOINT TABLE
E9D4 3086             (     mon09v36.asm):00991                 LEAX    A,X                     ADVANCE TO BREAKPOINT
E9D6 170405           (     mon09v36.asm):00992                 LBSR    SPACE           SEPERATE WITH SPACE
E9D9 170341           (     mon09v36.asm):00993                 LBSR    GETADR          GET VALUE
E9DC ED84             (     mon09v36.asm):00994                 STD             ,X                      SAVE IN TABLE
E9DE 160403           (     mon09v36.asm):00995                 LBRA    LFCR            NEW LINE AND QUIT
                      (     mon09v36.asm):00996         ;*
                      (     mon09v36.asm):00997         ;* 'S' - SINGLE STEP
                      (     mon09v36.asm):00998         ;*
E9E1                  (     mon09v36.asm):00999         GOSTEP
E9E1 170304           (     mon09v36.asm):01000                 LBSR    GETPC           GET ADDRESS
E9E4 1703FD           (     mon09v36.asm):01001                 LBSR    LFCR            OUTPUT MESSAGE
E9E7                  (     mon09v36.asm):01002         GOSTP1
E9E7 170464           (     mon09v36.asm):01003                 LBSR    STEPDI          STEP AND DISPLAY INSTRUCTION
E9EA 7D7F7F           (     mon09v36.asm):01004                 TST             STPFLG          DISPLAY REGISTERS?
E9ED 2B03             (     mon09v36.asm):01005                 BMI             NODSR           NO, DON'T DISPLAY
E9EF                  (     mon09v36.asm):01006         STPREG
E9EF 17FEC8           (     mon09v36.asm):01007                 LBSR    DISREG          DISPLAY REGISTERS
E9F2                  (     mon09v36.asm):01008         NODSR
E9F2 1703FB           (     mon09v36.asm):01009                 LBSR    GETCHR          GET KEY FROM TERMINAL
E9F5 813F             (     mon09v36.asm):01010                 CMPA    #'?'            DISPLAY REGS?
E9F7 27F6             (     mon09v36.asm):01011                 BEQ             STPREG          IF SO, DISPLAY
E9F9 8120             (     mon09v36.asm):01012                 CMPA    #' '            STEP TO NEXT?
E9FB 27EA             (     mon09v36.asm):01013                 BEQ             GOSTP1          IF SO, STEP
E9FD 811B             (     mon09v36.asm):01014                 CMPA    #$1B            EXIT STEPPING?
E9FF 2709             (     mon09v36.asm):01015                 BEQ             GOSTP2          IF SO, QUIT
EA01 810D             (     mon09v36.asm):01016                 CMPA    #$0D            TOGGLE REGISTER DISPLAY?
EA03 26ED             (     mon09v36.asm):01017                 BNE             NODSR           IF NOT, IGNORE
EA05 737F7F           (     mon09v36.asm):01018                 COM             STPFLG          TOGGLE DISPLAY FLAG
EA08 20E8             (     mon09v36.asm):01019                 BRA             NODSR           GET NEXT KEY
EA0A                  (     mon09v36.asm):01020         GOSTP2
EA0A 39               (     mon09v36.asm):01021                 RTS
                      (     mon09v36.asm):01022         ;*
                      (     mon09v36.asm):01023         ;* 'G' - GO (EXECUTE)
                      (     mon09v36.asm):01024         ;*
EA0B                  (     mon09v36.asm):01025         GOEXEC
EA0B 1702DA           (     mon09v36.asm):01026                 LBSR    GETPC           GET ADDRESS
EA0E 1703D3           (     mon09v36.asm):01027                 LBSR    LFCR            NEW LINE
                      (     mon09v36.asm):01028         ;*      STEP ONE INST. BEFORE INSERTING BREAKPOINTS, SO THAT BREAKPOINTS
                      (     mon09v36.asm):01029         ;*      CAN BE USED WITHIN LOOPS ETC.
EA11 17044B           (     mon09v36.asm):01030                 LBSR    STEP            STEP ONE INSTRUCTION
                      (     mon09v36.asm):01031         ;*      INSERT BREAKPOINTS
EA14 8E7F84           (     mon09v36.asm):01032                 LDX             #BRKTAB         POINT TO BREAKPOINT TABLE
EA17 C608             (     mon09v36.asm):01033                 LDB             #8                      EIGHT BREAKPOINTS
EA19                  (     mon09v36.asm):01034         GOEX3
EA19 10AE81           (     mon09v36.asm):01035                 LDY             ,X++            GET BREAKPOINT ADDRESS
EA1C 2708             (     mon09v36.asm):01036                 BEQ             GOEX4           NO BREAKPOINT, QUIT
EA1E A6A4             (     mon09v36.asm):01037                 LDA             ,Y                      GET OPCODE
EA20 A784             (     mon09v36.asm):01038                 STA             ,X                      SAVE IN TABLE
EA22 863F             (     mon09v36.asm):01039                 LDA             #$3F            GET 'SWI' BREAKPOINT OPCODE
EA24 A7A4             (     mon09v36.asm):01040                 STA             ,Y                      SAVE IN CODE SPACE
EA26                  (     mon09v36.asm):01041         GOEX4
EA26 3001             (     mon09v36.asm):01042                 LEAX    1,X                     ADVANCE TO NEXT IN TABLE
EA28 5A               (     mon09v36.asm):01043                 DECB                            REDUCE COUNT OF BRKPTS
EA29 26EE             (     mon09v36.asm):01044                 BNE             GOEX3           DO ALL EIGHT
EA2B 10FE7F7B         (     mon09v36.asm):01045                 LDS             SAVS            RESTORE STACK POINTER
EA2F B67F6F           (     mon09v36.asm):01046                 LDA             SAVCC           GET SAVED CC
EA32 F67F72           (     mon09v36.asm):01047                 LDB             SAVDP           GET SAVED DPR
EA35 3406             (     mon09v36.asm):01048                 PSHS    A,B                     SAVE ON STACK FOR LAST RESTORE
EA37 FC7F70           (     mon09v36.asm):01049                 LDD             SAVA            RESTORE A, B REGISTERS
EA3A BE7F73           (     mon09v36.asm):01050                 LDX             SAVX            RESTORE X REGISTER
EA3D 10BE7F75         (     mon09v36.asm):01051                 LDY             SAVY            RESTORE Y REGISTER
EA41 FE7F77           (     mon09v36.asm):01052                 LDU             SAVU            RESTORE U REGISTER
EA44 3509             (     mon09v36.asm):01053                 PULS    CC,DP           RESTORE CC + DP
EA46 6E9F7F79         (     mon09v36.asm):01054                 JMP             [SAVPC]         EXECUTE USER PGM
                      (     mon09v36.asm):01055         ;*
                      (     mon09v36.asm):01056         ;* 'RR' - REPEATING READ
                      (     mon09v36.asm):01057         ;*
EA4A                  (     mon09v36.asm):01058         RDLOOP
EA4A 1702D0           (     mon09v36.asm):01059                 LBSR    GETADR          GET ADDRESS
EA4D 1F01             (     mon09v36.asm):01060                 TFR             D,X                     SET UP 'X'
EA4F 170392           (     mon09v36.asm):01061                 LBSR    LFCR            NEW LINE
EA52                  (     mon09v36.asm):01062         RDLP1
EA52 A684             (     mon09v36.asm):01063                 LDA             ,X                      READ LOCATION
EA54 1703CC           (     mon09v36.asm):01064                 LBSR    CHKCHR          ABORT?
EA57 26F9             (     mon09v36.asm):01065                 BNE             RDLP1           NO, ITS OK
EA59 39               (     mon09v36.asm):01066                 RTS
                      (     mon09v36.asm):01067         ;*
                      (     mon09v36.asm):01068         ;* 'RW' - REPEATING WRITE
                      (     mon09v36.asm):01069         ;*
EA5A                  (     mon09v36.asm):01070         WRLOOP
EA5A 1702C0           (     mon09v36.asm):01071                 LBSR    GETADR          GET ADDRESS
EA5D 1F01             (     mon09v36.asm):01072                 TFR             D,X                     SET UP 'X'
EA5F 17037C           (     mon09v36.asm):01073                 LBSR    SPACE           SPACE OVER
EA62 1702FF           (     mon09v36.asm):01074                 LBSR    GETBYT          GET DATA
EA65 1026FBA7         (     mon09v36.asm):01075                 LBNE    ERROR           INVALID
EA69 3402             (     mon09v36.asm):01076                 PSHS    A                       SAVE ACCA
EA6B 170376           (     mon09v36.asm):01077                 LBSR    LFCR            NEW LINE
EA6E                  (     mon09v36.asm):01078         WRLP1
EA6E A6E4             (     mon09v36.asm):01079                 LDA             ,S                      GET CHAR
EA70 A784             (     mon09v36.asm):01080                 STA             ,X                      WRITE IT OUT
EA72 1703AE           (     mon09v36.asm):01081                 LBSR    CHKCHR          ABORT COMMAND?
EA75 26F7             (     mon09v36.asm):01082                 BNE             WRLP1           CONTINUE
EA77 3582             (     mon09v36.asm):01083                 PULS    A,PC            GO HOME
                      (     mon09v36.asm):01084         ;*
                      (     mon09v36.asm):01085         ;* 'XR' - REPEATING 16 BIT READ
                      (     mon09v36.asm):01086         ;*
EA79                  (     mon09v36.asm):01087         XRLOOP
EA79 1702A1           (     mon09v36.asm):01088                 LBSR    GETADR          GET ADDRESS
EA7C 1F01             (     mon09v36.asm):01089                 TFR             D,X                     SET UP 'X'
EA7E 170363           (     mon09v36.asm):01090                 LBSR    LFCR            NEW LINE
EA81                  (     mon09v36.asm):01091         XRLP1
EA81 EC84             (     mon09v36.asm):01092                 LDD             ,X                      READ LOCATION
EA83 17039D           (     mon09v36.asm):01093                 LBSR    CHKCHR          ABORT?
EA86 26F9             (     mon09v36.asm):01094                 BNE             XRLP1           NO, ITS OK
EA88 39               (     mon09v36.asm):01095                 RTS
                      (     mon09v36.asm):01096         ;*
                      (     mon09v36.asm):01097         ;* 'XW' - REPEATING 16 BITWRITE
                      (     mon09v36.asm):01098         ;*
EA89                  (     mon09v36.asm):01099         XWLOOP
EA89 170291           (     mon09v36.asm):01100                 LBSR    GETADR          GET ADDRESS
EA8C 1F01             (     mon09v36.asm):01101                 TFR             D,X                     SET UP 'X'
EA8E 17034D           (     mon09v36.asm):01102                 LBSR    SPACE           SPACE OVER
EA91 170289           (     mon09v36.asm):01103                 LBSR    GETADR          GET DATA
EA94 3406             (     mon09v36.asm):01104                 PSHS    A,B                     SAVE ACCA
EA96 17034B           (     mon09v36.asm):01105                 LBSR    LFCR            NEW LINE
EA99                  (     mon09v36.asm):01106         XWLP1
EA99 ECE4             (     mon09v36.asm):01107                 LDD     ,S                              GET CHAR
EA9B ED84             (     mon09v36.asm):01108                 STD             ,X                      WRITE IT OUT
EA9D 170383           (     mon09v36.asm):01109                 LBSR    CHKCHR          ABORT COMMAND?
EAA0 26F7             (     mon09v36.asm):01110                 BNE             XWLP1           CONTINUE
EAA2 3586             (     mon09v36.asm):01111                 PULS    A,B,PC          GO HOME
                      (     mon09v36.asm):01112         ;*
                      (     mon09v36.asm):01113         ;* 'MT' - MEMORY TEST
                      (     mon09v36.asm):01114         ;*
EAA4 170259           (     mon09v36.asm):01115         RAMTEST LBSR    GETRNG          GET ADDRESS RANGE
EAA7 FD7F7D           (     mon09v36.asm):01116                 STD     TEMP            SAVE ENDING ADDRESS
EAAA CCFFFF           (     mon09v36.asm):01117                 LDD     #-1             BEGIN WITH NEGATIVE 1
EAAD FD7F9C           (     mon09v36.asm):01118                 STD     DSPBUF          SAVE PASS COUNT
EAB0 170331           (     mon09v36.asm):01119                 LBSR    LFCR            NEW LINE
EAB3 1F12             (     mon09v36.asm):01120                 TFR     X,Y             COPY STARTING ADDRESS
EAB5 6F80             (     mon09v36.asm):01121         RAM0    CLR     ,X+             ZAP ONE BYTE
EAB7 BC7F7D           (     mon09v36.asm):01122                 CMPX    TEMP            ARE WE OVER?
EABA 23F9             (     mon09v36.asm):01123                 BLS     RAM0            NO, CLEAR EM ALL
EABC 1F21             (     mon09v36.asm):01124         RAM1    TFR     Y,X             RESET STARTING ADDRESS
EABE 860D             (     mon09v36.asm):01125                 LDA     #$0D            GET CR
EAC0 170342           (     mon09v36.asm):01126                 LBSR    PUTCHR          BACK TO START OF LINE
EAC3 1702F3           (     mon09v36.asm):01127                 LBSR    WRMSG           OUTPUT MESSAGE
EAC6 506173733A2000   (     mon09v36.asm):01128                 FCN             'Pass: '
EACD FC7F9C           (     mon09v36.asm):01129                 LDD     DSPBUF          GET COUNTER
EAD0 C30001           (     mon09v36.asm):01130                 ADDD    #1              ADVANCE PASS COUNT
EAD3 FD7F9C           (     mon09v36.asm):01131                 STD     DSPBUF          RESAVE
EAD6 1702C6           (     mon09v36.asm):01132                 LBSR    WRDOUT          OUTPUT
EAD9 170302           (     mon09v36.asm):01133                 LBSR    SPACE           SPACE OVER
EADC 170344           (     mon09v36.asm):01134         RAM2    LBSR    CHKCHR          CHARACTER READY?
EADF 271C             (     mon09v36.asm):01135                 BEQ     RAM5            ESCAPE, QUIT & RESTART MONITOR
EAE1 F67F9D           (     mon09v36.asm):01136                 LDB     DSPBUF+1        GET EXPECTED VALUE
EAE4 E184             (     mon09v36.asm):01137                 CMPB    ,X              DID IT KEEP ITS VALUE
EAE6 264E             (     mon09v36.asm):01138                 BNE     RAM7            NO, ERROR
EAE8 8601             (     mon09v36.asm):01139                 LDA     #%00000001      FIRST DATA VALUE
EAEA A784             (     mon09v36.asm):01140         RAM3    STA     ,X              RESAVE IT
EAEC A184             (     mon09v36.asm):01141                 CMPA    ,X              SAME ?
EAEE 2613             (     mon09v36.asm):01142                 BNE     RAM6            FAILED
EAF0 48               (     mon09v36.asm):01143                 LSLA                    SHIFT THE BIT
EAF1 26F7             (     mon09v36.asm):01144                 BNE     RAM3            CONTINUE TILL ALL DONE
EAF3 5C               (     mon09v36.asm):01145         RAM4    INCB                    ADVANCE TO NEXT VALUE
EAF4 E780             (     mon09v36.asm):01146                 STB     ,X+             SAVE REGISTER
EAF6 BC7F7D           (     mon09v36.asm):01147                 CMPX    TEMP            ARE WE IN RANGE?
EAF9 23E1             (     mon09v36.asm):01148                 BLS     RAM2            YES, ITS OK
EAFB 20BF             (     mon09v36.asm):01149                 BRA     RAM1            AND RESTART
EAFD 1702E4           (     mon09v36.asm):01150         RAM5    LBSR    LFCR            NEW LINE
EB00 16FACF           (     mon09v36.asm):01151                 LBRA    MAIN            AND RESTART MONITOR
                      (     mon09v36.asm):01152         ;* VERIFY OF LOCATION FAILED
EB03 3402             (     mon09v36.asm):01153         RAM6    PSHS    A               SAVE VALUE WRITTEN
EB05 1702B1           (     mon09v36.asm):01154                 LBSR    WRMSG           OUTPUT MESSAGE
EB08 416464723A2000   (     mon09v36.asm):01155                 FCN             'Addr: '
EB0F 1F10             (     mon09v36.asm):01156                 TFR     X,D             GET ADDRESS
EB11 17028B           (     mon09v36.asm):01157                 LBSR    WRDOUT          OUTPUT
EB14 1702A2           (     mon09v36.asm):01158                 LBSR    WRMSG           OUTPUT MESSAGE
EB17 2C2057726F74653A (     mon09v36.asm):01159                 FCN             ', Wrote: '
     2000
EB21 3502             (     mon09v36.asm):01160                 PULS    A               RESTORE VALUE
EB23 17027D           (     mon09v36.asm):01161                 LBSR    HEXOUT          OUTPUT
EB26 170290           (     mon09v36.asm):01162                 LBSR    WRMSG           OUTPUT MESSAGE
EB29 2C20526561643A20 (     mon09v36.asm):01163                 FCN             ', Read: '
     00
EB32 A684             (     mon09v36.asm):01164                 LDA     ,X              GET VALUE READ
EB34 2033             (     mon09v36.asm):01165                 BRA     RAM8            CONTINUE
                      (     mon09v36.asm):01166         ;* DATA WAS CORRUPTED BY OTHER WRITES
EB36 170280           (     mon09v36.asm):01167         RAM7    LBSR    WRMSG           OUTPUT MESSAGE
EB39 416464723A2000   (     mon09v36.asm):01168                 FCN             'Addr: '
EB40 1F10             (     mon09v36.asm):01169                 TFR     X,D             GET ADDR
EB42 17025A           (     mon09v36.asm):01170                 LBSR    WRDOUT          OUTPUT
EB45 170271           (     mon09v36.asm):01171                 LBSR    WRMSG           OUTPUT MESSAGE
EB48 2C20457870656374 (     mon09v36.asm):01172                 FCN             ', Expected: '
     65643A2000
EB55 B67F9D           (     mon09v36.asm):01173                 LDA     DSPBUF+1        GET VALUE
EB58 170248           (     mon09v36.asm):01174                 LBSR    HEXOUT          OUTPUT
EB5B 17025B           (     mon09v36.asm):01175                 LBSR    WRMSG           OUTPUT MESSAGE
EB5E 2C20526561643A20 (     mon09v36.asm):01176                 FCN             ', Read: '
     00
EB67 A684             (     mon09v36.asm):01177                 LDA     ,X              GET VALUE BACK
EB69 170237           (     mon09v36.asm):01178         RAM8    LBSR    HEXOUT          OUTPUT VALUE
EB6C 170275           (     mon09v36.asm):01179                 LBSR    LFCR            NEW LINE
EB6F F67F9D           (     mon09v36.asm):01180                 LDB     DSPBUF+1        GET CORRECT NEXT VALUE
EB72 16FF7E           (     mon09v36.asm):01181                 LBRA    RAM4
                      (     mon09v36.asm):01182         ;*
                      (     mon09v36.asm):01183         ;* '+' - HEXIDECIMAL ADDITION
                      (     mon09v36.asm):01184         ;*
EB75                  (     mon09v36.asm):01185         HEXADD
EB75 1701A5           (     mon09v36.asm):01186                 LBSR    GETADR          GET FIRST VALUE
EB78 3406             (     mon09v36.asm):01187                 PSHS    A,B                     SAVE IT
EB7A 862B             (     mon09v36.asm):01188                 LDA             #'+'            PLUS SIGN
EB7C 170286           (     mon09v36.asm):01189                 LBSR    PUTCHR          DISPLAY
EB7F 17019B           (     mon09v36.asm):01190                 LBSR    GETADR          GET SECOND VALUE
EB82 E3E4             (     mon09v36.asm):01191                 ADDD    ,S                      PERFORM ADDITION
EB84 2013             (     mon09v36.asm):01192                 BRA             HEXSHO          DISPLAY IT
                      (     mon09v36.asm):01193         ;*
                      (     mon09v36.asm):01194         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (     mon09v36.asm):01195         ;*
EB86                  (     mon09v36.asm):01196         HEXSUB
EB86 170194           (     mon09v36.asm):01197                 LBSR    GETADR          GET FIRST
EB89 3406             (     mon09v36.asm):01198                 PSHS    A,B                     SAVE IT
EB8B 862D             (     mon09v36.asm):01199                 LDA             #'-'            MINUS SIGN
EB8D 170275           (     mon09v36.asm):01200                 LBSR    PUTCHR          DISPLAY
EB90 17018A           (     mon09v36.asm):01201                 LBSR    GETADR          GET SECOND ADDRESS
EB93 3406             (     mon09v36.asm):01202                 PSHS    A,B                     SAVE IT
EB95 EC62             (     mon09v36.asm):01203                 LDD             2,S                     GET FIRST VALUE
EB97 A3E1             (     mon09v36.asm):01204                 SUBD    ,S++            PERFORM SUBTRACTION
EB99                  (     mon09v36.asm):01205         HEXSHO
EB99 EDE4             (     mon09v36.asm):01206                 STD             ,S                      SAVE RESULT
EB9B 863D             (     mon09v36.asm):01207                 LDA             #'='            EQUALS SIGN
EB9D 170265           (     mon09v36.asm):01208                 LBSR    PUTCHR          DISPLAY
EBA0 3506             (     mon09v36.asm):01209                 PULS    A,B                     RESTORE RESULT
EBA2 1701FA           (     mon09v36.asm):01210                 LBSR    WRDOUT          OUTPUT
EBA5 16023C           (     mon09v36.asm):01211                 LBRA    LFCR            NEW LINE & RETURN
                      (     mon09v36.asm):01212         ;*
                      (     mon09v36.asm):01213         ;* '?' - HELP COMMAND
                      (     mon09v36.asm):01214         ;*
EBA8                  (     mon09v36.asm):01215         HELP
EBA8 8EF9F3           (     mon09v36.asm):01216                 LDX             #HTEXT          POINT TO HELP TEXT
EBAB                  (     mon09v36.asm):01217         HLP1
EBAB C619             (     mon09v36.asm):01218                 LDB             #25                     COLUMN COUNTER
EBAD                  (     mon09v36.asm):01219         HLP2
EBAD A680             (     mon09v36.asm):01220                 LDA             ,X+                     GET CHAR FROM TEXT
EBAF 2718             (     mon09v36.asm):01221                 BEQ             HLP4            EXIT THIS LINE
EBB1 817C             (     mon09v36.asm):01222                 CMPA    #'|'            SEPERATOR?
EBB3 2706             (     mon09v36.asm):01223                 BEQ             HLP3            YES, EXIT
EBB5 17024D           (     mon09v36.asm):01224                 LBSR    PUTCHR          OUTPUT
EBB8 5A               (     mon09v36.asm):01225                 DECB                            BACKUP
EBB9 20F2             (     mon09v36.asm):01226                 BRA             HLP2            NEXT
EBBB                  (     mon09v36.asm):01227         HLP3
EBBB 170220           (     mon09v36.asm):01228                 LBSR    SPACE           OUTPUT SPACE
EBBE 5A               (     mon09v36.asm):01229                 DECB                            REDUCE COUNT
EBBF 26FA             (     mon09v36.asm):01230                 BNE             HLP3            KEEP GOING
EBC1 1701F5           (     mon09v36.asm):01231                 LBSR    WRMSG           OUTPUT MESSAGE
EBC4 2D2000           (     mon09v36.asm):01232                 FCN             '- '            SEPERATOR
EBC7 20E4             (     mon09v36.asm):01233                 BRA             HLP2            AND CONTINUE
EBC9                  (     mon09v36.asm):01234         HLP4
EBC9 170218           (     mon09v36.asm):01235                 LBSR    LFCR            NEW LINE
EBCC 170254           (     mon09v36.asm):01236                 LBSR    CHKCHR          TEST FOR CHARACTER ENTERED
EBCF 2704             (     mon09v36.asm):01237                 BEQ             HLP5            IF SO, EXIT
EBD1 A684             (     mon09v36.asm):01238                 LDA             ,X                      IS THIS THE END?
EBD3 2AD6             (     mon09v36.asm):01239                 BPL             HLP1            NO, KEEP GOING
EBD5                  (     mon09v36.asm):01240         HLP5
EBD5 39               (     mon09v36.asm):01241                 RTS
                      (     mon09v36.asm):01242         
                      (     mon09v36.asm):01243         ;******************************************************************************
                      (     mon09v36.asm):01244         ;* 'T' - TRANSPARENT MODE
                      (     mon09v36.asm):01245         ;******************************************************************************
     EBD6             (     mon09v36.asm):01246         TMODE   EQU     *                       TERMINAL ROUTINE
EBD6                  (     mon09v36.asm):01247         TM1
EBD6 BE7F6B           (     mon09v36.asm):01248                 LDX             >UART1          POINT TO MAIN UART
EBD9                  (     mon09v36.asm):01249         TM2
EBD9 1711AD           (     mon09v36.asm):01250                 LBSR    READ            TEST FOR CHAR FROM TERMINAL
EBDC 260C             (     mon09v36.asm):01251                 BNE             TM3                     NONE, IGNORE
EBDE 811B             (     mon09v36.asm):01252                 CMPA    #$1B            ESCAPE?
EBE0 10270200         (     mon09v36.asm):01253                 LBEQ    LFCR            NEW LINE, AND RETURN
EBE4 BE7F6D           (     mon09v36.asm):01254                 LDX             >UART2          POINT TO UART 2
EBE7 1711AD           (     mon09v36.asm):01255                 LBSR    WRITE           OUTPUT TO AUX PORT
EBEA                  (     mon09v36.asm):01256         TM3
EBEA BE7F6D           (     mon09v36.asm):01257                 LDX             >UART2          POINT TO UART 2
EBED 171199           (     mon09v36.asm):01258                 LBSR    READ            TEST FOR CHAR FROM AUX
EBF0 26E4             (     mon09v36.asm):01259                 BNE             TM1                     NONE, IGNORE
EBF2 BE7F6B           (     mon09v36.asm):01260                 LDX             >UART1          POINT TO UART 1
EBF5 17119F           (     mon09v36.asm):01261                 LBSR    WRITE           OUTPUT TO TERMINAL
EBF8 20DF             (     mon09v36.asm):01262                 BRA             TM2                     GET NEXT CHAR
                      (     mon09v36.asm):01263         
                      (     mon09v36.asm):01264         ;******************************************************************************
                      (     mon09v36.asm):01265         ;* 'L' - LOAD
                      (     mon09v36.asm):01266         ;******************************************************************************
EBFA                  (     mon09v36.asm):01267         LOAD
EBFA B67F6A           (     mon09v36.asm):01268                 LDA             IOCON                   GET I/O CONFIG
EBFD 3402             (     mon09v36.asm):01269                 PSHS    A                               SAVE
EBFF 1701E2           (     mon09v36.asm):01270                 LBSR    LFCR                    NEW LINE
EC02                  (     mon09v36.asm):01271         DLO1
EC02 7F7F6A           (     mon09v36.asm):01272                 CLR             IOCON                   INDICATE NO OUTPUT, READ UART
EC05 8D16             (     mon09v36.asm):01273                 BSR             DLOAD                   DOWNLOAD RECORD
EC07 240C             (     mon09v36.asm):01274                 BCC             DLO2                    END
EC09 A6E4             (     mon09v36.asm):01275                 LDA             ,S                              GET OLD I/O CONFIG
EC0B B77F6A           (     mon09v36.asm):01276                 STA             IOCON                   RESET
EC0E 862E             (     mon09v36.asm):01277                 LDA             #'.'                    GET DOT
EC10 1701F2           (     mon09v36.asm):01278                 LBSR    PUTCHR                  OUTPUT
EC13 20ED             (     mon09v36.asm):01279                 BRA             DLO1                    CONTINUE
EC15                  (     mon09v36.asm):01280         DLO2
EC15 3502             (     mon09v36.asm):01281                 PULS    A                               RESTORE A
EC17 B77F6A           (     mon09v36.asm):01282                 STA             IOCON                   SAVE
EC1A 1601C7           (     mon09v36.asm):01283                 LBRA    LFCR                    New line & return
                      (     mon09v36.asm):01284         ;
                      (     mon09v36.asm):01285         ;* Download a record in either MOTOROLA or INTEL hex format
EC1D                  (     mon09v36.asm):01286         DLOAD
EC1D 1701D0           (     mon09v36.asm):01287                 LBSR    GETCHR                  Get a character
EC20 813A             (     mon09v36.asm):01288                 CMPA    #':'                    Start of INTEL record?
EC22 2770             (     mon09v36.asm):01289                 BEQ             DLINT                   Yes, download INTEL
EC24 8153             (     mon09v36.asm):01290                 CMPA    #'S'                    Start of MOTOROLA record?
EC26 26F5             (     mon09v36.asm):01291                 BNE             DLOAD                   No, keep looking
                      (     mon09v36.asm):01292         ;
                      (     mon09v36.asm):01293         ;* Download a record in MOTOROLA hex format
EC28                  (     mon09v36.asm):01294         DLMOT
EC28 1701C5           (     mon09v36.asm):01295                 LBSR    GETCHR                  GET NEXT CHAR
EC2B 8130             (     mon09v36.asm):01296                 CMPA    #'0'                    HEADER RECORD?
EC2D 27EE             (     mon09v36.asm):01297                 BEQ             DLOAD                   SKIP IT
EC2F 8139             (     mon09v36.asm):01298                 CMPA    #'9'                    END OF FILE?
EC31 2760             (     mon09v36.asm):01299                 BEQ             DLEOF                   END OF FILE
EC33 8131             (     mon09v36.asm):01300                 CMPA    #'1'                    DATA RECORD?
EC35 2642             (     mon09v36.asm):01301                 BNE             LODERR                  LOAD ERROR
EC37 17012A           (     mon09v36.asm):01302                 LBSR    GETBYT                  GET LENGTH
EC3A 263D             (     mon09v36.asm):01303                 BNE             LODERR                  Report error
EC3C B77F7D           (     mon09v36.asm):01304                 STA             TEMP                    START CHECKSUM
EC3F 8003             (     mon09v36.asm):01305                 SUBA    #3                              CONVERT
EC41 B77F7E           (     mon09v36.asm):01306                 STA             TEMP+1                  Set length
EC44 17011D           (     mon09v36.asm):01307                 LBSR    GETBYT                  Get first byte of address
EC47 2630             (     mon09v36.asm):01308                 BNE             LODERR                  Report error
EC49 1F89             (     mon09v36.asm):01309                 TFR             A,B                             Save for later
EC4B BB7F7D           (     mon09v36.asm):01310                 ADDA    TEMP                    Include in checksum
EC4E B77F7D           (     mon09v36.asm):01311                 STA             TEMP                    Resave
EC51 170110           (     mon09v36.asm):01312                 LBSR    GETBYT                  Get next byte of address
EC54 2623             (     mon09v36.asm):01313                 BNE             LODERR                  Report error
EC56 1E89             (     mon09v36.asm):01314                 EXG             A,B                             Swap
EC58 1F01             (     mon09v36.asm):01315                 TFR             D,X                             Set pointer
EC5A FB7F7D           (     mon09v36.asm):01316                 ADDB    TEMP                    Include in checksum
EC5D F77F7D           (     mon09v36.asm):01317                 STB             TEMP                    Resave checksum
EC60                  (     mon09v36.asm):01318         DLMOT1
EC60 170101           (     mon09v36.asm):01319                 LBSR    GETBYT                  Get a data byte
EC63 A780             (     mon09v36.asm):01320                 STA             ,X+                             Save in RAM
EC65 BB7F7D           (     mon09v36.asm):01321                 ADDA    TEMP                    Include checksum
EC68 B77F7D           (     mon09v36.asm):01322                 STA             TEMP                    Resave
EC6B 7A7F7E           (     mon09v36.asm):01323                 DEC             TEMP+1                  Reduce length
EC6E 26F0             (     mon09v36.asm):01324                 BNE             DLMOT1                  Do them all
EC70 1700F1           (     mon09v36.asm):01325                 LBSR    GETBYT                  Get a byte
EC73 BB7F7D           (     mon09v36.asm):01326                 ADDA    TEMP                    Add computed checksum
EC76 4C               (     mon09v36.asm):01327                 INCA                                    Test for success
EC77 2718             (     mon09v36.asm):01328                 BEQ             DLRTS                   Download OK
                      (     mon09v36.asm):01329         ;
                      (     mon09v36.asm):01330         ;* Error occured on loading
EC79                  (     mon09v36.asm):01331         LODERR
EC79 8603             (     mon09v36.asm):01332                 LDA             #3                              GET DEFAULT I/O
EC7B B77F6A           (     mon09v36.asm):01333                 STA             IOCON                   SET I/O
EC7E 170138           (     mon09v36.asm):01334                 LBSR    WRMSG                   OUTPUT
EC81 203F4C6F61642065 (     mon09v36.asm):01335                 FCC             ' ?Load error'
     72726F72
EC8D FF               (     mon09v36.asm):01336                 FCB             $FF
EC8E 16F941           (     mon09v36.asm):01337                 LBRA    MAIN                    BACK FOR COMMAND
                      (     mon09v36.asm):01338         ;
                      (     mon09v36.asm):01339         ;* Return indicating another record
EC91                  (     mon09v36.asm):01340         DLRTS
EC91 1A01             (     mon09v36.asm):01341                 ORCC    #$01                    SET 'C' FLAG
EC93                  (     mon09v36.asm):01342         DLEOF
                      (     mon09v36.asm):01343                 IFNE JQ_LDFIX
                      (     mon09v36.asm):01344                 JMP             DLEOF_E                 FINISH LAST EOF RECORD
                      (     mon09v36.asm):01345                 ELSE
EC93 39               (     mon09v36.asm):01346                 RTS                                             RETURN TO CALLER
                      (     mon09v36.asm):01347                 ENDC
                      (     mon09v36.asm):01348         ;
                      (     mon09v36.asm):01349         ;* Download record in INTEL format
EC94                  (     mon09v36.asm):01350         DLINT
EC94 1700CD           (     mon09v36.asm):01351                 LBSR    GETBYT                  Get count
EC97 26E0             (     mon09v36.asm):01352                 BNE             LODERR                  Report error
EC99 B77F7D           (     mon09v36.asm):01353                 STA             TEMP                    Start checksum
EC9C B77F7E           (     mon09v36.asm):01354                 STA             TEMP+1                  Record length
EC9F 8100             (     mon09v36.asm):01355                 CMPA    #0                              Test & clear C
ECA1 27F0             (     mon09v36.asm):01356                 BEQ             DLEOF                   End of file
                      (     mon09v36.asm):01357         ;* Get address
ECA3 1700BE           (     mon09v36.asm):01358                 LBSR    GETBYT                  Get first byte of address
ECA6 26D1             (     mon09v36.asm):01359                 BNE             LODERR                  Report error
ECA8 1F89             (     mon09v36.asm):01360                 TFR             A,B                             Save for later
ECAA BB7F7D           (     mon09v36.asm):01361                 ADDA    TEMP                    Include in checksum
ECAD B77F7D           (     mon09v36.asm):01362                 STA             TEMP                    Resave
ECB0 1700B1           (     mon09v36.asm):01363                 LBSR    GETBYT                  Get next byte of address
ECB3 26C4             (     mon09v36.asm):01364                 BNE             LODERR                  Report error
ECB5 1E89             (     mon09v36.asm):01365                 EXG             A,B                             Swap
ECB7 1F01             (     mon09v36.asm):01366                 TFR             D,X                             Set pointer
ECB9 FB7F7D           (     mon09v36.asm):01367                 ADDB    TEMP                    Include in checksum
ECBC F77F7D           (     mon09v36.asm):01368                 STB             TEMP                    Resave checksum
                      (     mon09v36.asm):01369         ;* Get record type
ECBF 1700A2           (     mon09v36.asm):01370                 LBSR    GETBYT                  Get type value
ECC2 26B5             (     mon09v36.asm):01371                 BNE             LODERR                  Report error
ECC4 BB7F7D           (     mon09v36.asm):01372                 ADDA    TEMP                    Include checksum
ECC7 B77F7D           (     mon09v36.asm):01373                 STA             TEMP                    Resave checksum
                      (     mon09v36.asm):01374         ;* Get data bytes
ECCA                  (     mon09v36.asm):01375         DLINT1
ECCA 170097           (     mon09v36.asm):01376                 LBSR    GETBYT                  Get data byte
ECCD 26AA             (     mon09v36.asm):01377                 BNE             LODERR                  Report error
ECCF A780             (     mon09v36.asm):01378                 STA             ,X+                             Write to memory
ECD1 BB7F7D           (     mon09v36.asm):01379                 ADDA    TEMP                    Include checksum
ECD4 B77F7D           (     mon09v36.asm):01380                 STA             TEMP                    Resave checksum
ECD7 7A7F7E           (     mon09v36.asm):01381                 DEC             TEMP+1                  Reduce length
ECDA 26EE             (     mon09v36.asm):01382                 BNE             DLINT1                  Do them all
                      (     mon09v36.asm):01383         ;* Get checksum
ECDC BDED64           (     mon09v36.asm):01384                 JSR             GETBYT                  Read a byte
ECDF 2698             (     mon09v36.asm):01385                 BNE             LODERR                  Report error
ECE1 BB7F7D           (     mon09v36.asm):01386                 ADDA    TEMP                    Include checksum
ECE4 27AB             (     mon09v36.asm):01387                 BEQ             DLRTS                   Report success
ECE6 2091             (     mon09v36.asm):01388                 BRA             LODERR                  Report failure
                      (     mon09v36.asm):01389         ;*
                      (     mon09v36.asm):01390         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (     mon09v36.asm):01391         ;*
ECE8                  (     mon09v36.asm):01392         GETPC
ECE8 8D3A             (     mon09v36.asm):01393                 BSR             GETAD1          Get address
ECEA 2710             (     mon09v36.asm):01394                 BEQ             GETPC1          Normal data
ECEC 8120             (     mon09v36.asm):01395                 CMPA    #' '            Space?
ECEE 2631             (     mon09v36.asm):01396                 BNE             GETERR          Report error
ECF0 1700C6           (     mon09v36.asm):01397                 LBSR    WRMSG           Output message
ECF3 2D3E00           (     mon09v36.asm):01398                 FCN             '->'            Display address
ECF6 FC7F79           (     mon09v36.asm):01399                 LDD             SAVPC           Get PC value
ECF9 1600A3           (     mon09v36.asm):01400                 LBRA    WRDOUT          Display
ECFC                  (     mon09v36.asm):01401         GETPC1
ECFC FD7F79           (     mon09v36.asm):01402                 STD             SAVPC           Set new PC
ECFF 39               (     mon09v36.asm):01403                 RTS
                      (     mon09v36.asm):01404         ;*
                      (     mon09v36.asm):01405         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (     mon09v36.asm):01406         ;*
ED00                  (     mon09v36.asm):01407         GETRNG
ED00 8D1B             (     mon09v36.asm):01408                 BSR             GETADR          Get first address
ED02 1F01             (     mon09v36.asm):01409                 TFR             D,X                     Save in X
ED04 862C             (     mon09v36.asm):01410                 LDA             #','            Separator
ED06 1700FC           (     mon09v36.asm):01411                 LBSR    PUTCHR          Display
ED09 8D19             (     mon09v36.asm):01412                 BSR             GETAD1          Get second address
ED0B 2786             (     mon09v36.asm):01413                 BEQ             DLEOF           Normal data
ED0D 8120             (     mon09v36.asm):01414                 CMPA    #' '            Space?
ED0F 2610             (     mon09v36.asm):01415                 BNE             GETERR          No, report error
ED11 1700A5           (     mon09v36.asm):01416                 LBSR    WRMSG           Output message
ED14 4646464600       (     mon09v36.asm):01417                 FCN             'FFFF'
ED19 CCFFFF           (     mon09v36.asm):01418                 LDD             #$FFFF          Assume top of RAM
ED1C 39               (     mon09v36.asm):01419                 RTS
                      (     mon09v36.asm):01420         ;*
                      (     mon09v36.asm):01421         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (     mon09v36.asm):01422         ;*
ED1D                  (     mon09v36.asm):01423         GETADR
ED1D 8D05             (     mon09v36.asm):01424                 BSR             GETAD1          Get word value
ED1F 270F             (     mon09v36.asm):01425                 BEQ             GETAD2          Its OK
ED21                  (     mon09v36.asm):01426         GETERR
ED21 16F8EC           (     mon09v36.asm):01427                 LBRA    ERROR           Report error
                      (     mon09v36.asm):01428         ;* Get word value without error checking
ED24                  (     mon09v36.asm):01429         GETAD1
ED24 8D3E             (     mon09v36.asm):01430                 BSR             GETBYT          Get HIGH byte
ED26 2609             (     mon09v36.asm):01431                 BNE             GETAD3          Test for special register
ED28 1F89             (     mon09v36.asm):01432                 TFR             A,B             Copy for later
ED2A 8D38             (     mon09v36.asm):01433                 BSR             GETBYT          Get LOW byte
ED2C 26F3             (     mon09v36.asm):01434                 BNE             GETERR          Report error
ED2E 1E89             (     mon09v36.asm):01435                 EXG             A,B             Correct order
ED30                  (     mon09v36.asm):01436         GETAD2
ED30 39               (     mon09v36.asm):01437                 RTS
                      (     mon09v36.asm):01438         ;* Handle special register names
ED31                  (     mon09v36.asm):01439         GETAD3
ED31 3410             (     mon09v36.asm):01440                 PSHS    X               Save X
ED33 BE7F73           (     mon09v36.asm):01441                 LDX             SAVX            Assume X
ED36 8158             (     mon09v36.asm):01442                 CMPA    #'X'            Is it X?
ED38 271C             (     mon09v36.asm):01443                 BEQ             GETAD4          Yes
ED3A BE7F75           (     mon09v36.asm):01444                 LDX             SAVY            Assume Y
ED3D 8159             (     mon09v36.asm):01445                 CMPA    #'Y'            Is it Y?
ED3F 2715             (     mon09v36.asm):01446                 BEQ             GETAD4          Yes
ED41 BE7F77           (     mon09v36.asm):01447                 LDX             SAVU            Assume U
ED44 8155             (     mon09v36.asm):01448                 CMPA    #'U'            Is it U?
ED46 270E             (     mon09v36.asm):01449                 BEQ             GETAD4          Yes
ED48 BE7F73           (     mon09v36.asm):01450                 LDX             SAVX            Assume S
ED4B 8153             (     mon09v36.asm):01451                 CMPA    #'S'            Is it S?
ED4D 2707             (     mon09v36.asm):01452                 BEQ             GETAD4          Yes
ED4F BE7F79           (     mon09v36.asm):01453                 LDX             SAVPC           Assume PC?
ED52 8150             (     mon09v36.asm):01454                 CMPA    #'P'            Is it PC?
ED54 260C             (     mon09v36.asm):01455                 BNE             GETAD5          No, error
ED56                  (     mon09v36.asm):01456         GETAD4
ED56 863D             (     mon09v36.asm):01457                 LDA             #'='            Separator
ED58 1700AA           (     mon09v36.asm):01458                 LBSR    PUTCHR          Echo it
ED5B 1F10             (     mon09v36.asm):01459                 TFR             X,D             D = value
ED5D 8D40             (     mon09v36.asm):01460                 BSR             WRDOUT          Display it
ED5F 4F               (     mon09v36.asm):01461                 CLRA                    Set 'Z'
ED60 1F10             (     mon09v36.asm):01462                 TFR             X,D             Get value back
ED62                  (     mon09v36.asm):01463         GETAD5
ED62 3590             (     mon09v36.asm):01464                 PULS    X,PC            Restore & return
                      (     mon09v36.asm):01465         
                      (     mon09v36.asm):01466         ;*
                      (     mon09v36.asm):01467         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (     mon09v36.asm):01468         ;*
ED64                  (     mon09v36.asm):01469         GETBYT
ED64 8D20             (     mon09v36.asm):01470                 BSR             GETNIB          Get FIRST nibble
ED66 2611             (     mon09v36.asm):01471                 BNE             GETB3           Invalid, test for quote
ED68 48               (     mon09v36.asm):01472                 LSLA                            Rotate
ED69 48               (     mon09v36.asm):01473                 LSLA                            into
ED6A 48               (     mon09v36.asm):01474                 LSLA                            high
ED6B 48               (     mon09v36.asm):01475                 LSLA                            nibble
ED6C 3402             (     mon09v36.asm):01476                 PSHS    A                       Save for later
ED6E 8D16             (     mon09v36.asm):01477                 BSR             GETNIB          Get SECOND nibble
ED70 2604             (     mon09v36.asm):01478                 BNE             GETB2           Report error
ED72 AAE4             (     mon09v36.asm):01479                 ORA             ,S                      Include high
ED74                  (     mon09v36.asm):01480         GETB4
ED74 1A04             (     mon09v36.asm):01481                 ORCC    #$04            Indicate success (SET 'Z')
ED76                  (     mon09v36.asm):01482         GETB2
ED76 3261             (     mon09v36.asm):01483                 LEAS    1,S                     Skip saved value
ED78                  (     mon09v36.asm):01484         GETB1
ED78 39               (     mon09v36.asm):01485                 RTS
ED79                  (     mon09v36.asm):01486         GETB3
ED79 8127             (     mon09v36.asm):01487                 CMPA    #$27            Single quote?
ED7B 26FB             (     mon09v36.asm):01488                 BNE             GETB1           No, abort
ED7D 170070           (     mon09v36.asm):01489                 LBSR    GETCHR          Get ASCII character
ED80 170082           (     mon09v36.asm):01490                 LBSR    PUTCHR          Echo on terminal
ED83 1A04             (     mon09v36.asm):01491                 ORCC    #$04            Indicate success (SET 'Z')
ED85 39               (     mon09v36.asm):01492                 RTS
                      (     mon09v36.asm):01493         
                      (     mon09v36.asm):01494                 IFNE JQ_LDFIX           not functional!
                      (     mon09v36.asm):01495         ;*
                      (     mon09v36.asm):01496         ;* EOF DETECTED, CONTINUE FETCHING BYTES TILL A CR OR LF
                      (     mon09v36.asm):01497         ;*  IS RECEIVED THEN RETURN TO CALLER
                      (     mon09v36.asm):01498         ;*
ED86                  (     mon09v36.asm):01499         DLEOF_E
                      (     mon09v36.asm):01500                 LBSR    GETCHR                  Get ASCII character
                      (     mon09v36.asm):01501                 CMPA    #$0D                    Is it a CR character?
                      (     mon09v36.asm):01502                 BEQ             DLEOF_E1                Yes, exit
                      (     mon09v36.asm):01503                 CMPA    #$0A                    Is it a LF character?
                      (     mon09v36.asm):01504                 BEQ             DLEOF_E1                Yes, exit
                      (     mon09v36.asm):01505                 BRA             DLEOF_E                 Loop till CR or LF recieved
ED86                  (     mon09v36.asm):01506         DLEOF_E1
                      (     mon09v36.asm):01507                 RTS                                             RETURN TO CALLER
                      (     mon09v36.asm):01508                 ENDC
                      (     mon09v36.asm):01509         ;*
                      (     mon09v36.asm):01510         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (     mon09v36.asm):01511         ;*
ED86                  (     mon09v36.asm):01512         GETNIB
ED86 170047           (     mon09v36.asm):01513                 LBSR    GETECH          Get character
ED89 8030             (     mon09v36.asm):01514                 SUBA    #'0'            Convert numbers
ED8B 8109             (     mon09v36.asm):01515                 CMPA    #9                      Numeric?
ED8D 230A             (     mon09v36.asm):01516                 BLS             GETN1           Yes, OK
ED8F 8007             (     mon09v36.asm):01517                 SUBA    #7                      Convert alphas
ED91 810A             (     mon09v36.asm):01518                 CMPA    #$A                     Under?
ED93 2507             (     mon09v36.asm):01519                 BLO             GETN2           Yer, error
ED95 810F             (     mon09v36.asm):01520                 CMPA    #$F                     Over?
ED97 2203             (     mon09v36.asm):01521                 BHI             GETN2           Yes, error
ED99                  (     mon09v36.asm):01522         GETN1
ED99 1A04             (     mon09v36.asm):01523                 ORCC    #$04            SET 'Z' FLAG, INDICATE OK
ED9B 39               (     mon09v36.asm):01524                 RTS
ED9C                  (     mon09v36.asm):01525         GETN2
ED9C 8B37             (     mon09v36.asm):01526                 ADDA    #$37            Normalize character + clear Z
ED9E 39               (     mon09v36.asm):01527                 RTS
                      (     mon09v36.asm):01528         ;*
                      (     mon09v36.asm):01529         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (     mon09v36.asm):01530         ;*
ED9F                  (     mon09v36.asm):01531         WRDOUT
ED9F 8D02             (     mon09v36.asm):01532                 BSR             HEXOUT          Output first byte
EDA1 1F98             (     mon09v36.asm):01533                 TFR             B,A                     Get second byte
                      (     mon09v36.asm):01534         ;*
                      (     mon09v36.asm):01535         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (     mon09v36.asm):01536         ;*
EDA3                  (     mon09v36.asm):01537         HEXOUT
EDA3 3402             (     mon09v36.asm):01538                 PSHS    A                       Save low nibble
EDA5 44               (     mon09v36.asm):01539                 LSRA                            Rotate
EDA6 44               (     mon09v36.asm):01540                 LSRA                            upper nibble
EDA7 44               (     mon09v36.asm):01541                 LSRA                            into
EDA8 44               (     mon09v36.asm):01542                 LSRA                            lower nibble
EDA9 8D02             (     mon09v36.asm):01543                 BSR             HOUT            Output high nibble
EDAB 3502             (     mon09v36.asm):01544                 PULS    A                       Restore low nibble
                      (     mon09v36.asm):01545         ;*
                      (     mon09v36.asm):01546         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (     mon09v36.asm):01547         ;*
EDAD                  (     mon09v36.asm):01548         HOUT
EDAD 840F             (     mon09v36.asm):01549                 ANDA    #$0F            Remove upper half
EDAF 8B30             (     mon09v36.asm):01550                 ADDA    #'0'            Convert to printable
EDB1 8139             (     mon09v36.asm):01551                 CMPA    #'9'            In range?
EDB3 2302             (     mon09v36.asm):01552                 BLS             HOUT1           Yes, display
EDB5 8B07             (     mon09v36.asm):01553                 ADDA    #7                      Convert to alpha
EDB7                  (     mon09v36.asm):01554         HOUT1
EDB7 204C             (     mon09v36.asm):01555                 BRA             PUTCHR          Output character
                      (     mon09v36.asm):01556         
                      (     mon09v36.asm):01557         ;******************************************************************************
                      (     mon09v36.asm):01558         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (     mon09v36.asm):01559         ;******************************************************************************
EDB9 3410             (     mon09v36.asm):01560         WRMSG   PSHS    X               SAVE X
EDBB AE62             (     mon09v36.asm):01561                 LDX     2,S             GET OLD PC
EDBD 8D04             (     mon09v36.asm):01562                 BSR     WRLIN           OUTPUT LINE
EDBF AF62             (     mon09v36.asm):01563                 STX     2,S             UPDATE OLD PC
EDC1 3590             (     mon09v36.asm):01564                 PULS    X,PC            RESTORE X, RETURN
                      (     mon09v36.asm):01565         
                      (     mon09v36.asm):01566         ;******************************************************************************
                      (     mon09v36.asm):01567         ;* DISPLAY MESSAGE(X)
                      (     mon09v36.asm):01568         ;******************************************************************************
EDC3                  (     mon09v36.asm):01569         WRLIN
EDC3 A680             (     mon09v36.asm):01570                 LDA             ,X+                     GET CHAR FROM MESSAGE
EDC5 2708             (     mon09v36.asm):01571                 BEQ             WRLND           END, QUIT
EDC7 81FF             (     mon09v36.asm):01572                 CMPA    #$FF            NEWLINE END, LFCR & EXIT
EDC9 2719             (     mon09v36.asm):01573                 BEQ             LFCR            IF SO, NEW LINE, RETURN
EDCB 8D38             (     mon09v36.asm):01574                 BSR             PUTCHR          OUTPUT TO TERM
EDCD 20F4             (     mon09v36.asm):01575                 BRA             WRLIN           KEEP GOING
EDCF                  (     mon09v36.asm):01576         WRLND
EDCF 39               (     mon09v36.asm):01577                 RTS
                      (     mon09v36.asm):01578         
                      (     mon09v36.asm):01579         ;******************************************************************************
                      (     mon09v36.asm):01580         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (     mon09v36.asm):01581         ;******************************************************************************
EDD0                  (     mon09v36.asm):01582         GETECH
EDD0 8D1E             (     mon09v36.asm):01583                 BSR             GETCHR          GET CHARACTER
EDD2 8120             (     mon09v36.asm):01584                 CMPA    #' '            SPACE?
EDD4 23F9             (     mon09v36.asm):01585                 BLS             WRLND           IF < DON'T DISPLAY
EDD6 8161             (     mon09v36.asm):01586                 CMPA    #$61            LOWER CASE?
EDD8 252B             (     mon09v36.asm):01587                 BLO             PUTCHR          OK
EDDA 845F             (     mon09v36.asm):01588                 ANDA    #$5F            CONVERT TO UPPER
EDDC 2027             (     mon09v36.asm):01589                 BRA             PUTCHR          ECHO
                      (     mon09v36.asm):01590         
                      (     mon09v36.asm):01591         ;******************************************************************************
                      (     mon09v36.asm):01592         ;* DISPLAY A SPACE ON THE TERMINAL
                      (     mon09v36.asm):01593         ;******************************************************************************
EDDE                  (     mon09v36.asm):01594         SPACE
EDDE 3402             (     mon09v36.asm):01595                 PSHS    A               SAVE A
EDE0 8620             (     mon09v36.asm):01596                 LDA     #' '            GET SPACE
EDE2 2008             (     mon09v36.asm):01597                 BRA     LFC1            DISLAY AND GO HOME
                      (     mon09v36.asm):01598         
                      (     mon09v36.asm):01599         ;******************************************************************************
                      (     mon09v36.asm):01600         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (     mon09v36.asm):01601         ;******************************************************************************
EDE4                  (     mon09v36.asm):01602         LFCR
EDE4 3402             (     mon09v36.asm):01603                 PSHS    A                               SAVE
EDE6 860A             (     mon09v36.asm):01604                 LDA             #$0A                    GET LF
EDE8 8D1B             (     mon09v36.asm):01605                 BSR             PUTCHR                  OUTPUT
EDEA 860D             (     mon09v36.asm):01606                 LDA             #$0D                    GET CR
EDEC                  (     mon09v36.asm):01607         LFC1
EDEC 8D17             (     mon09v36.asm):01608                 BSR             PUTCHR                  OUTPUT
EDEE 3582             (     mon09v36.asm):01609                 PULS    A,PC                    RESTORE AND GO HOME
                      (     mon09v36.asm):01610         
                      (     mon09v36.asm):01611         ;******************************************************************************
                      (     mon09v36.asm):01612         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (     mon09v36.asm):01613         ;******************************************************************************
EDF0                  (     mon09v36.asm):01614         GETCHR
EDF0 3410             (     mon09v36.asm):01615                 PSHS    X                               SAVE 'X'
EDF2 BE7F6B           (     mon09v36.asm):01616                 LDX             >UART1                  POINT TO CONSOLE
EDF5 B67F6A           (     mon09v36.asm):01617                 LDA             IOCON                   GET I/O CONFIG
EDF8 44               (     mon09v36.asm):01618                 LSRA                                    SHIFT TO CARRY
EDF9 2503             (     mon09v36.asm):01619                 BCS             GETC1                   READ FROM UART
EDFB BE7F6D           (     mon09v36.asm):01620                 LDX             >UART2                  POINT TO AUX UART
EDFE                  (     mon09v36.asm):01621         GETC1
EDFE 170F88           (     mon09v36.asm):01622                 LBSR    READ                    READ TERMINAL
EE01 26FB             (     mon09v36.asm):01623                 BNE             GETC1                   KEEP TRYING
EE03 3590             (     mon09v36.asm):01624                 PULS    X,PC
                      (     mon09v36.asm):01625         
                      (     mon09v36.asm):01626         ;******************************************************************************
                      (     mon09v36.asm):01627         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (     mon09v36.asm):01628         ;******************************************************************************
EE05                  (     mon09v36.asm):01629         PUTCHR
EE05 3416             (     mon09v36.asm):01630                 PSHS    A,B,X                   SAVE REGS
EE07 F67F6A           (     mon09v36.asm):01631                 LDB             IOCON                   GET I/O CONFIG
EE0A C502             (     mon09v36.asm):01632                 BITB    #2                              WRITE TO TERM?
EE0C 2706             (     mon09v36.asm):01633                 BEQ             PUT1                    NO, TRY UART
EE0E BE7F6B           (     mon09v36.asm):01634                 LDX             >UART1                  POINT TO UART1
EE11 170F83           (     mon09v36.asm):01635                 LBSR    WRITE                   OUTPUT TO TERMINAL
EE14                  (     mon09v36.asm):01636         PUT1
EE14 F67F6A           (     mon09v36.asm):01637                 LDB             IOCON                   INCASE CORRUPTED
EE17 C504             (     mon09v36.asm):01638                 BITB    #4                              WRITE TO UART?
EE19 2706             (     mon09v36.asm):01639                 BEQ             PUT2                    NO, SKIP IT
EE1B BE7F6D           (     mon09v36.asm):01640                 LDX             >UART2                  POINT TO UART2
EE1E 170F76           (     mon09v36.asm):01641                 LBSR    WRITE                   OUTPUT TO UART
EE21                  (     mon09v36.asm):01642         PUT2
EE21 3596             (     mon09v36.asm):01643                 PULS    A,B,X,PC                RESTORE AND GO HOME
                      (     mon09v36.asm):01644         
                      (     mon09v36.asm):01645         ;******************************************************************************
                      (     mon09v36.asm):01646         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (     mon09v36.asm):01647         ;* SCREEN OUTPUT FLOW CONTROL.
                      (     mon09v36.asm):01648         ;******************************************************************************
EE23                  (     mon09v36.asm):01649         CHKCHR
EE23 3410             (     mon09v36.asm):01650                 PSHS    X                               SAVE PTR
EE25 BE7F6B           (     mon09v36.asm):01651                 LDX             >UART1                  POINT TO CONSOLE UART
EE28 F67F6A           (     mon09v36.asm):01652                 LDB             IOCON                   GET I/O CONFIG
EE2B 2B07             (     mon09v36.asm):01653                 BMI             CHKC1                   ALREADY HELD
EE2D 170F59           (     mon09v36.asm):01654                 LBSR    READ                    READ TERMINAL
EE30 8120             (     mon09v36.asm):01655                 CMPA    #' '                    SPACE?
EE32 2616             (     mon09v36.asm):01656                 BNE             CHKC3                   NO, IGNORE IT
EE34                  (     mon09v36.asm):01657         CHKC1
EE34 CA80             (     mon09v36.asm):01658                 ORB             #%10000000              SET HELD BIT
EE36 170F50           (     mon09v36.asm):01659                 LBSR    READ                    GET KEY FROM CONSOLE
EE39 8120             (     mon09v36.asm):01660                 CMPA    #' '                    SPACE?
EE3B 270A             (     mon09v36.asm):01661                 BEQ             CHKC2                   YES, ALLOW
EE3D C47F             (     mon09v36.asm):01662                 ANDB    #%01111111              DISABLE HELD BIT
EE3F 810D             (     mon09v36.asm):01663                 CMPA    #$0D                    CARRIAGE RETURN?
EE41 2704             (     mon09v36.asm):01664                 BEQ             CHKC2                   ALLOW
EE43 811B             (     mon09v36.asm):01665                 CMPA    #$1B                    ESCAPE?
EE45 26ED             (     mon09v36.asm):01666                 BNE             CHKC1                   NO, IGNORE
EE47                  (     mon09v36.asm):01667         CHKC2
EE47 F77F6A           (     mon09v36.asm):01668                 STB             IOCON                   RESAVE I/O CONFIG BYTE
EE4A                  (     mon09v36.asm):01669         CHKC3
EE4A 811B             (     mon09v36.asm):01670                 CMPA    #$1B                    TEST FOR ESCAPE CHARACTER
EE4C 3590             (     mon09v36.asm):01671                 PULS    X,PC
                      (     mon09v36.asm):01672         
                      (     mon09v36.asm):01673         ;******************************************************************************
                      (     mon09v36.asm):01674         ;* STEP ONE INSTRUCTION
                      (     mon09v36.asm):01675         ;******************************************************************************
EE4E                  (     mon09v36.asm):01676         STEPDI
EE4E 10BE7F79         (     mon09v36.asm):01677                 LDY             SAVPC                   GET PC
EE52 CE7F9C           (     mon09v36.asm):01678                 LDU             #DSPBUF                 GET INPUT BUFFER
EE55 170265           (     mon09v36.asm):01679                 LBSR    DISASS                  DISPLAY
EE58 1F31             (     mon09v36.asm):01680                 TFR             U,X                             POINT TO IT
EE5A 17FF66           (     mon09v36.asm):01681                 LBSR    WRLIN                   DISPLAY
EE5D 200A             (     mon09v36.asm):01682                 BRA             STEPCE                  AND PERFORM STEP
                      (     mon09v36.asm):01683         
                      (     mon09v36.asm):01684         ;******************************************************************************
                      (     mon09v36.asm):01685         ;* STEP WITHOUT DISPLAYING INSTRUCTION
                      (     mon09v36.asm):01686         ;******************************************************************************
EE5F 10BE7F79         (     mon09v36.asm):01687         STEP    LDY     SAVPC           GET PROGRAM COUNTER
EE63 CE7F9C           (     mon09v36.asm):01688                 LDU     #DSPBUF         POINT TO FREE RAM FOR DISASEMBLY OUTPUT
EE66 170254           (     mon09v36.asm):01689                 LBSR    DISASS          PERFORM DISASSEMBLY
EE69 10BF7F79         (     mon09v36.asm):01690         STEPCE  STY     SAVPC           SAVE NEW PC
EE6D FE7F80           (     mon09v36.asm):01691                 LDU     PTRSAV          GET POINTER BACK
EE70 ECC0             (     mon09v36.asm):01692                 LDD     ,U+             GET OPCODE
                      (     mon09v36.asm):01693         ;* TEST FOR LONG CONDITIONAL BRANCHES
EE72 8110             (     mon09v36.asm):01694         LCBRAN  CMPA    #$10            PREFIX?
EE74 2612             (     mon09v36.asm):01695                 BNE     LOBRAN          NO, GOT FOR IT
EE76 E6C4             (     mon09v36.asm):01696                 LDB     ,U              GET OPCODE
EE78 C122             (     mon09v36.asm):01697                 CMPB    #$22            IN RANGE?
EE7A 250C             (     mon09v36.asm):01698                 BLO     LOBRAN          NO
EE7C C12F             (     mon09v36.asm):01699                 CMPB    #$2F            IN RANGE?
EE7E 2208             (     mon09v36.asm):01700                 BHI     LOBRAN          NO
EE80 A6C0             (     mon09v36.asm):01701                 LDA     ,U+             GET OPCOIDE BYTE
EE82 170216           (     mon09v36.asm):01702                 LBSR    TSTCON          TEST CONDITIONAL
EE85 2705             (     mon09v36.asm):01703                 BEQ     LBRAN1          YES, DO IT
EE87 39               (     mon09v36.asm):01704                 RTS
                      (     mon09v36.asm):01705         ;* TEST FOR LONG BRANCHES
EE88 8116             (     mon09v36.asm):01706         LOBRAN  CMPA    #$16            IS IT LBRA?
EE8A 2606             (     mon09v36.asm):01707                 BNE     LBRANS          NO, TRY LBSR
EE8C ECC1             (     mon09v36.asm):01708         LBRAN1  LDD     ,U++            GET OFFSET
EE8E 30CB             (     mon09v36.asm):01709                 LEAX    D,U             PERFORM BRANCH
EE90 2034             (     mon09v36.asm):01710                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v36.asm):01711         ;* TEST FOR LONG BRANCH TO SUB
EE92 8117             (     mon09v36.asm):01712         LBRANS  CMPA    #$17            'LBSR'?
EE94 2606             (     mon09v36.asm):01713                 BNE     SCOBRA          NO, TRY SHORT CONDITIONALS
EE96 ECC1             (     mon09v36.asm):01714                 LDD     ,U++            GET OFFSET
EE98 30CB             (     mon09v36.asm):01715                 LEAX    D,U             SET UP ADDRESS
EE9A 2020             (     mon09v36.asm):01716                 BRA     SAVSTK
                      (     mon09v36.asm):01717         ;* TEST FOR SHORT CONDITIONAL BRANCHES
EE9C 8122             (     mon09v36.asm):01718         SCOBRA  CMPA    #$22            < 'BHI'?
EE9E 250A             (     mon09v36.asm):01719                 BLO     SHBRAN          NO, TRY SHORT BRANCHES
EEA0 812F             (     mon09v36.asm):01720                 CMPA    #$2F            > 'BLE'?
EEA2 2206             (     mon09v36.asm):01721                 BHI     SHBRAN          NO, TRY SHORT BRANCHES
EEA4 1701F4           (     mon09v36.asm):01722                 LBSR    TSTCON          SEE OF CONDITIONAL IS OK
EEA7 2705             (     mon09v36.asm):01723                 BEQ     SBRAN1          YES, DO IT
EEA9 39               (     mon09v36.asm):01724                 RTS
                      (     mon09v36.asm):01725         ;* TEST FOR SHORT BRANCHES
EEAA 8120             (     mon09v36.asm):01726         SHBRAN  CMPA    #$20            SHORT BRANCH?
EEAC 2606             (     mon09v36.asm):01727                 BNE     SBRANS          NO, TRY SHORT BRANCH TO SUB
EEAE E6C0             (     mon09v36.asm):01728         SBRAN1  LDB     ,U+             GET OFFSET
EEB0 30C5             (     mon09v36.asm):01729                 LEAX    B,U             EMULATE JUMP
EEB2 2012             (     mon09v36.asm):01730                 BRA     SAVNPC          SAVE NEW PC
                      (     mon09v36.asm):01731         ;* TEST FOR SHORT BRANCH TO SUBROUTINE
EEB4 818D             (     mon09v36.asm):01732         SBRANS  CMPA    #$8D            'BSR'?
EEB6 2612             (     mon09v36.asm):01733                 BNE     TSTTFR          NO, TRY TRANSFER
EEB8 E6C0             (     mon09v36.asm):01734                 LDB     ,U+             GET OFFSET
EEBA 30C5             (     mon09v36.asm):01735                 LEAX    B,U             PERFORM BRANCH
EEBC 10BE7F7B         (     mon09v36.asm):01736         SAVSTK  LDY     SAVS            GET STACK POINTER
EEC0 EFA3             (     mon09v36.asm):01737                 STU     ,--Y            PUSH ADDRESS
EEC2 10BF7F7B         (     mon09v36.asm):01738                 STY     SAVS            RESAVE
EEC6 BF7F79           (     mon09v36.asm):01739         SAVNPC  STX     SAVPC           SAVE IT
EEC9 39               (     mon09v36.asm):01740                 RTS
                      (     mon09v36.asm):01741         ;* TEST FOR TRANSFER
EECA 811F             (     mon09v36.asm):01742         TSTTFR  CMPA    #$1F            TRANSFER?
EECC 2620             (     mon09v36.asm):01743                 BNE     TSTEXG          NO, TRY EXCHANGE
EECE 8D01             (     mon09v36.asm):01744                 BSR     LOKREG          LOOKUP REGISTER
EED0 39               (     mon09v36.asm):01745                 RTS
                      (     mon09v36.asm):01746         ;* LOOKUP REGISTER, AND SIMULATE IF PC XFER OR EXCHANGE
EED1 A6C4             (     mon09v36.asm):01747         LOKREG  LDA     ,U              GET POSTBYTE
EED3 840F             (     mon09v36.asm):01748                 ANDA    #$0F            REMOVE HIGH REGISTER
EED5 8105             (     mon09v36.asm):01749                 CMPA    #5              IS IT PC?
EED7 2610             (     mon09v36.asm):01750                 BNE     LOK1            NO, IT'S OK TO EXECUTE
EED9 A6C4             (     mon09v36.asm):01751                 LDA     ,U              GET REG POSTBYTE BACK
EEDB 44               (     mon09v36.asm):01752                 LSRA                    SHIFT
EEDC 44               (     mon09v36.asm):01753                 LSRA                    HIGH REGISTER
EEDD 44               (     mon09v36.asm):01754                 LSRA                    TO LOW (LEAVE X 2)
EEDE 8EF9AF           (     mon09v36.asm):01755         LOK2    LDX     #TFREGT         POINT TO TABLE
EEE1 840F             (     mon09v36.asm):01756                 ANDA    #$0F            INSURE WE GET VALID REG
EEE3 AE86             (     mon09v36.asm):01757                 LDX     A,X             GET ADDRESS OF VARIABLE
EEE5 EC84             (     mon09v36.asm):01758                 LDD     ,X              GET REGISTER VALUE
EEE7 202E             (     mon09v36.asm):01759                 BRA     STDPC           SAVE IT
EEE9 3262             (     mon09v36.asm):01760         LOK1    LEAS    2,S             SKIP LAST CALL
EEEB 160151           (     mon09v36.asm):01761                 LBRA    NOREXE          EXECUTE NORMAL INSTRUCTION
                      (     mon09v36.asm):01762         ;* TEST FOR EXCHANGE
EEEE 811E             (     mon09v36.asm):01763         TSTEXG  CMPA    #$1E            IS IT EXCHANGE
EEF0 2619             (     mon09v36.asm):01764                 BNE     TSTRTS          NO, TRY RTS
EEF2 10BE7F79         (     mon09v36.asm):01765                 LDY     SAVPC           GET OLD PC VALUE
EEF6 A6C4             (     mon09v36.asm):01766                 LDA     ,U              GET REGISTER
EEF8 84F0             (     mon09v36.asm):01767                 ANDA    #$F0            USE HIGH ONLY
EEFA 8150             (     mon09v36.asm):01768                 CMPA    #$50            IS PC FIRST?
EEFC 2607             (     mon09v36.asm):01769                 BNE     TSTE1           NO, SKIP
EEFE A6C4             (     mon09v36.asm):01770                 LDA     ,U              GET REG BACK
EF00 48               (     mon09v36.asm):01771                 LSLA                    DOUBLE
EF01 8DDB             (     mon09v36.asm):01772                 BSR     LOK2            GET ADDRESS OF REG TO SWAP WITH
EF03 2002             (     mon09v36.asm):01773                 BRA     TSTE2           PERFORM MOVE TO PC
EF05 8DCA             (     mon09v36.asm):01774         TSTE1   BSR     LOKREG          GET REGISTER SEE IF PC IS LOW REGISTER
EF07 10AF84           (     mon09v36.asm):01775         TSTE2   STY     ,X              SAVE PC IN REGISTER
EF0A 39               (     mon09v36.asm):01776                 RTS
                      (     mon09v36.asm):01777         ;* TEST FOR 'RTS' INSTRUCTIONS
EF0B 8139             (     mon09v36.asm):01778         TSTRTS  CMPA    #$39            IS IT 'RTS'
EF0D 260C             (     mon09v36.asm):01779                 BNE     TPULS           NO, TRY PULS
EF0F FE7F7B           (     mon09v36.asm):01780                 LDU     SAVS            POINT TO STACK
EF12 3706             (     mon09v36.asm):01781                 PULU    A,B             GET DATA
EF14 FF7F7B           (     mon09v36.asm):01782                 STU     SAVS            RESAVE SP
EF17 FD7F79           (     mon09v36.asm):01783         STDPC   STD     SAVPC
EF1A 39               (     mon09v36.asm):01784                 RTS
                      (     mon09v36.asm):01785         ;* TEST FOR 'PULS' INSTRUCTION
EF1B 8135             (     mon09v36.asm):01786         TPULS   CMPA    #$35            PULLING FROM S?
EF1D 260D             (     mon09v36.asm):01787                 BNE     TPULU           NO, TRY PULU
EF1F BE7F7B           (     mon09v36.asm):01788                 LDX     SAVS            GET SAVED 'S' REG
EF22 108EF9BB         (     mon09v36.asm):01789                 LDY     #PULSTAB        POINT TO TABLE
EF26 8D15             (     mon09v36.asm):01790                 BSR     DOPUL           PERFORM PULL
EF28 BF7F7B           (     mon09v36.asm):01791                 STX     SAVS            RESAVE NEW 'S' REGISTER
EF2B 39               (     mon09v36.asm):01792                 RTS
                      (     mon09v36.asm):01793         ;* TEST FOR A 'PULU' INSTRUCTION
EF2C 8137             (     mon09v36.asm):01794         TPULU   CMPA    #$37            IS IT 'PULU'?
EF2E 262E             (     mon09v36.asm):01795                 BNE     JSREXT          NO, TRY JSR EXTENDED
EF30 BE7F77           (     mon09v36.asm):01796                 LDX     SAVU            GET SAVED 'U'
EF33 108EF9CB         (     mon09v36.asm):01797                 LDY     #PULUTAB        POINT TO TABLE
EF37 8D04             (     mon09v36.asm):01798                 BSR     DOPUL           PERFORM PULL
EF39 BF7F77           (     mon09v36.asm):01799                 STX     SAVU            RESAVE 'S'
EF3C 39               (     mon09v36.asm):01800                 RTS
                      (     mon09v36.asm):01801         ;* PERFORM PUL OPERATIONS
EF3D A6C4             (     mon09v36.asm):01802         DOPUL   LDA     ,U              GET POSTBYTE
EF3F C604             (     mon09v36.asm):01803                 LDB     #4              TEST FOR FIRST FOUR BITS (8 BIT REG)
EF41 5A               (     mon09v36.asm):01804         DOPUL1  DECB                    DECREMENT COUNT
EF42 44               (     mon09v36.asm):01805                 LSRA                    SHIFT
EF43 2413             (     mon09v36.asm):01806                 BCC     DOPUL2          NOTHING, GO AGAIN
EF45 3406             (     mon09v36.asm):01807                 PSHS    A,B             SAVE REGS
EF47 5D               (     mon09v36.asm):01808                 TSTB                    ARE WE INTO 16 BITS?
EF48 2B06             (     mon09v36.asm):01809                 BMI     PUL16           YES, PERFORM 16 BITS
EF4A A680             (     mon09v36.asm):01810                 LDA     ,X+             PULL A BYTE
EF4C A7B1             (     mon09v36.asm):01811                 STA     [,Y++]          SAVE IN REGISTER
EF4E 2004             (     mon09v36.asm):01812                 BRA     DOPUL3          GO AGAIN
EF50 EC81             (     mon09v36.asm):01813         PUL16   LDD     ,X++            GET 16 BIT VALUE
EF52 EDB1             (     mon09v36.asm):01814                 STD     [,Y++]          SAVE IN REGISTER
EF54 3506             (     mon09v36.asm):01815         DOPUL3  PULS    A,B             RESTORE
EF56 20E9             (     mon09v36.asm):01816                 BRA     DOPUL1          CONTINUE
EF58 3122             (     mon09v36.asm):01817         DOPUL2  LEAY    2,Y             ADVANCE
EF5A 4D               (     mon09v36.asm):01818                 TSTA                    ARE WE CONE
EF5B 26E4             (     mon09v36.asm):01819                 BNE     DOPUL1          CONTINUE
EF5D 39               (     mon09v36.asm):01820                 RTS
                      (     mon09v36.asm):01821         ;* TEST FOR 'JSR' EXTENDED
EF5E 81BD             (     mon09v36.asm):01822         JSREXT  CMPA    #$BD            IS IT EXTENDED JSR
EF60 2604             (     mon09v36.asm):01823                 BNE     JMPEXT          NO, TRY JUMP EXTENDED
EF62 8D06             (     mon09v36.asm):01824                 BSR     DJMPEX          FAKE JUMP
EF64 2021             (     mon09v36.asm):01825                 BRA     PSHPC           SAVE PC
                      (     mon09v36.asm):01826         ;* TEST FOR 'JMP' EXTENDED
EF66 817E             (     mon09v36.asm):01827         JMPEXT  CMPA    #$7E            IS IT JMP EXTENDED?
EF68 2604             (     mon09v36.asm):01828                 BNE     JSRDIR          NO, TRY JMP DIRECT
EF6A ECC1             (     mon09v36.asm):01829         DJMPEX  LDD     ,U++            GET ADDRESS
EF6C 20A9             (     mon09v36.asm):01830                 BRA     STDPC           SAVE IT
                      (     mon09v36.asm):01831         ;* TEST FOR 'JSR' DIRECT
EF6E 819D             (     mon09v36.asm):01832         JSRDIR  CMPA    #$9D            'JSR' DIRECT PAGE?
EF70 2604             (     mon09v36.asm):01833                 BNE     JMPDIR          NO, TRY JUMP
EF72 8D06             (     mon09v36.asm):01834                 BSR     DJMPDI          DO IT
EF74 2011             (     mon09v36.asm):01835                 BRA     PSHPC           SAVE PC
                      (     mon09v36.asm):01836         ;* TEST FOR 'JMP' DIRECT PAGE
EF76 810E             (     mon09v36.asm):01837         JMPDIR  CMPA    #$0E            IS IT JUMP DIRECT PAGE?
EF78 2607             (     mon09v36.asm):01838                 BNE     JSRIND          NO, TRY JUMP INDEXED
EF7A E6C0             (     mon09v36.asm):01839         DJMPDI  LDB     ,U+             GET LOW ADDRESS
EF7C B67F72           (     mon09v36.asm):01840                 LDA     SAVDP           GET DIRECT PAGE
EF7F 2096             (     mon09v36.asm):01841                 BRA     STDPC           SAVE IT
                      (     mon09v36.asm):01842         ;* TEST FOR 'JSR' INDEXED
EF81 81AD             (     mon09v36.asm):01843         JSRIND  CMPA    #$AD            IS IT 'JSR' INDEXED?
EF83 260B             (     mon09v36.asm):01844                 BNE     JMPIND          NO, TRY NEXT
EF85 8D0F             (     mon09v36.asm):01845                 BSR     DJMPIN          DO IT
EF87 BE7F7B           (     mon09v36.asm):01846         PSHPC   LDX     SAVS            GET ADDRESS
EF8A EF83             (     mon09v36.asm):01847                 STU     ,--X            SAVE
EF8C BF7F7B           (     mon09v36.asm):01848                 STX     SAVS            RESAVE
EF8F 39               (     mon09v36.asm):01849                 RTS
                      (     mon09v36.asm):01850         ;* TEST FOR 'JMP' INDEXED
EF90 816E             (     mon09v36.asm):01851         JMPIND  CMPA    #$6E            IS IT JUMP INDEXED?
EF92 102600A9         (     mon09v36.asm):01852                 LBNE    NOREXE          NO, NON-TRANSFER INSTRUCTION
                      (     mon09v36.asm):01853         ;* FIRST POINT Y AT REGISTER INVOLVED
EF96 A6C0             (     mon09v36.asm):01854         DJMPIN  LDA     ,U+             GET POSTBYTE
EF98 3402             (     mon09v36.asm):01855                 PSHS    A               SAVE IT
EF9A 8460             (     mon09v36.asm):01856                 ANDA    #%01100000      SAVE ONLY REGISTER
EF9C 44               (     mon09v36.asm):01857                 LSRA                    CONVERT
EF9D 44               (     mon09v36.asm):01858                 LSRA                    REGISTER
EF9E 44               (     mon09v36.asm):01859                 LSRA                    INTO INDEX VALUE
EF9F 44               (     mon09v36.asm):01860                 LSRA                    SHIFT IT OVER
EFA0 8EF9B1           (     mon09v36.asm):01861                 LDX     #INDTAB         POINT TO TABLE
EFA3 10AE86           (     mon09v36.asm):01862                 LDY     A,X             GET REGISTER ADDRESS
EFA6 10BF7F7D         (     mon09v36.asm):01863                 STY     TEMP            SAVE FOR INC/DEC
EFAA 10AEA4           (     mon09v36.asm):01864                 LDY     ,Y              GET REGISTER CONTENTS
EFAD A6E4             (     mon09v36.asm):01865                 LDA     ,S              GET POSTBYTE BACK
EFAF 2B0C             (     mon09v36.asm):01866                 BMI     NOT5BO          NOT A FIVE BIT OFFSET
                      (     mon09v36.asm):01867         ;* FIVE BIT REGISTER OFFSET
EFB1 841F             (     mon09v36.asm):01868                 ANDA    #%00011111      SAVE ONLY OFFSET
EFB3 8110             (     mon09v36.asm):01869                 CMPA    #%00010000      NEGATIVE?
EFB5 2502             (     mon09v36.asm):01870                 BLO     SINOK           NO, IT'S OK
EFB7 8AE0             (     mon09v36.asm):01871                 ORA     #%11100000      CONVERT TO NEGATIVE
EFB9 30A6             (     mon09v36.asm):01872         SINOK   LEAX    A,Y             GET ADDRESS
EFBB 205E             (     mon09v36.asm):01873                 BRA     XSAVPC          SAVE IT
                      (     mon09v36.asm):01874         ;* TEST FOR NO OFFSET
EFBD 848F             (     mon09v36.asm):01875         NOT5BO  ANDA    #%10001111      REMOVE REGISTER & INDIRECT BIT
EFBF 8184             (     mon09v36.asm):01876                 CMPA    #$84            NO OFFSET?
EFC1 2604             (     mon09v36.asm):01877                 BNE     TOFF8           NO, TRY OFFSET OF 8
EFC3 1F21             (     mon09v36.asm):01878                 TFR     Y,X             COPY
EFC5 2054             (     mon09v36.asm):01879                 BRA     XSAVPC          SAVE IT
                      (     mon09v36.asm):01880         ;* TEST FOR EIGHT BIT OFFSET
EFC7 8188             (     mon09v36.asm):01881         TOFF8   CMPA    #$88            8 BIT OFSET?
EFC9 2604             (     mon09v36.asm):01882                 BNE     TOFF16          NO, TRY 16 BIT OFFSET
EFCB E6C0             (     mon09v36.asm):01883                 LDB     ,U+             GET OFFSET
EFCD 201A             (     mon09v36.asm):01884                 BRA     BSAVOF          GO FOR IT
                      (     mon09v36.asm):01885         ;* TEST FOR 16 BIT OFFSET
EFCF 8189             (     mon09v36.asm):01886         TOFF16  CMPA    #$89            16 BIT OFFSET?
EFD1 2606             (     mon09v36.asm):01887                 BNE     TOFFA           TRY A ACCUMULATOR OFFSET
EFD3 ECC0             (     mon09v36.asm):01888                 LDD     ,U+             GET OFFSET
EFD5 30AB             (     mon09v36.asm):01889                 LEAX    D,Y             DO IT
EFD7 2042             (     mon09v36.asm):01890                 BRA     XSAVPC          SAVE IT
                      (     mon09v36.asm):01891         ;* TEST FOR ACCA OFFSET
EFD9 8186             (     mon09v36.asm):01892         TOFFA   CMPA    #$86            OFFSET BY ACCA
EFDB 2605             (     mon09v36.asm):01893                 BNE     TOFFB           NO, TRY B
EFDD F67F70           (     mon09v36.asm):01894                 LDB     SAVA            GET ACCA
EFE0 2007             (     mon09v36.asm):01895                 BRA     BSAVOF          SAVE IT
                      (     mon09v36.asm):01896         ;* TEST FOR ACCB OFFSET
EFE2 8185             (     mon09v36.asm):01897         TOFFB   CMPA    #$85            B OFFSET
EFE4 2607             (     mon09v36.asm):01898                 BNE     TOFFD           NO, TRY D OFFSET
EFE6 F67F71           (     mon09v36.asm):01899                 LDB     SAVB            GET B
EFE9 30A5             (     mon09v36.asm):01900         BSAVOF  LEAX    B,Y             DO OFFSET
EFEB 202E             (     mon09v36.asm):01901                 BRA     XSAVPC          SAVE IT
                      (     mon09v36.asm):01902         ;* TEST FOR ACCD OFFSET
EFED 818B             (     mon09v36.asm):01903         TOFFD   CMPA    #$8B            IS IT D OFFSET?
EFEF 2607             (     mon09v36.asm):01904                 BNE     TAINC1          NO, TRY AUTO INC
EFF1 FC7F70           (     mon09v36.asm):01905                 LDD     SAVA            GET D ACCUMULATOR
EFF4 30AB             (     mon09v36.asm):01906                 LEAX    D,Y             DO IT
EFF6 2023             (     mon09v36.asm):01907                 BRA     XSAVPC          SAVE IT
                      (     mon09v36.asm):01908         ;* TEST FOR AUTO INCREMENT
EFF8 8180             (     mon09v36.asm):01909         TAINC1  CMPA    #$80            AUTO INC BY 1?
EFFA 2604             (     mon09v36.asm):01910                 BNE     TAINC2          NO, TRY AUTO INC BY 2
EFFC 30A0             (     mon09v36.asm):01911                 LEAX    ,Y+             GET ADDRESS
EFFE 2016             (     mon09v36.asm):01912                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v36.asm):01913         ;* TEST FOR DOUBLE AUTO INCREMENT
F000 8181             (     mon09v36.asm):01914         TAINC2  CMPA    #$81            AUTO INC BY 1?
F002 2604             (     mon09v36.asm):01915                 BNE     TADEC1          NO, TRY AUTO DEC
F004 30A1             (     mon09v36.asm):01916                 LEAX    ,Y++            GET ADDRESS
F006 200E             (     mon09v36.asm):01917                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v36.asm):01918         ;* TEST FOR AUTO DECREMENT
F008 8182             (     mon09v36.asm):01919         TADEC1  CMPA    #$82            AUTO DEC?
F00A 2604             (     mon09v36.asm):01920                 BNE     TADEC2          NO, TRY AUTO DEC BY TWO
F00C 30A2             (     mon09v36.asm):01921                 LEAX    ,-Y             GET ADDRESS
F00E 2006             (     mon09v36.asm):01922                 BRA     RSVREG          RESAVE REGISTER
                      (     mon09v36.asm):01923         ;* TEST FOR DOUBLE AUTO DECREMENT
F010 8183             (     mon09v36.asm):01924         TADEC2  CMPA    #$83            DOUBLE AUTO DEC.
F012 2609             (     mon09v36.asm):01925                 BNE     TPCO8           NO, TRY PC OFFSET
F014 30A3             (     mon09v36.asm):01926                 LEAX    ,--Y            GET OFFSET
F016 10AF9F7F7D       (     mon09v36.asm):01927         RSVREG  STY     [TEMP]          RESAVE REGISTER CONTENTS
F01B 2016             (     mon09v36.asm):01928         XSAVPC  BRA     SAVXPC          SAVE NEW PC
                      (     mon09v36.asm):01929         ;* TEST FOR EIGHT BIT OFFSET FROM PCR
F01D 818C             (     mon09v36.asm):01930         TPCO8   CMPA    #$8C            8 BIT PC RELATIVE?
F01F 2606             (     mon09v36.asm):01931                 BNE     TPCO16          NO, TRY 16 BIT PC RELATIVE
F021 E6C0             (     mon09v36.asm):01932                 LDB     ,U+             GET BYTE
F023 30C5             (     mon09v36.asm):01933                 LEAX    B,U             OFFSET IT
F025 200C             (     mon09v36.asm):01934                 BRA     SAVXPC          RESAVE PC
                      (     mon09v36.asm):01935         ;* TEST FOR 16 BIT OFFSET FROM PCR
F027 818D             (     mon09v36.asm):01936         TPCO16  CMPA    #$8D            16 BIT OFFSET
F029 2606             (     mon09v36.asm):01937                 BNE     TEIND           NO, TRY EXTENDED INDIRECT
F02B ECC1             (     mon09v36.asm):01938                 LDD     ,U++            GET VALUE
F02D 30CB             (     mon09v36.asm):01939                 LEAX    D,U             POINT TO NEW LOCATION
F02F 2002             (     mon09v36.asm):01940                 BRA     SAVXPC          RESAVE
                      (     mon09v36.asm):01941         ;* EXTENDED ADDRESSING VIA INDEXED POSTBYTE
F031 AEC1             (     mon09v36.asm):01942         TEIND   LDX     ,U++            GET ADDRESS
                      (     mon09v36.asm):01943         ;* SET SAVED PC TO CALCULATED ADDRESS (IN 'X').
                      (     mon09v36.asm):01944         ;* CHECK FOR & PERFORM INDIRECTION IF REQUIRED
F033 3502             (     mon09v36.asm):01945         SAVXPC  PULS    A               RESTORE POSTBYTE
F035 8510             (     mon09v36.asm):01946                 BITA    #%00010000      INDIRECT ADDRESSING?
F037 2702             (     mon09v36.asm):01947                 BEQ     NINXIN          NOT INDIRECT
F039 AE84             (     mon09v36.asm):01948                 LDX     ,X              PERFORM A LEVEL OF INDIRECTION
F03B BF7F79           (     mon09v36.asm):01949         NINXIN  STX     SAVPC           SAVE IT
F03E 39               (     mon09v36.asm):01950                 RTS
                      (     mon09v36.asm):01951         ;* NORMAL EXECUTABLE INSTRUCTION, COPY IT INTO OUR RAM, THEN EXECUTE IT
F03F 335F             (     mon09v36.asm):01952         NOREXE  LEAU    -1,U            BACKUP TO INSTRUCTION
F041 8E7FCE           (     mon09v36.asm):01953                 LDX     #INSRAM         POINT TO RAM FOR INSTRUCTION
                      (     mon09v36.asm):01954         ;* COPY INSTRUCTION INTO RAM
F044 11B37F79         (     mon09v36.asm):01955         NORE1   CMPU    SAVPC           ARE WE THERE
F048 2406             (     mon09v36.asm):01956                 BHS     NORE2           END OF INSTRUCTION
F04A A6C0             (     mon09v36.asm):01957                 LDA     ,U+             GET DATA
F04C A780             (     mon09v36.asm):01958                 STA     ,X+             SAVE IN RAM
F04E 20F4             (     mon09v36.asm):01959                 BRA     NORE1           CONTINUE
                      (     mon09v36.asm):01960         ;* INSERT A JUMP AFTER IT
F050 867E             (     mon09v36.asm):01961         NORE2   LDA     #$7E            GET 'JMP' EXTENDED INSTRUCTION
F052 A780             (     mon09v36.asm):01962                 STA     ,X+             SAVE IT
F054 CCF07B           (     mon09v36.asm):01963                 LDD     #NORE3          POINT AT ADDRESS TO JUMP TO
F057 ED84             (     mon09v36.asm):01964                 STD     ,X              SAVE IT
F059 10FF7F7D         (     mon09v36.asm):01965                 STS     TEMP            SAVE SP
F05D 10FE7F7B         (     mon09v36.asm):01966                 LDS     SAVS            RESTORE STACK POINTER
F061 B67F6F           (     mon09v36.asm):01967                 LDA     SAVCC           GET CC
F064 F67F72           (     mon09v36.asm):01968                 LDB     SAVDP           GET DP
F067 3406             (     mon09v36.asm):01969                 PSHS    A,B             SAVE CC AND DP
F069 FC7F70           (     mon09v36.asm):01970                 LDD     SAVA            RESTORE A, B
F06C BE7F73           (     mon09v36.asm):01971                 LDX     SAVX            RESTORE X
F06F 10BE7F75         (     mon09v36.asm):01972                 LDY     SAVY            RESTORE Y
F073 FE7F77           (     mon09v36.asm):01973                 LDU     SAVU            RESTORE U
F076 3509             (     mon09v36.asm):01974                 PULS    CC,DP           RESTORE CC AND DP
F078 7E7FCE           (     mon09v36.asm):01975                 JMP     INSRAM          EXECUTE INSTRUCTION
                      (     mon09v36.asm):01976         ;* INSTRUCTION SHOULD RETURN TO HERE
F07B 3409             (     mon09v36.asm):01977         NORE3   PSHS    CC,DP           SAVE REGS
F07D FD7F70           (     mon09v36.asm):01978                 STD     SAVA            SAVE REGS
F080 BF7F73           (     mon09v36.asm):01979                 STX     SAVX            SAVE X
F083 10BF7F75         (     mon09v36.asm):01980                 STY     SAVY            SAVE Y
F087 FF7F77           (     mon09v36.asm):01981                 STU     SAVU            SAVE U
F08A 3506             (     mon09v36.asm):01982                 PULS    A,B             GET REGS BACK
F08C B77F6F           (     mon09v36.asm):01983                 STA     SAVCC           SAVE CC
F08F F77F72           (     mon09v36.asm):01984                 STB     SAVDP           SAVE DP
F092 10FF7F7B         (     mon09v36.asm):01985                 STS     SAVS            SAVE STACK POINTER
F096 10FE7F7D         (     mon09v36.asm):01986                 LDS     TEMP            RESTORE OUR STACK
F09A 39               (     mon09v36.asm):01987                 RTS
                      (     mon09v36.asm):01988         ;*
                      (     mon09v36.asm):01989         ;* SUBROUTINE TO EVALUATE CONDITIONAL BRANCH OPCODES, AND DETERMINE
                      (     mon09v36.asm):01990         ;* IF THEY ARE TO BE EXECUTED
                      (     mon09v36.asm):01991         ;*
F09B C603             (     mon09v36.asm):01992         TSTCON  LDB     #3              TEST FOR THREE CONDITIONALS
F09D 812F             (     mon09v36.asm):01993                 CMPA    #$2F            IS IT 'BLE'?
F09F 2602             (     mon09v36.asm):01994                 BNE     TSTC0           NO, ITS NORMAL
F0A1 C606             (     mon09v36.asm):01995                 LDB     #6              HANDLE WRETCHED 'BLE' CASE
F0A3 8022             (     mon09v36.asm):01996         TSTC0   SUBA    #$22            CONVERT OPCODE TO SIMPLE INDEX
F0A5 48               (     mon09v36.asm):01997                 LSLA                    ROTATE..
F0A6 48               (     mon09v36.asm):01998                 LSLA                    TWICE FOR FOUR BYTE ENTRIES
F0A7 8EF974           (     mon09v36.asm):01999                 LDX     #CONTAB         POINT TO TABLE
F0AA 3086             (     mon09v36.asm):02000                 LEAX    A,X             ADVANCE TO TABLE ENTRY
F0AC B67F6F           (     mon09v36.asm):02001                 LDA     SAVCC           GET CONDITION CODES
F0AF A480             (     mon09v36.asm):02002                 ANDA    ,X+             MASK OUT NON-APPLICABLE ONES
F0B1 A180             (     mon09v36.asm):02003         TSTC1   CMPA    ,X+             DOES IT MATCH?
F0B3 2706             (     mon09v36.asm):02004                 BEQ     TSTC2           IT'S OK
F0B5 5A               (     mon09v36.asm):02005                 DECB                    REDUCE COUNT
F0B6 26F9             (     mon09v36.asm):02006                 BNE     TSTC1           CONTINUE
F0B8 86FF             (     mon09v36.asm):02007                 LDA     #255            INDICATE CONDITIONAL NOT MET
F0BA 39               (     mon09v36.asm):02008                 RTS
F0BB 4F               (     mon09v36.asm):02009         TSTC2   CLRA                    INDICATE CONDITIONAL MET
F0BC 39               (     mon09v36.asm):02010                 RTS
                      (     mon09v36.asm):02011         ;*
                      (     mon09v36.asm):02012         ;* DISASSEMBLE OPCODE POINTED TO BY Y. PLACE IN OUTPUT BUFFER POINTED TO BY U
                      (     mon09v36.asm):02013         ;*
F0BD 10BF7F80         (     mon09v36.asm):02014         DISASS  STY     PTRSAV          SAVE INSTRUCTION POINTER
F0C1 3440             (     mon09v36.asm):02015                 PSHS    U               SAVE INST POINTER
F0C3 CC201A           (     mon09v36.asm):02016                 LDD     #$2000+26       GET SPACE+NUMBER OF BYTES TO CLEAR
F0C6 A7C0             (     mon09v36.asm):02017         DISA1   STA     ,U+             SET A SPACE
F0C8 5A               (     mon09v36.asm):02018                 DECB                    REDUCE COUNT
F0C9 26FB             (     mon09v36.asm):02019                 BNE     DISA1           CONTINUE
F0CB 8EF436           (     mon09v36.asm):02020                 LDX     #OPTAB1         POINT TO GENERAL OPCODE TABLE
F0CE A6A4             (     mon09v36.asm):02021                 LDA     ,Y              GET DATA BYTE
F0D0 8110             (     mon09v36.asm):02022                 CMPA    #$10            PREFIX BYTE?
F0D2 2709             (     mon09v36.asm):02023                 BEQ     SETOP2          NEW TABLE
F0D4 8111             (     mon09v36.asm):02024                 CMPA    #$11            OTHER PREFIX BYTE
F0D6 260A             (     mon09v36.asm):02025                 BNE     OPFIND          NO, IT'S OK
F0D8 8EF745           (     mon09v36.asm):02026                 LDX     #OPTAB3         POINT TO THIRD TABLE
F0DB 2003             (     mon09v36.asm):02027                 BRA     OPFNXT          OK
F0DD 8EF6D0           (     mon09v36.asm):02028         SETOP2  LDX     #OPTAB2         POINT TO SECOND OPERAND TABLE
F0E0 3121             (     mon09v36.asm):02029         OPFNXT  LEAY    1,Y             SKIP PREFIX BYTE
                      (     mon09v36.asm):02030         ;* LOOK FOR OPCODE IN TABLE
F0E2 A680             (     mon09v36.asm):02031         OPFIND  LDA     ,X+             GET BYTE FROM TABLE
F0E4 A1A4             (     mon09v36.asm):02032                 CMPA    ,Y              IS THIS IT?
F0E6 270C             (     mon09v36.asm):02033                 BEQ     FNDOPC          FOUND IT
F0E8 81CF             (     mon09v36.asm):02034                 CMPA    #$CF            END OF TABLE?
F0EA 2704             (     mon09v36.asm):02035                 BEQ     BADOPC          IF SO, FAKE AN OPCODE
F0EC 3002             (     mon09v36.asm):02036                 LEAX    2,X             ADVANCE
F0EE 20F2             (     mon09v36.asm):02037                 BRA     OPFIND          KEEP LOOKING
F0F0 10BE7F80         (     mon09v36.asm):02038         BADOPC  LDY     PTRSAV          INSURE WE ARE AT BEGINNING
                      (     mon09v36.asm):02039         ;* LOCATED OPCODE, GENERATE STRING
F0F4 3121             (     mon09v36.asm):02040         FNDOPC  LEAY    1,Y             SKIP TO POSTBYTE
F0F6 A680             (     mon09v36.asm):02041                 LDA     ,X+             GET DATA
F0F8 B77F82           (     mon09v36.asm):02042                 STA     INSTYP          SAVE FOR LATER
F0FB E684             (     mon09v36.asm):02043                 LDB     ,X              GET INSTRUCTION NUMBER
F0FD 8604             (     mon09v36.asm):02044                 LDA     #4              FOUR BYTES/ENTRY
F0FF 3D               (     mon09v36.asm):02045                 MUL                     CALCULATE ENTRY OFFSET
F100 8EF760           (     mon09v36.asm):02046                 LDX     #ITABLE         POINT TO INSTRUCTION TABLE
F103 308B             (     mon09v36.asm):02047                 LEAX    D,X             ADVANCE TO IT
F105 C604             (     mon09v36.asm):02048                 LDB     #4              SIZE OF INSTRIUCTION FIELD
F107 A680             (     mon09v36.asm):02049         FNDO1   LDA     ,X+             GET CHAR
F109 A7C0             (     mon09v36.asm):02050                 STA     ,U+             SAVE IN OUTPUT
F10B 5A               (     mon09v36.asm):02051                 DECB                    MOVE FOUR CHARACTERS
F10C 26F9             (     mon09v36.asm):02052                 BNE     FNDO1           CONTINUE
F10E B67F82           (     mon09v36.asm):02053         FNDO2   LDA     INSTYP          GET TYPE BITS BACK
F111 840F             (     mon09v36.asm):02054                 ANDA    #$0F            REMOVE CRAP
F113 10270173         (     mon09v36.asm):02055                 LBEQ    ENDIS           NO OPERANDS
                      (     mon09v36.asm):02056         ;* INSERT SPACES FOR OPERAND
F117 C620             (     mon09v36.asm):02057                 LDB     #' '            GET A SPACE
F119 E7C0             (     mon09v36.asm):02058                 STB     ,U+             SAVE IN OUTPUT
F11B E7C0             (     mon09v36.asm):02059                 STB     ,U+             SAVE IN OUTPUT
F11D 4A               (     mon09v36.asm):02060                 DECA                    IS 8 BIT IT IMMEDIATE?
F11E 2606             (     mon09v36.asm):02061                 BNE     IMM16           NO, TRY 16 BIT IMMEDIATE
                      (     mon09v36.asm):02062         ;* EIGHT BIT IMMEDIATE ADDRESSING OPERAND
F120 8623             (     mon09v36.asm):02063         IMM8    LDA     #'#'            INDICATE IMMEDIATE
F122 A7C0             (     mon09v36.asm):02064                 STA     ,U+             SAVE IT
F124 2010             (     mon09v36.asm):02065                 BRA     OP8             QUIT
                      (     mon09v36.asm):02066         ;* SIXTEEN BIT IMMEDIATE ADDRESSING
F126 4A               (     mon09v36.asm):02067         IMM16   DECA                    IS THIS IT?
F127 2606             (     mon09v36.asm):02068                 BNE     DIRECT          NO, TRY DIRECT
F129 8623             (     mon09v36.asm):02069                 LDA     #'#'            INDICATE IMMEDIATE
F12B A7C0             (     mon09v36.asm):02070                 STA     ,U+             SAVE IT
F12D 2011             (     mon09v36.asm):02071                 BRA     OP16            16 BIT OPERAND
                      (     mon09v36.asm):02072         ;* DIRECT PAGE ADDRESSING
F12F 4A               (     mon09v36.asm):02073         DIRECT  DECA                    IS THIS IT?
F130 260B             (     mon09v36.asm):02074                 BNE     EXTEND          NO, TRY EXTENDED
F132 863C             (     mon09v36.asm):02075                 LDA     #'<'            INDICATE DIRECT
F134 A7C0             (     mon09v36.asm):02076                 STA     ,U+             SAVE IT
F136 A6A0             (     mon09v36.asm):02077         OP8     LDA     ,Y+             GET OPERAND BYTE
F138 170192           (     mon09v36.asm):02078                 LBSR    WRHEXB          OUTPUT
F13B 2008             (     mon09v36.asm):02079                 BRA     ENDIS1          END GO HOME
                      (     mon09v36.asm):02080         ;* EXTENDED ADDRESSING
F13D 4A               (     mon09v36.asm):02081         EXTEND  DECA                    IS THIS IT?
F13E 2608             (     mon09v36.asm):02082                 BNE     INDEX           NO, TRY INDEXED
F140 ECA1             (     mon09v36.asm):02083         OP16    LDD     ,Y++            GET OPCODES
F142 170190           (     mon09v36.asm):02084                 LBSR    WRHEXW          OUTPUT WORD
F145 160142           (     mon09v36.asm):02085         ENDIS1  LBRA    ENDIS           GO HOME
                      (     mon09v36.asm):02086         ;* INDEXED ADDRESSING MODES
F148 4A               (     mon09v36.asm):02087         INDEX   DECA                    IS IT INDEXED?
F149 102600CB         (     mon09v36.asm):02088                 LBNE    PSHPUL          NO, TRY PUSH OR PUL
F14D A6A0             (     mon09v36.asm):02089                 LDA     ,Y+             GET POST BYTE
F14F B77F83           (     mon09v36.asm):02090                 STA     POSBYT          SAVE FOR LATER
                      (     mon09v36.asm):02091         ;* TEST FOR FIVE BIT OFFSET
F152 2B04             (     mon09v36.asm):02092                 BMI     NO5BO           NOT A FIVE BIT OFFSET
F154 841F             (     mon09v36.asm):02093                 ANDA    #$1F            CONVERT TO POSTBYTE
F156 2014             (     mon09v36.asm):02094                 BRA     EVLX1           INSERT REGISTER AND CONTINUE
                      (     mon09v36.asm):02095         ;* TEST FOR INDIRECT MODE
F158 8510             (     mon09v36.asm):02096         NO5BO   BITA    #$10            TEST FOR INDIRECT
F15A 2704             (     mon09v36.asm):02097                 BEQ     NOIND           NOT INDIRECT
F15C C65B             (     mon09v36.asm):02098                 LDB     #'['            GET OPENING
F15E E7C0             (     mon09v36.asm):02099                 STB     ,U+             SAVE IN OUTPUT
                      (     mon09v36.asm):02100         ;* TEST FOR NO OFFSET
F160 848F             (     mon09v36.asm):02101         NOIND   ANDA    #$8F            REMOVE REGS AND INDIRECT BIT
F162 8184             (     mon09v36.asm):02102                 CMPA    #$84            NO OFFSET?
F164 272E             (     mon09v36.asm):02103                 BEQ     INSR1           INSERT REGISTER AND EXIT
                      (     mon09v36.asm):02104         ;* TEST FOR EIGHT BIT OFFSET
F166 8188             (     mon09v36.asm):02105                 CMPA    #$88            EIGHT BIT OFFSET
F168 2607             (     mon09v36.asm):02106                 BNE     EVL1            NO, TRY NEXT
F16A A6A0             (     mon09v36.asm):02107                 LDA     ,Y+             GET BYTE OFFSET
F16C 17015E           (     mon09v36.asm):02108         EVLX1   LBSR    WRHEXB          OUTPUT
F16F 2023             (     mon09v36.asm):02109                 BRA     INSR1           CONTINUE
                      (     mon09v36.asm):02110         ;* TEST FOR 16 BIT OFFSET
F171 8189             (     mon09v36.asm):02111         EVL1    CMPA    #$89            16 BIT OFSET?
F173 2607             (     mon09v36.asm):02112                 BNE     EVL2            NO, TRY NEXT
F175 ECA1             (     mon09v36.asm):02113                 LDD     ,Y++            GET OPERAND
F177 17015B           (     mon09v36.asm):02114                 LBSR    WRHEXW          OUTPUT
F17A 2018             (     mon09v36.asm):02115                 BRA     INSR1           INSERT REGISTER
                      (     mon09v36.asm):02116         ;* TEST FOR A ACCUMULATOR OFFSET
F17C 8186             (     mon09v36.asm):02117         EVL2    CMPA    #$86            IS IT 'A' OFFSET?
F17E 2604             (     mon09v36.asm):02118                 BNE     EVL3            NO, TRY NEXT
F180 8641             (     mon09v36.asm):02119                 LDA     #'A'            GET ACCA
F182 200E             (     mon09v36.asm):02120                 BRA     SAIREG          GO HOME
                      (     mon09v36.asm):02121         ;* TEST FOR B ACCUMULATOR OFFSET
F184 8185             (     mon09v36.asm):02122         EVL3    CMPA    #$85            IS IT 'B' OFFSET?
F186 2604             (     mon09v36.asm):02123                 BNE     EVL4            NO, TRY NEXT
F188 8642             (     mon09v36.asm):02124                 LDA     #'B'            GET B
F18A 2006             (     mon09v36.asm):02125                 BRA     SAIREG          GO HOME
                      (     mon09v36.asm):02126         ;* TEST FRO 'D' ACCUMULATOR OFFSET
F18C 818B             (     mon09v36.asm):02127         EVL4    CMPA    #$8B            D OFFSET?
F18E 2606             (     mon09v36.asm):02128                 BNE     EVL5            NO, TRY NEXT
F190 8644             (     mon09v36.asm):02129                 LDA     #'D'            GET D REGISTER
F192 A7C0             (     mon09v36.asm):02130         SAIREG  STA     ,U+             SAVE IT
F194 202C             (     mon09v36.asm):02131         INSR1   BRA     INSREG
                      (     mon09v36.asm):02132         ;* TEST FOR EXTENDED INDIRECT
F196 818F             (     mon09v36.asm):02133         EVL5    CMPA    #$8F            EXTENDED INDIRECT?
F198 2607             (     mon09v36.asm):02134                 BNE     EVL6            NO, TRY NEXT
F19A ECA1             (     mon09v36.asm):02135                 LDD     ,Y++            GET OFFSET
F19C 170136           (     mon09v36.asm):02136                 LBSR    WRHEXW          OUTPUT
F19F 2054             (     mon09v36.asm):02137                 BRA     EVLFIN          AND CONTINUE
                      (     mon09v36.asm):02138         ;* TEST FOR PC OFFSET, 8 BIT
F1A1 818C             (     mon09v36.asm):02139         EVL6    CMPA    #$8C            EIGHT BIT PC OFFSET?
F1A3 2607             (     mon09v36.asm):02140                 BNE     EVL7            NO, TRY NEXT
F1A5 A6A0             (     mon09v36.asm):02141                 LDA     ,Y+             GET OFFSET
F1A7 170123           (     mon09v36.asm):02142                 LBSR    WRHEXB          OUTPUT
F1AA 2009             (     mon09v36.asm):02143                 BRA     WRPCRG          OUTPUT PC REGISTER
                      (     mon09v36.asm):02144         ;* TEST FOR PC OFFSET, 16 BIT
F1AC 818D             (     mon09v36.asm):02145         EVL7    CMPA    #$8D            PC OFFSET?
F1AE 2612             (     mon09v36.asm):02146                 BNE     INSREG          NO, INSERT REGISTER
F1B0 ECA1             (     mon09v36.asm):02147                 LDD     ,Y++            GET OFFSET
F1B2 170120           (     mon09v36.asm):02148                 LBSR    WRHEXW          OUTPUT
F1B5 8EF401           (     mon09v36.asm):02149         WRPCRG  LDX     #PCRG           POINT TO STRING
F1B8 A680             (     mon09v36.asm):02150         WRPR1   LDA     ,X+             GET CHAR
F1BA A7C0             (     mon09v36.asm):02151                 STA     ,U+             SAVE
F1BC 8152             (     mon09v36.asm):02152                 CMPA    #'R'            END?
F1BE 26F8             (     mon09v36.asm):02153                 BNE     WRPR1           NO, CONTINUE
F1C0 2033             (     mon09v36.asm):02154                 BRA     EVLFIN          END IT NOW
                      (     mon09v36.asm):02155         ;* INSERT REGISTER BITS
F1C2 862C             (     mon09v36.asm):02156         INSREG  LDA     #','            GET COMMA
F1C4 A7C0             (     mon09v36.asm):02157                 STA     ,U+             SAVE IT
F1C6 B67F83           (     mon09v36.asm):02158                 LDA     POSBYT          GET POSTBYTE
F1C9 C62D             (     mon09v36.asm):02159                 LDB     #'-'            GET MINUS
F1CB 848F             (     mon09v36.asm):02160                 ANDA    #$8F            REMOVE CRAP
F1CD 8182             (     mon09v36.asm):02161                 CMPA    #$82            DECREMENT BY ONE?
F1CF 2706             (     mon09v36.asm):02162                 BEQ     DEC1            DECREMENT BY ONE
F1D1 8183             (     mon09v36.asm):02163                 CMPA    #$83            DECREMENT BY TWO?
F1D3 2604             (     mon09v36.asm):02164                 BNE     NODEC           NO, DON'T DEC
F1D5 E7C0             (     mon09v36.asm):02165                 STB     ,U+             SAVE
F1D7 E7C0             (     mon09v36.asm):02166         DEC1    STB     ,U+             AGAIN
F1D9 B67F83           (     mon09v36.asm):02167         NODEC   LDA     POSBYT          GET POSTBYTE
F1DC 44               (     mon09v36.asm):02168                 LSRA                    SHIFT
F1DD 44               (     mon09v36.asm):02169                 LSRA                    REGISTER
F1DE 44               (     mon09v36.asm):02170                 LSRA                    BITS
F1DF 44               (     mon09v36.asm):02171                 LSRA                    INTO
F1E0 44               (     mon09v36.asm):02172                 LSRA                    BOTTOM
F1E1 C658             (     mon09v36.asm):02173                 LDB     #'X'            GET 'X'
F1E3 8403             (     mon09v36.asm):02174                 ANDA    #$03            REMOVE CRAP
F1E5 270C             (     mon09v36.asm):02175                 BEQ     EVLEND          ITS 'X'
F1E7 C659             (     mon09v36.asm):02176                 LDB     #'Y'            GET 'Y'
F1E9 4A               (     mon09v36.asm):02177                 DECA                    TEST FOR 'Y'
F1EA 2707             (     mon09v36.asm):02178                 BEQ     EVLEND          YES
F1EC C655             (     mon09v36.asm):02179                 LDB     #'U'            GET 'U'
F1EE 4A               (     mon09v36.asm):02180                 DECA                    TEST
F1EF 2702             (     mon09v36.asm):02181                 BEQ     EVLEND          ITS 'U'
F1F1 C653             (     mon09v36.asm):02182                 LDB     #'S'            MUST BE 'S'
F1F3 E7C0             (     mon09v36.asm):02183         EVLEND  STB     ,U+             SAVE IN OUTPUT
F1F5 B67F83           (     mon09v36.asm):02184         EVLFIN  LDA     POSBYT          GET POSTBYTE
F1F8 C62B             (     mon09v36.asm):02185                 LDB     #'+'            GET PLUS
F1FA 848F             (     mon09v36.asm):02186                 ANDA    #$8F            GET TYPE
F1FC 8180             (     mon09v36.asm):02187                 CMPA    #$80            IS IT INC BY ONE
F1FE 2706             (     mon09v36.asm):02188                 BEQ     INC1            IF SO, WE HAVE IT
F200 8181             (     mon09v36.asm):02189                 CMPA    #$81            INC BY TWO?
F202 2604             (     mon09v36.asm):02190                 BNE     NOINC           NO INCREMENT
F204 E7C0             (     mon09v36.asm):02191                 STB     ,U+             SAVE ONE
F206 E7C0             (     mon09v36.asm):02192         INC1    STB     ,U+             SAVE TWO
F208 B67F83           (     mon09v36.asm):02193         NOINC   LDA     POSBYT          GET POSTBYTE
F20B 2A08             (     mon09v36.asm):02194                 BPL     NOIND1          FIVE BIT OFFSET
F20D 8510             (     mon09v36.asm):02195                 BITA    #$10            INDIRECT?
F20F 2704             (     mon09v36.asm):02196                 BEQ     NOIND1          NO INDIRECT
F211 865D             (     mon09v36.asm):02197                 LDA     #']'            CLOSING BRACE
F213 A7C0             (     mon09v36.asm):02198                 STA     ,U+             SAVE IT
F215 160072           (     mon09v36.asm):02199         NOIND1  LBRA    ENDIS           END IT
                      (     mon09v36.asm):02200         ;* PULS OR PULL OPCODES
F218 4A               (     mon09v36.asm):02201         PSHPUL  DECA                    IS IT PUSH OR PULL?
F219 2635             (     mon09v36.asm):02202                 BNE     TFREXG          NO, TRY TRANSFER OR EXCHANGE
F21B A6A0             (     mon09v36.asm):02203                 LDA     ,Y+             GET POSTBYTE
F21D 8EF425           (     mon09v36.asm):02204                 LDX     #PSHTAB         GET 'CC'
F220 44               (     mon09v36.asm):02205         PSH1    LSRA                    SHIFT OUT BITS
F221 2425             (     mon09v36.asm):02206                 BCC     PSHNXT          SKIP THIS ONE
F223 3406             (     mon09v36.asm):02207                 PSHS    A,B             SAVE REGS
F225 EC81             (     mon09v36.asm):02208                 LDD     ,X++            GET DATA
F227 8155             (     mon09v36.asm):02209                 CMPA    #'U'            SAVEING U REGISTER
F229 2607             (     mon09v36.asm):02210                 BNE     PSH4            NO, IT'S OK
F22B 7D7F82           (     mon09v36.asm):02211                 TST     INSTYP          SPECIAL CASE
F22E 2A02             (     mon09v36.asm):02212                 BPL     PSH4            OK
F230 8653             (     mon09v36.asm):02213                 LDA     #'S'            CONVERT
F232 A7C0             (     mon09v36.asm):02214         PSH4    STA     ,U+             SAVE IT
F234 5D               (     mon09v36.asm):02215                 TSTB                    MORE?
F235 2702             (     mon09v36.asm):02216                 BEQ     PSH2            NO, SKIP IT
F237 E7C0             (     mon09v36.asm):02217                 STB     ,U+             SAVE
F239 3506             (     mon09v36.asm):02218         PSH2    PULS    A,B             RESTORE REGS
F23B 4D               (     mon09v36.asm):02219                 TSTA                    MORE BITS?
F23C 270F             (     mon09v36.asm):02220                 BEQ     PSH3            NO, QUIT
F23E 3402             (     mon09v36.asm):02221                 PSHS    A               RESAVE
F240 862C             (     mon09v36.asm):02222                 LDA     #','            GET COMMA
F242 A7C0             (     mon09v36.asm):02223                 STA     ,U+             SAVE
F244 3502             (     mon09v36.asm):02224                 PULS    A               GET IT BACK
F246 20D8             (     mon09v36.asm):02225                 BRA     PSH1            CONTINUE
F248 3002             (     mon09v36.asm):02226         PSHNXT  LEAX    2,X             ADVANCE
F24A 4D               (     mon09v36.asm):02227                 TSTA                    ARE WE OK
F24B 26D3             (     mon09v36.asm):02228                 BNE     PSH1            KEEP TRYING
F24D 16003A           (     mon09v36.asm):02229         PSH3    LBRA    ENDIS           DONE
                      (     mon09v36.asm):02230         ;* TRANSFER AND EXCHANGE POSTBYTE OPCODES
F250 4A               (     mon09v36.asm):02231         TFREXG  DECA                    TRANSFER OR EXCHANGE?
F251 2623             (     mon09v36.asm):02232                 BNE     SBRAN           TRY SHORT BRANCH
F253 A6A4             (     mon09v36.asm):02233                 LDA     ,Y              GET POSTBYTE
F255 44               (     mon09v36.asm):02234                 LSRA                    SHIFT
F256 44               (     mon09v36.asm):02235                 LSRA                    INTO
F257 44               (     mon09v36.asm):02236                 LSRA                    LOW
F258 44               (     mon09v36.asm):02237                 LSRA                    NIBBLE
F259 8D0B             (     mon09v36.asm):02238                 BSR     TFRREG          GET REGISTER
F25B 862C             (     mon09v36.asm):02239                 LDA     #','            SEPERATOR
F25D A7C0             (     mon09v36.asm):02240                 STA     ,U+             SAVE
F25F A6A0             (     mon09v36.asm):02241                 LDA     ,Y+             GET POSTBYTE AGAIN
F261 8D03             (     mon09v36.asm):02242                 BSR     TFRREG          PLACE IT
F263 160024           (     mon09v36.asm):02243                 LBRA    ENDIS           GO HOME
                      (     mon09v36.asm):02244         ;* CALCULATE TRANSFER REGISTER
F266 840F             (     mon09v36.asm):02245         TFRREG  ANDA    #$0F            REMOVE HIGH CRAP
F268 48               (     mon09v36.asm):02246                 LSLA                    MULTIPLY BY TWO
F269 8EF405           (     mon09v36.asm):02247                 LDX     #REGTAB         POINT TO TABLE
F26C EC86             (     mon09v36.asm):02248                 LDD     A,X             GET REGISTER VALUE
F26E A7C0             (     mon09v36.asm):02249                 STA     ,U+             SAVE IT
F270 5D               (     mon09v36.asm):02250                 TSTB                    SECOND BYTE?
F271 2702             (     mon09v36.asm):02251                 BEQ     TFRET           NO, SKIP IT
F273 E7C0             (     mon09v36.asm):02252                 STB     ,U+             SAVE IT
F275 39               (     mon09v36.asm):02253         TFRET   RTS
                      (     mon09v36.asm):02254         ;* SHORT BRANCH
F276 4A               (     mon09v36.asm):02255         SBRAN   DECA                    SHORT BRANCH
F277 2608             (     mon09v36.asm):02256                 BNE     LBRAN           NO, TRY LONG BRANCH
F279 E6A0             (     mon09v36.asm):02257                 LDB     ,Y+             GET OPERATOR
F27B 30A5             (     mon09v36.asm):02258                 LEAX    B,Y             GET NEW ADDRESS
F27D 1F10             (     mon09v36.asm):02259                 TFR     X,D             COPY
F27F 2006             (     mon09v36.asm):02260                 BRA     SAVADR          FINISH
                      (     mon09v36.asm):02261         ;* LONG BRANCH
F281                  (     mon09v36.asm):02262         LBRAN
F281 ECA1             (     mon09v36.asm):02263                 LDD     ,Y++            GET OPERAND
F283 3420             (     mon09v36.asm):02264                 PSHS    Y               SAVE Y
F285 E3E1             (     mon09v36.asm):02265                 ADDD    ,S++            ADD OFFSET TO REG
F287                  (     mon09v36.asm):02266         SAVADR
F287 17004B           (     mon09v36.asm):02267                 LBSR    WRHEXW          OUTPUT WORD.
F28A                  (     mon09v36.asm):02268         ENDIS
F28A 86FF             (     mon09v36.asm):02269                 LDA     #$FF            LINE TERMINATOR
F28C A7C4             (     mon09v36.asm):02270                 STA     ,U              SAVE IT
                      (     mon09v36.asm):02271         ;* INSERT ADDRESS/BYTE DATA
F28E EEE4             (     mon09v36.asm):02272                 LDU     ,S              RESTORE U REGISTER
F290 3420             (     mon09v36.asm):02273                 PSHS    Y               SAVE POINTER TO END
F292 BE7F80           (     mon09v36.asm):02274                 LDX     PTRSAV          POINT TO STARTING ADDRESS
F295 1F10             (     mon09v36.asm):02275                 TFR     X,D             COPY
F297 170045           (     mon09v36.asm):02276                 LBSR    WRHEX           OUTPUT
F29A 1F98             (     mon09v36.asm):02277                 TFR     B,A             COPY
F29C 170040           (     mon09v36.asm):02278                 LBSR    WRHEX           OUTPUT
F29F 5F               (     mon09v36.asm):02279                 CLRB                    START WITH ZERO
F2A0                  (     mon09v36.asm):02280         END1
F2A0 ACE4             (     mon09v36.asm):02281                 CMPX    ,S              ARE WE AT END?
F2A2 240A             (     mon09v36.asm):02282                 BHS     END2            IF SO, QUIT
F2A4 5C               (     mon09v36.asm):02283                 INCB                    ADVANCE
F2A5 3341             (     mon09v36.asm):02284                 LEAU    1,U             ADVANCE
F2A7 A680             (     mon09v36.asm):02285                 LDA     ,X+             GET BYTE
F2A9 170033           (     mon09v36.asm):02286                 LBSR    WRHEX           OUTPUT
F2AC 20F2             (     mon09v36.asm):02287                 BRA     END1            CONTINUE
F2AE                  (     mon09v36.asm):02288         END2
F2AE 3262             (     mon09v36.asm):02289                 LEAS    2,S             RESTORE STACK
F2B0 EEE4             (     mon09v36.asm):02290                 LDU     ,S              RESTORE U REGISTER
F2B2 33C814           (     mon09v36.asm):02291                 LEAU    20,U            ADVANCE TO TEXT FIELD
F2B5 BE7F80           (     mon09v36.asm):02292                 LDX     PTRSAV          GET POINTER BACK
F2B8                  (     mon09v36.asm):02293         END3
F2B8 5A               (     mon09v36.asm):02294                 DECB                    REDUCE COUNT
F2B9 2B10             (     mon09v36.asm):02295                 BMI     END4            CONTINUE
F2BB A680             (     mon09v36.asm):02296                 LDA     ,X+             GO IT AGAIN
F2BD 8120             (     mon09v36.asm):02297                 CMPA    #' '            < SPACE?
F2BF 2504             (     mon09v36.asm):02298                 BLO     END5            YES
F2C1 817F             (     mon09v36.asm):02299                 CMPA    #$7F            > 7F?
F2C3 2502             (     mon09v36.asm):02300                 BLO     END6            OK
F2C5                  (     mon09v36.asm):02301         END5
F2C5 862E             (     mon09v36.asm):02302                 LDA     #'.'            CONVERT TO DOT
F2C7                  (     mon09v36.asm):02303         END6
F2C7 A7C0             (     mon09v36.asm):02304                 STA     ,U+             SAVE
F2C9 20ED             (     mon09v36.asm):02305                 BRA     END3
F2CB                  (     mon09v36.asm):02306         END4
F2CB 35C0             (     mon09v36.asm):02307                 PULS    U,PC            GO HOME
                      (     mon09v36.asm):02308         
                      (     mon09v36.asm):02309         ;*
                      (     mon09v36.asm):02310         ;* SUBROUTINES
                      (     mon09v36.asm):02311         ;*
F2CD                  (     mon09v36.asm):02312         WRHEXB
F2CD 3402             (     mon09v36.asm):02313                 PSHS    A               SAVE IT
F2CF 8624             (     mon09v36.asm):02314                 LDA             #'$'            INDICATE HEX
F2D1 A7C0             (     mon09v36.asm):02315                 STA             ,U+             SAVE
F2D3 2008             (     mon09v36.asm):02316                 BRA             WRHEX1          CONTINUE
F2D5                  (     mon09v36.asm):02317         WRHEXW
F2D5 3404             (     mon09v36.asm):02318                 PSHS    B               SAVE B
F2D7 C624             (     mon09v36.asm):02319                 LDB             #'$'            INDICATE HEX
F2D9 E7C0             (     mon09v36.asm):02320                 STB             ,U+             SAVE IT
F2DB 8D02             (     mon09v36.asm):02321                 BSR             WRHEX           OUTPUT
F2DD                  (     mon09v36.asm):02322         WRHEX1
F2DD 3502             (     mon09v36.asm):02323                 PULS    A               RESTORE
F2DF                  (     mon09v36.asm):02324         WRHEX
F2DF 3402             (     mon09v36.asm):02325                 PSHS    A               SAVE IT
F2E1 44               (     mon09v36.asm):02326                 LSRA                    SHIFT
F2E2 44               (     mon09v36.asm):02327                 LSRA                    HIGH BYTE
F2E3 44               (     mon09v36.asm):02328                 LSRA                    INTO
F2E4 44               (     mon09v36.asm):02329                 LSRA                    LOW FOR OUTPUT
F2E5 8D02             (     mon09v36.asm):02330                 BSR             WRHEXN          OUTPUT NIBBLE
F2E7 3502             (     mon09v36.asm):02331                 PULS    A               RETORE
F2E9                  (     mon09v36.asm):02332         WRHEXN
F2E9 840F             (     mon09v36.asm):02333                 ANDA    #$0F            REMOVE CRAP
F2EB 8B30             (     mon09v36.asm):02334                 ADDA    #$30            CONVERT
F2ED 8139             (     mon09v36.asm):02335                 CMPA    #$39            OK?
F2EF 2302             (     mon09v36.asm):02336                 BLS             WRNOK           OK
F2F1 8B07             (     mon09v36.asm):02337                 ADDA    #7              CONVERT
F2F3                  (     mon09v36.asm):02338         WRNOK
F2F3 A7C0             (     mon09v36.asm):02339                 STA             ,U+             SAVE IT
F2F5 39               (     mon09v36.asm):02340                 RTS
                      (     mon09v36.asm):02341         
                      (     mon09v36.asm):02342         ;MODS BY JQ
                      (     mon09v36.asm):02343         ;*
                      (     mon09v36.asm):02344         ;* 6309 ILLOP/DIV0 HANDLER
                      (     mon09v36.asm):02345         ;*
                      (     mon09v36.asm):02346          IFNE JQ_ILLOP  USE JQ ILLOP ENHANCEMENTS
     0080             (     mon09v36.asm):02347         MD_DIV0         EQU     $80                     MD.7 = DIV0 FLAG
     0040             (     mon09v36.asm):02348         MD_ILOP         EQU     $40                     MD.6 = ILLOP FLAG
                      (     mon09v36.asm):02349         
F2F6                  (     mon09v36.asm):02350         ILOPHND
F2F6 8E7F6F           (     mon09v36.asm):02351                 LDX             #SAVCC                  POINT TO START OF SAVED REGS
F2F9 C60C             (     mon09v36.asm):02352                 LDB             #12                             MOVE 12 BYTES
F2FB                  (     mon09v36.asm):02353         ILOPH1
F2FB A6E0             (     mon09v36.asm):02354                 LDA             ,S+                             GET BYTE
F2FD A780             (     mon09v36.asm):02355                 STA             ,X+                             SAVE
F2FF 5A               (     mon09v36.asm):02356                 DECB                                    DECREMENT COUNT
F300 26F9             (     mon09v36.asm):02357                 BNE             ILOPH1                  DO THEM ALL
F302 10FF7F7B         (     mon09v36.asm):02358                 STS             SAVS                    SAVE STACK POINTER
                      (     mon09v36.asm):02359         
                      (     mon09v36.asm):02360         ;       DETERMINE TRAP SOURCE
F306 8EF34D           (     mon09v36.asm):02361                 LDX             #MSG_DIV0               DIV0 MESSAGE POINTER
F309 113C80           (     mon09v36.asm):02362                 BITMD   #MD_DIV0                Trap entry - see if Division by 0 TRAP
F30C 260B             (     mon09v36.asm):02363                 BNE             ILOPH3                  DIV0 TRAP
                      (     mon09v36.asm):02364         
F30E                  (     mon09v36.asm):02365         ILOPH2
F30E 8EF338           (     mon09v36.asm):02366                 LDX             #MSG_ILLOP              ILLOP MESSAGE POINTER
F311 113C40           (     mon09v36.asm):02367                 BITMD   #MD_ILOP                Trap entry - see if ILLOP TRAP
F314 2603             (     mon09v36.asm):02368                 BNE             ILOPH3                  illegal instruction TRAP
F316 8EF322           (     mon09v36.asm):02369                 LDX             #MSG_TRAPERR    UNKNOWN TRAP SOURCE
                      (     mon09v36.asm):02370         
F319                  (     mon09v36.asm):02371         ILOPH3
F319 BDE42A           (     mon09v36.asm):02372                 JSR             MON09_WRLIN             EMIT THE STRING
F31C 17F59B           (     mon09v36.asm):02373                 LBSR    DISREG                  DISPLAY REGISTERS
F31F 16F2B0           (     mon09v36.asm):02374                 LBRA    MAIN                    AND DO PROMPT
                      (     mon09v36.asm):02375         
F322                  (     mon09v36.asm):02376         MSG_TRAPERR
F322 2A2A2A20554B4E4F (     mon09v36.asm):02377                 FCC             '*** UKNOWN Trap ***'
     574E205472617020
     2A2A2A
F335 0D0A00           (     mon09v36.asm):02378                 FCB             $0D,$0A,0               NEW LINE
                      (     mon09v36.asm):02379         
F338                  (     mon09v36.asm):02380         MSG_ILLOP
F338 2A2A2A20494C4C4F (     mon09v36.asm):02381                 FCC             '*** ILLOP Trap ***'
     502054726170202A
     2A2A
F34A 0D0A00           (     mon09v36.asm):02382                 FCB             $0D,$0A,0               NEW LINE
                      (     mon09v36.asm):02383         
F34D                  (     mon09v36.asm):02384         MSG_DIV0
F34D 2A2A2A2044495630 (     mon09v36.asm):02385                 FCC             '*** DIV0 Trap ***'
     2054726170202A2A
     2A
F35E 0D0A00           (     mon09v36.asm):02386                 FCB             $0D,$0A,0               NEW LINE
                      (     mon09v36.asm):02387          ENDC                   USE JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):02388         ;
                      (     mon09v36.asm):02389         ;*
                      (     mon09v36.asm):02390         ;* NMI HANDLER
                      (     mon09v36.asm):02391         ;*
F361                  (     mon09v36.asm):02392         NMIHND
F361 8E7F6F           (     mon09v36.asm):02393                 LDX             #SAVCC          POINT TO START OF SAVED REGS
F364 C60C             (     mon09v36.asm):02394                 LDB             #12                     MOVE 12 BYTES
F366                  (     mon09v36.asm):02395         NMIH1
F366 A6E0             (     mon09v36.asm):02396                 LDA             ,S+                     GET BYTE
F368 A780             (     mon09v36.asm):02397                 STA             ,X+                     SAVE
F36A 5A               (     mon09v36.asm):02398                 DECB                            DECREMENT COUNT
F36B 26F9             (     mon09v36.asm):02399                 BNE             NMIH1           DO THEM ALL
F36D 10FF7F7B         (     mon09v36.asm):02400                 STS             SAVS            SAVE STACK POINTER
F371 17FA45           (     mon09v36.asm):02401                 LBSR    WRMSG           DISPLAY MESSAGE
F374 2A2A2A204E4D4920 (     mon09v36.asm):02402                 FCC             '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F389 FF               (     mon09v36.asm):02403                 FCB             $FF                     NEW LINE
F38A 205C             (     mon09v36.asm):02404                 BRA             BRKREG          DISPLAY REGISTERS
                      (     mon09v36.asm):02405         
                      (     mon09v36.asm):02406         ;*
                      (     mon09v36.asm):02407         ;* SWI HANDLER
                      (     mon09v36.asm):02408         ;*
F38C                  (     mon09v36.asm):02409         SWIHND
F38C 108E7F84         (     mon09v36.asm):02410                 LDY             #BRKTAB         POINT TO BREAKPOINT TABLE
F390 AE6A             (     mon09v36.asm):02411                 LDX             10,S            GET STORED PC
F392 301F             (     mon09v36.asm):02412                 LEAX    -1,X            BACKUP TO BREAKPOINT ADDRESS
F394 C608             (     mon09v36.asm):02413                 LDB             #8                      CHECK EIGHT BREAKPOINTS
F396                  (     mon09v36.asm):02414         SWIHN1
F396 ACA4             (     mon09v36.asm):02415                 CMPX    ,Y                      IS THIS IT?
F398 2710             (     mon09v36.asm):02416                 BEQ             SWIHN2          YES
F39A 3123             (     mon09v36.asm):02417                 LEAY    3,Y                     SKIP OPCODE
F39C 5A               (     mon09v36.asm):02418                 DECB                            REDUCE COUNT
F39D 26F7             (     mon09v36.asm):02419                 BNE             SWIHN1          CONTINUE
F39F E662             (     mon09v36.asm):02420                 LDB             2,S                     RESTORE B.
F3A1 AE64             (     mon09v36.asm):02421                 LDX             4,S                     RESTORE X.
F3A3 10AE66           (     mon09v36.asm):02422                 LDY             6,S                     RESTORE Y.
F3A6 6E9F7F5C         (     mon09v36.asm):02423                 JMP             [SWIADR]        NOT A BREAKPOINT, EXECUTE SWI HANDLER
F3AA                  (     mon09v36.asm):02424         SWIHN2
F3AA F77F82           (     mon09v36.asm):02425                 STB             INSTYP          SAVE BREAKPOINT NUMBER
F3AD 8E7F6F           (     mon09v36.asm):02426                 LDX             #SAVCC          POINT TO START OF SAVED REGS
F3B0 C60A             (     mon09v36.asm):02427                 LDB             #10                     MOVE 10
F3B2                  (     mon09v36.asm):02428         SWIHN25
F3B2 A6E0             (     mon09v36.asm):02429                 LDA             ,S+                     GET BYTE
F3B4 A780             (     mon09v36.asm):02430                 STA             ,X+                     SAVE
F3B6 5A               (     mon09v36.asm):02431                 DECB                            DECREMENT COUNT
F3B7 26F9             (     mon09v36.asm):02432                 BNE             SWIHN25         DO THEM ALL
F3B9 3510             (     mon09v36.asm):02433                 PULS    X                       GET PC
F3BB 301F             (     mon09v36.asm):02434                 LEAX    -1,X            SET BACK TO REAL PC
F3BD BF7F79           (     mon09v36.asm):02435                 STX             SAVPC           SAVED PC
F3C0 10FF7F7B         (     mon09v36.asm):02436                 STS             SAVS            SAVE STACK POINTER
F3C4 17F9F2           (     mon09v36.asm):02437                 LBSR    WRMSG           DISPLAY MESSAGE
F3C7 2A2A2A2042726561 (     mon09v36.asm):02438                 FCN             '*** Breakpoint #'
     6B706F696E742023
     00
F3D8 8638             (     mon09v36.asm):02439                 LDA             #$38            GET NUMBER, PLUS ASCII CONVERT
F3DA B07F82           (     mon09v36.asm):02440                 SUBA    INSTYP          CONVERT TO PROPER DIGIT
F3DD 17FA25           (     mon09v36.asm):02441                 LBSR    PUTCHR          DISPLAY
F3E0 17F9D6           (     mon09v36.asm):02442                 LBSR    WRMSG           OUTPUT MESSAGE
F3E3 202A2A2A         (     mon09v36.asm):02443                 FCC             ' ***'          TRAILING MESSAGE
F3E7 FF               (     mon09v36.asm):02444                 FCB             $FF                     NEW LINE
F3E8                  (     mon09v36.asm):02445         BRKREG
F3E8 17F4CF           (     mon09v36.asm):02446                 LBSR    DISREG          DISPLAY
F3EB                  (     mon09v36.asm):02447         BRKRES
F3EB 8E7F84           (     mon09v36.asm):02448                 LDX             #BRKTAB         POINT TO BREAKPOINT TABLE
F3EE C608             (     mon09v36.asm):02449                 LDB             #8                      DO IT EIGHT TIMES
F3F0                  (     mon09v36.asm):02450         SWIHN3
F3F0 10AE81           (     mon09v36.asm):02451                 LDY             ,X++            GET REG
F3F3 2704             (     mon09v36.asm):02452                 BEQ             SWIHN4          NO BRK, NEXT
F3F5 A684             (     mon09v36.asm):02453                 LDA             ,X                      GET OPCODE
F3F7 A7A4             (     mon09v36.asm):02454                 STA             ,Y                      REPLACE IN RAM
F3F9                  (     mon09v36.asm):02455         SWIHN4
F3F9 3001             (     mon09v36.asm):02456                 LEAX    1,X                     SKIP OPCODE
F3FB 5A               (     mon09v36.asm):02457                 DECB                            REDUCE COUNT
F3FC 26F2             (     mon09v36.asm):02458                 BNE             SWIHN3          GO AGAIN
F3FE 16F1D1           (     mon09v36.asm):02459                 LBRA    MAIN            DO PROMPT
                      (     mon09v36.asm):02460         
                      (     mon09v36.asm):02461         ;*
                      (     mon09v36.asm):02462         ;* CONSTANTS
F401                  (     mon09v36.asm):02463         PCRG
F401 2C504352         (     mon09v36.asm):02464                 FCC             ',PCR'
                      (     mon09v36.asm):02465         
                      (     mon09v36.asm):02466         ;*
                      (     mon09v36.asm):02467         ;* TRANSFER/EXCHANGE REGISTER TABLE
                      (     mon09v36.asm):02468         ;*
F405                  (     mon09v36.asm):02469         REGTAB
F405 4400             (     mon09v36.asm):02470                 FCN             'D'             0
F407 5800             (     mon09v36.asm):02471                 FCN             'X'             1
F409 5900             (     mon09v36.asm):02472                 FCN             'Y'             2
F40B 5500             (     mon09v36.asm):02473                 FCN             'U'             3
F40D 5300             (     mon09v36.asm):02474                 FCN             'S'             4
F40F 5043             (     mon09v36.asm):02475                 FCC             'PC'    5
F411 3F00             (     mon09v36.asm):02476                 FCN             '?'             6
F413 3F00             (     mon09v36.asm):02477                 FCN             '?'             7
F415 4100             (     mon09v36.asm):02478                 FCN             'A'             8
F417 4200             (     mon09v36.asm):02479                 FCN             'B'             9
F419 4343             (     mon09v36.asm):02480                 FCC             'CC'    A
F41B 4450             (     mon09v36.asm):02481                 FCC             'DP'    B
F41D 3F00             (     mon09v36.asm):02482                 FCN             '?'             C
F41F 3F00             (     mon09v36.asm):02483                 FCN             '?'             D
F421 3F00             (     mon09v36.asm):02484                 FCN             '?'             E
F423 3F00             (     mon09v36.asm):02485                 FCN             '?'             F
                      (     mon09v36.asm):02486         
                      (     mon09v36.asm):02487         ;*
                      (     mon09v36.asm):02488         ;* PUSH/PULL REGISTER TABLE
                      (     mon09v36.asm):02489         ;*
F425                  (     mon09v36.asm):02490         PSHTAB
F425 4343             (     mon09v36.asm):02491                 FCC             'CC'
F427 4100             (     mon09v36.asm):02492                 FCN             'A'
F429 4200             (     mon09v36.asm):02493                 FCN             'B'
F42B 4450             (     mon09v36.asm):02494                 FCC             'DP'
F42D 5800             (     mon09v36.asm):02495                 FCN             'X'
F42F 5900             (     mon09v36.asm):02496                 FCN             'Y'
F431 5500             (     mon09v36.asm):02497                 FCN             'U'
F433 504300           (     mon09v36.asm):02498                 FCN             'PC'
                      (     mon09v36.asm):02499         
                      (     mon09v36.asm):02500         ;*
                      (     mon09v36.asm):02501         ;* OPCODE TABLE, OPCODE BYTE, TYPE BYTE, TEXT BYTE
                      (     mon09v36.asm):02502         ;*
F436                  (     mon09v36.asm):02503         OPTAB1
F436 860101           (     mon09v36.asm):02504                 FCB     $86,1,1         'LDA' INSTRUCTIONS
F439 960301           (     mon09v36.asm):02505                 FCB     $96,3,1
F43C A60501           (     mon09v36.asm):02506                 FCB     $A6,5,1
F43F B60401           (     mon09v36.asm):02507                 FCB     $B6,4,1
F442 C60102           (     mon09v36.asm):02508                 FCB     $C6,1,2         'LDB' INSTRUCTIONS
F445 D60302           (     mon09v36.asm):02509                 FCB     $D6,3,2
F448 E60502           (     mon09v36.asm):02510                 FCB     $E6,5,2
F44B F60402           (     mon09v36.asm):02511                 FCB     $F6,4,2
F44E CC0203           (     mon09v36.asm):02512                 FCB     $CC,2,3         'LDD' INSTRUCTIONS
F451 DC0303           (     mon09v36.asm):02513                 FCB     $DC,3,3
F454 EC0503           (     mon09v36.asm):02514                 FCB     $EC,5,3
F457 FC0403           (     mon09v36.asm):02515                 FCB     $FC,4,3
F45A CE0204           (     mon09v36.asm):02516                 FCB     $CE,2,4         'LDU' INSTRUCTIONS
F45D DE0304           (     mon09v36.asm):02517                 FCB     $DE,3,4
F460 EE0504           (     mon09v36.asm):02518                 FCB     $EE,5,4
F463 FE0404           (     mon09v36.asm):02519                 FCB     $FE,4,4
F466 8E0205           (     mon09v36.asm):02520                 FCB     $8E,2,5         'LDX' INSTRUCTIONS
F469 9E0305           (     mon09v36.asm):02521                 FCB     $9E,3,5
F46C AE0505           (     mon09v36.asm):02522                 FCB     $AE,5,5
F46F BE0405           (     mon09v36.asm):02523                 FCB     $BE,4,5
F472 970306           (     mon09v36.asm):02524                 FCB     $97,3,6         'STA' INSTRUCTINOS
F475 A70506           (     mon09v36.asm):02525                 FCB     $A7,5,6
F478 B70406           (     mon09v36.asm):02526                 FCB     $B7,4,6
F47B D70307           (     mon09v36.asm):02527                 FCB     $D7,3,7         'STB' INSTRUCTIONS
F47E E70507           (     mon09v36.asm):02528                 FCB     $E7,5,7
F481 F70407           (     mon09v36.asm):02529                 FCB     $F7,4,7
F484 DD0308           (     mon09v36.asm):02530                 FCB     $DD,3,8         'STD' INSTRUCTIONS
F487 ED0508           (     mon09v36.asm):02531                 FCB     $ED,5,8
F48A FD0408           (     mon09v36.asm):02532                 FCB     $FD,4,8
F48D DF0309           (     mon09v36.asm):02533                 FCB     $DF,3,9         'STU' INSTRUCTIONS
F490 EF0509           (     mon09v36.asm):02534                 FCB     $EF,5,9
F493 FF0409           (     mon09v36.asm):02535                 FCB     $FF,4,9
F496 9F030A           (     mon09v36.asm):02536                 FCB     $9F,3,10        'STX' INSTRUCTIONS
F499 AF050A           (     mon09v36.asm):02537                 FCB     $AF,5,10
F49C BF040A           (     mon09v36.asm):02538                 FCB     $BF,4,10
F49F 3A000B           (     mon09v36.asm):02539                 FCB     $3A,0,11        'ABX'
F4A2 89010C           (     mon09v36.asm):02540                 FCB     $89,1,12        'ADCA'
F4A5 99030C           (     mon09v36.asm):02541                 FCB     $99,3,12
F4A8 A9050C           (     mon09v36.asm):02542                 FCB     $A9,5,12
F4AB B9040C           (     mon09v36.asm):02543                 FCB     $B9,4,12
F4AE C9010D           (     mon09v36.asm):02544                 FCB     $C9,1,13        'ADCB'
F4B1 D9030D           (     mon09v36.asm):02545                 FCB     $D9,3,13
F4B4 E9050D           (     mon09v36.asm):02546                 FCB     $E9,5,13
F4B7 F9040D           (     mon09v36.asm):02547                 FCB     $F9,4,13
F4BA 8B010E           (     mon09v36.asm):02548                 FCB     $8B,1,14        'ADDA'
F4BD 9B030E           (     mon09v36.asm):02549                 FCB     $9B,3,14
F4C0 AB050E           (     mon09v36.asm):02550                 FCB     $AB,5,14
F4C3 BB040E           (     mon09v36.asm):02551                 FCB     $BB,4,14
F4C6 CB010F           (     mon09v36.asm):02552                 FCB     $CB,1,15        'ADDB'
F4C9 DB030F           (     mon09v36.asm):02553                 FCB     $DB,3,15
F4CC EB050F           (     mon09v36.asm):02554                 FCB     $EB,5,15
F4CF FB040F           (     mon09v36.asm):02555                 FCB     $FB,4,15
F4D2 C30210           (     mon09v36.asm):02556                 FCB     $C3,2,16        'ADDD'
F4D5 D30310           (     mon09v36.asm):02557                 FCB     $D3,3,16
F4D8 E30510           (     mon09v36.asm):02558                 FCB     $E3,5,16
F4DB F30410           (     mon09v36.asm):02559                 FCB     $F3,4,16
F4DE 480011           (     mon09v36.asm):02560                 FCB     $48,0,17        'ASLA'
F4E1 580012           (     mon09v36.asm):02561                 FCB     $58,0,18        'ASLB'
F4E4 080313           (     mon09v36.asm):02562                 FCB     $08,3,19        'ASL'
F4E7 680513           (     mon09v36.asm):02563                 FCB     $68,5,19
F4EA 780413           (     mon09v36.asm):02564                 FCB     $78,4,19
F4ED 470014           (     mon09v36.asm):02565                 FCB     $47,0,20        'ASRA'
F4F0 570015           (     mon09v36.asm):02566                 FCB     $57,0,21        'ASRB'
F4F3 070316           (     mon09v36.asm):02567                 FCB     $07,3,22        'ASR'
F4F6 670516           (     mon09v36.asm):02568                 FCB     $67,5,22
F4F9 770416           (     mon09v36.asm):02569                 FCB     $77,4,22
F4FC 850117           (     mon09v36.asm):02570                 FCB     $85,1,23        'BITA'
F4FF 950317           (     mon09v36.asm):02571                 FCB     $95,3,23
F502 A50517           (     mon09v36.asm):02572                 FCB     $A5,5,23
F505 B50417           (     mon09v36.asm):02573                 FCB     $B5,4,23
F508 C50118           (     mon09v36.asm):02574                 FCB     $C5,1,24        'BITB'
F50B D50318           (     mon09v36.asm):02575                 FCB     $D5,3,24
F50E E50518           (     mon09v36.asm):02576                 FCB     $E5,5,24
F511 F50418           (     mon09v36.asm):02577                 FCB     $F5,4,24
F514 4F0019           (     mon09v36.asm):02578                 FCB     $4F,0,25        'CLRA'
F517 5F001A           (     mon09v36.asm):02579                 FCB     $5F,0,26        'CLRB'
F51A 0F031B           (     mon09v36.asm):02580                 FCB     $0F,3,27        'CLR'
F51D 6F051B           (     mon09v36.asm):02581                 FCB     $6F,5,27
F520 7F041B           (     mon09v36.asm):02582                 FCB     $7F,4,27
F523 81011C           (     mon09v36.asm):02583                 FCB     $81,1,28        'CMPA'
F526 91031C           (     mon09v36.asm):02584                 FCB     $91,3,28
F529 A1051C           (     mon09v36.asm):02585                 FCB     $A1,5,28
F52C B1041C           (     mon09v36.asm):02586                 FCB     $B1,4,28
F52F C1011D           (     mon09v36.asm):02587                 FCB     $C1,1,29        'CMPB'
F532 D1031D           (     mon09v36.asm):02588                 FCB     $D1,3,29
F535 E1051D           (     mon09v36.asm):02589                 FCB     $E1,5,29
F538 F1041D           (     mon09v36.asm):02590                 FCB     $F1,4,29
F53B 8C021E           (     mon09v36.asm):02591                 FCB     $8C,2,30        'CMPX'
F53E 9C031E           (     mon09v36.asm):02592                 FCB     $9C,3,30
F541 AC051E           (     mon09v36.asm):02593                 FCB     $AC,5,30
F544 BC041E           (     mon09v36.asm):02594                 FCB     $BC,4,30
F547 43001F           (     mon09v36.asm):02595                 FCB     $43,0,31        'COMA'
F54A 530020           (     mon09v36.asm):02596                 FCB     $53,0,32        'COMB'
F54D 030321           (     mon09v36.asm):02597                 FCB     $03,3,33        'COM'
F550 630521           (     mon09v36.asm):02598                 FCB     $63,5,33
F553 730421           (     mon09v36.asm):02599                 FCB     $73,4,33
F556 3C0122           (     mon09v36.asm):02600                 FCB     $3C,1,34        'CWAI'
F559 190023           (     mon09v36.asm):02601                 FCB     $19,0,35        'DAA'
F55C 4A0024           (     mon09v36.asm):02602                 FCB     $4A,0,36        'DECA'
F55F 5A0025           (     mon09v36.asm):02603                 FCB     $5A,0,37        'DECB'
F562 0A0326           (     mon09v36.asm):02604                 FCB     $0A,3,38        'DEC'
F565 6A0526           (     mon09v36.asm):02605                 FCB     $6A,5,38
F568 7A0426           (     mon09v36.asm):02606                 FCB     $7A,4,38
F56B 880127           (     mon09v36.asm):02607                 FCB     $88,1,39        'EORA'
F56E 980327           (     mon09v36.asm):02608                 FCB     $98,3,39
F571 A80527           (     mon09v36.asm):02609                 FCB     $A8,5,39
F574 B80427           (     mon09v36.asm):02610                 FCB     $B8,4,39
F577 C80128           (     mon09v36.asm):02611                 FCB     $C8,1,40        'EORB'
F57A D80328           (     mon09v36.asm):02612                 FCB     $D8,3,40
F57D E80528           (     mon09v36.asm):02613                 FCB     $E8,5,40
F580 F80428           (     mon09v36.asm):02614                 FCB     $F8,4,40
F583 1E0729           (     mon09v36.asm):02615                 FCB     $1E,7,41        'EXG'
F586 1F072A           (     mon09v36.asm):02616                 FCB     $1F,7,42        'TFR'
F589 34062B           (     mon09v36.asm):02617                 FCB     $34,6,43        'PSHS'
F58C 36862C           (     mon09v36.asm):02618                 FCB     $36,$86,44      'PSHU'
F58F 35062D           (     mon09v36.asm):02619                 FCB     $35,6,45        'PULS'
F592 37862E           (     mon09v36.asm):02620                 FCB     $37,$86,46      'PULU'
F595 4C002F           (     mon09v36.asm):02621                 FCB     $4C,0,47        'INCA'
F598 5C0030           (     mon09v36.asm):02622                 FCB     $5C,0,48        'INCB'
F59B 0C0331           (     mon09v36.asm):02623                 FCB     $0C,3,49        'INC'
F59E 6C0531           (     mon09v36.asm):02624                 FCB     $6C,5,49
F5A1 7C0431           (     mon09v36.asm):02625                 FCB     $7C,4,49
F5A4 0E0332           (     mon09v36.asm):02626                 FCB     $0E,3,50        'JMP'
F5A7 6E0532           (     mon09v36.asm):02627                 FCB     $6E,5,50
F5AA 7E0432           (     mon09v36.asm):02628                 FCB     $7E,4,50
F5AD 9D0333           (     mon09v36.asm):02629                 FCB     $9D,3,51        'JSR'
F5B0 AD0533           (     mon09v36.asm):02630                 FCB     $AD,5,51
F5B3 BD0433           (     mon09v36.asm):02631                 FCB     $BD,4,51
F5B6 320534           (     mon09v36.asm):02632                 FCB     $32,5,52        'LEAS'
F5B9 330535           (     mon09v36.asm):02633                 FCB     $33,5,53        'LEAU'
F5BC 300536           (     mon09v36.asm):02634                 FCB     $30,5,54        'LEAX'
F5BF 310537           (     mon09v36.asm):02635                 FCB     $31,5,55        'LEAY'
F5C2 440038           (     mon09v36.asm):02636                 FCB     $44,0,56        'LSRA'
F5C5 540039           (     mon09v36.asm):02637                 FCB     $54,0,57        'LSRB'
F5C8 04033A           (     mon09v36.asm):02638                 FCB     $04,3,58        'LSR'
F5CB 64053A           (     mon09v36.asm):02639                 FCB     $64,5,58
F5CE 74043A           (     mon09v36.asm):02640                 FCB     $74,4,58
F5D1 3D003B           (     mon09v36.asm):02641                 FCB     $3D,0,59        'MUL'
F5D4 40003C           (     mon09v36.asm):02642                 FCB     $40,0,60        'NEGA'
F5D7 50003D           (     mon09v36.asm):02643                 FCB     $50,0,61        'NEGB'
F5DA 00033E           (     mon09v36.asm):02644                 FCB     $00,3,62        'NEG'
F5DD 60053E           (     mon09v36.asm):02645                 FCB     $60,5,62
F5E0 70043E           (     mon09v36.asm):02646                 FCB     $70,4,62
F5E3 12003F           (     mon09v36.asm):02647                 FCB     $12,0,63        'NOP'
F5E6 8A0140           (     mon09v36.asm):02648                 FCB     $8A,1,64        'ORA'
F5E9 9A0340           (     mon09v36.asm):02649                 FCB     $9A,3,64
F5EC AA0540           (     mon09v36.asm):02650                 FCB     $AA,5,64
F5EF BA0440           (     mon09v36.asm):02651                 FCB     $BA,4,64
F5F2 CA0141           (     mon09v36.asm):02652                 FCB     $CA,1,65        'ORB'
F5F5 DA0341           (     mon09v36.asm):02653                 FCB     $DA,3,65
F5F8 EA0541           (     mon09v36.asm):02654                 FCB     $EA,5,65
F5FB FA0441           (     mon09v36.asm):02655                 FCB     $FA,4,65
F5FE 1A0142           (     mon09v36.asm):02656                 FCB     $1A,1,66        'ORCC'
F601 840143           (     mon09v36.asm):02657                 FCB     $84,1,67        'ANDA'
F604 940343           (     mon09v36.asm):02658                 FCB     $94,3,67
F607 A40543           (     mon09v36.asm):02659                 FCB     $A4,5,67
F60A B40443           (     mon09v36.asm):02660                 FCB     $B4,4,67
F60D C40144           (     mon09v36.asm):02661                 FCB     $C4,1,68        'ANDB'
F610 D40344           (     mon09v36.asm):02662                 FCB     $D4,3,68
F613 E40544           (     mon09v36.asm):02663                 FCB     $E4,5,68
F616 F40444           (     mon09v36.asm):02664                 FCB     $F4,4,68
F619 1C0145           (     mon09v36.asm):02665                 FCB     $1C,1,69        'ANDCC'
F61C 490046           (     mon09v36.asm):02666                 FCB     $49,0,70        'ROLA'
F61F 590047           (     mon09v36.asm):02667                 FCB     $59,0,71        'ROLB'
F622 090348           (     mon09v36.asm):02668                 FCB     $09,3,72        'ROL'
F625 690548           (     mon09v36.asm):02669                 FCB     $69,5,72
F628 790448           (     mon09v36.asm):02670                 FCB     $79,4,72
F62B 460049           (     mon09v36.asm):02671                 FCB     $46,0,73        'RORA'
F62E 56004A           (     mon09v36.asm):02672                 FCB     $56,0,74        'RORB'
F631 06034B           (     mon09v36.asm):02673                 FCB     $06,3,75        'ROR'
F634 66054B           (     mon09v36.asm):02674                 FCB     $66,5,75
F637 76044B           (     mon09v36.asm):02675                 FCB     $76,4,75
F63A 3B004C           (     mon09v36.asm):02676                 FCB     $3B,0,76        'RTI'
F63D 39004D           (     mon09v36.asm):02677                 FCB     $39,0,77        'RTS'
F640 82014E           (     mon09v36.asm):02678                 FCB     $82,1,78        'SBCA'
F643 92034E           (     mon09v36.asm):02679                 FCB     $92,3,78
F646 A2054E           (     mon09v36.asm):02680                 FCB     $A2,5,78
F649 B2044E           (     mon09v36.asm):02681                 FCB     $B2,4,78
F64C C2014F           (     mon09v36.asm):02682                 FCB     $C2,1,79        'SBCB'
F64F D2034F           (     mon09v36.asm):02683                 FCB     $D2,3,79
F652 E2054F           (     mon09v36.asm):02684                 FCB     $E2,5,79
F655 F2044F           (     mon09v36.asm):02685                 FCB     $F2,4,79
F658 1D0050           (     mon09v36.asm):02686                 FCB     $1D,0,80
F65B 800151           (     mon09v36.asm):02687                 FCB     $80,1,81        'SUBA'
F65E 900351           (     mon09v36.asm):02688                 FCB     $90,3,81
F661 A00551           (     mon09v36.asm):02689                 FCB     $A0,5,81
F664 B00451           (     mon09v36.asm):02690                 FCB     $B0,4,81
F667 C00152           (     mon09v36.asm):02691                 FCB     $C0,1,82        'SUBB'
F66A D00352           (     mon09v36.asm):02692                 FCB     $D0,3,82
F66D E00552           (     mon09v36.asm):02693                 FCB     $E0,5,82
F670 F00452           (     mon09v36.asm):02694                 FCB     $F0,4,82
F673 830253           (     mon09v36.asm):02695                 FCB     $83,2,83        'SUBD'
F676 930353           (     mon09v36.asm):02696                 FCB     $93,3,83
F679 A30553           (     mon09v36.asm):02697                 FCB     $A3,5,83
F67C B30453           (     mon09v36.asm):02698                 FCB     $B3,4,83
F67F 3F0054           (     mon09v36.asm):02699                 FCB     $3F,0,84        'SWI'
F682 130055           (     mon09v36.asm):02700                 FCB     $13,0,85        'SYNC'
F685 4D0056           (     mon09v36.asm):02701                 FCB     $4D,0,86        'TSTA'
F688 5D0057           (     mon09v36.asm):02702                 FCB     $5D,0,87        'TSTB'
F68B 0D0358           (     mon09v36.asm):02703                 FCB     $0D,3,88        'TST'
F68E 6D0558           (     mon09v36.asm):02704                 FCB     $6D,5,88
F691 7D0458           (     mon09v36.asm):02705                 FCB     $7D,4,88
F694 160963           (     mon09v36.asm):02706                 FCB     $16,9,99        'LBRA'
F697 170964           (     mon09v36.asm):02707                 FCB     $17,9,100       'LBSR'
F69A 200865           (     mon09v36.asm):02708                 FCB     $20,8,101       'BRA'
F69D 210866           (     mon09v36.asm):02709                 FCB     $21,8,102       'BRN'
F6A0 220867           (     mon09v36.asm):02710                 FCB     $22,8,103       'BHI'
F6A3 230868           (     mon09v36.asm):02711                 FCB     $23,8,104       'BLS'
F6A6 240869           (     mon09v36.asm):02712                 FCB     $24,8,105       'BCC'
F6A9 25086A           (     mon09v36.asm):02713                 FCB     $25,8,106       'BCS'
F6AC 26086B           (     mon09v36.asm):02714                 FCB     $26,8,107       'BNE'
F6AF 27086C           (     mon09v36.asm):02715                 FCB     $27,8,108       'BEQ'
F6B2 28086D           (     mon09v36.asm):02716                 FCB     $28,8,109       'BVC'
F6B5 29086E           (     mon09v36.asm):02717                 FCB     $29,8,110       'BVS'
F6B8 2A086F           (     mon09v36.asm):02718                 FCB     $2A,8,111       'BPL'
F6BB 2B0870           (     mon09v36.asm):02719                 FCB     $2B,8,112       'BMI'
F6BE 2C0871           (     mon09v36.asm):02720                 FCB     $2C,8,113       'BGE'
F6C1 2D0872           (     mon09v36.asm):02721                 FCB     $2D,8,114       'BLT'
F6C4 2E0873           (     mon09v36.asm):02722                 FCB     $2E,8,115       'BGT'
F6C7 2F0874           (     mon09v36.asm):02723                 FCB     $2F,8,116       'BLE'
F6CA 8D0884           (     mon09v36.asm):02724                 FCB     $8D,8,132       'BSR'
F6CD CF0000           (     mon09v36.asm):02725                 FCB     $CF,0,0         'FCB', UNKNOWN OPCODE
                      (     mon09v36.asm):02726         
                      (     mon09v36.asm):02727         ;*
                      (     mon09v36.asm):02728         ;* OPERAND TABLE NUMBER TWO, $10 PREFIX INSTRUCTIONS
                      (     mon09v36.asm):02729         ;*
F6D0                  (     mon09v36.asm):02730         OPTAB2
F6D0 830259           (     mon09v36.asm):02731                 FCB     $83,2,89        'CMPD'
F6D3 8C025A           (     mon09v36.asm):02732                 FCB     $8C,2,90        'CMPY'
F6D6 8E025C           (     mon09v36.asm):02733                 FCB     $8E,2,92        'LDY'
F6D9 930359           (     mon09v36.asm):02734                 FCB     $93,3,89
F6DC 9C035A           (     mon09v36.asm):02735                 FCB     $9C,3,90
F6DF 9E035C           (     mon09v36.asm):02736                 FCB     $9E,3,92
F6E2 9F035E           (     mon09v36.asm):02737                 FCB     $9F,3,94        'STY'
F6E5 A30559           (     mon09v36.asm):02738                 FCB     $A3,5,89
F6E8 AC055A           (     mon09v36.asm):02739                 FCB     $AC,5,90
F6EB AE055C           (     mon09v36.asm):02740                 FCB     $AE,5,92
F6EE AF055E           (     mon09v36.asm):02741                 FCB     $AF,5,94
F6F1 B30459           (     mon09v36.asm):02742                 FCB     $B3,4,89
F6F4 BC045A           (     mon09v36.asm):02743                 FCB     $BC,4,90
F6F7 BE045C           (     mon09v36.asm):02744                 FCB     $BE,4,92
F6FA BF045E           (     mon09v36.asm):02745                 FCB     $BF,4,94
F6FD CE025B           (     mon09v36.asm):02746                 FCB     $CE,2,91        'LDS'
F700 DE035B           (     mon09v36.asm):02747                 FCB     $DE,3,91
F703 DF035D           (     mon09v36.asm):02748                 FCB     $DF,3,93        'STS'
F706 EE055B           (     mon09v36.asm):02749                 FCB     $EE,5,91
F709 EF055D           (     mon09v36.asm):02750                 FCB     $EF,5,93
F70C FE045B           (     mon09v36.asm):02751                 FCB     $FE,4,91
F70F FF045D           (     mon09v36.asm):02752                 FCB     $FF,4,93
F712 3F005F           (     mon09v36.asm):02753                 FCB     $3F,0,95        'SWI2'
F715 210975           (     mon09v36.asm):02754                 FCB     $21,9,117       'LBRN'
F718 220976           (     mon09v36.asm):02755                 FCB     $22,9,118       'LBHI'
F71B 230977           (     mon09v36.asm):02756                 FCB     $23,9,119       'LBLS'
F71E 240978           (     mon09v36.asm):02757                 FCB     $24,9,120       'LBCC'
F721 250979           (     mon09v36.asm):02758                 FCB     $25,9,121       'LBCS'
F724 26097A           (     mon09v36.asm):02759                 FCB     $26,9,122       'LBNE'
F727 27097B           (     mon09v36.asm):02760                 FCB     $27,9,123       'LBEQ'
F72A 28097C           (     mon09v36.asm):02761                 FCB     $28,9,124       'LBVC'
F72D 29097D           (     mon09v36.asm):02762                 FCB     $29,9,125       'LBVS'
F730 2A097E           (     mon09v36.asm):02763                 FCB     $2A,9,126       'LBPL'
F733 2B097F           (     mon09v36.asm):02764                 FCB     $2B,9,127       'LBMI'
F736 2C0980           (     mon09v36.asm):02765                 FCB     $2C,9,128       'LBGE'
F739 2D0981           (     mon09v36.asm):02766                 FCB     $2D,9,129       'LBLT'
F73C 2E0982           (     mon09v36.asm):02767                 FCB     $2E,9,130       'LBGT'
F73F 2F0983           (     mon09v36.asm):02768                 FCB     $2F,9,131       'LBLE'
F742 CF0100           (     mon09v36.asm):02769                 FCB     $CF,1,0
                      (     mon09v36.asm):02770         
                      (     mon09v36.asm):02771         ;*
                      (     mon09v36.asm):02772         ;* OPERAND TABLE #3, $11 PREFIXES
                      (     mon09v36.asm):02773         ;*
F745                  (     mon09v36.asm):02774         OPTAB3
F745 8C0260           (     mon09v36.asm):02775                 FCB     $8C,2,96        'CMPS'
F748 9C0360           (     mon09v36.asm):02776                 FCB     $9C,3,96
F74B AC0560           (     mon09v36.asm):02777                 FCB     $AC,5,96
F74E BC0460           (     mon09v36.asm):02778                 FCB     $BC,4,96
F751 830261           (     mon09v36.asm):02779                 FCB     $83,2,97        'CMPU'
F754 930361           (     mon09v36.asm):02780                 FCB     $93,3,97
F757 A30561           (     mon09v36.asm):02781                 FCB     $A3,5,97
F75A B30461           (     mon09v36.asm):02782                 FCB     $B3,4,97
F75D 3F0062           (     mon09v36.asm):02783                 FCB     $3F,0,98        'SWI3'
                      (     mon09v36.asm):02784         
                      (     mon09v36.asm):02785         ;*
                      (     mon09v36.asm):02786         ;* INSTRUCTION TEXT TABLE
                      (     mon09v36.asm):02787         ;*
F760                  (     mon09v36.asm):02788         ITABLE
F760 46434220         (     mon09v36.asm):02789                 FCC     'FCB '          0
F764 4C444120         (     mon09v36.asm):02790                 FCC     'LDA '          1
F768 4C444220         (     mon09v36.asm):02791                 FCC     'LDB '          2
F76C 4C444420         (     mon09v36.asm):02792                 FCC     'LDD '          3
F770 4C445520         (     mon09v36.asm):02793                 FCC     'LDU '          4
F774 4C445820         (     mon09v36.asm):02794                 FCC     'LDX '          5
F778 53544120         (     mon09v36.asm):02795                 FCC     'STA '          6
F77C 53544220         (     mon09v36.asm):02796                 FCC     'STB '          7
F780 53544420         (     mon09v36.asm):02797                 FCC     'STD '          8
F784 53545520         (     mon09v36.asm):02798                 FCC     'STU '          9
F788 53545820         (     mon09v36.asm):02799                 FCC     'STX '          10
F78C 41425820         (     mon09v36.asm):02800                 FCC     'ABX '          11
F790 41444341         (     mon09v36.asm):02801                 FCC     'ADCA'          12
F794 41444342         (     mon09v36.asm):02802                 FCC     'ADCB'          13
F798 41444441         (     mon09v36.asm):02803                 FCC     'ADDA'          14
F79C 41444442         (     mon09v36.asm):02804                 FCC     'ADDB'          15
F7A0 41444444         (     mon09v36.asm):02805                 FCC     'ADDD'          16
F7A4 41534C41         (     mon09v36.asm):02806                 FCC     'ASLA'          17
F7A8 41534C42         (     mon09v36.asm):02807                 FCC     'ASLB'          18
F7AC 41534C20         (     mon09v36.asm):02808                 FCC     'ASL '          19
F7B0 41535241         (     mon09v36.asm):02809                 FCC     'ASRA'          20
F7B4 41535242         (     mon09v36.asm):02810                 FCC     'ASRB'          21
F7B8 41535220         (     mon09v36.asm):02811                 FCC     'ASR '          22
F7BC 42495441         (     mon09v36.asm):02812                 FCC     'BITA'          23
F7C0 42495442         (     mon09v36.asm):02813                 FCC     'BITB'          24
F7C4 434C5241         (     mon09v36.asm):02814                 FCC     'CLRA'          25
F7C8 434C5242         (     mon09v36.asm):02815                 FCC     'CLRB'          26
F7CC 434C5220         (     mon09v36.asm):02816                 FCC     'CLR '          27
F7D0 434D5041         (     mon09v36.asm):02817                 FCC     'CMPA'          28
F7D4 434D5042         (     mon09v36.asm):02818                 FCC     'CMPB'          29
F7D8 434D5058         (     mon09v36.asm):02819                 FCC     'CMPX'          30
F7DC 434F4D41         (     mon09v36.asm):02820                 FCC     'COMA'          31
F7E0 434F4D42         (     mon09v36.asm):02821                 FCC     'COMB'          32
F7E4 434F4D20         (     mon09v36.asm):02822                 FCC     'COM '          33
F7E8 43574149         (     mon09v36.asm):02823                 FCC     'CWAI'          34
F7EC 44414120         (     mon09v36.asm):02824                 FCC     'DAA '          35
F7F0 44454341         (     mon09v36.asm):02825                 FCC     'DECA'          36
F7F4 44454342         (     mon09v36.asm):02826                 FCC     'DECB'          37
F7F8 44454320         (     mon09v36.asm):02827                 FCC     'DEC '          38
F7FC 454F5241         (     mon09v36.asm):02828                 FCC     'EORA'          39
F800 454F5242         (     mon09v36.asm):02829                 FCC     'EORB'          40
F804 45584720         (     mon09v36.asm):02830                 FCC     'EXG '          41
F808 54465220         (     mon09v36.asm):02831                 FCC     'TFR '          42
F80C 50534853         (     mon09v36.asm):02832                 FCC     'PSHS'          43
F810 50534855         (     mon09v36.asm):02833                 FCC     'PSHU'          44
F814 50554C53         (     mon09v36.asm):02834                 FCC     'PULS'          45
F818 50554C55         (     mon09v36.asm):02835                 FCC     'PULU'          46
F81C 494E4341         (     mon09v36.asm):02836                 FCC     'INCA'          47
F820 494E4342         (     mon09v36.asm):02837                 FCC     'INCB'          48
F824 494E4320         (     mon09v36.asm):02838                 FCC     'INC '          49
F828 4A4D5020         (     mon09v36.asm):02839                 FCC     'JMP '          50
F82C 4A535220         (     mon09v36.asm):02840                 FCC     'JSR '          51
F830 4C454153         (     mon09v36.asm):02841                 FCC     'LEAS'          52
F834 4C454155         (     mon09v36.asm):02842                 FCC     'LEAU'          53
F838 4C454158         (     mon09v36.asm):02843                 FCC     'LEAX'          54
F83C 4C454159         (     mon09v36.asm):02844                 FCC     'LEAY'          55
F840 4C535241         (     mon09v36.asm):02845                 FCC     'LSRA'          56
F844 4C535242         (     mon09v36.asm):02846                 FCC     'LSRB'          57
F848 4C535220         (     mon09v36.asm):02847                 FCC     'LSR '          58
F84C 4D554C20         (     mon09v36.asm):02848                 FCC     'MUL '          59
F850 4E454741         (     mon09v36.asm):02849                 FCC     'NEGA'          60
F854 4E454742         (     mon09v36.asm):02850                 FCC     'NEGB'          61
F858 4E454720         (     mon09v36.asm):02851                 FCC     'NEG '          62
F85C 4E4F5020         (     mon09v36.asm):02852                 FCC     'NOP '          63
F860 4F524120         (     mon09v36.asm):02853                 FCC     'ORA '          64
F864 4F524220         (     mon09v36.asm):02854                 FCC     'ORB '          65
F868 4F524343         (     mon09v36.asm):02855                 FCC     'ORCC'          66
F86C 414E4441         (     mon09v36.asm):02856                 FCC     'ANDA'          67
F870 414E4442         (     mon09v36.asm):02857                 FCC     'ANDB'          68
F874 414E4443         (     mon09v36.asm):02858                 FCC     'ANDC'          69
F878 524F4C41         (     mon09v36.asm):02859                 FCC     'ROLA'          70
F87C 524F4C42         (     mon09v36.asm):02860                 FCC     'ROLB'          71
F880 524F4C20         (     mon09v36.asm):02861                 FCC     'ROL '          72
F884 524F5241         (     mon09v36.asm):02862                 FCC     'RORA'          73
F888 524F5242         (     mon09v36.asm):02863                 FCC     'RORB'          74
F88C 524F5220         (     mon09v36.asm):02864                 FCC     'ROR '          75
F890 52544920         (     mon09v36.asm):02865                 FCC     'RTI '          76
F894 52545320         (     mon09v36.asm):02866                 FCC     'RTS '          77
F898 53424341         (     mon09v36.asm):02867                 FCC     'SBCA'          78
F89C 53424342         (     mon09v36.asm):02868                 FCC     'SBCB'          79
F8A0 53455820         (     mon09v36.asm):02869                 FCC     'SEX '          80
F8A4 53554241         (     mon09v36.asm):02870                 FCC     'SUBA'          81
F8A8 53554242         (     mon09v36.asm):02871                 FCC     'SUBB'          82
F8AC 53554244         (     mon09v36.asm):02872                 FCC     'SUBD'          83
F8B0 53574920         (     mon09v36.asm):02873                 FCC     'SWI '          84
F8B4 53594E43         (     mon09v36.asm):02874                 FCC     'SYNC'          85
F8B8 54535441         (     mon09v36.asm):02875                 FCC     'TSTA'          86
F8BC 54535442         (     mon09v36.asm):02876                 FCC     'TSTB'          87
F8C0 54535420         (     mon09v36.asm):02877                 FCC     'TST '          88
F8C4 434D5044         (     mon09v36.asm):02878                 FCC     'CMPD'          89
F8C8 434D5059         (     mon09v36.asm):02879                 FCC     'CMPY'          90
F8CC 4C445320         (     mon09v36.asm):02880                 FCC     'LDS '          91
F8D0 4C445920         (     mon09v36.asm):02881                 FCC     'LDY '          92
F8D4 53545320         (     mon09v36.asm):02882                 FCC     'STS '          93
F8D8 53545920         (     mon09v36.asm):02883                 FCC     'STY '          94
F8DC 53574932         (     mon09v36.asm):02884                 FCC     'SWI2'          95
F8E0 434D5053         (     mon09v36.asm):02885                 FCC     'CMPS'          96
F8E4 434D5055         (     mon09v36.asm):02886                 FCC     'CMPU'          97
F8E8 53574933         (     mon09v36.asm):02887                 FCC     'SWI3'          98
F8EC 4C425241         (     mon09v36.asm):02888                 FCC     'LBRA'          99
F8F0 4C425352         (     mon09v36.asm):02889                 FCC     'LBSR'          100
F8F4 42524120         (     mon09v36.asm):02890                 FCC     'BRA '          101
F8F8 42524E20         (     mon09v36.asm):02891                 FCC     'BRN '          102
F8FC 42484920         (     mon09v36.asm):02892                 FCC     'BHI '          103
F900 424C5320         (     mon09v36.asm):02893                 FCC     'BLS '          104
F904 42434320         (     mon09v36.asm):02894                 FCC     'BCC '          105
F908 42435320         (     mon09v36.asm):02895                 FCC     'BCS '          106
F90C 424E4520         (     mon09v36.asm):02896                 FCC     'BNE '          107
F910 42455120         (     mon09v36.asm):02897                 FCC     'BEQ '          108
F914 42564320         (     mon09v36.asm):02898                 FCC     'BVC '          109
F918 42565320         (     mon09v36.asm):02899                 FCC     'BVS '          110
F91C 42504C20         (     mon09v36.asm):02900                 FCC     'BPL '          111
F920 424D4920         (     mon09v36.asm):02901                 FCC     'BMI '          112
F924 42474520         (     mon09v36.asm):02902                 FCC     'BGE '          113
F928 424C5420         (     mon09v36.asm):02903                 FCC     'BLT '          114
F92C 42475420         (     mon09v36.asm):02904                 FCC     'BGT '          115
F930 424C4520         (     mon09v36.asm):02905                 FCC     'BLE '          116
F934 4C42524E         (     mon09v36.asm):02906                 FCC     'LBRN'          117
F938 4C424849         (     mon09v36.asm):02907                 FCC     'LBHI'          118
F93C 4C424C53         (     mon09v36.asm):02908                 FCC     'LBLS'          119
F940 4C424343         (     mon09v36.asm):02909                 FCC     'LBCC'          120
F944 4C424353         (     mon09v36.asm):02910                 FCC     'LBCS'          121
F948 4C424E45         (     mon09v36.asm):02911                 FCC     'LBNE'          122
F94C 4C424551         (     mon09v36.asm):02912                 FCC     'LBEQ'          123
F950 4C425643         (     mon09v36.asm):02913                 FCC     'LBVC'          124
F954 4C425653         (     mon09v36.asm):02914                 FCC     'LBVS'          125
F958 4C42504C         (     mon09v36.asm):02915                 FCC     'LBPL'          126
F95C 4C424D49         (     mon09v36.asm):02916                 FCC     'LBMI'          127
F960 4C424745         (     mon09v36.asm):02917                 FCC     'LBGE'          128
F964 4C424C54         (     mon09v36.asm):02918                 FCC     'LBLT'          129
F968 4C424754         (     mon09v36.asm):02919                 FCC     'LBGT'          130
F96C 4C424C45         (     mon09v36.asm):02920                 FCC     'LBLE'          131
F970 42535220         (     mon09v36.asm):02921                 FCC     'BSR '          132
                      (     mon09v36.asm):02922         
                      (     mon09v36.asm):02923         ;*
                      (     mon09v36.asm):02924         ;* CONDITIONAL TABLE, FIRST BYTE IS MASK, NEXT THREE BYTES ARE POSSIBLE
                      (     mon09v36.asm):02925         ;* BIT SETTINGS
                      (     mon09v36.asm):02926         ;*
F974                  (     mon09v36.asm):02927         CONTAB
F974 05000000         (     mon09v36.asm):02928                 FCB     $05,$00,$00,$00 'BHI', NO C OR Z
F978 05010405         (     mon09v36.asm):02929                 FCB     $05,$01,$04,$05 'BLS', EITHER C OR Z
F97C 01000000         (     mon09v36.asm):02930                 FCB     $01,$00,$00,$00 'BCC', NO C
F980 01010101         (     mon09v36.asm):02931                 FCB     $01,$01,$01,$01 'BCS', C SET
F984 04000000         (     mon09v36.asm):02932                 FCB     $04,$00,$00,$00 'BNE', NO Z
F988 04040404         (     mon09v36.asm):02933                 FCB     $04,$04,$04,$04 'BEQ', Z SET
F98C 02000000         (     mon09v36.asm):02934                 FCB     $02,$00,$00,$00 'BVC', V CLEAR
F990 02020202         (     mon09v36.asm):02935                 FCB     $02,$02,$02,$02 'BVS', V SET
F994 08000000         (     mon09v36.asm):02936                 FCB     $08,$00,$00,$00 'BPL', N CLEAR
F998 08080808         (     mon09v36.asm):02937                 FCB     $08,$08,$08,$08 'BMI', N SET
F99C 0A000A0A         (     mon09v36.asm):02938                 FCB     $0A,$00,$0A,$0A 'BGE', N=V
F9A0 0A080202         (     mon09v36.asm):02939                 FCB     $0A,$08,$02,$02 'BLT', N -= V
F9A4 0E0A0000         (     mon09v36.asm):02940                 FCB     $0E,$0A,$00,$00 'BGT', N=V, Z=0
F9A8 0E080204         (     mon09v36.asm):02941                 FCB     $0E,$08,$02,$04 'BLE', V-=N OR Z=1
F9AC 0C060E           (     mon09v36.asm):02942                 FCB     $0C,$06,$0E
                      (     mon09v36.asm):02943         
                      (     mon09v36.asm):02944         ;* TRANSFER AND EXCHANGE REGISTER TABLE
F9AF 7F70             (     mon09v36.asm):02945         TFREGT  FDB     SAVA
F9B1 7F73             (     mon09v36.asm):02946         INDTAB  FDB     SAVX
F9B3 7F75             (     mon09v36.asm):02947                 FDB     SAVY
F9B5 7F77             (     mon09v36.asm):02948                 FDB     SAVU
F9B7 7F7B             (     mon09v36.asm):02949                 FDB     SAVS
F9B9 7F79             (     mon09v36.asm):02950                 FDB     SAVPC
                      (     mon09v36.asm):02951         
                      (     mon09v36.asm):02952         ;* PULL TABLE FOR PULS
F9BB 7F6F             (     mon09v36.asm):02953         PULSTAB FDB     SAVCC
F9BD 7F70             (     mon09v36.asm):02954                 FDB     SAVA
F9BF 7F71             (     mon09v36.asm):02955                 FDB     SAVB
F9C1 7F72             (     mon09v36.asm):02956                 FDB     SAVDP
F9C3 7F73             (     mon09v36.asm):02957                 FDB     SAVX
F9C5 7F75             (     mon09v36.asm):02958                 FDB     SAVY
F9C7 7F77             (     mon09v36.asm):02959                 FDB     SAVU
F9C9 7F79             (     mon09v36.asm):02960                 FDB     SAVPC
                      (     mon09v36.asm):02961         
                      (     mon09v36.asm):02962         ;* PULL TABLE FOR PULU
F9CB 7F6F             (     mon09v36.asm):02963         PULUTAB FDB     SAVCC
F9CD 7F70             (     mon09v36.asm):02964                 FDB     SAVA
F9CF 7F71             (     mon09v36.asm):02965                 FDB     SAVB
F9D1 7F72             (     mon09v36.asm):02966                 FDB     SAVDP
F9D3 7F73             (     mon09v36.asm):02967                 FDB     SAVX
F9D5 7F75             (     mon09v36.asm):02968                 FDB     SAVY
F9D7 7F7B             (     mon09v36.asm):02969                 FDB     SAVS
F9D9 7F79             (     mon09v36.asm):02970                 FDB     SAVPC
                      (     mon09v36.asm):02971         
                      (     mon09v36.asm):02972         ;* VECTOR HANDLERS
F9DB 6E9F7F60         (     mon09v36.asm):02973         SWI3    JMP     [SWI3ADR]
F9DF 6E9F7F5E         (     mon09v36.asm):02974         SWI2    JMP     [SWI2ADR]
F9E3 6E9F7F62         (     mon09v36.asm):02975         IRQ             JMP     [IRQADR]
F9E7 6E9F7F64         (     mon09v36.asm):02976         FIRQ    JMP     [FIRQADR]
                      (     mon09v36.asm):02977         ;MODS BY JQ
                      (     mon09v36.asm):02978          IFNE JQ_NMIRAM         USE JQ NMI ENHANCEMENTS
F9EB 6E9F7F66         (     mon09v36.asm):02979         NMI             JMP     [NMIADR]
                      (     mon09v36.asm):02980          ENDC
                      (     mon09v36.asm):02981          IFNE JQ_ILLOP          USE JQ ILLOP ENHANCEMENTS
F9EF 6E9F7F68         (     mon09v36.asm):02982         ILOP    JMP     [ILOPADR]
                      (     mon09v36.asm):02983          ENDC
                      (     mon09v36.asm):02984         ;
                      (     mon09v36.asm):02985         ;* HELP TEXT
F9F3 00               (     mon09v36.asm):02986         HTEXT   FCB     0               NEW LINE TO START
F9F4 4220302D37203C61 (     mon09v36.asm):02987                 FCN             'B 0-7 <addr>|Set breakpoint (0000=remove)'
     6464723E7C536574
     20627265616B706F
     696E742028303030
     303D72656D6F7665
     2900
FA1E 4352203C7265673E (     mon09v36.asm):02988                 FCN             'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
FA3E 4355203C75617274 (     mon09v36.asm):02989                 FCN             'CU <uart> <addr>|Change UART address'
     3E203C616464723E
     7C4368616E676520
     5541525420616464
     7265737300
                      (     mon09v36.asm):02990         
                      (     mon09v36.asm):02991          IFNE JQ_ILLOP  JQ ILLOP ENHANCEMENTS
FA63 4356203C7665633E (     mon09v36.asm):02992                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-7)'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7220
     287665633D312D37
     2900
                      (     mon09v36.asm):02993          ELSE
                      (     mon09v36.asm):02994                 FCN             'CV <vec> <addr>|Change interrupt vector (vec=1-6)'
                      (     mon09v36.asm):02995          ENDC                   JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):02996         
FA95 44427C446973706C (     mon09v36.asm):02997                 FCN             'DB|Display breakpoints'
     617920627265616B
     706F696E747300
FAAC 4444203C61646472 (     mon09v36.asm):02998                 FCN             'DD <addr>,<addr>|Display dissasembled memory'
     3E2C3C616464723E
     7C446973706C6179
     2064697373617365
     6D626C6564206D65
     6D6F727900
FAD9 444D203C61646472 (     mon09v36.asm):02999                 FCN             'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
FB0C 44527C446973706C (     mon09v36.asm):03000                 FCN             'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
FB2B 44557C446973706C (     mon09v36.asm):03001                 FCN             'DU|Display UART addresses'
     6179205541525420
     6164647265737365
     7300
FB45 44567C446973706C (     mon09v36.asm):03002                 FCN             'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
FB62 45203C616464723E (     mon09v36.asm):03003                 FCN             'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
FB77 464D203C61646472 (     mon09v36.asm):03004                 FCN             'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
FB9B 47205B3C61646472 (     mon09v36.asm):03005                 FCN             'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
                      (     mon09v36.asm):03006         ;MODS BY JQ
                      (     mon09v36.asm):03007          IFNE JQ_JMPMOD         JQ JUMP ENHANCEMENTS
                      (     mon09v36.asm):03008         ;       FCN             'J <B><T><F>|Jump to <B>ASIC, <T>inyBASIC or <F>ORTH'
FBBB 4A203C423E3C463E (     mon09v36.asm):03009                 FCN             'J <B><F>|Jump to <B>ASIC or <F>ORTH'
     7C4A756D7020746F
     203C423E41534943
     206F72203C463E4F
     52544800
                      (     mon09v36.asm):03010          ENDC                           JQ JUMP ENHANCEMENTS
                      (     mon09v36.asm):03011         ;
FBDF 4C7C4C6F61642069 (     mon09v36.asm):03012                 FCN             'L|Load iHEX or S19 image from UART2'
     484558206F722053
     313920696D616765
     2066726F6D205541
     52543200
FC03 4D4D203C61646472 (     mon09v36.asm):03013                 FCN             'MM <addr>,<addr> <addr>|Move memory (Source,End Destination)'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F72792028536F75
     7263652C456E6420
     44657374696E6174
     696F6E2900
FC40 4D54203C61646472 (     mon09v36.asm):03014                 FCN             'MT <addr>,<addr>|Memory test'
     3E2C3C616464723E
     7C4D656D6F727920
     7465737400
FC5D 5252203C61646472 (     mon09v36.asm):03015                 FCN             'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
FC7D 5257203C61646472 (     mon09v36.asm):03016                 FCN             'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
FCA5 53205B3C61646472 (     mon09v36.asm):03017                 FCN             'S [<addr>]|Single step execution'
     3E5D7C53696E676C
     6520737465702065
     7865637574696F6E
     00
                      (     mon09v36.asm):03018         ;       FCN             'T|Terminal passthrough to UART2'
FCC6 57203C616464723E (     mon09v36.asm):03019                 FCN             'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
FCE6 5852203C61646472 (     mon09v36.asm):03020                 FCN             'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
FD06 5857203C61646472 (     mon09v36.asm):03021                 FCN             'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
FD2E 2B203C76616C7565 (     mon09v36.asm):03022                 FCN             '+ <value>+<value>|Hexadecimal addition'
     3E2B3C76616C7565
     3E7C486578616465
     63696D616C206164
     646974696F6E00
FD55 2D203C76616C7565 (     mon09v36.asm):03023                 FCN             '- <value>-<value>|Hexadecimal subtraction'
     3E2D3C76616C7565
     3E7C486578616465
     63696D616C207375
     627472616374696F
     6E00
FD7F FF               (     mon09v36.asm):03024                 FCB     -1              END OF TABLE
                      (     mon09v36.asm):03025         ;*
                      (     mon09v36.asm):03026         ;
                      (     mon09v36.asm):03027         ;===============================================================================
                      (     mon09v36.asm):03028         ;*
                      (     mon09v36.asm):03029         ;* MACHINE DEPENDANT I/O ROUTINES FOR 68(3)B50 UARTS
                      (     mon09v36.asm):03030         ;*      X REGISTER HOLDS PORT ADDRESS.
                      (     mon09v36.asm):03031         ;===============================================================================
                      (     mon09v36.asm):03032         ;* INITIALIZE UART(X)
FD80                  (     mon09v36.asm):03033         INIT
FD80 8603             (     mon09v36.asm):03034                 LDA             #CTRL1                  MASTER RESET
FD82 A784             (     mon09v36.asm):03035                 STA             ,X                              WRITE COMMAND REG
FD84 8615             (     mon09v36.asm):03036                 LDA             #CTRL2                  ENABLE 115200, 8NO1
FD86 A784             (     mon09v36.asm):03037                 STA             ,X                              WRITE COMMAND REG
FD88 39               (     mon09v36.asm):03038                 RTS
                      (     mon09v36.asm):03039         ;
                      (     mon09v36.asm):03040         ;===============================================================================
                      (     mon09v36.asm):03041         ;* READ UART(X)
FD89                  (     mon09v36.asm):03042         READ
FD89 A684             (     mon09v36.asm):03043                 LDA             ,X                              GET STATUS
FD8B 8501             (     mon09v36.asm):03044                 BITA    #RDRF                   RECEIVER READY?
FD8D 2705             (     mon09v36.asm):03045                 BEQ             NOCHR                   NO CHARACTER
FD8F A601             (     mon09v36.asm):03046                 LDA             1,X                             READ CHARACTER
FD91 1A04             (     mon09v36.asm):03047                 ORCC    #%00000100              SET 'Z'
FD93 39               (     mon09v36.asm):03048                 RTS
FD94                  (     mon09v36.asm):03049         NOCHR
FD94 86FF             (     mon09v36.asm):03050                 LDA     #$FF                            NO CHAR
FD96 39               (     mon09v36.asm):03051                 RTS
                      (     mon09v36.asm):03052         ;
                      (     mon09v36.asm):03053         ;===============================================================================
                      (     mon09v36.asm):03054         ;* WRITE UART(X)
FD97                  (     mon09v36.asm):03055         WRITE
FD97 E684             (     mon09v36.asm):03056                 LDB             ,X                              GET STATUS
FD99 C502             (     mon09v36.asm):03057                 BITB    #TDRE                   XMITTER READY?
FD9B 27FA             (     mon09v36.asm):03058                 BEQ             WRITE                   NO, TRY AGAIN
FD9D A701             (     mon09v36.asm):03059                 STA             1,X                             OUTPUT
FD9F 39               (     mon09v36.asm):03060                 RTS
                      (     mon09v36.asm):03061         ;
                      (     mon09v36.asm):03062         ;===============================================================================
                      (     mon09v36.asm):03063         ; LOOKUP TABLE CONTAINING MON09 RAM INTERRUPT RE-VECTORING ADDRESSES
                      (     mon09v36.asm):03064         ;===============================================================================
FDA0 6E9F7F5C         (     mon09v36.asm):03065         MON09_SWIADR    JMP     [SWIADR]        ;SWI Interrupt vector
FDA4 6E9F7F5E         (     mon09v36.asm):03066         MON09_SWI2ADR   JMP     [SWI2ADR]       ;SWI2 Interrupt vector
FDA8 6E9F7F60         (     mon09v36.asm):03067         MON09_SWI3ADR   JMP     [SWI3ADR]       ;SWI3 Interrupt vector
FDAC 6E9F7F64         (     mon09v36.asm):03068         MON09_FIRQADR   JMP     [FIRQADR]       ;FIRQ Interrupt vector
FDB0 6E9F7F62         (     mon09v36.asm):03069         MON09_IRQADR    JMP     [IRQADR]        ;IRQ Interrupt vector
                      (     mon09v36.asm):03070         
                      (     mon09v36.asm):03071           IFNE JQ_NMIRAM        ;JQ NMI ENHANCEMENTS
FDB4 6E9F7F66         (     mon09v36.asm):03072         MON09_NMIADR    JMP     [NMIADR]        ;NMI Interrupt vector
                      (     mon09v36.asm):03073           ENDC                          ;               JQ NMI ENHANCEMENTS
                      (     mon09v36.asm):03074           IFNE JQ_ILLOP         ;USE JQ ILLOP ENHANCEMENTS
FDB8 6E9F7F68         (     mon09v36.asm):03075         MON09_ILOPADR   JMP     [ILOPADR]       ;ILLOP Interrupt vector
                      (     mon09v36.asm):03076           ENDC                          ;USE JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):03077         ;
                      (     mon09v36.asm):03078          IFLT LOC       ;IF NOT IN RAM
FDBC FFFFFFFFFFFFFFFF (     mon09v36.asm):03079                 FILL $FF,VECTTBL-*
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFFFFFFFFFF
     FFFFFFFF
                      (     mon09v36.asm):03080         ;*
                      (     mon09v36.asm):03081         ;* MACHINE VECTORS
                      (     mon09v36.asm):03082         ;*
                      (     mon09v36.asm):03083         ;MODS BY JQ
                      (     mon09v36.asm):03084           IFNE JQ_ILLOP         USE JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):03085                 ORG     VECTTBL
FFF0 F9EF             (     mon09v36.asm):03086                 FDB     ILOP            HD6309 ONLY
                      (     mon09v36.asm):03087           ELSE
                      (     mon09v36.asm):03088                 ORG     VECTTBL
                      (     mon09v36.asm):03089           ENDC                          USE JQ ILLOP ENHANCEMENTS
                      (     mon09v36.asm):03090         ;
FFF2 F9DB             (     mon09v36.asm):03091                 FDB     SWI3
FFF4 F9DF             (     mon09v36.asm):03092                 FDB     SWI2
FFF6 F9E7             (     mon09v36.asm):03093                 FDB     FIRQ
FFF8 F9E3             (     mon09v36.asm):03094                 FDB     IRQ
FFFA F38C             (     mon09v36.asm):03095                 FDB     SWIHND
                      (     mon09v36.asm):03096         ;MODS BY JQ
                      (     mon09v36.asm):03097           IFNE JQ_NMIRAM        USE JQ NMI ENHANCEMENTS
FFFC F9EB             (     mon09v36.asm):03098                 FDB     NMI                     USE LOCAL NMI HANDLER
                      (     mon09v36.asm):03099           ELSE
                      (     mon09v36.asm):03100                 FDB     NMIHND          USE MON09 NMI HANDLER
                      (     mon09v36.asm):03101           ENDC
                      (     mon09v36.asm):03102         ;
FFFE E448             (     mon09v36.asm):03103                 FDB     RESET
                      (     mon09v36.asm):03104          ENDC           ;IF NOT IN RAM
